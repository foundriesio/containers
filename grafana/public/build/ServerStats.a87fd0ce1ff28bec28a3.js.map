{"version":3,"file":"ServerStats.a87fd0ce1ff28bec28a3.js","mappings":"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","sources":["webpack://grafana/./public/app/features/admin/CrawlerStartButton.tsx","webpack://grafana/./public/app/features/admin/CrawlerStatus.tsx","webpack://grafana/./public/app/features/admin/ServerStats.tsx","webpack://grafana/./public/app/features/admin/state/apis.tsx","webpack://grafana/./public/app/features/plugins/admin/components/Loader.tsx","webpack://grafana/./public/app/features/plugins/admin/components/Page.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { getBackendSrv, config } from '@grafana/runtime';\nimport { Button, CodeEditor, Modal, useTheme2 } from '@grafana/ui';\n\nexport const CrawlerStartButton = () => {\n  const styles = getStyles(useTheme2());\n  const [open, setOpen] = useState(false);\n  const [body, setBody] = useState({\n    mode: 'thumbs',\n    theme: config.theme2.isLight ? 'light' : 'dark',\n  });\n  const onDismiss = () => setOpen(false);\n  const doStart = () => {\n    getBackendSrv()\n      .post('/api/admin/crawler/start', body)\n      .then((v) => {\n        console.log('GOT', v);\n        onDismiss();\n      });\n  };\n\n  return (\n    <>\n      <Modal title={'Start crawler'} isOpen={open} onDismiss={onDismiss}>\n        <div className={styles.wrap}>\n          <CodeEditor\n            height={200}\n            value={JSON.stringify(body, null, 2) ?? ''}\n            showLineNumbers={false}\n            readOnly={false}\n            language=\"json\"\n            showMiniMap={false}\n            onBlur={(text: string) => {\n              setBody(JSON.parse(text)); // force JSON?\n            }}\n          />\n        </div>\n        <Modal.ButtonRow>\n          <Button onClick={doStart}>Start</Button>\n          <Button variant=\"secondary\" onClick={onDismiss}>\n            Cancel\n          </Button>\n        </Modal.ButtonRow>\n      </Modal>\n\n      <Button onClick={() => setOpen(true)} variant=\"primary\">\n        Start\n      </Button>\n    </>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    wrap: css`\n      border: 2px solid #111;\n    `,\n  };\n};\n","import { css } from '@emotion/css';\nimport React, { useEffect, useState } from 'react';\n\nimport { GrafanaTheme2, isLiveChannelMessageEvent, isLiveChannelStatusEvent, LiveChannelScope } from '@grafana/data';\nimport { getBackendSrv, getGrafanaLiveSrv } from '@grafana/runtime';\nimport { Button, useTheme2 } from '@grafana/ui';\n\nimport { CrawlerStartButton } from './CrawlerStartButton';\n\ninterface CrawlerStatusMessage {\n  state: string;\n  started: string;\n  finished: string;\n  complete: number;\n  queue: number;\n  last: string;\n}\n\nexport const CrawlerStatus = () => {\n  const styles = getStyles(useTheme2());\n  const [status, setStatus] = useState<CrawlerStatusMessage>();\n\n  useEffect(() => {\n    const subscription = getGrafanaLiveSrv()\n      .getStream<CrawlerStatusMessage>({\n        scope: LiveChannelScope.Grafana,\n        namespace: 'broadcast',\n        path: 'crawler',\n      })\n      .subscribe({\n        next: (evt) => {\n          if (isLiveChannelMessageEvent(evt)) {\n            setStatus(evt.message);\n          } else if (isLiveChannelStatusEvent(evt)) {\n            setStatus(evt.message);\n          }\n        },\n      });\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, []);\n\n  if (!status) {\n    return (\n      <div className={styles.wrap}>\n        No status (never run)\n        <br />\n        <CrawlerStartButton />\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.wrap}>\n      <pre>{JSON.stringify(status, null, 2)}</pre>\n      {status.state !== 'running' && <CrawlerStartButton />}\n      {status.state !== 'stopped' && (\n        <Button\n          variant=\"secondary\"\n          onClick={() => {\n            getBackendSrv().post('/api/admin/crawler/stop');\n          }}\n        >\n          Stop\n        </Button>\n      )}\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    wrap: css`\n      border: 4px solid red;\n    `,\n    running: css`\n      border: 4px solid green;\n    `,\n  };\n};\n","import { css } from '@emotion/css';\nimport React, { useEffect, useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { CardContainer, LinkButton, useStyles2 } from '@grafana/ui';\nimport { AccessControlAction } from 'app/types';\n\nimport { contextSrv } from '../../core/services/context_srv';\nimport { Loader } from '../plugins/admin/components/Loader';\n\nimport { CrawlerStatus } from './CrawlerStatus';\nimport { getServerStats, ServerStat } from './state/apis';\n\nexport const ServerStats = () => {\n  const [stats, setStats] = useState<ServerStat | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const styles = useStyles2(getStyles);\n\n  const hasAccessToDataSources = contextSrv.hasAccess(AccessControlAction.DataSourcesRead, contextSrv.isGrafanaAdmin);\n  const hasAccessToAdminUsers = contextSrv.hasAccess(AccessControlAction.UsersRead, contextSrv.isGrafanaAdmin);\n\n  useEffect(() => {\n    if (contextSrv.hasAccess(AccessControlAction.ActionServerStatsRead, contextSrv.isGrafanaAdmin)) {\n      setIsLoading(true);\n      getServerStats().then((stats) => {\n        setStats(stats);\n        setIsLoading(false);\n      });\n    }\n  }, []);\n\n  if (!contextSrv.hasAccess(AccessControlAction.ActionServerStatsRead, contextSrv.isGrafanaAdmin)) {\n    return null;\n  }\n\n  return (\n    <>\n      <h2 className={styles.title}>Instance statistics</h2>\n      {isLoading ? (\n        <div className={styles.loader}>\n          <Loader text={'Loading instance stats...'} />\n        </div>\n      ) : stats ? (\n        <div className={styles.row}>\n          <StatCard\n            content={[\n              { name: 'Dashboards (starred)', value: `${stats.dashboards} (${stats.stars})` },\n              { name: 'Tags', value: stats.tags },\n              { name: 'Playlists', value: stats.playlists },\n              { name: 'Snapshots', value: stats.snapshots },\n            ]}\n            footer={\n              <LinkButton href={'/dashboards'} variant={'secondary'}>\n                Manage dashboards\n              </LinkButton>\n            }\n          />\n\n          <div className={styles.doubleRow}>\n            <StatCard\n              content={[{ name: 'Data sources', value: stats.datasources }]}\n              footer={\n                hasAccessToDataSources && (\n                  <LinkButton href={'/datasources'} variant={'secondary'}>\n                    Manage data sources\n                  </LinkButton>\n                )\n              }\n            />\n            <StatCard\n              content={[{ name: 'Alerts', value: stats.alerts }]}\n              footer={\n                <LinkButton href={'/alerting/list'} variant={'secondary'}>\n                  Alerts\n                </LinkButton>\n              }\n            />\n          </div>\n          <StatCard\n            content={[\n              { name: 'Organisations', value: stats.orgs },\n              { name: 'Users total', value: stats.users },\n              { name: 'Active users in last 30 days', value: stats.activeUsers },\n              { name: 'Active sessions', value: stats.activeSessions },\n            ]}\n            footer={\n              hasAccessToAdminUsers && (\n                <LinkButton href={'/admin/users'} variant={'secondary'}>\n                  Manage users\n                </LinkButton>\n              )\n            }\n          />\n        </div>\n      ) : (\n        <p className={styles.notFound}>No stats found.</p>\n      )}\n\n      {config.featureToggles.dashboardPreviews && config.featureToggles.dashboardPreviewsAdmin && <CrawlerStatus />}\n    </>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    title: css`\n      margin-bottom: ${theme.spacing(4)};\n    `,\n    row: css`\n      display: flex;\n      justify-content: space-between;\n      width: 100%;\n\n      & > div:not(:last-of-type) {\n        margin-right: ${theme.spacing(2)};\n      }\n\n      & > div {\n        width: 33.3%;\n      }\n    `,\n    doubleRow: css`\n      display: flex;\n      flex-direction: column;\n\n      & > div:first-of-type {\n        margin-bottom: ${theme.spacing(2)};\n      }\n    `,\n\n    loader: css`\n      height: 290px;\n    `,\n\n    notFound: css`\n      font-size: ${theme.typography.h6.fontSize};\n      text-align: center;\n      height: 290px;\n    `,\n  };\n};\n\ntype StatCardProps = {\n  content: Array<Record<string, number | string>>;\n  footer?: JSX.Element | boolean;\n};\n\nconst StatCard = ({ content, footer }: StatCardProps) => {\n  const styles = useStyles2(getCardStyles);\n  return (\n    <CardContainer className={styles.container} disableHover>\n      <div className={styles.inner}>\n        <div className={styles.content}>\n          {content.map((item) => {\n            return (\n              <div key={item.name} className={styles.row}>\n                <span>{item.name}</span>\n                <span>{item.value}</span>\n              </div>\n            );\n          })}\n        </div>\n        {footer && <div>{footer}</div>}\n      </div>\n    </CardContainer>\n  );\n};\n\nconst getCardStyles = (theme: GrafanaTheme2) => {\n  return {\n    container: css`\n      padding: ${theme.spacing(2)};\n    `,\n    inner: css`\n      display: flex;\n      flex-direction: column;\n      width: 100%;\n    `,\n    content: css`\n      flex: 1 0 auto;\n    `,\n    row: css`\n      display: flex;\n      justify-content: space-between;\n      width: 100%;\n      margin-bottom: ${theme.spacing(2)};\n      align-items: center;\n    `,\n  };\n};\n","import { getBackendSrv } from '@grafana/runtime';\n\nexport interface ServerStat {\n  activeAdmins: number;\n  activeEditors: number;\n  activeSessions: number;\n  activeUsers: number;\n  activeViewers: number;\n  admins: number;\n  alerts: number;\n  dashboards: number;\n  datasources: number;\n  editors: number;\n  orgs: number;\n  playlists: number;\n  snapshots: number;\n  stars: number;\n  tags: number;\n  users: number;\n  viewers: number;\n}\n\nexport const getServerStats = async (): Promise<ServerStat | null> => {\n  return getBackendSrv()\n    .get('api/admin/stats')\n    .catch((err) => {\n      console.error(err);\n      return null;\n    });\n};\n","import React from 'react';\n\nimport { LoadingPlaceholder } from '@grafana/ui';\n\nimport { Page } from './Page';\n\nexport interface Props {\n  text?: string;\n}\n\nexport const Loader = ({ text = 'Loading...' }: Props) => {\n  return (\n    <Page>\n      <div className=\"page-loader-wrapper\">\n        <LoadingPlaceholder text={text} />\n      </div>\n    </Page>\n  );\n};\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\n\nexport const Page: React.FC = ({ children }) => {\n  const styles = useStyles2(getStyles);\n  return (\n    <div className=\"page-container\">\n      <div className={styles}>{children}</div>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) =>\n  css`\n    margin-bottom: ${theme.spacing(3)};\n  `;\n"],"names":["CrawlerStartButton","styles","getStyles","useTheme2","open","setOpen","useState","body","setBody","mode","theme","config","onDismiss","Modal","title","isOpen","className","wrap","CodeEditor","height","value","JSON","stringify","showLineNumbers","readOnly","language","showMiniMap","onBlur","text","parse","Button","onClick","getBackendSrv","post","then","v","console","log","variant","css","CrawlerStatus","status","setStatus","useEffect","subscription","getGrafanaLiveSrv","getStream","scope","LiveChannelScope","namespace","path","subscribe","next","evt","isLiveChannelMessageEvent","isLiveChannelStatusEvent","message","unsubscribe","state","running","ServerStats","stats","setStats","isLoading","setIsLoading","useStyles2","hasAccessToDataSources","contextSrv","AccessControlAction","hasAccessToAdminUsers","async","get","catch","err","error","getServerStats","loader","Loader","row","StatCard","content","name","dashboards","stars","tags","playlists","snapshots","footer","LinkButton","href","doubleRow","datasources","alerts","orgs","users","activeUsers","activeSessions","notFound","spacing","typography","h6","fontSize","getCardStyles","CardContainer","container","disableHover","inner","map","item","LoadingPlaceholder","Page","children"],"sourceRoot":""}