{"version":3,"file":"2123.b208037f6b1954dc031d.js","mappings":"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","sources":["webpack://grafana/./public/app/plugins/datasource/prometheus/add_label_to_query.ts","webpack://grafana/./public/app/plugins/datasource/prometheus/metric_find_query.ts","webpack://grafana/./public/app/plugins/datasource/prometheus/result_transformer.ts","webpack://grafana/./public/app/plugins/datasource/prometheus/variables.ts","webpack://grafana/./public/app/plugins/datasource/prometheus/datasource.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/query_hints.ts","webpack://grafana/./public/app/plugins/datasource/prometheus/language_provider.ts","webpack://grafana/./public/app/plugins/datasource/prometheus/language_utils.ts","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/operations.ts","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/aggregations.ts","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/PromQueryModeller.ts","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/binaryScalarOperations.ts","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/components/LabelParamEditor.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/parsing.ts","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/shared/AutoSizeInput.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/shared/LabelFilterItem.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/shared/LabelFilters.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/shared/LokiAndPromQueryModellerBase.ts","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/shared/OperationExplainedBox.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/shared/OperationInfoButton.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/shared/OperationHeader.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/shared/OperationParamEditor.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/shared/OperationEditor.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/shared/OperationList.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/shared/OperationListExplained.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/shared/OperationsEditorRow.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/shared/QueryEditorModeToggle.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/shared/QueryOptionGroup.tsx","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/shared/operationUtils.ts","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/shared/parsingUtils.ts","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/shared/types.ts","webpack://grafana/./public/app/plugins/datasource/prometheus/querybuilder/types.ts","webpack://grafana/./public/app/plugins/datasource/prometheus/types.ts","webpack://grafana/./.yarn/__virtual__/react-use-virtual-00326e70ba/3/opt/drone/yarncache/react-use-npm-17.3.2-a032cbeb01-7379460f51.zip/node_modules/react-use/esm/usePrevious.js","webpack://grafana/./.yarn/__virtual__/react-use-virtual-00326e70ba/3/opt/drone/yarncache/react-use-npm-17.3.2-a032cbeb01-7379460f51.zip/node_modules/react-use/esm/useToggle.js","webpack://grafana/../../opt/drone/yarncache/lru-cache-npm-7.7.1-726274dc4d-f362c5a2cf.zip/node_modules/lru-cache/index.js","webpack://grafana/./.yarn/__virtual__/lezer-promql-virtual-eaf88aa77a/3/opt/drone/yarncache/lezer-promql-npm-0.22.0-867da6afaa-cdce054700.zip/node_modules/lezer-promql/index.es.js","webpack://grafana/../../opt/drone/yarncache/@lezer-common-npm-0.15.12-62017272b0-dae6581618.zip/node_modules/@lezer/common/dist/index.js","webpack://grafana/../../opt/drone/yarncache/@lezer-lr-npm-0.15.8-8c481c39cd-e741225d6a.zip/node_modules/@lezer/lr/dist/index.js"],"sourcesContent":["import { parser } from 'lezer-promql';\n\nimport { PromQueryModeller } from './querybuilder/PromQueryModeller';\nimport { buildVisualQueryFromString } from './querybuilder/parsing';\nimport { QueryBuilderLabelFilter } from './querybuilder/shared/types';\nimport { PromVisualQuery } from './querybuilder/types';\n\n/**\n * Adds label filter to existing query. Useful for query modification for example for ad hoc filters.\n *\n * It uses PromQL parser to find instances of metric and labels, alters them and then splices them back into the query.\n * Ideally we could use the parse -> change -> render is a simple 3 steps but right now building the visual query\n * object does not support all possible queries.\n *\n * So instead this just operates on substrings of the query with labels and operates just on those. This makes this\n * more robust and can alter even invalid queries, and preserves in general the query structure and whitespace.\n * @param query\n * @param key\n * @param value\n * @param operator\n */\nexport function addLabelToQuery(query: string, key: string, value: string | number, operator = '='): string {\n  if (!key || !value) {\n    throw new Error('Need label to add to query.');\n  }\n\n  const vectorSelectorPositions = getVectorSelectorPositions(query);\n  if (!vectorSelectorPositions.length) {\n    return query;\n  }\n\n  const filter = toLabelFilter(key, value, operator);\n  return addFilter(query, vectorSelectorPositions, filter);\n}\n\ntype VectorSelectorPosition = { from: number; to: number; query: PromVisualQuery };\n\n/**\n * Parse the string and get all VectorSelector positions in the query together with parsed representation of the vector\n * selector.\n * @param query\n */\nfunction getVectorSelectorPositions(query: string): VectorSelectorPosition[] {\n  const tree = parser.parse(query);\n  const positions: VectorSelectorPosition[] = [];\n  tree.iterate({\n    enter: (type, from, to, get): false | void => {\n      if (type.name === 'VectorSelector') {\n        const visQuery = buildVisualQueryFromString(query.substring(from, to));\n        positions.push({ query: visQuery.query, from, to });\n        return false;\n      }\n    },\n  });\n  return positions;\n}\n\nfunction toLabelFilter(key: string, value: string | number, operator: string): QueryBuilderLabelFilter {\n  // We need to make sure that we convert the value back to string because it may be a number\n  const transformedValue = value === Infinity ? '+Inf' : value.toString();\n  return { label: key, op: operator, value: transformedValue };\n}\n\nfunction addFilter(\n  query: string,\n  vectorSelectorPositions: VectorSelectorPosition[],\n  filter: QueryBuilderLabelFilter\n): string {\n  const modeller = new PromQueryModeller();\n  let newQuery = '';\n  let prev = 0;\n\n  for (let i = 0; i < vectorSelectorPositions.length; i++) {\n    // This is basically just doing splice on a string for each matched vector selector.\n\n    const match = vectorSelectorPositions[i];\n    const isLast = i === vectorSelectorPositions.length - 1;\n\n    const start = query.substring(prev, match.from);\n    const end = isLast ? query.substring(match.to) : '';\n\n    if (!labelExists(match.query.labels, filter)) {\n      // We don't want to add duplicate labels.\n      match.query.labels.push(filter);\n    }\n    const newLabels = modeller.renderQuery(match.query);\n    newQuery += start + newLabels + end;\n    prev = match.to;\n  }\n  return newQuery;\n}\n\n/**\n * Check if label exists in the list of labels but ignore the operator.\n * @param labels\n * @param filter\n */\nfunction labelExists(labels: QueryBuilderLabelFilter[], filter: QueryBuilderLabelFilter) {\n  return labels.find((label) => label.label === filter.label && label.value === filter.value);\n}\n","import { chain, map as _map, uniq } from 'lodash';\nimport { lastValueFrom } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { MetricFindValue, TimeRange } from '@grafana/data';\nimport { getTimeSrv } from 'app/features/dashboard/services/TimeSrv';\n\nimport { PrometheusDatasource } from './datasource';\nimport { PromQueryRequest } from './types';\n\nexport default class PrometheusMetricFindQuery {\n  range: TimeRange;\n\n  constructor(private datasource: PrometheusDatasource, private query: string) {\n    this.datasource = datasource;\n    this.query = query;\n    this.range = getTimeSrv().timeRange();\n  }\n\n  process(): Promise<MetricFindValue[]> {\n    const labelNamesRegex = /^label_names\\(\\)\\s*$/;\n    const labelValuesRegex = /^label_values\\((?:(.+),\\s*)?([a-zA-Z_][a-zA-Z0-9_]*)\\)\\s*$/;\n    const metricNamesRegex = /^metrics\\((.+)\\)\\s*$/;\n    const queryResultRegex = /^query_result\\((.+)\\)\\s*$/;\n    const labelNamesQuery = this.query.match(labelNamesRegex);\n    if (labelNamesQuery) {\n      return this.labelNamesQuery();\n    }\n\n    const labelValuesQuery = this.query.match(labelValuesRegex);\n    if (labelValuesQuery) {\n      if (labelValuesQuery[1]) {\n        return this.labelValuesQuery(labelValuesQuery[2], labelValuesQuery[1]);\n      } else {\n        return this.labelValuesQuery(labelValuesQuery[2]);\n      }\n    }\n\n    const metricNamesQuery = this.query.match(metricNamesRegex);\n    if (metricNamesQuery) {\n      return this.metricNameQuery(metricNamesQuery[1]);\n    }\n\n    const queryResultQuery = this.query.match(queryResultRegex);\n    if (queryResultQuery) {\n      return lastValueFrom(this.queryResultQuery(queryResultQuery[1]));\n    }\n\n    // if query contains full metric name, return metric name and label list\n    return this.metricNameAndLabelsQuery(this.query);\n  }\n\n  labelNamesQuery() {\n    const start = this.datasource.getPrometheusTime(this.range.from, false);\n    const end = this.datasource.getPrometheusTime(this.range.to, true);\n    const params = {\n      start: start.toString(),\n      end: end.toString(),\n    };\n\n    const url = `/api/v1/labels`;\n\n    return this.datasource.metadataRequest(url, params).then((result: any) => {\n      return _map(result.data.data, (value) => {\n        return { text: value };\n      });\n    });\n  }\n\n  labelValuesQuery(label: string, metric?: string) {\n    const start = this.datasource.getPrometheusTime(this.range.from, false);\n    const end = this.datasource.getPrometheusTime(this.range.to, true);\n\n    let url: string;\n\n    if (!metric) {\n      const params = {\n        start: start.toString(),\n        end: end.toString(),\n      };\n      // return label values globally\n      url = `/api/v1/label/${label}/values`;\n\n      return this.datasource.metadataRequest(url, params).then((result: any) => {\n        return _map(result.data.data, (value) => {\n          return { text: value };\n        });\n      });\n    } else {\n      const params = {\n        'match[]': metric,\n        start: start.toString(),\n        end: end.toString(),\n      };\n      url = `/api/v1/series`;\n\n      return this.datasource.metadataRequest(url, params).then((result: any) => {\n        const _labels = _map(result.data.data, (metric) => {\n          return metric[label] || '';\n        }).filter((label) => {\n          return label !== '';\n        });\n\n        return uniq(_labels).map((metric) => {\n          return {\n            text: metric,\n            expandable: true,\n          };\n        });\n      });\n    }\n  }\n\n  metricNameQuery(metricFilterPattern: string) {\n    const start = this.datasource.getPrometheusTime(this.range.from, false);\n    const end = this.datasource.getPrometheusTime(this.range.to, true);\n    const params = {\n      start: start.toString(),\n      end: end.toString(),\n    };\n    const url = `/api/v1/label/__name__/values`;\n\n    return this.datasource.metadataRequest(url, params).then((result: any) => {\n      return chain(result.data.data)\n        .filter((metricName) => {\n          const r = new RegExp(metricFilterPattern);\n          return r.test(metricName);\n        })\n        .map((matchedMetricName) => {\n          return {\n            text: matchedMetricName,\n            expandable: true,\n          };\n        })\n        .value();\n    });\n  }\n\n  queryResultQuery(query: string) {\n    const end = this.datasource.getPrometheusTime(this.range.to, true);\n    const instantQuery: PromQueryRequest = { expr: query } as PromQueryRequest;\n    return this.datasource.performInstantQuery(instantQuery, end).pipe(\n      map((result) => {\n        return _map(result.data.data.result, (metricData) => {\n          let text = metricData.metric.__name__ || '';\n          delete metricData.metric.__name__;\n          text +=\n            '{' +\n            _map(metricData.metric, (v, k) => {\n              return k + '=\"' + v + '\"';\n            }).join(',') +\n            '}';\n          text += ' ' + metricData.value[1] + ' ' + metricData.value[0] * 1000;\n\n          return {\n            text: text,\n            expandable: true,\n          };\n        });\n      })\n    );\n  }\n\n  metricNameAndLabelsQuery(query: string): Promise<MetricFindValue[]> {\n    const start = this.datasource.getPrometheusTime(this.range.from, false);\n    const end = this.datasource.getPrometheusTime(this.range.to, true);\n    const params = {\n      'match[]': query,\n      start: start.toString(),\n      end: end.toString(),\n    };\n\n    const url = `/api/v1/series`;\n    const self = this;\n\n    return this.datasource.metadataRequest(url, params).then((result: any) => {\n      return _map(result.data.data, (metric: { [key: string]: string }) => {\n        return {\n          text: self.datasource.getOriginalMetricName(metric),\n          expandable: true,\n        };\n      });\n    });\n  }\n}\n","import { descending, deviation } from 'd3';\nimport { partition, groupBy } from 'lodash';\n\nimport {\n  ArrayDataFrame,\n  ArrayVector,\n  DataFrame,\n  DataLink,\n  DataTopic,\n  Field,\n  FieldType,\n  formatLabels,\n  getDisplayProcessor,\n  Labels,\n  MutableField,\n  ScopedVars,\n  TIME_SERIES_TIME_FIELD_NAME,\n  TIME_SERIES_VALUE_FIELD_NAME,\n  DataQueryResponse,\n  DataQueryRequest,\n  PreferredVisualisationType,\n  CoreApp,\n  DataFrameType,\n} from '@grafana/data';\nimport { FetchResponse, getDataSourceSrv, getTemplateSrv } from '@grafana/runtime';\n\nimport { renderLegendFormat } from './legend';\nimport {\n  ExemplarTraceIdDestination,\n  isExemplarData,\n  isMatrixData,\n  MatrixOrVectorResult,\n  PromDataSuccessResponse,\n  PromMetric,\n  PromQuery,\n  PromQueryRequest,\n  PromValue,\n  TransformOptions,\n} from './types';\n\nconst POSITIVE_INFINITY_SAMPLE_VALUE = '+Inf';\nconst NEGATIVE_INFINITY_SAMPLE_VALUE = '-Inf';\n\ninterface TimeAndValue {\n  [TIME_SERIES_TIME_FIELD_NAME]: number;\n  [TIME_SERIES_VALUE_FIELD_NAME]: number;\n}\n\nconst isTableResult = (dataFrame: DataFrame, options: DataQueryRequest<PromQuery>): boolean => {\n  // We want to process vector and scalar results in Explore as table\n  if (\n    options.app === CoreApp.Explore &&\n    (dataFrame.meta?.custom?.resultType === 'vector' || dataFrame.meta?.custom?.resultType === 'scalar')\n  ) {\n    return true;\n  }\n\n  // We want to process all dataFrames with target.format === 'table' as table\n  const target = options.targets.find((target) => target.refId === dataFrame.refId);\n  return target?.format === 'table';\n};\n\nconst isHeatmapResult = (dataFrame: DataFrame, options: DataQueryRequest<PromQuery>): boolean => {\n  const target = options.targets.find((target) => target.refId === dataFrame.refId);\n  return target?.format === 'heatmap';\n};\n\n// V2 result trasnformer used to transform query results from queries that were run trough prometheus backend\nexport function transformV2(\n  response: DataQueryResponse,\n  request: DataQueryRequest<PromQuery>,\n  options: { exemplarTraceIdDestinations?: ExemplarTraceIdDestination[] }\n) {\n  const [tableFrames, framesWithoutTable] = partition<DataFrame>(response.data, (df) => isTableResult(df, request));\n  const processedTableFrames = transformDFToTable(tableFrames);\n\n  const [exemplarFrames, framesWithoutTableAndExemplars] = partition<DataFrame>(\n    framesWithoutTable,\n    (df) => df.meta?.custom?.resultType === 'exemplar'\n  );\n\n  // EXEMPLAR FRAMES: We enrich exemplar frames with data links and add dataTopic meta info\n  const { exemplarTraceIdDestinations: destinations } = options;\n  const processedExemplarFrames = exemplarFrames.map((dataFrame) => {\n    if (destinations?.length) {\n      for (const exemplarTraceIdDestination of destinations) {\n        const traceIDField = dataFrame.fields.find((field) => field.name === exemplarTraceIdDestination.name);\n        if (traceIDField) {\n          const links = getDataLinks(exemplarTraceIdDestination);\n          traceIDField.config.links = traceIDField.config.links?.length\n            ? [...traceIDField.config.links, ...links]\n            : links;\n        }\n      }\n    }\n\n    return { ...dataFrame, meta: { ...dataFrame.meta, dataTopic: DataTopic.Annotations } };\n  });\n\n  const [heatmapResults, framesWithoutTableHeatmapsAndExemplars] = partition<DataFrame>(\n    framesWithoutTableAndExemplars,\n    (df) => isHeatmapResult(df, request)\n  );\n\n  const processedHeatmapFrames = mergeHeatmapFrames(\n    transformToHistogramOverTime(heatmapResults.sort(sortSeriesByLabel))\n  );\n\n  // Everything else is processed as time_series result and graph preferredVisualisationType\n  const otherFrames = framesWithoutTableHeatmapsAndExemplars.map((dataFrame) => {\n    const df = {\n      ...dataFrame,\n      meta: {\n        ...dataFrame.meta,\n        preferredVisualisationType: 'graph',\n      },\n    } as DataFrame;\n    return df;\n  });\n\n  return {\n    ...response,\n    data: [...otherFrames, ...processedTableFrames, ...processedHeatmapFrames, ...processedExemplarFrames],\n  };\n}\n\nexport function transformDFToTable(dfs: DataFrame[]): DataFrame[] {\n  // If no dataFrames or if 1 dataFrames with no values, return original dataFrame\n  if (dfs.length === 0 || (dfs.length === 1 && dfs[0].length === 0)) {\n    return dfs;\n  }\n\n  // Group results by refId and process dataFrames with the same refId as 1 dataFrame\n  const dataFramesByRefId = groupBy(dfs, 'refId');\n  const refIds = Object.keys(dataFramesByRefId);\n\n  const frames = refIds.map((refId) => {\n    // Create timeField, valueField and labelFields\n    const valueText = getValueText(refIds.length, refId);\n    const valueField = getValueField({ data: [], valueName: valueText });\n    const timeField = getTimeField([]);\n    const labelFields: MutableField[] = [];\n\n    // Fill labelsFields with labels from dataFrames\n    dataFramesByRefId[refId].forEach((df) => {\n      const frameValueField = df.fields[1];\n      const promLabels = frameValueField.labels ?? {};\n\n      Object.keys(promLabels)\n        .sort()\n        .forEach((label) => {\n          // If we don't have label in labelFields, add it\n          if (!labelFields.some((l) => l.name === label)) {\n            const numberField = label === 'le';\n            labelFields.push({\n              name: label,\n              config: { filterable: true },\n              type: numberField ? FieldType.number : FieldType.string,\n              values: new ArrayVector(),\n            });\n          }\n        });\n    });\n\n    // Fill valueField, timeField and labelFields with values\n    dataFramesByRefId[refId].forEach((df) => {\n      df.fields[0].values.toArray().forEach((value) => timeField.values.add(value));\n      df.fields[1].values.toArray().forEach((value) => {\n        valueField.values.add(parseSampleValue(value));\n        const labelsForField = df.fields[1].labels ?? {};\n        labelFields.forEach((field) => field.values.add(getLabelValue(labelsForField, field.name)));\n      });\n    });\n\n    const fields = [timeField, ...labelFields, valueField];\n    return {\n      refId,\n      fields,\n      meta: { ...dfs[0].meta, preferredVisualisationType: 'table' as PreferredVisualisationType },\n      length: timeField.values.length,\n    };\n  });\n  return frames;\n}\n\nfunction getValueText(responseLength: number, refId = '') {\n  return responseLength > 1 ? `Value #${refId}` : 'Value';\n}\n\nexport function transform(\n  response: FetchResponse<PromDataSuccessResponse>,\n  transformOptions: {\n    query: PromQueryRequest;\n    exemplarTraceIdDestinations?: ExemplarTraceIdDestination[];\n    target: PromQuery;\n    responseListLength: number;\n    scopedVars?: ScopedVars;\n  }\n) {\n  // Create options object from transformOptions\n  const options: TransformOptions = {\n    format: transformOptions.target.format,\n    step: transformOptions.query.step,\n    legendFormat: transformOptions.target.legendFormat,\n    start: transformOptions.query.start,\n    end: transformOptions.query.end,\n    query: transformOptions.query.expr,\n    responseListLength: transformOptions.responseListLength,\n    scopedVars: transformOptions.scopedVars,\n    refId: transformOptions.target.refId,\n    valueWithRefId: transformOptions.target.valueWithRefId,\n    meta: {\n      // Fix for showing of Prometheus results in Explore table\n      preferredVisualisationType: transformOptions.query.instant ? 'table' : 'graph',\n    },\n  };\n  const prometheusResult = response.data.data;\n\n  if (isExemplarData(prometheusResult)) {\n    const events: TimeAndValue[] = [];\n    prometheusResult.forEach((exemplarData) => {\n      const data = exemplarData.exemplars.map((exemplar) => {\n        return {\n          [TIME_SERIES_TIME_FIELD_NAME]: exemplar.timestamp * 1000,\n          [TIME_SERIES_VALUE_FIELD_NAME]: exemplar.value,\n          ...exemplar.labels,\n          ...exemplarData.seriesLabels,\n        };\n      });\n      events.push(...data);\n    });\n\n    // Grouping exemplars by step\n    const sampledExemplars = sampleExemplars(events, options);\n\n    const dataFrame = new ArrayDataFrame(sampledExemplars);\n    dataFrame.meta = { dataTopic: DataTopic.Annotations };\n\n    // Add data links if configured\n    if (transformOptions.exemplarTraceIdDestinations?.length) {\n      for (const exemplarTraceIdDestination of transformOptions.exemplarTraceIdDestinations) {\n        const traceIDField = dataFrame.fields.find((field) => field.name === exemplarTraceIdDestination.name);\n        if (traceIDField) {\n          const links = getDataLinks(exemplarTraceIdDestination);\n          traceIDField.config.links = traceIDField.config.links?.length\n            ? [...traceIDField.config.links, ...links]\n            : links;\n        }\n      }\n    }\n    return [dataFrame];\n  }\n\n  if (!prometheusResult?.result) {\n    return [];\n  }\n\n  // Return early if result type is scalar\n  if (prometheusResult.resultType === 'scalar') {\n    return [\n      {\n        meta: options.meta,\n        refId: options.refId,\n        length: 1,\n        fields: [getTimeField([prometheusResult.result]), getValueField({ data: [prometheusResult.result] })],\n      },\n    ];\n  }\n\n  // Return early again if the format is table, this needs special transformation.\n  if (options.format === 'table') {\n    const tableData = transformMetricDataToTable(prometheusResult.result, options);\n    return [tableData];\n  }\n\n  // Process matrix and vector results to DataFrame\n  const dataFrame: DataFrame[] = [];\n  prometheusResult.result.forEach((data: MatrixOrVectorResult) => dataFrame.push(transformToDataFrame(data, options)));\n\n  // When format is heatmap use the already created data frames and transform it more\n  if (options.format === 'heatmap') {\n    return mergeHeatmapFrames(transformToHistogramOverTime(dataFrame.sort(sortSeriesByLabel)));\n  }\n\n  // Return matrix or vector result as DataFrame[]\n  return dataFrame;\n}\n\nfunction getDataLinks(options: ExemplarTraceIdDestination): DataLink[] {\n  const dataLinks: DataLink[] = [];\n\n  if (options.datasourceUid) {\n    const dataSourceSrv = getDataSourceSrv();\n    const dsSettings = dataSourceSrv.getInstanceSettings(options.datasourceUid);\n\n    dataLinks.push({\n      title: options.urlDisplayLabel || `Query with ${dsSettings?.name}`,\n      url: '',\n      internal: {\n        query: { query: '${__value.raw}', queryType: 'traceId' },\n        datasourceUid: options.datasourceUid,\n        datasourceName: dsSettings?.name ?? 'Data source not found',\n      },\n    });\n  }\n\n  if (options.url) {\n    dataLinks.push({\n      title: options.urlDisplayLabel || `Go to ${options.url}`,\n      url: options.url,\n      targetBlank: true,\n    });\n  }\n  return dataLinks;\n}\n\n/**\n * Reduce the density of the exemplars by making sure that the highest value exemplar is included\n * and then only the ones that are 2 times the standard deviation of the all the values.\n * This makes sure not to show too many dots near each other.\n */\nfunction sampleExemplars(events: TimeAndValue[], options: TransformOptions) {\n  const step = options.step || 15;\n  const bucketedExemplars: { [ts: string]: TimeAndValue[] } = {};\n  const values: number[] = [];\n  for (const exemplar of events) {\n    // Align exemplar timestamp to nearest step second\n    const alignedTs = String(Math.floor(exemplar[TIME_SERIES_TIME_FIELD_NAME] / 1000 / step) * step * 1000);\n    if (!bucketedExemplars[alignedTs]) {\n      // New bucket found\n      bucketedExemplars[alignedTs] = [];\n    }\n    bucketedExemplars[alignedTs].push(exemplar);\n    values.push(exemplar[TIME_SERIES_VALUE_FIELD_NAME]);\n  }\n\n  // Getting exemplars from each bucket\n  const standardDeviation = deviation(values);\n  const sampledBuckets = Object.keys(bucketedExemplars).sort();\n  const sampledExemplars = [];\n  for (const ts of sampledBuckets) {\n    const exemplarsInBucket = bucketedExemplars[ts];\n    if (exemplarsInBucket.length === 1) {\n      sampledExemplars.push(exemplarsInBucket[0]);\n    } else {\n      // Choose which values to sample\n      const bucketValues = exemplarsInBucket.map((ex) => ex[TIME_SERIES_VALUE_FIELD_NAME]).sort(descending);\n      const sampledBucketValues = bucketValues.reduce((acc: number[], curr) => {\n        if (acc.length === 0) {\n          // First value is max and is always added\n          acc.push(curr);\n        } else {\n          // Then take values only when at least 2 standard deviation distance to previously taken value\n          const prev = acc[acc.length - 1];\n          if (standardDeviation && prev - curr >= 2 * standardDeviation) {\n            acc.push(curr);\n          }\n        }\n        return acc;\n      }, []);\n      // Find the exemplars for the sampled values\n      sampledExemplars.push(\n        ...sampledBucketValues.map(\n          (value) => exemplarsInBucket.find((ex) => ex[TIME_SERIES_VALUE_FIELD_NAME] === value)!\n        )\n      );\n    }\n  }\n  return sampledExemplars;\n}\n\n/**\n * Transforms matrix and vector result from Prometheus result to DataFrame\n */\nfunction transformToDataFrame(data: MatrixOrVectorResult, options: TransformOptions): DataFrame {\n  const { name, labels } = createLabelInfo(data.metric, options);\n\n  const fields: Field[] = [];\n\n  if (isMatrixData(data)) {\n    const stepMs = options.step ? options.step * 1000 : NaN;\n    let baseTimestamp = options.start * 1000;\n    const dps: PromValue[] = [];\n\n    for (const value of data.values) {\n      let dpValue: number | null = parseSampleValue(value[1]);\n\n      if (isNaN(dpValue)) {\n        dpValue = null;\n      }\n\n      const timestamp = value[0] * 1000;\n      for (let t = baseTimestamp; t < timestamp; t += stepMs) {\n        dps.push([t, null]);\n      }\n      baseTimestamp = timestamp + stepMs;\n      dps.push([timestamp, dpValue]);\n    }\n\n    const endTimestamp = options.end * 1000;\n    for (let t = baseTimestamp; t <= endTimestamp; t += stepMs) {\n      dps.push([t, null]);\n    }\n    fields.push(getTimeField(dps, true));\n    fields.push(getValueField({ data: dps, parseValue: false, labels, displayNameFromDS: name }));\n  } else {\n    fields.push(getTimeField([data.value]));\n    fields.push(getValueField({ data: [data.value], labels, displayNameFromDS: name }));\n  }\n\n  return {\n    meta: options.meta,\n    refId: options.refId,\n    length: fields[0].values.length,\n    fields,\n    name,\n  };\n}\n\nfunction transformMetricDataToTable(md: MatrixOrVectorResult[], options: TransformOptions): DataFrame {\n  if (!md || md.length === 0) {\n    return {\n      meta: options.meta,\n      refId: options.refId,\n      length: 0,\n      fields: [],\n    };\n  }\n\n  const valueText = options.responseListLength > 1 || options.valueWithRefId ? `Value #${options.refId}` : 'Value';\n\n  const timeField = getTimeField([]);\n  const metricFields = Object.keys(md.reduce((acc, series) => ({ ...acc, ...series.metric }), {}))\n    .sort()\n    .map((label) => {\n      // Labels have string field type, otherwise table tries to figure out the type which can result in unexpected results\n      // Only \"le\" label has a number field type\n      const numberField = label === 'le';\n      return {\n        name: label,\n        config: { filterable: true },\n        type: numberField ? FieldType.number : FieldType.string,\n        values: new ArrayVector(),\n      };\n    });\n  const valueField = getValueField({ data: [], valueName: valueText });\n\n  md.forEach((d) => {\n    if (isMatrixData(d)) {\n      d.values.forEach((val) => {\n        timeField.values.add(val[0] * 1000);\n        metricFields.forEach((metricField) => metricField.values.add(getLabelValue(d.metric, metricField.name)));\n        valueField.values.add(parseSampleValue(val[1]));\n      });\n    } else {\n      timeField.values.add(d.value[0] * 1000);\n      metricFields.forEach((metricField) => metricField.values.add(getLabelValue(d.metric, metricField.name)));\n      valueField.values.add(parseSampleValue(d.value[1]));\n    }\n  });\n\n  return {\n    meta: options.meta,\n    refId: options.refId,\n    length: timeField.values.length,\n    fields: [timeField, ...metricFields, valueField],\n  };\n}\n\nfunction getLabelValue(metric: PromMetric, label: string): string | number {\n  if (metric.hasOwnProperty(label)) {\n    if (label === 'le') {\n      return parseSampleValue(metric[label]);\n    }\n    return metric[label];\n  }\n  return '';\n}\n\nfunction getTimeField(data: PromValue[], isMs = false): MutableField {\n  return {\n    name: TIME_SERIES_TIME_FIELD_NAME,\n    type: FieldType.time,\n    config: {},\n    values: new ArrayVector<number>(data.map((val) => (isMs ? val[0] : val[0] * 1000))),\n  };\n}\ntype ValueFieldOptions = {\n  data: PromValue[];\n  valueName?: string;\n  parseValue?: boolean;\n  labels?: Labels;\n  displayNameFromDS?: string;\n};\n\nfunction getValueField({\n  data,\n  valueName = TIME_SERIES_VALUE_FIELD_NAME,\n  parseValue = true,\n  labels,\n  displayNameFromDS,\n}: ValueFieldOptions): MutableField {\n  return {\n    name: valueName,\n    type: FieldType.number,\n    display: getDisplayProcessor(),\n    config: {\n      displayNameFromDS,\n    },\n    labels,\n    values: new ArrayVector<number | null>(data.map((val) => (parseValue ? parseSampleValue(val[1]) : val[1]))),\n  };\n}\n\nfunction createLabelInfo(labels: { [key: string]: string }, options: TransformOptions) {\n  if (options?.legendFormat) {\n    const title = renderLegendFormat(getTemplateSrv().replace(options.legendFormat, options?.scopedVars), labels);\n    return { name: title, labels };\n  }\n\n  const { __name__, ...labelsWithoutName } = labels;\n  const labelPart = formatLabels(labelsWithoutName);\n  let title = `${__name__ ?? ''}${labelPart}`;\n\n  if (!title) {\n    title = options.query;\n  }\n\n  return { name: title, labels: labelsWithoutName };\n}\n\nexport function getOriginalMetricName(labelData: { [key: string]: string }) {\n  const metricName = labelData.__name__ || '';\n  delete labelData.__name__;\n  const labelPart = Object.entries(labelData)\n    .map((label) => `${label[0]}=\"${label[1]}\"`)\n    .join(',');\n  return `${metricName}{${labelPart}}`;\n}\n\nfunction mergeHeatmapFrames(frames: DataFrame[]): DataFrame[] {\n  if (frames.length === 0) {\n    return [];\n  }\n\n  const timeField = frames[0].fields.find((field) => field.type === FieldType.time)!;\n  const countFields = frames.map((frame) => {\n    let field = frame.fields.find((field) => field.type === FieldType.number)!;\n\n    return {\n      ...field,\n      name: field.config.displayNameFromDS!,\n    };\n  });\n\n  return [\n    {\n      ...frames[0],\n      meta: {\n        ...frames[0].meta,\n        type: DataFrameType.HeatmapBuckets,\n      },\n      fields: [timeField!, ...countFields],\n    },\n  ];\n}\n\nfunction transformToHistogramOverTime(seriesList: DataFrame[]) {\n  /*      t1 = timestamp1, t2 = timestamp2 etc.\n            t1  t2  t3          t1  t2  t3\n    le10    10  10  0     =>    10  10  0\n    le20    20  10  30    =>    10  0   30\n    le30    30  10  35    =>    10  0   5\n    */\n  for (let i = seriesList.length - 1; i > 0; i--) {\n    const topSeries = seriesList[i].fields.find((s) => s.name === TIME_SERIES_VALUE_FIELD_NAME);\n    const bottomSeries = seriesList[i - 1].fields.find((s) => s.name === TIME_SERIES_VALUE_FIELD_NAME);\n    if (!topSeries || !bottomSeries) {\n      throw new Error('Prometheus heatmap transform error: data should be a time series');\n    }\n\n    for (let j = 0; j < topSeries.values.length; j++) {\n      const bottomPoint = bottomSeries.values.get(j) || [0];\n      topSeries.values.toArray()[j] -= bottomPoint;\n    }\n  }\n\n  return seriesList;\n}\n\nfunction sortSeriesByLabel(s1: DataFrame, s2: DataFrame): number {\n  let le1, le2;\n\n  try {\n    // fail if not integer. might happen with bad queries\n    le1 = parseSampleValue(s1.name ?? '');\n    le2 = parseSampleValue(s2.name ?? '');\n  } catch (err) {\n    console.error(err);\n    return 0;\n  }\n\n  if (le1 > le2) {\n    return 1;\n  }\n\n  if (le1 < le2) {\n    return -1;\n  }\n\n  return 0;\n}\n\nfunction parseSampleValue(value: string): number {\n  switch (value) {\n    case POSITIVE_INFINITY_SAMPLE_VALUE:\n      return Number.POSITIVE_INFINITY;\n    case NEGATIVE_INFINITY_SAMPLE_VALUE:\n      return Number.NEGATIVE_INFINITY;\n    default:\n      return parseFloat(value);\n  }\n}\n","import { from, Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport {\n  DataQueryRequest,\n  DataQueryResponse,\n  rangeUtil,\n  StandardVariableQuery,\n  StandardVariableSupport,\n} from '@grafana/data';\nimport { getTemplateSrv, TemplateSrv } from '@grafana/runtime';\n\nimport { getTimeSrv, TimeSrv } from '../../../features/dashboard/services/TimeSrv';\n\nimport { PrometheusDatasource } from './datasource';\nimport PrometheusMetricFindQuery from './metric_find_query';\nimport { PromQuery } from './types';\n\nexport class PrometheusVariableSupport extends StandardVariableSupport<PrometheusDatasource> {\n  constructor(\n    private readonly datasource: PrometheusDatasource,\n    private readonly templateSrv: TemplateSrv = getTemplateSrv(),\n    private readonly timeSrv: TimeSrv = getTimeSrv()\n  ) {\n    super();\n    this.query = this.query.bind(this);\n  }\n\n  query(request: DataQueryRequest<PromQuery>): Observable<DataQueryResponse> {\n    const query = request.targets[0].expr;\n    if (!query) {\n      return of({ data: [] });\n    }\n\n    const scopedVars = {\n      ...request.scopedVars,\n      __interval: { text: this.datasource.interval, value: this.datasource.interval },\n      __interval_ms: {\n        text: rangeUtil.intervalToMs(this.datasource.interval),\n        value: rangeUtil.intervalToMs(this.datasource.interval),\n      },\n      ...this.datasource.getRangeScopedVars(this.timeSrv.timeRange()),\n    };\n\n    const interpolated = this.templateSrv.replace(query, scopedVars, this.datasource.interpolateQueryExpr);\n    const metricFindQuery = new PrometheusMetricFindQuery(this.datasource, interpolated);\n    const metricFindStream = from(metricFindQuery.process());\n\n    return metricFindStream.pipe(map((results) => ({ data: results })));\n  }\n\n  toDataQuery(query: StandardVariableQuery): PromQuery {\n    return {\n      refId: 'PrometheusDatasource-VariableQuery',\n      expr: query.query,\n    };\n  }\n}\n","import { cloneDeep, defaults } from 'lodash';\nimport LRU from 'lru-cache';\nimport React from 'react';\nimport { forkJoin, lastValueFrom, merge, Observable, of, OperatorFunction, pipe, throwError } from 'rxjs';\nimport { catchError, filter, map, tap } from 'rxjs/operators';\n\nimport {\n  AnnotationEvent,\n  CoreApp,\n  DataQueryError,\n  DataQueryRequest,\n  DataQueryResponse,\n  DataSourceInstanceSettings,\n  DataSourceWithQueryExportSupport,\n  DataSourceWithQueryImportSupport,\n  dateMath,\n  DateTime,\n  AbstractQuery,\n  LoadingState,\n  rangeUtil,\n  ScopedVars,\n  TimeRange,\n  DataFrame,\n  dateTime,\n} from '@grafana/data';\nimport {\n  BackendSrvRequest,\n  FetchError,\n  FetchResponse,\n  getBackendSrv,\n  DataSourceWithBackend,\n  BackendDataSourceResponse,\n  toDataQueryResponse,\n} from '@grafana/runtime';\nimport { Badge, BadgeColor, Tooltip } from '@grafana/ui';\nimport { safeStringifyValue } from 'app/core/utils/explore';\nimport { fetchDataSourceBuildInfo } from 'app/features/alerting/unified/api/buildInfo';\nimport { getTimeSrv, TimeSrv } from 'app/features/dashboard/services/TimeSrv';\nimport { getTemplateSrv, TemplateSrv } from 'app/features/templating/template_srv';\nimport { PromApplication, PromBuildInfo } from 'app/types/unified-alerting-dto';\n\nimport { addLabelToQuery } from './add_label_to_query';\nimport PrometheusLanguageProvider from './language_provider';\nimport { expandRecordingRules } from './language_utils';\nimport { renderLegendFormat } from './legend';\nimport PrometheusMetricFindQuery from './metric_find_query';\nimport { getInitHints, getQueryHints } from './query_hints';\nimport { getOriginalMetricName, transform, transformV2 } from './result_transformer';\nimport {\n  ExemplarTraceIdDestination,\n  PromDataErrorResponse,\n  PromDataSuccessResponse,\n  PromExemplarData,\n  PromMatrixData,\n  PromOptions,\n  PromQuery,\n  PromQueryRequest,\n  PromQueryType,\n  PromScalarData,\n  PromVectorData,\n} from './types';\nimport { PrometheusVariableSupport } from './variables';\n\nexport const ANNOTATION_QUERY_STEP_DEFAULT = '60s';\nconst GET_AND_POST_METADATA_ENDPOINTS = ['api/v1/query', 'api/v1/query_range', 'api/v1/series', 'api/v1/labels'];\n\nexport class PrometheusDatasource\n  extends DataSourceWithBackend<PromQuery, PromOptions>\n  implements DataSourceWithQueryImportSupport<PromQuery>, DataSourceWithQueryExportSupport<PromQuery>\n{\n  type: string;\n  editorSrc: string;\n  ruleMappings: { [index: string]: string };\n  url: string;\n  id: number;\n  directUrl: string;\n  access: 'direct' | 'proxy';\n  basicAuth: any;\n  withCredentials: any;\n  metricsNameCache = new LRU<string, string[]>({ max: 10 });\n  interval: string;\n  queryTimeout: string | undefined;\n  httpMethod: string;\n  languageProvider: PrometheusLanguageProvider;\n  exemplarTraceIdDestinations: ExemplarTraceIdDestination[] | undefined;\n  lookupsDisabled: boolean;\n  customQueryParameters: any;\n  exemplarsAvailable: boolean;\n  subType: PromApplication;\n  rulerEnabled: boolean;\n\n  constructor(\n    instanceSettings: DataSourceInstanceSettings<PromOptions>,\n    private readonly templateSrv: TemplateSrv = getTemplateSrv(),\n    private readonly timeSrv: TimeSrv = getTimeSrv(),\n    languageProvider?: PrometheusLanguageProvider\n  ) {\n    super(instanceSettings);\n\n    this.type = 'prometheus';\n    this.subType = PromApplication.Prometheus;\n    this.rulerEnabled = false;\n    this.editorSrc = 'app/features/prometheus/partials/query.editor.html';\n    this.id = instanceSettings.id;\n    this.url = instanceSettings.url!;\n    this.access = instanceSettings.access;\n    this.basicAuth = instanceSettings.basicAuth;\n    this.withCredentials = instanceSettings.withCredentials;\n    this.interval = instanceSettings.jsonData.timeInterval || '15s';\n    this.queryTimeout = instanceSettings.jsonData.queryTimeout;\n    this.httpMethod = instanceSettings.jsonData.httpMethod || 'POST';\n    // `directUrl` is never undefined, we set it at https://github.com/grafana/grafana/blob/main/pkg/api/frontendsettings.go#L108\n    // here we \"fall back\" to this.url to make typescript happy, but it should never happen\n    this.directUrl = instanceSettings.jsonData.directUrl ?? this.url;\n    this.exemplarTraceIdDestinations = instanceSettings.jsonData.exemplarTraceIdDestinations;\n    this.ruleMappings = {};\n    this.languageProvider = languageProvider ?? new PrometheusLanguageProvider(this);\n    this.lookupsDisabled = instanceSettings.jsonData.disableMetricsLookup ?? false;\n    this.customQueryParameters = new URLSearchParams(instanceSettings.jsonData.customQueryParameters);\n    this.variables = new PrometheusVariableSupport(this, this.templateSrv, this.timeSrv);\n    this.exemplarsAvailable = true;\n  }\n\n  init = async () => {\n    this.loadRules();\n    this.exemplarsAvailable = await this.areExemplarsAvailable();\n  };\n\n  getQueryDisplayText(query: PromQuery) {\n    return query.expr;\n  }\n\n  _addTracingHeaders(httpOptions: PromQueryRequest, options: DataQueryRequest<PromQuery>) {\n    httpOptions.headers = {};\n    const proxyMode = !this.url.match(/^http/);\n    if (proxyMode) {\n      httpOptions.headers['X-Dashboard-Id'] = options.dashboardId;\n      httpOptions.headers['X-Panel-Id'] = options.panelId;\n    }\n  }\n\n  /**\n   * Any request done from this data source should go through here as it contains some common processing for the\n   * request. Any processing done here needs to be also copied on the backend as this goes through data source proxy\n   * but not through the same code as alerting.\n   */\n  _request<T = any>(\n    url: string,\n    data: Record<string, string> | null,\n    overrides: Partial<BackendSrvRequest> = {}\n  ): Observable<FetchResponse<T>> {\n    data = data || {};\n    for (const [key, value] of this.customQueryParameters) {\n      if (data[key] == null) {\n        data[key] = value;\n      }\n    }\n\n    const options: BackendSrvRequest = defaults(overrides, {\n      url: this.url + url,\n      method: this.httpMethod,\n      headers: {},\n    });\n\n    if (options.method === 'GET') {\n      if (data && Object.keys(data).length) {\n        options.url =\n          options.url +\n          (options.url.search(/\\?/) >= 0 ? '&' : '?') +\n          Object.entries(data)\n            .map(([k, v]) => `${encodeURIComponent(k)}=${encodeURIComponent(v)}`)\n            .join('&');\n      }\n    } else {\n      options.headers!['Content-Type'] = 'application/x-www-form-urlencoded';\n      options.data = data;\n    }\n\n    if (this.basicAuth || this.withCredentials) {\n      options.withCredentials = true;\n    }\n\n    if (this.basicAuth) {\n      options.headers!.Authorization = this.basicAuth;\n    }\n\n    return getBackendSrv().fetch<T>(options);\n  }\n\n  async importFromAbstractQueries(abstractQueries: AbstractQuery[]): Promise<PromQuery[]> {\n    return abstractQueries.map((abstractQuery) => this.languageProvider.importFromAbstractQuery(abstractQuery));\n  }\n\n  async exportToAbstractQueries(queries: PromQuery[]): Promise<AbstractQuery[]> {\n    return queries.map((query) => this.languageProvider.exportToAbstractQuery(query));\n  }\n\n  // Use this for tab completion features, wont publish response to other components\n  async metadataRequest<T = any>(url: string, params = {}) {\n    // If URL includes endpoint that supports POST and GET method, try to use configured method. This might fail as POST is supported only in v2.10+.\n    if (GET_AND_POST_METADATA_ENDPOINTS.some((endpoint) => url.includes(endpoint))) {\n      try {\n        return await lastValueFrom(this._request<T>(url, params, { method: this.httpMethod, hideFromInspector: true }));\n      } catch (err) {\n        // If status code of error is Method Not Allowed (405) and HTTP method is POST, retry with GET\n        if (this.httpMethod === 'POST' && err.status === 405) {\n          console.warn(`Couldn't use configured POST HTTP method for this request. Trying to use GET method instead.`);\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    return await lastValueFrom(this._request<T>(url, params, { method: 'GET', hideFromInspector: true })); // toPromise until we change getTagValues, getTagKeys to Observable\n  }\n\n  interpolateQueryExpr(value: string | string[] = [], variable: any) {\n    // if no multi or include all do not regexEscape\n    if (!variable.multi && !variable.includeAll) {\n      return prometheusRegularEscape(value);\n    }\n\n    if (typeof value === 'string') {\n      return prometheusSpecialRegexEscape(value);\n    }\n\n    const escapedValues = value.map((val) => prometheusSpecialRegexEscape(val));\n\n    if (escapedValues.length === 1) {\n      return escapedValues[0];\n    }\n\n    return '(' + escapedValues.join('|') + ')';\n  }\n\n  targetContainsTemplate(target: PromQuery) {\n    return this.templateSrv.containsTemplate(target.expr);\n  }\n\n  prepareTargets = (options: DataQueryRequest<PromQuery>, start: number, end: number) => {\n    const queries: PromQueryRequest[] = [];\n    const activeTargets: PromQuery[] = [];\n    const clonedTargets = cloneDeep(options.targets);\n\n    for (const target of clonedTargets) {\n      if (!target.expr || target.hide) {\n        continue;\n      }\n\n      target.requestId = options.panelId + target.refId;\n      const metricName = this.languageProvider.histogramMetrics.find((m) => target.expr.includes(m));\n\n      // In Explore, we run both (instant and range) queries if both are true (selected) or both are undefined (legacy Explore queries)\n      if (options.app === CoreApp.Explore && target.range === target.instant) {\n        // Create instant target\n        const instantTarget: any = cloneDeep(target);\n        instantTarget.format = 'table';\n        instantTarget.instant = true;\n        instantTarget.range = false;\n        instantTarget.valueWithRefId = true;\n        delete instantTarget.maxDataPoints;\n        instantTarget.requestId += '_instant';\n\n        // Create range target\n        const rangeTarget: any = cloneDeep(target);\n        rangeTarget.format = 'time_series';\n        rangeTarget.instant = false;\n        instantTarget.range = true;\n\n        // Create exemplar query\n        if (target.exemplar) {\n          // Only create exemplar target for different metric names\n          if (\n            !metricName ||\n            (metricName && !activeTargets.some((activeTarget) => activeTarget.expr.includes(metricName)))\n          ) {\n            const exemplarTarget = cloneDeep(target);\n            exemplarTarget.instant = false;\n            exemplarTarget.requestId += '_exemplar';\n            queries.push(this.createQuery(exemplarTarget, options, start, end));\n            activeTargets.push(exemplarTarget);\n          }\n          instantTarget.exemplar = false;\n          rangeTarget.exemplar = false;\n        }\n\n        // Add both targets to activeTargets and queries arrays\n        activeTargets.push(instantTarget, rangeTarget);\n        queries.push(\n          this.createQuery(instantTarget, options, start, end),\n          this.createQuery(rangeTarget, options, start, end)\n        );\n        // If running only instant query in Explore, format as table\n      } else if (target.instant && options.app === CoreApp.Explore) {\n        const instantTarget: any = cloneDeep(target);\n        instantTarget.format = 'table';\n        queries.push(this.createQuery(instantTarget, options, start, end));\n        activeTargets.push(instantTarget);\n      } else {\n        // It doesn't make sense to query for exemplars in dashboard if only instant is selected\n        if (target.exemplar && !target.instant) {\n          if (\n            !metricName ||\n            (metricName && !activeTargets.some((activeTarget) => activeTarget.expr.includes(metricName)))\n          ) {\n            const exemplarTarget = cloneDeep(target);\n            exemplarTarget.requestId += '_exemplar';\n            queries.push(this.createQuery(exemplarTarget, options, start, end));\n            activeTargets.push(exemplarTarget);\n          }\n          target.exemplar = false;\n        }\n        queries.push(this.createQuery(target, options, start, end));\n        activeTargets.push(target);\n      }\n    }\n\n    return {\n      queries,\n      activeTargets,\n    };\n  };\n\n  shouldRunExemplarQuery(target: PromQuery, request: DataQueryRequest<PromQuery>): boolean {\n    if (target.exemplar) {\n      // We check all already processed targets and only create exemplar target for not used metric names\n      const metricName = this.languageProvider.histogramMetrics.find((m) => target.expr.includes(m));\n      // Remove targets that weren't processed yet (in targets array they are after current target)\n      const currentTargetIdx = request.targets.findIndex((t) => t.refId === target.refId);\n      const targets = request.targets.slice(0, currentTargetIdx);\n\n      if (!metricName || (metricName && !targets.some((t) => t.expr.includes(metricName)))) {\n        return true;\n      }\n      return false;\n    }\n    return false;\n  }\n\n  processTargetV2(target: PromQuery, request: DataQueryRequest<PromQuery>) {\n    const processedTarget = {\n      ...target,\n      queryType: PromQueryType.timeSeriesQuery,\n      exemplar: this.shouldRunExemplarQuery(target, request),\n      requestId: request.panelId + target.refId,\n      // We need to pass utcOffsetSec to backend to calculate aligned range\n      utcOffsetSec: this.timeSrv.timeRange().to.utcOffset() * 60,\n    };\n    return processedTarget;\n  }\n\n  query(request: DataQueryRequest<PromQuery>): Observable<DataQueryResponse> {\n    if (this.access === 'proxy') {\n      const targets = request.targets.map((target) => this.processTargetV2(target, request));\n      return super\n        .query({ ...request, targets })\n        .pipe(\n          map((response) =>\n            transformV2(response, request, { exemplarTraceIdDestinations: this.exemplarTraceIdDestinations })\n          )\n        );\n      // Run queries trough browser/proxy\n    } else {\n      const start = this.getPrometheusTime(request.range.from, false);\n      const end = this.getPrometheusTime(request.range.to, true);\n      const { queries, activeTargets } = this.prepareTargets(request, start, end);\n\n      // No valid targets, return the empty result to save a round trip.\n      if (!queries || !queries.length) {\n        return of({\n          data: [],\n          state: LoadingState.Done,\n        });\n      }\n\n      if (request.app === CoreApp.Explore) {\n        return this.exploreQuery(queries, activeTargets, end);\n      }\n\n      return this.panelsQuery(queries, activeTargets, end, request.requestId, request.scopedVars);\n    }\n  }\n\n  private exploreQuery(queries: PromQueryRequest[], activeTargets: PromQuery[], end: number) {\n    let runningQueriesCount = queries.length;\n\n    const subQueries = queries.map((query, index) => {\n      const target = activeTargets[index];\n\n      const filterAndMapResponse = pipe(\n        // Decrease the counter here. We assume that each request returns only single value and then completes\n        // (should hold until there is some streaming requests involved).\n        tap(() => runningQueriesCount--),\n        filter((response: any) => (response.cancelled ? false : true)),\n        map((response: any) => {\n          const data = transform(response, {\n            query,\n            target,\n            responseListLength: queries.length,\n            exemplarTraceIdDestinations: this.exemplarTraceIdDestinations,\n          });\n          return {\n            data,\n            key: query.requestId,\n            state: runningQueriesCount === 0 ? LoadingState.Done : LoadingState.Loading,\n          } as DataQueryResponse;\n        })\n      );\n\n      return this.runQuery(query, end, filterAndMapResponse);\n    });\n\n    return merge(...subQueries);\n  }\n\n  private panelsQuery(\n    queries: PromQueryRequest[],\n    activeTargets: PromQuery[],\n    end: number,\n    requestId: string,\n    scopedVars: ScopedVars\n  ) {\n    const observables = queries.map((query, index) => {\n      const target = activeTargets[index];\n\n      const filterAndMapResponse = pipe(\n        filter((response: any) => (response.cancelled ? false : true)),\n        map((response: any) => {\n          const data = transform(response, {\n            query,\n            target,\n            responseListLength: queries.length,\n            scopedVars,\n            exemplarTraceIdDestinations: this.exemplarTraceIdDestinations,\n          });\n          return data;\n        })\n      );\n\n      return this.runQuery(query, end, filterAndMapResponse);\n    });\n\n    return forkJoin(observables).pipe(\n      map((results) => {\n        const data = results.reduce((result, current) => {\n          return [...result, ...current];\n        }, []);\n        return {\n          data,\n          key: requestId,\n          state: LoadingState.Done,\n        };\n      })\n    );\n  }\n\n  private runQuery<T>(query: PromQueryRequest, end: number, filter: OperatorFunction<any, T>): Observable<T> {\n    if (query.instant) {\n      return this.performInstantQuery(query, end).pipe(filter);\n    }\n\n    if (query.exemplar) {\n      return this.getExemplars(query).pipe(\n        catchError(() => {\n          return of({\n            data: [],\n            state: LoadingState.Done,\n          });\n        }),\n        filter\n      );\n    }\n\n    return this.performTimeSeriesQuery(query, query.start, query.end).pipe(filter);\n  }\n\n  createQuery(target: PromQuery, options: DataQueryRequest<PromQuery>, start: number, end: number) {\n    const query: PromQueryRequest = {\n      hinting: target.hinting,\n      instant: target.instant,\n      exemplar: target.exemplar,\n      step: 0,\n      expr: '',\n      requestId: target.requestId,\n      refId: target.refId,\n      start: 0,\n      end: 0,\n    };\n    const range = Math.ceil(end - start);\n\n    // options.interval is the dynamically calculated interval\n    let interval: number = rangeUtil.intervalToSeconds(options.interval);\n    // Minimum interval (\"Min step\"), if specified for the query, or same as interval otherwise.\n    const minInterval = rangeUtil.intervalToSeconds(\n      this.templateSrv.replace(target.interval || options.interval, options.scopedVars)\n    );\n    // Scrape interval as specified for the query (\"Min step\") or otherwise taken from the datasource.\n    // Min step field can have template variables in it, make sure to replace it.\n    const scrapeInterval = target.interval\n      ? rangeUtil.intervalToSeconds(this.templateSrv.replace(target.interval, options.scopedVars))\n      : rangeUtil.intervalToSeconds(this.interval);\n\n    const intervalFactor = target.intervalFactor || 1;\n    // Adjust the interval to take into account any specified minimum and interval factor plus Prometheus limits\n    const adjustedInterval = this.adjustInterval(interval, minInterval, range, intervalFactor);\n    let scopedVars = {\n      ...options.scopedVars,\n      ...this.getRangeScopedVars(options.range),\n      ...this.getRateIntervalScopedVariable(adjustedInterval, scrapeInterval),\n    };\n    // If the interval was adjusted, make a shallow copy of scopedVars with updated interval vars\n    if (interval !== adjustedInterval) {\n      interval = adjustedInterval;\n      scopedVars = Object.assign({}, options.scopedVars, {\n        __interval: { text: interval + 's', value: interval + 's' },\n        __interval_ms: { text: interval * 1000, value: interval * 1000 },\n        ...this.getRateIntervalScopedVariable(interval, scrapeInterval),\n        ...this.getRangeScopedVars(options.range),\n      });\n    }\n    query.step = interval;\n\n    let expr = target.expr;\n\n    // Apply adhoc filters\n    expr = this.enhanceExprWithAdHocFilters(expr);\n\n    // Only replace vars in expression after having (possibly) updated interval vars\n    query.expr = this.templateSrv.replace(expr, scopedVars, this.interpolateQueryExpr);\n\n    // Align query interval with step to allow query caching and to ensure\n    // that about-same-time query results look the same.\n    const adjusted = alignRange(start, end, query.step, this.timeSrv.timeRange().to.utcOffset() * 60);\n    query.start = adjusted.start;\n    query.end = adjusted.end;\n    this._addTracingHeaders(query, options);\n\n    return query;\n  }\n\n  getRateIntervalScopedVariable(interval: number, scrapeInterval: number) {\n    // Fall back to the default scrape interval of 15s if scrapeInterval is 0 for some reason.\n    if (scrapeInterval === 0) {\n      scrapeInterval = 15;\n    }\n    const rateInterval = Math.max(interval + scrapeInterval, 4 * scrapeInterval);\n    return { __rate_interval: { text: rateInterval + 's', value: rateInterval + 's' } };\n  }\n\n  adjustInterval(interval: number, minInterval: number, range: number, intervalFactor: number) {\n    // Prometheus will drop queries that might return more than 11000 data points.\n    // Calculate a safe interval as an additional minimum to take into account.\n    // Fractional safeIntervals are allowed, however serve little purpose if the interval is greater than 1\n    // If this is the case take the ceil of the value.\n    let safeInterval = range / 11000;\n    if (safeInterval > 1) {\n      safeInterval = Math.ceil(safeInterval);\n    }\n    return Math.max(interval * intervalFactor, minInterval, safeInterval);\n  }\n\n  performTimeSeriesQuery(query: PromQueryRequest, start: number, end: number) {\n    if (start > end) {\n      throw { message: 'Invalid time range' };\n    }\n\n    const url = '/api/v1/query_range';\n    const data: any = {\n      query: query.expr,\n      start,\n      end,\n      step: query.step,\n    };\n\n    if (this.queryTimeout) {\n      data['timeout'] = this.queryTimeout;\n    }\n\n    return this._request<PromDataSuccessResponse<PromMatrixData>>(url, data, {\n      requestId: query.requestId,\n      headers: query.headers,\n    }).pipe(\n      catchError((err: FetchError<PromDataErrorResponse<PromMatrixData>>) => {\n        if (err.cancelled) {\n          return of(err);\n        }\n\n        return throwError(this.handleErrors(err, query));\n      })\n    );\n  }\n\n  performInstantQuery(\n    query: PromQueryRequest,\n    time: number\n  ): Observable<FetchResponse<PromDataSuccessResponse<PromVectorData | PromScalarData>> | FetchError> {\n    const url = '/api/v1/query';\n    const data: any = {\n      query: query.expr,\n      time,\n    };\n\n    if (this.queryTimeout) {\n      data['timeout'] = this.queryTimeout;\n    }\n\n    return this._request<PromDataSuccessResponse<PromVectorData | PromScalarData>>(url, data, {\n      requestId: query.requestId,\n      headers: query.headers,\n    }).pipe(\n      catchError((err: FetchError<PromDataErrorResponse<PromVectorData | PromScalarData>>) => {\n        if (err.cancelled) {\n          return of(err);\n        }\n\n        return throwError(this.handleErrors(err, query));\n      })\n    );\n  }\n\n  handleErrors = (err: any, target: PromQuery) => {\n    const error: DataQueryError = {\n      message: (err && err.statusText) || 'Unknown error during query transaction. Please check JS console logs.',\n      refId: target.refId,\n    };\n\n    if (err.data) {\n      if (typeof err.data === 'string') {\n        error.message = err.data;\n      } else if (err.data.error) {\n        error.message = safeStringifyValue(err.data.error);\n      }\n    } else if (err.message) {\n      error.message = err.message;\n    } else if (typeof err === 'string') {\n      error.message = err;\n    }\n\n    error.status = err.status;\n    error.statusText = err.statusText;\n\n    return error;\n  };\n\n  metricFindQuery(query: string) {\n    if (!query) {\n      return Promise.resolve([]);\n    }\n\n    const scopedVars = {\n      __interval: { text: this.interval, value: this.interval },\n      __interval_ms: { text: rangeUtil.intervalToMs(this.interval), value: rangeUtil.intervalToMs(this.interval) },\n      ...this.getRangeScopedVars(this.timeSrv.timeRange()),\n    };\n    const interpolated = this.templateSrv.replace(query, scopedVars, this.interpolateQueryExpr);\n    const metricFindQuery = new PrometheusMetricFindQuery(this, interpolated);\n    return metricFindQuery.process();\n  }\n\n  getRangeScopedVars(range: TimeRange = this.timeSrv.timeRange()) {\n    const msRange = range.to.diff(range.from);\n    const sRange = Math.round(msRange / 1000);\n    return {\n      __range_ms: { text: msRange, value: msRange },\n      __range_s: { text: sRange, value: sRange },\n      __range: { text: sRange + 's', value: sRange + 's' },\n    };\n  }\n\n  async annotationQuery(options: any): Promise<AnnotationEvent[]> {\n    const annotation = options.annotation;\n    const { expr = '' } = annotation;\n\n    if (!expr) {\n      return Promise.resolve([]);\n    }\n\n    const step = options.annotation.step || ANNOTATION_QUERY_STEP_DEFAULT;\n    const queryModel = {\n      expr,\n      range: true,\n      instant: false,\n      exemplar: false,\n      interval: step,\n      queryType: PromQueryType.timeSeriesQuery,\n      refId: 'X',\n      datasource: this.getRef(),\n    };\n\n    return await lastValueFrom(\n      getBackendSrv()\n        .fetch<BackendDataSourceResponse>({\n          url: '/api/ds/query',\n          method: 'POST',\n          data: {\n            from: (this.getPrometheusTime(options.range.from, false) * 1000).toString(),\n            to: (this.getPrometheusTime(options.range.to, true) * 1000).toString(),\n            queries: [this.applyTemplateVariables(queryModel, {})],\n          },\n          requestId: `prom-query-${annotation.name}`,\n        })\n        .pipe(\n          map((rsp: FetchResponse<BackendDataSourceResponse>) => {\n            return this.processAnnotationResponse(options, rsp.data);\n          })\n        )\n    );\n  }\n\n  processAnnotationResponse = (options: any, data: BackendDataSourceResponse) => {\n    const frames: DataFrame[] = toDataQueryResponse({ data: data }).data;\n    if (!frames || !frames.length) {\n      return [];\n    }\n\n    const annotation = options.annotation;\n    const { tagKeys = '', titleFormat = '', textFormat = '' } = annotation;\n\n    const step = rangeUtil.intervalToSeconds(annotation.step || ANNOTATION_QUERY_STEP_DEFAULT) * 1000;\n    const tagKeysArray = tagKeys.split(',');\n\n    const eventList: AnnotationEvent[] = [];\n\n    for (const frame of frames) {\n      const timeField = frame.fields[0];\n      const valueField = frame.fields[1];\n      const labels = valueField?.labels || {};\n\n      const tags = Object.keys(labels)\n        .filter((label) => tagKeysArray.includes(label))\n        .map((label) => labels[label]);\n\n      const timeValueTuple: Array<[number, number]> = [];\n\n      let idx = 0;\n      valueField.values.toArray().forEach((value: string) => {\n        let timeStampValue: number;\n        let valueValue: number;\n        const time = timeField.values.get(idx);\n\n        // If we want to use value as a time, we use value as timeStampValue and valueValue will be 1\n        if (options.annotation.useValueForTime) {\n          timeStampValue = Math.floor(parseFloat(value));\n          valueValue = 1;\n        } else {\n          timeStampValue = Math.floor(parseFloat(time));\n          valueValue = parseFloat(value);\n        }\n\n        idx++;\n        timeValueTuple.push([timeStampValue, valueValue]);\n      });\n\n      const activeValues = timeValueTuple.filter((value) => value[1] >= 1);\n      const activeValuesTimestamps = activeValues.map((value) => value[0]);\n\n      // Instead of creating singular annotation for each active event we group events into region if they are less\n      // or equal to `step` apart.\n      let latestEvent: AnnotationEvent | null = null;\n\n      for (const timestamp of activeValuesTimestamps) {\n        // We already have event `open` and we have new event that is inside the `step` so we just update the end.\n        if (latestEvent && (latestEvent.timeEnd ?? 0) + step >= timestamp) {\n          latestEvent.timeEnd = timestamp;\n          continue;\n        }\n\n        // Event exists but new one is outside of the `step` so we add it to eventList.\n        if (latestEvent) {\n          eventList.push(latestEvent);\n        }\n\n        // We start a new region.\n        latestEvent = {\n          time: timestamp,\n          timeEnd: timestamp,\n          annotation,\n          title: renderLegendFormat(titleFormat, labels),\n          tags,\n          text: renderLegendFormat(textFormat, labels),\n        };\n      }\n\n      if (latestEvent) {\n        // Finish up last point if we have one\n        latestEvent.timeEnd = activeValuesTimestamps[activeValuesTimestamps.length - 1];\n        eventList.push(latestEvent);\n      }\n    }\n\n    return eventList;\n  };\n\n  getExemplars(query: PromQueryRequest) {\n    const url = '/api/v1/query_exemplars';\n    return this._request<PromDataSuccessResponse<PromExemplarData>>(\n      url,\n      { query: query.expr, start: query.start.toString(), end: query.end.toString() },\n      { requestId: query.requestId, headers: query.headers }\n    );\n  }\n\n  async getSubtitle(): Promise<JSX.Element | null> {\n    const buildInfo = await this.getBuildInfo();\n    return buildInfo ? this.getBuildInfoMessage(buildInfo) : null;\n  }\n\n  async getTagKeys(options?: any) {\n    if (options?.series) {\n      // Get tags for the provided series only\n      const seriesLabels: Array<Record<string, string[]>> = await Promise.all(\n        options.series.map((series: string) => this.languageProvider.fetchSeriesLabels(series))\n      );\n      const uniqueLabels = [...new Set(...seriesLabels.map((value) => Object.keys(value)))];\n      return uniqueLabels.map((value: any) => ({ text: value }));\n    } else {\n      // Get all tags\n      const result = await this.metadataRequest('/api/v1/labels');\n      return result?.data?.data?.map((value: any) => ({ text: value })) ?? [];\n    }\n  }\n\n  async getTagValues(options: { key?: string } = {}) {\n    const result = await this.metadataRequest(`/api/v1/label/${options.key}/values`);\n    return result?.data?.data?.map((value: any) => ({ text: value })) ?? [];\n  }\n\n  async getBuildInfo() {\n    try {\n      const buildInfo = await fetchDataSourceBuildInfo(this);\n      return buildInfo;\n    } catch (error) {\n      // We don't want to break the rest of functionality if build info does not work correctly\n      return undefined;\n    }\n  }\n\n  getBuildInfoMessage(buildInfo: PromBuildInfo) {\n    const enabled = <Badge color=\"green\" icon=\"check\" text=\"Ruler API enabled\" />;\n    const disabled = <Badge color=\"orange\" icon=\"exclamation-triangle\" text=\"Ruler API not enabled\" />;\n    const unsupported = (\n      <Tooltip\n        placement=\"top\"\n        content=\"Prometheus does not allow editing rules, connect to either a Mimir or Cortex datasource to manage alerts via Grafana.\"\n      >\n        <div>\n          <Badge color=\"red\" icon=\"exclamation-triangle\" text=\"Ruler API not supported\" />\n        </div>\n      </Tooltip>\n    );\n\n    const LOGOS = {\n      [PromApplication.Cortex]: '/public/app/plugins/datasource/prometheus/img/cortex_logo.svg',\n      [PromApplication.Mimir]: '/public/app/plugins/datasource/prometheus/img/mimir_logo.svg',\n      [PromApplication.Prometheus]: '/public/app/plugins/datasource/prometheus/img/prometheus_logo.svg',\n    };\n\n    const COLORS: Record<PromApplication, BadgeColor> = {\n      [PromApplication.Cortex]: 'blue',\n      [PromApplication.Mimir]: 'orange',\n      [PromApplication.Prometheus]: 'red',\n    };\n\n    // this will inform the user about what \"subtype\" the datasource is; Mimir, Cortex or vanilla Prometheus\n    const applicationSubType = (\n      <Badge\n        text={\n          <span>\n            <img\n              style={{ width: 14, height: 14, verticalAlign: 'text-bottom' }}\n              src={LOGOS[buildInfo.application ?? PromApplication.Prometheus]}\n            />{' '}\n            {buildInfo.application}\n          </span>\n        }\n        color={COLORS[buildInfo.application ?? PromApplication.Prometheus]}\n      />\n    );\n\n    return (\n      <div\n        style={{\n          display: 'grid',\n          gridTemplateColumns: 'max-content max-content',\n          rowGap: '0.5rem',\n          columnGap: '2rem',\n          marginTop: '1rem',\n        }}\n      >\n        <div>Type</div>\n        <div>{applicationSubType}</div>\n        <>\n          <div>Ruler API</div>\n          {/* Prometheus does not have a Ruler API – so show that it is not supported */}\n          {buildInfo.application === PromApplication.Prometheus && <div>{unsupported}</div>}\n          {buildInfo.application !== PromApplication.Prometheus && (\n            <div>{buildInfo.features.rulerApiEnabled ? enabled : disabled}</div>\n          )}\n        </>\n      </div>\n    );\n  }\n\n  async testDatasource() {\n    const now = new Date().getTime();\n    const request: DataQueryRequest<PromQuery> = {\n      targets: [{ refId: 'test', expr: '1+1', instant: true }],\n      requestId: `${this.id}-health`,\n      scopedVars: {},\n      dashboardId: 0,\n      panelId: 0,\n      interval: '1m',\n      intervalMs: 60000,\n      maxDataPoints: 1,\n      range: {\n        from: dateTime(now - 1000),\n        to: dateTime(now),\n      },\n    } as DataQueryRequest<PromQuery>;\n\n    const buildInfo = await this.getBuildInfo();\n\n    return lastValueFrom(this.query(request))\n      .then((res: DataQueryResponse) => {\n        if (!res || !res.data || res.state !== LoadingState.Done) {\n          return { status: 'error', message: `Error reading Prometheus: ${res?.error?.message}` };\n        } else {\n          return {\n            status: 'success',\n            message: 'Data source is working',\n            details: buildInfo && {\n              verboseMessage: this.getBuildInfoMessage(buildInfo),\n            },\n          };\n        }\n      })\n      .catch((err: any) => {\n        console.error('Prometheus Error', err);\n        return { status: 'error', message: err.message };\n      });\n  }\n\n  interpolateVariablesInQueries(queries: PromQuery[], scopedVars: ScopedVars): PromQuery[] {\n    let expandedQueries = queries;\n    if (queries && queries.length) {\n      expandedQueries = queries.map((query) => {\n        const expandedQuery = {\n          ...query,\n          datasource: this.getRef(),\n          expr: this.templateSrv.replace(query.expr, scopedVars, this.interpolateQueryExpr),\n          interval: this.templateSrv.replace(query.interval, scopedVars),\n        };\n        return expandedQuery;\n      });\n    }\n    return expandedQueries;\n  }\n\n  getQueryHints(query: PromQuery, result: any[]) {\n    return getQueryHints(query.expr ?? '', result, this);\n  }\n\n  getInitHints() {\n    return getInitHints(this);\n  }\n\n  async loadRules() {\n    try {\n      const res = await this.metadataRequest('/api/v1/rules');\n      const groups = res.data?.data?.groups;\n\n      if (groups) {\n        this.ruleMappings = extractRuleMappingFromGroups(groups);\n      }\n    } catch (e) {\n      console.log('Rules API is experimental. Ignore next error.');\n      console.error(e);\n    }\n  }\n\n  async areExemplarsAvailable() {\n    try {\n      const res = await this.metadataRequest('/api/v1/query_exemplars', { query: 'test' });\n      if (res.data.status === 'success') {\n        return true;\n      }\n      return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  modifyQuery(query: PromQuery, action: any): PromQuery {\n    let expression = query.expr ?? '';\n    switch (action.type) {\n      case 'ADD_FILTER': {\n        expression = addLabelToQuery(expression, action.key, action.value);\n        break;\n      }\n      case 'ADD_FILTER_OUT': {\n        expression = addLabelToQuery(expression, action.key, action.value, '!=');\n        break;\n      }\n      case 'ADD_HISTOGRAM_QUANTILE': {\n        expression = `histogram_quantile(0.95, sum(rate(${expression}[$__rate_interval])) by (le))`;\n        break;\n      }\n      case 'ADD_RATE': {\n        expression = `rate(${expression}[$__rate_interval])`;\n        break;\n      }\n      case 'ADD_SUM': {\n        expression = `sum(${expression.trim()}) by ($1)`;\n        break;\n      }\n      case 'EXPAND_RULES': {\n        if (action.mapping) {\n          expression = expandRecordingRules(expression, action.mapping);\n        }\n        break;\n      }\n      default:\n        break;\n    }\n    return { ...query, expr: expression };\n  }\n\n  getPrometheusTime(date: string | DateTime, roundUp: boolean) {\n    if (typeof date === 'string') {\n      date = dateMath.parse(date, roundUp)!;\n    }\n\n    return Math.ceil(date.valueOf() / 1000);\n  }\n\n  getTimeRangeParams(): { start: string; end: string } {\n    const range = this.timeSrv.timeRange();\n    return {\n      start: this.getPrometheusTime(range.from, false).toString(),\n      end: this.getPrometheusTime(range.to, true).toString(),\n    };\n  }\n\n  getOriginalMetricName(labelData: { [key: string]: string }) {\n    return getOriginalMetricName(labelData);\n  }\n\n  enhanceExprWithAdHocFilters(expr: string) {\n    const adhocFilters = this.templateSrv.getAdhocFilters(this.name);\n\n    const finalQuery = adhocFilters.reduce((acc: string, filter: { key?: any; operator?: any; value?: any }) => {\n      const { key, operator } = filter;\n      let { value } = filter;\n      if (operator === '=~' || operator === '!~') {\n        value = prometheusRegularEscape(value);\n      }\n      return addLabelToQuery(acc, key, value, operator);\n    }, expr);\n    return finalQuery;\n  }\n\n  // Used when running queries trough backend\n  filterQuery(query: PromQuery): boolean {\n    if (query.hide || !query.expr) {\n      return false;\n    }\n    return true;\n  }\n\n  // Used when running queries trough backend\n  applyTemplateVariables(target: PromQuery, scopedVars: ScopedVars): Record<string, any> {\n    const variables = cloneDeep(scopedVars);\n\n    // We want to interpolate these variables on backend\n    delete variables.__interval;\n    delete variables.__interval_ms;\n\n    //Add ad hoc filters\n    const expr = this.enhanceExprWithAdHocFilters(target.expr);\n\n    return {\n      ...target,\n      legendFormat: this.templateSrv.replace(target.legendFormat, variables),\n      expr: this.templateSrv.replace(expr, variables, this.interpolateQueryExpr),\n      interval: this.templateSrv.replace(target.interval, variables),\n    };\n  }\n\n  getVariables(): string[] {\n    return this.templateSrv.getVariables().map((v) => `$${v.name}`);\n  }\n\n  interpolateString(string: string) {\n    return this.templateSrv.replace(string, undefined, this.interpolateQueryExpr);\n  }\n}\n\n/**\n * Align query range to step.\n * Rounds start and end down to a multiple of step.\n * @param start Timestamp marking the beginning of the range.\n * @param end Timestamp marking the end of the range.\n * @param step Interval to align start and end with.\n * @param utcOffsetSec Number of seconds current timezone is offset from UTC\n */\nexport function alignRange(\n  start: number,\n  end: number,\n  step: number,\n  utcOffsetSec: number\n): { end: number; start: number } {\n  const alignedEnd = Math.floor((end + utcOffsetSec) / step) * step - utcOffsetSec;\n  const alignedStart = Math.floor((start + utcOffsetSec) / step) * step - utcOffsetSec;\n  return {\n    end: alignedEnd,\n    start: alignedStart,\n  };\n}\n\nexport function extractRuleMappingFromGroups(groups: any[]) {\n  return groups.reduce(\n    (mapping, group) =>\n      group.rules\n        .filter((rule: any) => rule.type === 'recording')\n        .reduce(\n          (acc: { [key: string]: string }, rule: any) => ({\n            ...acc,\n            [rule.name]: rule.query,\n          }),\n          mapping\n        ),\n    {}\n  );\n}\n\n// NOTE: these two functions are very similar to the escapeLabelValueIn* functions\n// in language_utils.ts, but they are not exactly the same algorithm, and we found\n// no way to reuse one in the another or vice versa.\nexport function prometheusRegularEscape(value: any) {\n  return typeof value === 'string' ? value.replace(/\\\\/g, '\\\\\\\\').replace(/'/g, \"\\\\\\\\'\") : value;\n}\n\nexport function prometheusSpecialRegexEscape(value: any) {\n  return typeof value === 'string' ? value.replace(/\\\\/g, '\\\\\\\\\\\\\\\\').replace(/[$^*{}\\[\\]\\'+?.()|]/g, '\\\\\\\\$&') : value;\n}\n","import { size } from 'lodash';\n\nimport { QueryHint, QueryFix } from '@grafana/data';\n\nimport { PrometheusDatasource } from './datasource';\n\n/**\n * Number of time series results needed before starting to suggest sum aggregation hints\n */\nexport const SUM_HINT_THRESHOLD_COUNT = 20;\n\nexport function getQueryHints(query: string, series?: any[], datasource?: PrometheusDatasource): QueryHint[] {\n  const hints = [];\n\n  // ..._bucket metric needs a histogram_quantile()\n  const histogramMetric = query.trim().match(/^\\w+_bucket$|^\\w+_bucket{.*}$/);\n  if (histogramMetric) {\n    const label = 'Selected metric has buckets.';\n    hints.push({\n      type: 'HISTOGRAM_QUANTILE',\n      label,\n      fix: {\n        label: 'Consider calculating aggregated quantile by adding histogram_quantile().',\n        action: {\n          type: 'ADD_HISTOGRAM_QUANTILE',\n          query,\n        },\n      } as QueryFix,\n    });\n  }\n\n  // Check for need of rate()\n  if (query.indexOf('rate(') === -1 && query.indexOf('increase(') === -1) {\n    // Use metric metadata for exact types\n    const nameMatch = query.match(/\\b(\\w+_(total|sum|count))\\b/);\n    let counterNameMetric = nameMatch ? nameMatch[1] : '';\n    const metricsMetadata = datasource?.languageProvider?.metricsMetadata ?? {};\n    const metricMetadataKeys = Object.keys(metricsMetadata);\n    let certain = false;\n\n    if (metricMetadataKeys.length > 0) {\n      counterNameMetric =\n        metricMetadataKeys.find((metricName) => {\n          // Only considering first type information, could be non-deterministic\n          const metadata = metricsMetadata[metricName];\n          if (metadata.type.toLowerCase() === 'counter') {\n            const metricRegex = new RegExp(`\\\\b${metricName}\\\\b`);\n            if (query.match(metricRegex)) {\n              certain = true;\n              return true;\n            }\n          }\n          return false;\n        }) ?? '';\n    }\n\n    if (counterNameMetric) {\n      // FixableQuery consists of metric name and optionally label-value pairs. We are not offering fix for complex queries yet.\n      const fixableQuery = query.trim().match(/^\\w+$|^\\w+{.*}$/);\n      const verb = certain ? 'is' : 'looks like';\n      let label = `Selected metric ${verb} a counter.`;\n      let fix: QueryFix | undefined;\n\n      if (fixableQuery) {\n        fix = {\n          label: 'Consider calculating rate of counter by adding rate().',\n          action: {\n            type: 'ADD_RATE',\n            query,\n          },\n        };\n      } else {\n        label = `${label} Consider calculating rate of counter by adding rate().`;\n      }\n\n      hints.push({\n        type: 'APPLY_RATE',\n        label,\n        fix,\n      });\n    }\n  }\n\n  // Check for recording rules expansion\n  if (datasource && datasource.ruleMappings) {\n    const mapping = datasource.ruleMappings;\n    const mappingForQuery = Object.keys(mapping).reduce((acc, ruleName) => {\n      if (query.search(ruleName) > -1) {\n        return {\n          ...acc,\n          [ruleName]: mapping[ruleName],\n        };\n      }\n      return acc;\n    }, {});\n    if (size(mappingForQuery) > 0) {\n      const label = 'Query contains recording rules.';\n      hints.push({\n        type: 'EXPAND_RULES',\n        label,\n        fix: {\n          label: 'Expand rules',\n          action: {\n            type: 'EXPAND_RULES',\n            query,\n            mapping: mappingForQuery,\n          },\n        } as any as QueryFix,\n      });\n    }\n  }\n\n  if (series && series.length >= SUM_HINT_THRESHOLD_COUNT) {\n    const simpleMetric = query.trim().match(/^\\w+$/);\n    if (simpleMetric) {\n      hints.push({\n        type: 'ADD_SUM',\n        label: 'Many time series results returned.',\n        fix: {\n          label: 'Consider aggregating with sum().',\n          action: {\n            type: 'ADD_SUM',\n            query: query,\n            preventSubmit: true,\n          },\n        } as QueryFix,\n      });\n    }\n  }\n\n  return hints;\n}\n\nexport function getInitHints(datasource: PrometheusDatasource): QueryHint[] {\n  const hints = [];\n  // Hint if using Loki as Prometheus data source\n  if (datasource.directUrl.includes('/loki') && !datasource.languageProvider.metrics.length) {\n    hints.push({\n      label: `Using Loki as a Prometheus data source is no longer supported. You must use the Loki data source for your Loki instance.`,\n      type: 'INFO',\n    });\n  }\n\n  // Hint for big disabled lookups\n  if (datasource.lookupsDisabled) {\n    hints.push({\n      label: `Labels and metrics lookup was disabled in data source settings.`,\n      type: 'INFO',\n    });\n  }\n\n  return hints;\n}\n","import { once, chain, difference } from 'lodash';\nimport LRU from 'lru-cache';\nimport Prism from 'prismjs';\nimport { Value } from 'slate';\n\nimport {\n  AbstractLabelMatcher,\n  AbstractLabelOperator,\n  AbstractQuery,\n  dateTime,\n  HistoryItem,\n  LanguageProvider,\n} from '@grafana/data';\nimport { CompletionItem, CompletionItemGroup, SearchFunctionType, TypeaheadInput, TypeaheadOutput } from '@grafana/ui';\n\nimport { PrometheusDatasource } from './datasource';\nimport {\n  addLimitInfo,\n  extractLabelMatchers,\n  fixSummariesMetadata,\n  parseSelector,\n  processHistogramMetrics,\n  processLabels,\n  roundSecToMin,\n  toPromLikeQuery,\n} from './language_utils';\nimport PromqlSyntax, { FUNCTIONS, RATE_RANGES } from './promql';\nimport { PromMetricsMetadata, PromQuery } from './types';\n\nconst DEFAULT_KEYS = ['job', 'instance'];\nconst EMPTY_SELECTOR = '{}';\nconst HISTORY_ITEM_COUNT = 5;\nconst HISTORY_COUNT_CUTOFF = 1000 * 60 * 60 * 24; // 24h\n// Max number of items (metrics, labels, values) that we display as suggestions. Prevents from running out of memory.\nexport const SUGGESTIONS_LIMIT = 10000;\n\nconst wrapLabel = (label: string): CompletionItem => ({ label });\n\nconst setFunctionKind = (suggestion: CompletionItem): CompletionItem => {\n  suggestion.kind = 'function';\n  return suggestion;\n};\n\nexport function addHistoryMetadata(item: CompletionItem, history: any[]): CompletionItem {\n  const cutoffTs = Date.now() - HISTORY_COUNT_CUTOFF;\n  const historyForItem = history.filter((h) => h.ts > cutoffTs && h.query === item.label);\n  const count = historyForItem.length;\n  const recent = historyForItem[0];\n  let hint = `Queried ${count} times in the last 24h.`;\n\n  if (recent) {\n    const lastQueried = dateTime(recent.ts).fromNow();\n    hint = `${hint} Last queried ${lastQueried}.`;\n  }\n\n  return {\n    ...item,\n    documentation: hint,\n  };\n}\n\nfunction addMetricsMetadata(metric: string, metadata?: PromMetricsMetadata): CompletionItem {\n  const item: CompletionItem = { label: metric };\n  if (metadata && metadata[metric]) {\n    item.documentation = getMetadataString(metric, metadata);\n  }\n  return item;\n}\n\nexport function getMetadataString(metric: string, metadata: PromMetricsMetadata): string | undefined {\n  if (!metadata[metric]) {\n    return undefined;\n  }\n  const { type, help } = metadata[metric];\n  return `${type.toUpperCase()}: ${help}`;\n}\n\nconst PREFIX_DELIMITER_REGEX =\n  /(=\"|!=\"|=~\"|!~\"|\\{|\\[|\\(|\\+|-|\\/|\\*|%|\\^|\\band\\b|\\bor\\b|\\bunless\\b|==|>=|!=|<=|>|<|=|~|,)/;\n\ninterface AutocompleteContext {\n  history?: Array<HistoryItem<PromQuery>>;\n}\nexport default class PromQlLanguageProvider extends LanguageProvider {\n  histogramMetrics: string[];\n  timeRange?: { start: number; end: number };\n  metrics: string[];\n  metricsMetadata?: PromMetricsMetadata;\n  declare startTask: Promise<any>;\n  datasource: PrometheusDatasource;\n  labelKeys: string[] = [];\n  declare labelFetchTs: number;\n\n  /**\n   *  Cache for labels of series. This is bit simplistic in the sense that it just counts responses each as a 1 and does\n   *  not account for different size of a response. If that is needed a `length` function can be added in the options.\n   *  10 as a max size is totally arbitrary right now.\n   */\n  private labelsCache = new LRU<string, Record<string, string[]>>({ max: 10 });\n\n  constructor(datasource: PrometheusDatasource, initialValues?: Partial<PromQlLanguageProvider>) {\n    super();\n\n    this.datasource = datasource;\n    this.histogramMetrics = [];\n    this.timeRange = { start: 0, end: 0 };\n    this.metrics = [];\n\n    Object.assign(this, initialValues);\n  }\n\n  // Strip syntax chars so that typeahead suggestions can work on clean inputs\n  cleanText(s: string) {\n    const parts = s.split(PREFIX_DELIMITER_REGEX);\n    const last = parts.pop()!;\n    return last.trimLeft().replace(/\"$/, '').replace(/^\"/, '');\n  }\n\n  get syntax() {\n    return PromqlSyntax;\n  }\n\n  request = async (url: string, defaultValue: any, params = {}): Promise<any> => {\n    try {\n      const res = await this.datasource.metadataRequest(url, params);\n      return res.data.data;\n    } catch (error) {\n      console.error(error);\n    }\n\n    return defaultValue;\n  };\n\n  start = async (): Promise<any[]> => {\n    if (this.datasource.lookupsDisabled) {\n      return [];\n    }\n\n    // TODO #33976: make those requests parallel\n    await this.fetchLabels();\n    this.metrics = (await this.fetchLabelValues('__name__')) || [];\n    await this.loadMetricsMetadata();\n    this.histogramMetrics = processHistogramMetrics(this.metrics).sort();\n    return [];\n  };\n\n  async loadMetricsMetadata() {\n    this.metricsMetadata = fixSummariesMetadata(await this.request('/api/v1/metadata', {}));\n  }\n\n  getLabelKeys(): string[] {\n    return this.labelKeys;\n  }\n\n  provideCompletionItems = async (\n    { prefix, text, value, labelKey, wrapperClasses }: TypeaheadInput,\n    context: AutocompleteContext = {}\n  ): Promise<TypeaheadOutput> => {\n    const emptyResult: TypeaheadOutput = { suggestions: [] };\n\n    if (!value) {\n      return emptyResult;\n    }\n\n    // Local text properties\n    const empty = value.document.text.length === 0;\n    const selectedLines = value.document.getTextsAtRange(value.selection);\n    const currentLine = selectedLines.size === 1 ? selectedLines.first().getText() : null;\n\n    const nextCharacter = currentLine ? currentLine[value.selection.anchor.offset] : null;\n\n    // Syntax spans have 3 classes by default. More indicate a recognized token\n    const tokenRecognized = wrapperClasses.length > 3;\n    // Non-empty prefix, but not inside known token\n    const prefixUnrecognized = prefix && !tokenRecognized;\n\n    // Prevent suggestions in `function(|suffix)`\n    const noSuffix = !nextCharacter || nextCharacter === ')';\n\n    // Prefix is safe if it does not immediately follow a complete expression and has no text after it\n    const safePrefix = prefix && !text.match(/^[\\]})\\s]+$/) && noSuffix;\n\n    // About to type next operand if preceded by binary operator\n    const operatorsPattern = /[+\\-*/^%]/;\n    const isNextOperand = text.match(operatorsPattern);\n\n    // Determine candidates by CSS context\n    if (wrapperClasses.includes('context-range')) {\n      // Suggestions for metric[|]\n      return this.getRangeCompletionItems();\n    } else if (wrapperClasses.includes('context-labels')) {\n      // Suggestions for metric{|} and metric{foo=|}, as well as metric-independent label queries like {|}\n      return this.getLabelCompletionItems({ prefix, text, value, labelKey, wrapperClasses });\n    } else if (wrapperClasses.includes('context-aggregation')) {\n      // Suggestions for sum(metric) by (|)\n      return this.getAggregationCompletionItems(value);\n    } else if (empty) {\n      // Suggestions for empty query field\n      return this.getEmptyCompletionItems(context);\n    } else if (prefixUnrecognized && noSuffix && !isNextOperand) {\n      // Show term suggestions in a couple of scenarios\n      return this.getBeginningCompletionItems(context);\n    } else if (prefixUnrecognized && safePrefix) {\n      // Show term suggestions in a couple of scenarios\n      return this.getTermCompletionItems();\n    }\n\n    return emptyResult;\n  };\n\n  getBeginningCompletionItems = (context: AutocompleteContext): TypeaheadOutput => {\n    return {\n      suggestions: [...this.getEmptyCompletionItems(context).suggestions, ...this.getTermCompletionItems().suggestions],\n    };\n  };\n\n  getEmptyCompletionItems = (context: AutocompleteContext): TypeaheadOutput => {\n    const { history } = context;\n    const suggestions: CompletionItemGroup[] = [];\n\n    if (history && history.length) {\n      const historyItems = chain(history)\n        .map((h) => h.query.expr)\n        .filter()\n        .uniq()\n        .take(HISTORY_ITEM_COUNT)\n        .map(wrapLabel)\n        .map((item) => addHistoryMetadata(item, history))\n        .value();\n\n      suggestions.push({\n        searchFunctionType: SearchFunctionType.Prefix,\n        skipSort: true,\n        label: 'History',\n        items: historyItems,\n      });\n    }\n\n    return { suggestions };\n  };\n\n  getTermCompletionItems = (): TypeaheadOutput => {\n    const { metrics, metricsMetadata } = this;\n    const suggestions: CompletionItemGroup[] = [];\n\n    suggestions.push({\n      searchFunctionType: SearchFunctionType.Prefix,\n      label: 'Functions',\n      items: FUNCTIONS.map(setFunctionKind),\n    });\n\n    if (metrics && metrics.length) {\n      suggestions.push({\n        label: 'Metrics',\n        items: metrics.map((m) => addMetricsMetadata(m, metricsMetadata)),\n        searchFunctionType: SearchFunctionType.Fuzzy,\n      });\n    }\n\n    return { suggestions };\n  };\n\n  getRangeCompletionItems(): TypeaheadOutput {\n    return {\n      context: 'context-range',\n      suggestions: [\n        {\n          label: 'Range vector',\n          items: [...RATE_RANGES],\n        },\n      ],\n    };\n  }\n\n  getAggregationCompletionItems = async (value: Value): Promise<TypeaheadOutput> => {\n    const suggestions: CompletionItemGroup[] = [];\n\n    // Stitch all query lines together to support multi-line queries\n    let queryOffset;\n    const queryText = value.document.getBlocks().reduce((text, block) => {\n      if (text === undefined) {\n        return '';\n      }\n      if (!block) {\n        return text;\n      }\n\n      const blockText = block?.getText();\n\n      if (value.anchorBlock.key === block.key) {\n        // Newline characters are not accounted for but this is irrelevant\n        // for the purpose of extracting the selector string\n        queryOffset = value.selection.anchor.offset + text.length;\n      }\n\n      return text + blockText;\n    }, '');\n\n    // Try search for selector part on the left-hand side, such as `sum (m) by (l)`\n    const openParensAggregationIndex = queryText.lastIndexOf('(', queryOffset);\n    let openParensSelectorIndex = queryText.lastIndexOf('(', openParensAggregationIndex - 1);\n    let closeParensSelectorIndex = queryText.indexOf(')', openParensSelectorIndex);\n\n    // Try search for selector part of an alternate aggregation clause, such as `sum by (l) (m)`\n    if (openParensSelectorIndex === -1) {\n      const closeParensAggregationIndex = queryText.indexOf(')', queryOffset);\n      closeParensSelectorIndex = queryText.indexOf(')', closeParensAggregationIndex + 1);\n      openParensSelectorIndex = queryText.lastIndexOf('(', closeParensSelectorIndex);\n    }\n\n    const result = {\n      suggestions,\n      context: 'context-aggregation',\n    };\n\n    // Suggestions are useless for alternative aggregation clauses without a selector in context\n    if (openParensSelectorIndex === -1) {\n      return result;\n    }\n\n    // Range vector syntax not accounted for by subsequent parse so discard it if present\n    const selectorString = queryText\n      .slice(openParensSelectorIndex + 1, closeParensSelectorIndex)\n      .replace(/\\[[^\\]]+\\]$/, '');\n\n    const selector = parseSelector(selectorString, selectorString.length - 2).selector;\n\n    const series = await this.getSeries(selector);\n    const labelKeys = Object.keys(series);\n    if (labelKeys.length > 0) {\n      const limitInfo = addLimitInfo(labelKeys);\n      suggestions.push({\n        label: `Labels${limitInfo}`,\n        items: labelKeys.map(wrapLabel),\n        searchFunctionType: SearchFunctionType.Fuzzy,\n      });\n    }\n    return result;\n  };\n\n  getLabelCompletionItems = async ({\n    text,\n    wrapperClasses,\n    labelKey,\n    value,\n  }: TypeaheadInput): Promise<TypeaheadOutput> => {\n    if (!value) {\n      return { suggestions: [] };\n    }\n\n    const suggestions: CompletionItemGroup[] = [];\n    const line = value.anchorBlock.getText();\n    const cursorOffset = value.selection.anchor.offset;\n    const suffix = line.substr(cursorOffset);\n    const prefix = line.substr(0, cursorOffset);\n    const isValueStart = text.match(/^(=|=~|!=|!~)/);\n    const isValueEnd = suffix.match(/^\"?[,}]|$/);\n    // Detect cursor in front of value, e.g., {key=|\"}\n    const isPreValue = prefix.match(/(=|=~|!=|!~)$/) && suffix.match(/^\"/);\n\n    // Don't suggest anything at the beginning or inside a value\n    const isValueEmpty = isValueStart && isValueEnd;\n    const hasValuePrefix = isValueEnd && !isValueStart;\n    if ((!isValueEmpty && !hasValuePrefix) || isPreValue) {\n      return { suggestions };\n    }\n\n    // Get normalized selector\n    let selector;\n    let parsedSelector;\n    try {\n      parsedSelector = parseSelector(line, cursorOffset);\n      selector = parsedSelector.selector;\n    } catch {\n      selector = EMPTY_SELECTOR;\n    }\n\n    const containsMetric = selector.includes('__name__=');\n    const existingKeys = parsedSelector ? parsedSelector.labelKeys : [];\n\n    let series: Record<string, string[]> = {};\n    // Query labels for selector\n    if (selector) {\n      series = await this.getSeries(selector, !containsMetric);\n    }\n\n    if (Object.keys(series).length === 0) {\n      console.warn(`Server did not return any values for selector = ${selector}`);\n      return { suggestions };\n    }\n\n    let context: string | undefined;\n\n    if ((text && isValueStart) || wrapperClasses.includes('attr-value')) {\n      // Label values\n      if (labelKey && series[labelKey]) {\n        context = 'context-label-values';\n        const limitInfo = addLimitInfo(series[labelKey]);\n        suggestions.push({\n          label: `Label values for \"${labelKey}\"${limitInfo}`,\n          items: series[labelKey].map(wrapLabel),\n          searchFunctionType: SearchFunctionType.Fuzzy,\n        });\n      }\n    } else {\n      // Label keys\n      const labelKeys = series ? Object.keys(series) : containsMetric ? null : DEFAULT_KEYS;\n\n      if (labelKeys) {\n        const possibleKeys = difference(labelKeys, existingKeys);\n        if (possibleKeys.length) {\n          context = 'context-labels';\n          const newItems = possibleKeys.map((key) => ({ label: key }));\n          const limitInfo = addLimitInfo(newItems);\n          const newSuggestion: CompletionItemGroup = {\n            label: `Labels${limitInfo}`,\n            items: newItems,\n            searchFunctionType: SearchFunctionType.Fuzzy,\n          };\n          suggestions.push(newSuggestion);\n        }\n      }\n    }\n\n    return { context, suggestions };\n  };\n\n  importFromAbstractQuery(labelBasedQuery: AbstractQuery): PromQuery {\n    return toPromLikeQuery(labelBasedQuery);\n  }\n\n  exportToAbstractQuery(query: PromQuery): AbstractQuery {\n    const promQuery = query.expr;\n    if (!promQuery || promQuery.length === 0) {\n      return { refId: query.refId, labelMatchers: [] };\n    }\n    const tokens = Prism.tokenize(promQuery, PromqlSyntax);\n    const labelMatchers: AbstractLabelMatcher[] = extractLabelMatchers(tokens);\n    const nameLabelValue = getNameLabelValue(promQuery, tokens);\n    if (nameLabelValue && nameLabelValue.length > 0) {\n      labelMatchers.push({\n        name: '__name__',\n        operator: AbstractLabelOperator.Equal,\n        value: nameLabelValue,\n      });\n    }\n\n    return {\n      refId: query.refId,\n      labelMatchers,\n    };\n  }\n\n  async getSeries(selector: string, withName?: boolean): Promise<Record<string, string[]>> {\n    if (this.datasource.lookupsDisabled) {\n      return {};\n    }\n    try {\n      if (selector === EMPTY_SELECTOR) {\n        return await this.fetchDefaultSeries();\n      } else {\n        return await this.fetchSeriesLabels(selector, withName);\n      }\n    } catch (error) {\n      // TODO: better error handling\n      console.error(error);\n      return {};\n    }\n  }\n\n  fetchLabelValues = async (key: string): Promise<string[]> => {\n    const params = this.datasource.getTimeRangeParams();\n    const url = `/api/v1/label/${this.datasource.interpolateString(key)}/values`;\n    return await this.request(url, [], params);\n  };\n\n  async getLabelValues(key: string): Promise<string[]> {\n    return await this.fetchLabelValues(key);\n  }\n\n  /**\n   * Fetches all label keys\n   */\n  async fetchLabels(): Promise<string[]> {\n    const url = '/api/v1/labels';\n    const params = this.datasource.getTimeRangeParams();\n    this.labelFetchTs = Date.now().valueOf();\n\n    const res = await this.request(url, [], params);\n    if (Array.isArray(res)) {\n      this.labelKeys = res.slice().sort();\n    }\n\n    return [];\n  }\n\n  /**\n   * Fetch labels for a series. This is cached by it's args but also by the global timeRange currently selected as\n   * they can change over requested time.\n   * @param name\n   * @param withName\n   */\n  fetchSeriesLabels = async (name: string, withName?: boolean): Promise<Record<string, string[]>> => {\n    const interpolatedName = this.datasource.interpolateString(name);\n    const range = this.datasource.getTimeRangeParams();\n    const urlParams = {\n      ...range,\n      'match[]': interpolatedName,\n    };\n    const url = `/api/v1/series`;\n    // Cache key is a bit different here. We add the `withName` param and also round up to a minute the intervals.\n    // The rounding may seem strange but makes relative intervals like now-1h less prone to need separate request every\n    // millisecond while still actually getting all the keys for the correct interval. This still can create problems\n    // when user does not the newest values for a minute if already cached.\n    const cacheParams = new URLSearchParams({\n      'match[]': interpolatedName,\n      start: roundSecToMin(parseInt(range.start, 10)).toString(),\n      end: roundSecToMin(parseInt(range.end, 10)).toString(),\n      withName: withName ? 'true' : 'false',\n    });\n\n    const cacheKey = `/api/v1/series?${cacheParams.toString()}`;\n    let value = this.labelsCache.get(cacheKey);\n    if (!value) {\n      const data = await this.request(url, [], urlParams);\n      const { values } = processLabels(data, withName);\n      value = values;\n      this.labelsCache.set(cacheKey, value);\n    }\n    return value;\n  };\n\n  /**\n   * Fetch series for a selector. Use this for raw results. Use fetchSeriesLabels() to get labels.\n   * @param match\n   */\n  fetchSeries = async (match: string): Promise<Array<Record<string, string>>> => {\n    const url = '/api/v1/series';\n    const range = this.datasource.getTimeRangeParams();\n    const params = { ...range, 'match[]': match };\n    return await this.request(url, {}, params);\n  };\n\n  /**\n   * Fetch this only one as we assume this won't change over time. This is cached differently from fetchSeriesLabels\n   * because we can cache more aggressively here and also we do not want to invalidate this cache the same way as in\n   * fetchSeriesLabels.\n   */\n  fetchDefaultSeries = once(async () => {\n    const values = await Promise.all(DEFAULT_KEYS.map((key) => this.fetchLabelValues(key)));\n    return DEFAULT_KEYS.reduce((acc, key, i) => ({ ...acc, [key]: values[i] }), {});\n  });\n}\n\nfunction getNameLabelValue(promQuery: string, tokens: any): string {\n  let nameLabelValue = '';\n  for (let prop in tokens) {\n    if (typeof tokens[prop] === 'string') {\n      nameLabelValue = tokens[prop] as string;\n      break;\n    }\n  }\n  return nameLabelValue;\n}\n","import { invert } from 'lodash';\nimport { Token } from 'prismjs';\n\nimport { DataQuery, AbstractQuery, AbstractLabelOperator, AbstractLabelMatcher } from '@grafana/data';\n\nimport { addLabelToQuery } from './add_label_to_query';\nimport { SUGGESTIONS_LIMIT } from './language_provider';\nimport { PromMetricsMetadata, PromMetricsMetadataItem } from './types';\n\nexport const processHistogramMetrics = (metrics: string[]) => {\n  const resultSet: Set<string> = new Set();\n  const regexp = new RegExp('_bucket($|:)');\n  for (let index = 0; index < metrics.length; index++) {\n    const metric = metrics[index];\n    const isHistogramValue = regexp.test(metric);\n    if (isHistogramValue) {\n      resultSet.add(metric);\n    }\n  }\n  return [...resultSet];\n};\n\nexport function processLabels(labels: Array<{ [key: string]: string }>, withName = false) {\n  // For processing we are going to use sets as they have significantly better performance than arrays\n  // After we process labels, we will convert sets to arrays and return object with label values in arrays\n  const valueSet: { [key: string]: Set<string> } = {};\n  labels.forEach((label) => {\n    const { __name__, ...rest } = label;\n    if (withName) {\n      valueSet['__name__'] = valueSet['__name__'] || new Set();\n      if (!valueSet['__name__'].has(__name__)) {\n        valueSet['__name__'].add(__name__);\n      }\n    }\n\n    Object.keys(rest).forEach((key) => {\n      if (!valueSet[key]) {\n        valueSet[key] = new Set();\n      }\n      if (!valueSet[key].has(rest[key])) {\n        valueSet[key].add(rest[key]);\n      }\n    });\n  });\n\n  // valueArray that we are going to return in the object\n  const valueArray: { [key: string]: string[] } = {};\n  limitSuggestions(Object.keys(valueSet)).forEach((key) => {\n    valueArray[key] = limitSuggestions(Array.from(valueSet[key]));\n  });\n\n  return { values: valueArray, keys: Object.keys(valueArray) };\n}\n\n// const cleanSelectorRegexp = /\\{(\\w+=\"[^\"\\n]*?\")(,\\w+=\"[^\"\\n]*?\")*\\}/;\nexport const selectorRegexp = /\\{[^}]*?(\\}|$)/;\nexport const labelRegexp = /\\b(\\w+)(!?=~?)(\"[^\"\\n]*?\")/g;\nexport function parseSelector(query: string, cursorOffset = 1): { labelKeys: any[]; selector: string } {\n  if (!query.match(selectorRegexp)) {\n    // Special matcher for metrics\n    if (query.match(/^[A-Za-z:][\\w:]*$/)) {\n      return {\n        selector: `{__name__=\"${query}\"}`,\n        labelKeys: ['__name__'],\n      };\n    }\n    throw new Error('Query must contain a selector: ' + query);\n  }\n\n  // Check if inside a selector\n  const prefix = query.slice(0, cursorOffset);\n  const prefixOpen = prefix.lastIndexOf('{');\n  const prefixClose = prefix.lastIndexOf('}');\n  if (prefixOpen === -1) {\n    throw new Error('Not inside selector, missing open brace: ' + prefix);\n  }\n  if (prefixClose > -1 && prefixClose > prefixOpen) {\n    throw new Error('Not inside selector, previous selector already closed: ' + prefix);\n  }\n  const suffix = query.slice(cursorOffset);\n  const suffixCloseIndex = suffix.indexOf('}');\n  const suffixClose = suffixCloseIndex + cursorOffset;\n  const suffixOpenIndex = suffix.indexOf('{');\n  const suffixOpen = suffixOpenIndex + cursorOffset;\n  if (suffixClose === -1) {\n    throw new Error('Not inside selector, missing closing brace in suffix: ' + suffix);\n  }\n  if (suffixOpenIndex > -1 && suffixOpen < suffixClose) {\n    throw new Error('Not inside selector, next selector opens before this one closed: ' + suffix);\n  }\n\n  // Extract clean labels to form clean selector, incomplete labels are dropped\n  const selector = query.slice(prefixOpen, suffixClose);\n  const labels: { [key: string]: { value: string; operator: string } } = {};\n  selector.replace(labelRegexp, (label, key, operator, value) => {\n    const labelOffset = query.indexOf(label);\n    const valueStart = labelOffset + key.length + operator.length + 1;\n    const valueEnd = labelOffset + key.length + operator.length + value.length - 1;\n    // Skip label if cursor is in value\n    if (cursorOffset < valueStart || cursorOffset > valueEnd) {\n      labels[key] = { value, operator };\n    }\n    return '';\n  });\n\n  // Add metric if there is one before the selector\n  const metricPrefix = query.slice(0, prefixOpen);\n  const metricMatch = metricPrefix.match(/[A-Za-z:][\\w:]*$/);\n  if (metricMatch) {\n    labels['__name__'] = { value: `\"${metricMatch[0]}\"`, operator: '=' };\n  }\n\n  // Build sorted selector\n  const labelKeys = Object.keys(labels).sort();\n  const cleanSelector = labelKeys.map((key) => `${key}${labels[key].operator}${labels[key].value}`).join(',');\n\n  const selectorString = ['{', cleanSelector, '}'].join('');\n\n  return { labelKeys, selector: selectorString };\n}\n\nexport function expandRecordingRules(query: string, mapping: { [name: string]: string }): string {\n  const ruleNames = Object.keys(mapping);\n  const rulesRegex = new RegExp(`(\\\\s|^)(${ruleNames.join('|')})(\\\\s|$|\\\\(|\\\\[|\\\\{)`, 'ig');\n  const expandedQuery = query.replace(rulesRegex, (match, pre, name, post) => `${pre}${mapping[name]}${post}`);\n\n  // Split query into array, so if query uses operators, we can correctly add labels to each individual part.\n  const queryArray = expandedQuery.split(/(\\+|\\-|\\*|\\/|\\%|\\^)/);\n\n  // Regex that matches occurrences of ){ or }{ or ]{ which is a sign of incorrecly added labels.\n  const invalidLabelsRegex = /(\\)\\{|\\}\\{|\\]\\{)/;\n  const correctlyExpandedQueryArray = queryArray.map((query) => {\n    return addLabelsToExpression(query, invalidLabelsRegex);\n  });\n\n  return correctlyExpandedQueryArray.join('');\n}\n\nfunction addLabelsToExpression(expr: string, invalidLabelsRegexp: RegExp) {\n  const match = expr.match(invalidLabelsRegexp);\n  if (!match) {\n    return expr;\n  }\n\n  // Split query into 2 parts - before the invalidLabelsRegex match and after.\n  const indexOfRegexMatch = match.index ?? 0;\n  const exprBeforeRegexMatch = expr.slice(0, indexOfRegexMatch + 1);\n  const exprAfterRegexMatch = expr.slice(indexOfRegexMatch + 1);\n\n  // Create arrayOfLabelObjects with label objects that have key, operator and value.\n  const arrayOfLabelObjects: Array<{ key: string; operator: string; value: string }> = [];\n  exprAfterRegexMatch.replace(labelRegexp, (label, key, operator, value) => {\n    arrayOfLabelObjects.push({ key, operator, value });\n    return '';\n  });\n\n  // Loop through all label objects and add them to query.\n  // As a starting point we have valid query without the labels.\n  let result = exprBeforeRegexMatch;\n  arrayOfLabelObjects.filter(Boolean).forEach((obj) => {\n    // Remove extra set of quotes from obj.value\n    const value = obj.value.slice(1, -1);\n    result = addLabelToQuery(result, obj.key, value, obj.operator);\n  });\n\n  return result;\n}\n\n/**\n * Adds metadata for synthetic metrics for which the API does not provide metadata.\n * See https://github.com/grafana/grafana/issues/22337 for details.\n *\n * @param metadata HELP and TYPE metadata from /api/v1/metadata\n */\nexport function fixSummariesMetadata(metadata: { [metric: string]: PromMetricsMetadataItem[] }): PromMetricsMetadata {\n  if (!metadata) {\n    return metadata;\n  }\n  const baseMetadata: PromMetricsMetadata = {};\n  const summaryMetadata: PromMetricsMetadata = {};\n  for (const metric in metadata) {\n    // NOTE: based on prometheus-documentation, we can receive\n    // multiple metadata-entries for the given metric, it seems\n    // it happens when the same metric is on multiple targets\n    // and their help-text differs\n    // (https://prometheus.io/docs/prometheus/latest/querying/api/#querying-metric-metadata)\n    // for now we just use the first entry.\n    const item = metadata[metric][0];\n    baseMetadata[metric] = item;\n\n    if (item.type === 'histogram') {\n      summaryMetadata[`${metric}_bucket`] = {\n        type: 'counter',\n        help: `Cumulative counters for the observation buckets (${item.help})`,\n      };\n      summaryMetadata[`${metric}_count`] = {\n        type: 'counter',\n        help: `Count of events that have been observed for the histogram metric (${item.help})`,\n      };\n      summaryMetadata[`${metric}_sum`] = {\n        type: 'counter',\n        help: `Total sum of all observed values for the histogram metric (${item.help})`,\n      };\n    }\n    if (item.type === 'summary') {\n      summaryMetadata[`${metric}_count`] = {\n        type: 'counter',\n        help: `Count of events that have been observed for the base metric (${item.help})`,\n      };\n      summaryMetadata[`${metric}_sum`] = {\n        type: 'counter',\n        help: `Total sum of all observed values for the base metric (${item.help})`,\n      };\n    }\n  }\n  // Synthetic series\n  const syntheticMetadata: PromMetricsMetadata = {};\n  syntheticMetadata['ALERTS'] = {\n    type: 'counter',\n    help: 'Time series showing pending and firing alerts. The sample value is set to 1 as long as the alert is in the indicated active (pending or firing) state.',\n  };\n\n  return { ...baseMetadata, ...summaryMetadata, ...syntheticMetadata };\n}\n\nexport function roundMsToMin(milliseconds: number): number {\n  return roundSecToMin(milliseconds / 1000);\n}\n\nexport function roundSecToMin(seconds: number): number {\n  return Math.floor(seconds / 60);\n}\n\nexport function limitSuggestions(items: string[]) {\n  return items.slice(0, SUGGESTIONS_LIMIT);\n}\n\nexport function addLimitInfo(items: any[] | undefined): string {\n  return items && items.length >= SUGGESTIONS_LIMIT ? `, limited to the first ${SUGGESTIONS_LIMIT} received items` : '';\n}\n\n// NOTE: the following 2 exported functions are very similar to the prometheus*Escape\n// functions in datasource.ts, but they are not exactly the same algorithm, and we found\n// no way to reuse one in the another or vice versa.\n\n// Prometheus regular-expressions use the RE2 syntax (https://github.com/google/re2/wiki/Syntax),\n// so every character that matches something in that list has to be escaped.\n// the list of metacharacters is: *+?()|\\.[]{}^$\n// we make a javascript regular expression that matches those characters:\nconst RE2_METACHARACTERS = /[*+?()|\\\\.\\[\\]{}^$]/g;\nfunction escapePrometheusRegexp(value: string): string {\n  return value.replace(RE2_METACHARACTERS, '\\\\$&');\n}\n\n// based on the openmetrics-documentation, the 3 symbols we have to handle are:\n// - \\n ... the newline character\n// - \\  ... the backslash character\n// - \"  ... the double-quote character\nexport function escapeLabelValueInExactSelector(labelValue: string): string {\n  return labelValue.replace(/\\\\/g, '\\\\\\\\').replace(/\\n/g, '\\\\n').replace(/\"/g, '\\\\\"');\n}\n\nexport function escapeLabelValueInRegexSelector(labelValue: string): string {\n  return escapeLabelValueInExactSelector(escapePrometheusRegexp(labelValue));\n}\n\nconst FromPromLikeMap: Record<string, AbstractLabelOperator> = {\n  '=': AbstractLabelOperator.Equal,\n  '!=': AbstractLabelOperator.NotEqual,\n  '=~': AbstractLabelOperator.EqualRegEx,\n  '!~': AbstractLabelOperator.NotEqualRegEx,\n};\nconst ToPromLikeMap: Record<AbstractLabelOperator, string> = invert(FromPromLikeMap) as Record<\n  AbstractLabelOperator,\n  string\n>;\n\nexport function toPromLikeExpr(labelBasedQuery: AbstractQuery): string {\n  const expr = labelBasedQuery.labelMatchers\n    .map((selector: AbstractLabelMatcher) => {\n      const operator = ToPromLikeMap[selector.operator];\n      if (operator) {\n        return `${selector.name}${operator}\"${selector.value}\"`;\n      } else {\n        return '';\n      }\n    })\n    .filter((e: string) => e !== '')\n    .join(', ');\n\n  return expr ? `{${expr}}` : '';\n}\n\nexport function toPromLikeQuery(labelBasedQuery: AbstractQuery): PromLikeQuery {\n  return {\n    refId: labelBasedQuery.refId,\n    expr: toPromLikeExpr(labelBasedQuery),\n    range: true,\n  };\n}\n\nexport interface PromLikeQuery extends DataQuery {\n  expr: string;\n  range: boolean;\n}\n\nexport function extractLabelMatchers(tokens: Array<string | Token>): AbstractLabelMatcher[] {\n  const labelMatchers: AbstractLabelMatcher[] = [];\n\n  for (let prop in tokens) {\n    if (tokens[prop] instanceof Token) {\n      let token: Token = tokens[prop] as Token;\n      if (token.type === 'context-labels') {\n        let labelKey = '';\n        let labelValue = '';\n        let labelOperator = '';\n        let contentTokens: any[] = token.content as any[];\n        for (let currentToken in contentTokens) {\n          if (typeof contentTokens[currentToken] === 'string') {\n            let currentStr: string;\n            currentStr = contentTokens[currentToken] as string;\n            if (currentStr === '=' || currentStr === '!=' || currentStr === '=~' || currentStr === '!~') {\n              labelOperator = currentStr;\n            }\n          } else if (contentTokens[currentToken] instanceof Token) {\n            switch (contentTokens[currentToken].type) {\n              case 'label-key':\n                labelKey = contentTokens[currentToken].content as string;\n                break;\n              case 'label-value':\n                labelValue = contentTokens[currentToken].content as string;\n                labelValue = labelValue.substring(1, labelValue.length - 1);\n                const labelComparator = FromPromLikeMap[labelOperator];\n                if (labelComparator) {\n                  labelMatchers.push({ name: labelKey, operator: labelComparator, value: labelValue });\n                }\n                break;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return labelMatchers;\n}\n","import { binaryScalarOperations } from './binaryScalarOperations';\nimport { LabelParamEditor } from './components/LabelParamEditor';\nimport {\n  defaultAddOperationHandler,\n  functionRendererLeft,\n  functionRendererRight,\n  getPromAndLokiOperationDisplayName,\n  getRangeVectorParamDef,\n  rangeRendererLeftWithParams,\n  rangeRendererRightWithParams,\n} from './shared/operationUtils';\nimport {\n  QueryBuilderOperation,\n  QueryBuilderOperationDef,\n  QueryWithOperations,\n  VisualQueryModeller,\n} from './shared/types';\nimport { PromOperationId, PromVisualQuery, PromVisualQueryOperationCategory } from './types';\n\nexport function getOperationDefinitions(): QueryBuilderOperationDef[] {\n  const list: QueryBuilderOperationDef[] = [\n    {\n      id: PromOperationId.HistogramQuantile,\n      name: 'Histogram quantile',\n      params: [{ name: 'Quantile', type: 'number', options: [0.99, 0.95, 0.9, 0.75, 0.5, 0.25] }],\n      defaultParams: [0.9],\n      category: PromVisualQueryOperationCategory.Functions,\n      renderer: functionRendererLeft,\n      addOperationHandler: defaultAddOperationHandler,\n    },\n    {\n      id: PromOperationId.LabelReplace,\n      name: 'Label replace',\n      params: [\n        { name: 'Destination label', type: 'string' },\n        { name: 'Replacement', type: 'string' },\n        { name: 'Source label', type: 'string' },\n        { name: 'Regex', type: 'string' },\n      ],\n      category: PromVisualQueryOperationCategory.Functions,\n      defaultParams: ['', '$1', '', '(.*)'],\n      renderer: functionRendererRight,\n      addOperationHandler: defaultAddOperationHandler,\n    },\n    {\n      id: PromOperationId.Ln,\n      name: 'Ln',\n      params: [],\n      defaultParams: [],\n      category: PromVisualQueryOperationCategory.Functions,\n      renderer: functionRendererLeft,\n      addOperationHandler: defaultAddOperationHandler,\n    },\n    createRangeFunction(PromOperationId.Changes),\n    createRangeFunction(PromOperationId.Rate, true),\n    createRangeFunction(PromOperationId.Irate),\n    createRangeFunction(PromOperationId.Increase, true),\n    createRangeFunction(PromOperationId.Idelta),\n    createRangeFunction(PromOperationId.Delta),\n    createFunction({\n      id: PromOperationId.HoltWinters,\n      params: [\n        getRangeVectorParamDef(),\n        { name: 'Smoothing Factor', type: 'number' },\n        { name: 'Trend Factor', type: 'number' },\n      ],\n      defaultParams: ['$__interval', 0.5, 0.5],\n      alternativesKey: 'range function',\n      category: PromVisualQueryOperationCategory.RangeFunctions,\n      renderer: rangeRendererRightWithParams,\n      addOperationHandler: addOperationWithRangeVector,\n      changeTypeHandler: operationTypeChangedHandlerForRangeFunction,\n    }),\n    createFunction({\n      id: PromOperationId.PredictLinear,\n      params: [getRangeVectorParamDef(), { name: 'Seconds from now', type: 'number' }],\n      defaultParams: ['$__interval', 60],\n      alternativesKey: 'range function',\n      category: PromVisualQueryOperationCategory.RangeFunctions,\n      renderer: rangeRendererRightWithParams,\n      addOperationHandler: addOperationWithRangeVector,\n      changeTypeHandler: operationTypeChangedHandlerForRangeFunction,\n    }),\n    createFunction({\n      id: PromOperationId.QuantileOverTime,\n      params: [getRangeVectorParamDef(), { name: 'Quantile', type: 'number' }],\n      defaultParams: ['$__interval', 0.5],\n      alternativesKey: 'overtime function',\n      category: PromVisualQueryOperationCategory.RangeFunctions,\n      renderer: rangeRendererLeftWithParams,\n      addOperationHandler: addOperationWithRangeVector,\n      changeTypeHandler: operationTypeChangedHandlerForRangeFunction,\n    }),\n    ...binaryScalarOperations,\n    {\n      id: PromOperationId.NestedQuery,\n      name: 'Binary operation with query',\n      params: [],\n      defaultParams: [],\n      category: PromVisualQueryOperationCategory.BinaryOps,\n      renderer: (model, def, innerExpr) => innerExpr,\n      addOperationHandler: addNestedQueryHandler,\n    },\n    createFunction({ id: PromOperationId.Absent }),\n    createFunction({\n      id: PromOperationId.Acos,\n      category: PromVisualQueryOperationCategory.Trigonometric,\n    }),\n    createFunction({\n      id: PromOperationId.Acosh,\n      category: PromVisualQueryOperationCategory.Trigonometric,\n    }),\n    createFunction({\n      id: PromOperationId.Asin,\n      category: PromVisualQueryOperationCategory.Trigonometric,\n    }),\n    createFunction({\n      id: PromOperationId.Asinh,\n      category: PromVisualQueryOperationCategory.Trigonometric,\n    }),\n    createFunction({\n      id: PromOperationId.Atan,\n      category: PromVisualQueryOperationCategory.Trigonometric,\n    }),\n    createFunction({\n      id: PromOperationId.Atanh,\n      category: PromVisualQueryOperationCategory.Trigonometric,\n    }),\n    createFunction({ id: PromOperationId.Ceil }),\n    createFunction({\n      id: PromOperationId.Clamp,\n      name: 'Clamp',\n      params: [\n        { name: 'Minimum Scalar', type: 'number' },\n        { name: 'Maximum Scalar', type: 'number' },\n      ],\n      defaultParams: [1, 1],\n    }),\n\n    createFunction({\n      id: PromOperationId.ClampMax,\n      params: [{ name: 'Maximum Scalar', type: 'number' }],\n      defaultParams: [1],\n    }),\n    createFunction({\n      id: PromOperationId.ClampMin,\n      params: [{ name: 'Minimum Scalar', type: 'number' }],\n      defaultParams: [1],\n    }),\n    createFunction({\n      id: PromOperationId.Cos,\n      category: PromVisualQueryOperationCategory.Trigonometric,\n    }),\n    createFunction({\n      id: PromOperationId.Cosh,\n      category: PromVisualQueryOperationCategory.Trigonometric,\n    }),\n    createFunction({\n      id: PromOperationId.DayOfMonth,\n      category: PromVisualQueryOperationCategory.Time,\n    }),\n    createFunction({\n      id: PromOperationId.DayOfWeek,\n      category: PromVisualQueryOperationCategory.Time,\n    }),\n    createFunction({\n      id: PromOperationId.DaysInMonth,\n      category: PromVisualQueryOperationCategory.Time,\n    }),\n    createFunction({ id: PromOperationId.Deg }),\n    createRangeFunction(PromOperationId.Deriv),\n    //\n    createFunction({ id: PromOperationId.Exp }),\n    createFunction({ id: PromOperationId.Floor }),\n    createFunction({ id: PromOperationId.Group }),\n    createFunction({ id: PromOperationId.Hour }),\n    createFunction({\n      id: PromOperationId.LabelJoin,\n      params: [\n        {\n          name: 'Destination Label',\n          type: 'string',\n          editor: LabelParamEditor,\n        },\n        {\n          name: 'Separator',\n          type: 'string',\n        },\n        {\n          name: 'Source Label',\n          type: 'string',\n          restParam: true,\n          optional: true,\n          editor: LabelParamEditor,\n        },\n      ],\n      defaultParams: ['', ',', ''],\n      renderer: labelJoinRenderer,\n      addOperationHandler: labelJoinAddOperationHandler,\n    }),\n    createFunction({ id: PromOperationId.Log10 }),\n    createFunction({ id: PromOperationId.Log2 }),\n    createFunction({ id: PromOperationId.Minute }),\n    createFunction({ id: PromOperationId.Month }),\n    createFunction({\n      id: PromOperationId.Pi,\n      renderer: (model) => `${model.id}()`,\n    }),\n    createFunction({\n      id: PromOperationId.Quantile,\n      params: [{ name: 'Value', type: 'number' }],\n      defaultParams: [1],\n      renderer: functionRendererLeft,\n    }),\n    createFunction({ id: PromOperationId.Rad }),\n    createRangeFunction(PromOperationId.Resets),\n    createFunction({\n      id: PromOperationId.Round,\n      category: PromVisualQueryOperationCategory.Functions,\n      params: [{ name: 'To Nearest', type: 'number' }],\n      defaultParams: [1],\n    }),\n    createFunction({ id: PromOperationId.Scalar }),\n    createFunction({ id: PromOperationId.Sgn }),\n    createFunction({ id: PromOperationId.Sin, category: PromVisualQueryOperationCategory.Trigonometric }),\n    createFunction({\n      id: PromOperationId.Sinh,\n      category: PromVisualQueryOperationCategory.Trigonometric,\n    }),\n    createFunction({ id: PromOperationId.Sort }),\n    createFunction({ id: PromOperationId.SortDesc }),\n    createFunction({ id: PromOperationId.Sqrt }),\n    createFunction({ id: PromOperationId.Stddev }),\n    createFunction({\n      id: PromOperationId.Tan,\n      category: PromVisualQueryOperationCategory.Trigonometric,\n    }),\n    createFunction({\n      id: PromOperationId.Tanh,\n      category: PromVisualQueryOperationCategory.Trigonometric,\n    }),\n    createFunction({\n      id: PromOperationId.Time,\n      renderer: (model) => `${model.id}()`,\n    }),\n    createFunction({ id: PromOperationId.Timestamp }),\n    createFunction({\n      id: PromOperationId.Vector,\n      params: [{ name: 'Value', type: 'number' }],\n      defaultParams: [1],\n      renderer: (model) => `${model.id}(${model.params[0]})`,\n    }),\n    createFunction({ id: PromOperationId.Year }),\n  ];\n\n  return list;\n}\n\nexport function createFunction(definition: Partial<QueryBuilderOperationDef>): QueryBuilderOperationDef {\n  return {\n    ...definition,\n    id: definition.id!,\n    name: definition.name ?? getPromAndLokiOperationDisplayName(definition.id!),\n    params: definition.params ?? [],\n    defaultParams: definition.defaultParams ?? [],\n    category: definition.category ?? PromVisualQueryOperationCategory.Functions,\n    renderer: definition.renderer ?? (definition.params ? functionRendererRight : functionRendererLeft),\n    addOperationHandler: definition.addOperationHandler ?? defaultAddOperationHandler,\n  };\n}\n\nexport function createRangeFunction(name: string, withRateInterval = false): QueryBuilderOperationDef {\n  return {\n    id: name,\n    name: getPromAndLokiOperationDisplayName(name),\n    params: [getRangeVectorParamDef(withRateInterval)],\n    defaultParams: [withRateInterval ? '$__rate_interval' : '$__interval'],\n    alternativesKey: 'range function',\n    category: PromVisualQueryOperationCategory.RangeFunctions,\n    renderer: operationWithRangeVectorRenderer,\n    addOperationHandler: addOperationWithRangeVector,\n    changeTypeHandler: operationTypeChangedHandlerForRangeFunction,\n  };\n}\n\nfunction operationTypeChangedHandlerForRangeFunction(\n  operation: QueryBuilderOperation,\n  newDef: QueryBuilderOperationDef\n) {\n  // validate current parameter\n  if (operation.params[0] === '$__rate_interval' && newDef.defaultParams[0] !== '$__rate_interval') {\n    operation.params = newDef.defaultParams;\n  } else if (operation.params[0] === '$__interval' && newDef.defaultParams[0] !== '$__interval') {\n    operation.params = newDef.defaultParams;\n  }\n\n  return operation;\n}\n\nexport function operationWithRangeVectorRenderer(\n  model: QueryBuilderOperation,\n  def: QueryBuilderOperationDef,\n  innerExpr: string\n) {\n  let rangeVector = (model.params ?? [])[0] ?? '5m';\n  return `${def.id}(${innerExpr}[${rangeVector}])`;\n}\n\n/**\n * Since there can only be one operation with range vector this will replace the current one (if one was added )\n */\nexport function addOperationWithRangeVector(\n  def: QueryBuilderOperationDef,\n  query: PromVisualQuery,\n  modeller: VisualQueryModeller\n) {\n  const newOperation: QueryBuilderOperation = {\n    id: def.id,\n    params: def.defaultParams,\n  };\n\n  if (query.operations.length > 0) {\n    // If operation exists it has to be in the registry so no point to check if it was found\n    const firstOp = modeller.getOperationDef(query.operations[0].id)!;\n\n    if (firstOp.addOperationHandler === addOperationWithRangeVector) {\n      return {\n        ...query,\n        operations: [newOperation, ...query.operations.slice(1)],\n      };\n    }\n  }\n\n  return {\n    ...query,\n    operations: [newOperation, ...query.operations],\n  };\n}\n\nfunction addNestedQueryHandler(def: QueryBuilderOperationDef, query: PromVisualQuery): PromVisualQuery {\n  return {\n    ...query,\n    binaryQueries: [\n      ...(query.binaryQueries ?? []),\n      {\n        operator: '/',\n        query,\n      },\n    ],\n  };\n}\n\nfunction labelJoinRenderer(model: QueryBuilderOperation, def: QueryBuilderOperationDef, innerExpr: string) {\n  if (typeof model.params[1] !== 'string') {\n    throw 'The separator must be a string';\n  }\n  const separator = `\"${model.params[1]}\"`;\n  return `${model.id}(${innerExpr}, \"${model.params[0]}\", ${separator}, \"${model.params.slice(2).join(separator)}\")`;\n}\n\nfunction labelJoinAddOperationHandler<T extends QueryWithOperations>(def: QueryBuilderOperationDef, query: T) {\n  const newOperation: QueryBuilderOperation = {\n    id: def.id,\n    params: def.defaultParams,\n  };\n\n  return {\n    ...query,\n    operations: [...query.operations, newOperation],\n  };\n}\n","import { addOperationWithRangeVector } from './operations';\nimport {\n  createAggregationOperation,\n  createAggregationOperationWithParam,\n  getPromAndLokiOperationDisplayName,\n  getRangeVectorParamDef,\n} from './shared/operationUtils';\nimport { QueryBuilderOperation, QueryBuilderOperationDef } from './shared/types';\nimport { PromVisualQueryOperationCategory, PromOperationId } from './types';\n\nexport function getAggregationOperations(): QueryBuilderOperationDef[] {\n  return [\n    ...createAggregationOperation(PromOperationId.Sum),\n    ...createAggregationOperation(PromOperationId.Avg),\n    ...createAggregationOperation(PromOperationId.Min),\n    ...createAggregationOperation(PromOperationId.Max),\n    ...createAggregationOperation(PromOperationId.Count),\n    ...createAggregationOperationWithParam(PromOperationId.TopK, {\n      params: [{ name: 'K-value', type: 'number' }],\n      defaultParams: [5],\n    }),\n    ...createAggregationOperationWithParam(PromOperationId.BottomK, {\n      params: [{ name: 'K-value', type: 'number' }],\n      defaultParams: [5],\n    }),\n    ...createAggregationOperationWithParam(PromOperationId.CountValues, {\n      params: [{ name: 'Identifier', type: 'string' }],\n      defaultParams: ['count'],\n    }),\n    createAggregationOverTime(PromOperationId.SumOverTime),\n    createAggregationOverTime(PromOperationId.AvgOverTime),\n    createAggregationOverTime(PromOperationId.MinOverTime),\n    createAggregationOverTime(PromOperationId.MaxOverTime),\n    createAggregationOverTime(PromOperationId.CountOverTime),\n    createAggregationOverTime(PromOperationId.LastOverTime),\n    createAggregationOverTime(PromOperationId.PresentOverTime),\n    createAggregationOverTime(PromOperationId.AbsentOverTime),\n    createAggregationOverTime(PromOperationId.StddevOverTime),\n  ];\n}\n\nfunction createAggregationOverTime(name: string): QueryBuilderOperationDef {\n  return {\n    id: name,\n    name: getPromAndLokiOperationDisplayName(name),\n    params: [getRangeVectorParamDef()],\n    defaultParams: ['$__interval'],\n    alternativesKey: 'overtime function',\n    category: PromVisualQueryOperationCategory.RangeFunctions,\n    renderer: operationWithRangeVectorRenderer,\n    addOperationHandler: addOperationWithRangeVector,\n  };\n}\n\nfunction operationWithRangeVectorRenderer(\n  model: QueryBuilderOperation,\n  def: QueryBuilderOperationDef,\n  innerExpr: string\n) {\n  let rangeVector = (model.params ?? [])[0] ?? '$__interval';\n  return `${def.id}(${innerExpr}[${rangeVector}])`;\n}\n","import { FUNCTIONS } from '../promql';\n\nimport { getAggregationOperations } from './aggregations';\nimport { getOperationDefinitions } from './operations';\nimport { LokiAndPromQueryModellerBase } from './shared/LokiAndPromQueryModellerBase';\nimport { PromQueryPattern, PromVisualQueryOperationCategory } from './types';\n\nexport class PromQueryModeller extends LokiAndPromQueryModellerBase {\n  constructor() {\n    super(() => {\n      const allOperations = [...getOperationDefinitions(), ...getAggregationOperations()];\n      for (const op of allOperations) {\n        const func = FUNCTIONS.find((x) => x.insertText === op.id);\n        if (func) {\n          op.documentation = func.documentation;\n        }\n      }\n      return allOperations;\n    });\n\n    this.setOperationCategories([\n      PromVisualQueryOperationCategory.Aggregations,\n      PromVisualQueryOperationCategory.RangeFunctions,\n      PromVisualQueryOperationCategory.Functions,\n      PromVisualQueryOperationCategory.BinaryOps,\n      PromVisualQueryOperationCategory.Trigonometric,\n      PromVisualQueryOperationCategory.Time,\n    ]);\n  }\n\n  getQueryPatterns(): PromQueryPattern[] {\n    return [\n      {\n        name: 'Rate then sum',\n        operations: [\n          { id: 'rate', params: ['$__rate_interval'] },\n          { id: 'sum', params: [] },\n        ],\n      },\n      {\n        name: 'Rate then sum by(label) then avg',\n        operations: [\n          { id: 'rate', params: ['$__rate_interval'] },\n          { id: '__sum_by', params: [''] },\n          { id: 'avg', params: [] },\n        ],\n      },\n      {\n        name: 'Histogram quantile on rate',\n        operations: [\n          { id: 'rate', params: ['$__rate_interval'] },\n          { id: '__sum_by', params: ['le'] },\n          { id: 'histogram_quantile', params: [0.95] },\n        ],\n      },\n      {\n        name: 'Histogram quantile on increase ',\n        operations: [\n          { id: 'increase', params: ['$__rate_interval'] },\n          { id: '__max_by', params: ['le'] },\n          { id: 'histogram_quantile', params: [0.95] },\n        ],\n      },\n    ];\n  }\n}\n\nexport const promQueryModeller = new PromQueryModeller();\n","import { defaultAddOperationHandler } from './shared/operationUtils';\nimport { QueryBuilderOperation, QueryBuilderOperationDef, QueryBuilderOperationParamDef } from './shared/types';\nimport { PromOperationId, PromVisualQueryOperationCategory } from './types';\n\nexport const binaryScalarDefs = [\n  {\n    id: PromOperationId.Addition,\n    name: 'Add scalar',\n    sign: '+',\n  },\n  {\n    id: PromOperationId.Subtraction,\n    name: 'Subtract scalar',\n    sign: '-',\n  },\n  {\n    id: PromOperationId.MultiplyBy,\n    name: 'Multiply by scalar',\n    sign: '*',\n  },\n  {\n    id: PromOperationId.DivideBy,\n    name: 'Divide by scalar',\n    sign: '/',\n  },\n  {\n    id: PromOperationId.Modulo,\n    name: 'Modulo by scalar',\n    sign: '%',\n  },\n  {\n    id: PromOperationId.Exponent,\n    name: 'Exponent',\n    sign: '^',\n  },\n  {\n    id: PromOperationId.EqualTo,\n    name: 'Equal to',\n    sign: '==',\n    comparison: true,\n  },\n  {\n    id: PromOperationId.NotEqualTo,\n    name: 'Not equal to',\n    sign: '!=',\n    comparison: true,\n  },\n  {\n    id: PromOperationId.GreaterThan,\n    name: 'Greater than',\n    sign: '>',\n    comparison: true,\n  },\n  {\n    id: PromOperationId.LessThan,\n    name: 'Less than',\n    sign: '<',\n    comparison: true,\n  },\n  {\n    id: PromOperationId.GreaterOrEqual,\n    name: 'Greater or equal to',\n    sign: '>=',\n    comparison: true,\n  },\n  {\n    id: PromOperationId.LessOrEqual,\n    name: 'Less or equal to',\n    sign: '<=',\n    comparison: true,\n  },\n];\n\nexport const binaryScalarOperatorToOperatorName = binaryScalarDefs.reduce((acc, def) => {\n  acc[def.sign] = {\n    id: def.id,\n    comparison: def.comparison,\n  };\n  return acc;\n}, {} as Record<string, { id: string; comparison?: boolean }>);\n\n// Not sure about this one. It could also be a more generic 'Simple math operation' where user specifies\n// both the operator and the operand in a single input\nexport const binaryScalarOperations: QueryBuilderOperationDef[] = binaryScalarDefs.map((opDef) => {\n  const params: QueryBuilderOperationParamDef[] = [{ name: 'Value', type: 'number' }];\n  const defaultParams: any[] = [2];\n  if (opDef.comparison) {\n    params.push({\n      name: 'Bool',\n      type: 'boolean',\n      description: 'If checked comparison will return 0 or 1 for the value rather than filtering.',\n    });\n    defaultParams.push(false);\n  }\n\n  return {\n    id: opDef.id,\n    name: opDef.name,\n    params,\n    defaultParams,\n    alternativesKey: 'binary scalar operations',\n    category: PromVisualQueryOperationCategory.BinaryOps,\n    renderer: getSimpleBinaryRenderer(opDef.sign),\n    addOperationHandler: defaultAddOperationHandler,\n  };\n});\n\nfunction getSimpleBinaryRenderer(operator: string) {\n  return function binaryRenderer(model: QueryBuilderOperation, def: QueryBuilderOperationDef, innerExpr: string) {\n    let param = model.params[0];\n    let bool = '';\n    if (model.params.length === 2) {\n      bool = model.params[1] ? ' bool' : '';\n    }\n\n    return `${innerExpr} ${operator}${bool} ${param}`;\n  };\n}\n","import React, { useState } from 'react';\n\nimport { DataSourceApi, SelectableValue, toOption } from '@grafana/data';\nimport { Select } from '@grafana/ui';\n\nimport { PrometheusDatasource } from '../../datasource';\nimport { promQueryModeller } from '../PromQueryModeller';\nimport { getOperationParamId } from '../shared/operationUtils';\nimport { QueryBuilderLabelFilter, QueryBuilderOperationParamEditorProps } from '../shared/types';\nimport { PromVisualQuery } from '../types';\n\nexport function LabelParamEditor({\n  onChange,\n  index,\n  operationIndex,\n  value,\n  query,\n  datasource,\n}: QueryBuilderOperationParamEditorProps) {\n  const [state, setState] = useState<{\n    options?: Array<SelectableValue<any>>;\n    isLoading?: boolean;\n  }>({});\n\n  return (\n    <Select\n      inputId={getOperationParamId(operationIndex, index)}\n      menuShouldPortal\n      autoFocus={value === '' ? true : undefined}\n      openMenuOnFocus\n      onOpenMenu={async () => {\n        setState({ isLoading: true });\n        const options = await loadGroupByLabels(query, datasource);\n        setState({ options, isLoading: undefined });\n      }}\n      isLoading={state.isLoading}\n      allowCustomValue\n      noOptionsMessage=\"No labels found\"\n      loadingMessage=\"Loading labels\"\n      options={state.options}\n      value={toOption(value as string)}\n      onChange={(value) => onChange(index, value.value!)}\n    />\n  );\n}\n\nasync function loadGroupByLabels(\n  query: PromVisualQuery,\n  datasource: DataSourceApi\n): Promise<Array<SelectableValue<any>>> {\n  let labels: QueryBuilderLabelFilter[] = query.labels;\n\n  // This function is used by both Prometheus and Loki and this the only difference\n  if (datasource instanceof PrometheusDatasource) {\n    labels = [{ label: '__name__', op: '=', value: query.metric }, ...query.labels];\n  }\n\n  const expr = promQueryModeller.renderLabels(labels);\n  const result = await datasource.languageProvider.fetchSeriesLabels(expr);\n\n  return Object.keys(result).map((x) => ({\n    label: x,\n    value: x,\n  }));\n}\n","import { SyntaxNode } from '@lezer/common';\nimport { parser } from 'lezer-promql';\n\nimport { binaryScalarOperatorToOperatorName } from './binaryScalarOperations';\nimport {\n  ErrorName,\n  getAllByType,\n  getLeftMostChild,\n  getString,\n  makeBinOp,\n  makeError,\n  replaceVariables,\n} from './shared/parsingUtils';\nimport { QueryBuilderLabelFilter, QueryBuilderOperation } from './shared/types';\nimport { PromVisualQuery, PromVisualQueryBinary } from './types';\n\n/**\n * Parses a PromQL query into a visual query model.\n *\n * It traverses the tree and uses sort of state machine to update the query model. The query model is modified\n * during the traversal and sent to each handler as context.\n *\n * @param expr\n */\nexport function buildVisualQueryFromString(expr: string): Context {\n  const replacedExpr = replaceVariables(expr);\n  const tree = parser.parse(replacedExpr);\n  const node = tree.topNode;\n\n  // This will be modified in the handlers.\n  const visQuery: PromVisualQuery = {\n    metric: '',\n    labels: [],\n    operations: [],\n  };\n  const context: Context = {\n    query: visQuery,\n    errors: [],\n  };\n\n  try {\n    handleExpression(replacedExpr, node, context);\n  } catch (err) {\n    // Not ideal to log it here, but otherwise we would lose the stack trace.\n    console.error(err);\n    context.errors.push({\n      text: err.message,\n    });\n  }\n\n  // If we have empty query, we want to reset errors\n  if (isEmptyQuery(context.query)) {\n    context.errors = [];\n  }\n  return context;\n}\n\ninterface ParsingError {\n  text: string;\n  from?: number;\n  to?: number;\n  parentType?: string;\n}\n\ninterface Context {\n  query: PromVisualQuery;\n  errors: ParsingError[];\n}\n\n/**\n * Handler for default state. It will traverse the tree and call the appropriate handler for each node. The node\n * handled here does not necessarily need to be of type == Expr.\n * @param expr\n * @param node\n * @param context\n */\nexport function handleExpression(expr: string, node: SyntaxNode, context: Context) {\n  const visQuery = context.query;\n  switch (node.name) {\n    case 'MetricIdentifier': {\n      // Expectation is that there is only one of those per query.\n      visQuery.metric = getString(expr, node);\n      break;\n    }\n\n    case 'LabelMatcher': {\n      // Same as MetricIdentifier should be just one per query.\n      visQuery.labels.push(getLabel(expr, node));\n      const err = node.getChild(ErrorName);\n      if (err) {\n        context.errors.push(makeError(expr, err));\n      }\n      break;\n    }\n\n    case 'FunctionCall': {\n      handleFunction(expr, node, context);\n      break;\n    }\n\n    case 'AggregateExpr': {\n      handleAggregation(expr, node, context);\n      break;\n    }\n\n    case 'BinaryExpr': {\n      handleBinary(expr, node, context);\n      break;\n    }\n\n    case ErrorName: {\n      if (isIntervalVariableError(node)) {\n        break;\n      }\n      context.errors.push(makeError(expr, node));\n      break;\n    }\n\n    default: {\n      if (node.name === 'ParenExpr') {\n        // We don't support parenthesis in the query to group expressions. We just report error but go on with the\n        // parsing.\n        context.errors.push(makeError(expr, node));\n      }\n      // Any other nodes we just ignore and go to it's children. This should be fine as there are lot's of wrapper\n      // nodes that can be skipped.\n      // TODO: there are probably cases where we will just skip nodes we don't support and we should be able to\n      //  detect those and report back.\n      let child = node.firstChild;\n      while (child) {\n        handleExpression(expr, child, context);\n        child = child.nextSibling;\n      }\n    }\n  }\n}\n\nfunction isIntervalVariableError(node: SyntaxNode) {\n  return node.prevSibling?.name === 'Expr' && node.prevSibling?.firstChild?.name === 'VectorSelector';\n}\n\nfunction getLabel(expr: string, node: SyntaxNode): QueryBuilderLabelFilter {\n  const label = getString(expr, node.getChild('LabelName'));\n  const op = getString(expr, node.getChild('MatchOp'));\n  const value = getString(expr, node.getChild('StringLiteral')).replace(/\"/g, '');\n  return {\n    label,\n    op,\n    value,\n  };\n}\n\nconst rangeFunctions = ['changes', 'rate', 'irate', 'increase', 'delta'];\n/**\n * Handle function call which is usually and identifier and its body > arguments.\n * @param expr\n * @param node\n * @param context\n */\nfunction handleFunction(expr: string, node: SyntaxNode, context: Context) {\n  const visQuery = context.query;\n  const nameNode = node.getChild('FunctionIdentifier');\n  const funcName = getString(expr, nameNode);\n\n  const body = node.getChild('FunctionCallBody');\n  const callArgs = body!.getChild('FunctionCallArgs');\n  const params = [];\n  let interval = '';\n\n  // This is a bit of a shortcut to get the interval argument. Reasons are\n  // - interval is not part of the function args per promQL grammar but we model it as argument for the function in\n  //   the query model.\n  // - it is easier to handle template variables this way as template variable is an error for the parser\n  if (rangeFunctions.includes(funcName) || funcName.endsWith('_over_time')) {\n    let match = getString(expr, node).match(/\\[(.+)\\]/);\n    if (match?.[1]) {\n      interval = match[1];\n      params.push(match[1]);\n    }\n  }\n\n  const op = { id: funcName, params };\n  // We unshift operations to keep the more natural order that we want to have in the visual query editor.\n  visQuery.operations.unshift(op);\n\n  if (callArgs) {\n    if (getString(expr, callArgs) === interval + ']') {\n      // This is a special case where we have a function with a single argument and it is the interval.\n      // This happens when you start adding operations in query builder and did not set a metric yet.\n      return;\n    }\n    updateFunctionArgs(expr, callArgs, context, op);\n  }\n}\n\n/**\n * Handle aggregation as they are distinct type from other functions.\n * @param expr\n * @param node\n * @param context\n */\nfunction handleAggregation(expr: string, node: SyntaxNode, context: Context) {\n  const visQuery = context.query;\n  const nameNode = node.getChild('AggregateOp');\n  let funcName = getString(expr, nameNode);\n\n  const modifier = node.getChild('AggregateModifier');\n  const labels = [];\n\n  if (modifier) {\n    const byModifier = modifier.getChild(`By`);\n    if (byModifier && funcName) {\n      funcName = `__${funcName}_by`;\n    }\n\n    const withoutModifier = modifier.getChild(`Without`);\n    if (withoutModifier) {\n      funcName = `__${funcName}_without`;\n    }\n\n    labels.push(...getAllByType(expr, modifier, 'GroupingLabel'));\n  }\n\n  const body = node.getChild('FunctionCallBody');\n  const callArgs = body!.getChild('FunctionCallArgs');\n\n  const op: QueryBuilderOperation = { id: funcName, params: [] };\n  visQuery.operations.unshift(op);\n  updateFunctionArgs(expr, callArgs, context, op);\n  // We add labels after params in the visual query editor.\n  op.params.push(...labels);\n}\n\n/**\n * Handle (probably) all types of arguments that function or aggregation can have.\n *\n *  FunctionCallArgs are nested bit weirdly basically its [firstArg, ...rest] where rest is again FunctionCallArgs so\n *  we cannot just get all the children and iterate them as arguments we have to again recursively traverse through\n *  them.\n *\n * @param expr\n * @param node\n * @param context\n * @param op - We need the operation to add the params to as an additional context.\n */\nfunction updateFunctionArgs(expr: string, node: SyntaxNode | null, context: Context, op: QueryBuilderOperation) {\n  if (!node) {\n    return;\n  }\n  switch (node.name) {\n    // In case we have an expression we don't know what kind so we have to look at the child as it can be anything.\n    case 'Expr':\n    // FunctionCallArgs are nested bit weirdly as mentioned so we have to go one deeper in this case.\n    case 'FunctionCallArgs': {\n      let child = node.firstChild;\n      while (child) {\n        updateFunctionArgs(expr, child, context, op);\n        child = child.nextSibling;\n      }\n      break;\n    }\n\n    case 'NumberLiteral': {\n      op.params.push(parseFloat(getString(expr, node)));\n      break;\n    }\n\n    case 'StringLiteral': {\n      op.params.push(getString(expr, node).replace(/\"/g, ''));\n      break;\n    }\n\n    default: {\n      // Means we get to something that does not seem like simple function arg and is probably nested query so jump\n      // back to main context\n      handleExpression(expr, node, context);\n    }\n  }\n}\n\n/**\n * Right now binary expressions can be represented in 2 way in visual query. As additional operation in case it is\n * just operation with scalar or it creates a binaryQuery when it's 2 queries.\n * @param expr\n * @param node\n * @param context\n */\nfunction handleBinary(expr: string, node: SyntaxNode, context: Context) {\n  const visQuery = context.query;\n  const left = node.firstChild!;\n  const op = getString(expr, left.nextSibling);\n  const binModifier = getBinaryModifier(expr, node.getChild('BinModifiers'));\n\n  const right = node.lastChild!;\n\n  const opDef = binaryScalarOperatorToOperatorName[op];\n\n  const leftNumber = left.getChild('NumberLiteral');\n  const rightNumber = right.getChild('NumberLiteral');\n\n  const rightBinary = right.getChild('BinaryExpr');\n\n  if (leftNumber) {\n    // TODO: this should be already handled in case parent is binary expression as it has to be added to parent\n    //  if query starts with a number that isn't handled now.\n  } else {\n    // If this is binary we don't really know if there is a query or just chained scalars. So\n    // we have to traverse a bit deeper to know\n    handleExpression(expr, left, context);\n  }\n\n  if (rightNumber) {\n    visQuery.operations.push(makeBinOp(opDef, expr, right, !!binModifier?.isBool));\n  } else if (rightBinary) {\n    // Due to the way binary ops are parsed we can get a binary operation on the right that starts with a number which\n    // is a factor for a current binary operation. So we have to add it as an operation now.\n    const leftMostChild = getLeftMostChild(right);\n    if (leftMostChild?.name === 'NumberLiteral') {\n      visQuery.operations.push(makeBinOp(opDef, expr, leftMostChild, !!binModifier?.isBool));\n    }\n\n    // If we added the first number literal as operation here we still can continue and handle the rest as the first\n    // number will be just skipped.\n    handleExpression(expr, right, context);\n  } else {\n    visQuery.binaryQueries = visQuery.binaryQueries || [];\n    const binQuery: PromVisualQueryBinary = {\n      operator: op,\n      query: {\n        metric: '',\n        labels: [],\n        operations: [],\n      },\n    };\n    if (binModifier?.isMatcher) {\n      binQuery.vectorMatchesType = binModifier.matchType;\n      binQuery.vectorMatches = binModifier.matches;\n    }\n    visQuery.binaryQueries.push(binQuery);\n    handleExpression(expr, right, {\n      query: binQuery.query,\n      errors: context.errors,\n    });\n  }\n}\n\nfunction getBinaryModifier(\n  expr: string,\n  node: SyntaxNode | null\n):\n  | { isBool: true; isMatcher: false }\n  | { isBool: false; isMatcher: true; matches: string; matchType: 'ignoring' | 'on' }\n  | undefined {\n  if (!node) {\n    return undefined;\n  }\n  if (node.getChild('Bool')) {\n    return { isBool: true, isMatcher: false };\n  } else {\n    const matcher = node.getChild('OnOrIgnoring');\n    if (!matcher) {\n      // Not sure what this could be, maybe should be an error.\n      return undefined;\n    }\n    const labels = getString(expr, matcher.getChild('GroupingLabels')?.getChild('GroupingLabelList'));\n    return {\n      isMatcher: true,\n      isBool: false,\n      matches: labels,\n      matchType: matcher.getChild('On') ? 'on' : 'ignoring',\n    };\n  }\n}\n\nfunction isEmptyQuery(query: PromVisualQuery) {\n  if (query.labels.length === 0 && query.operations.length === 0 && !query.metric) {\n    return true;\n  }\n  return false;\n}\n","import React, { useEffect } from 'react';\n\nimport { Input, measureText } from '@grafana/ui';\nimport { Props as InputProps } from '@grafana/ui/src/components/Input/Input';\nexport interface Props extends InputProps {\n  /** Sets the min-width to a multiple of 8px. Default value is 10*/\n  minWidth?: number;\n  /** Sets the max-width to a multiple of 8px.*/\n  maxWidth?: number;\n  /** onChange function that will be run on onBlur and onKeyPress with enter*/\n  onCommitChange?: (event: React.FormEvent<HTMLInputElement>) => void;\n}\n\nexport const AutoSizeInput = React.forwardRef<HTMLInputElement, Props>((props, ref) => {\n  const { defaultValue = '', minWidth = 10, maxWidth, onCommitChange, onKeyDown, onBlur, ...restProps } = props;\n  const [value, setValue] = React.useState(defaultValue);\n  const [inputWidth, setInputWidth] = React.useState(minWidth);\n\n  useEffect(() => {\n    setInputWidth(getWidthFor(value.toString(), minWidth, maxWidth));\n  }, [value, maxWidth, minWidth]);\n\n  return (\n    <Input\n      {...restProps}\n      ref={ref}\n      value={value.toString()}\n      onChange={(event) => {\n        setValue(event.currentTarget.value);\n      }}\n      width={inputWidth}\n      onBlur={(event) => {\n        if (onCommitChange) {\n          onCommitChange(event);\n        }\n        if (onBlur) {\n          onBlur(event);\n        }\n      }}\n      onKeyDown={(event) => {\n        if (event.key === 'Enter' && onCommitChange) {\n          onCommitChange(event);\n        }\n        if (onKeyDown) {\n          onKeyDown(event);\n        }\n      }}\n      data-testid={'autosize-input'}\n    />\n  );\n});\n\nfunction getWidthFor(value: string, minWidth: number, maxWidth: number | undefined): number {\n  if (!value) {\n    return minWidth;\n  }\n\n  const extraSpace = 3;\n  const realWidth = measureText(value.toString(), 14).width / 8 + extraSpace;\n\n  if (minWidth && realWidth < minWidth) {\n    return minWidth;\n  }\n\n  if (maxWidth && realWidth > maxWidth) {\n    return realWidth;\n  }\n\n  return realWidth;\n}\n\nAutoSizeInput.displayName = 'AutoSizeInput';\n","import React, { useState } from 'react';\n\nimport { SelectableValue, toOption } from '@grafana/data';\nimport { AccessoryButton, InputGroup } from '@grafana/experimental';\nimport { Select } from '@grafana/ui';\n\nimport { QueryBuilderLabelFilter } from './types';\n\nexport interface Props {\n  defaultOp: string;\n  item: Partial<QueryBuilderLabelFilter>;\n  onChange: (value: QueryBuilderLabelFilter) => void;\n  onGetLabelNames: (forLabel: Partial<QueryBuilderLabelFilter>) => Promise<SelectableValue[]>;\n  onGetLabelValues: (forLabel: Partial<QueryBuilderLabelFilter>) => Promise<SelectableValue[]>;\n  onDelete: () => void;\n}\n\nexport function LabelFilterItem({ item, defaultOp, onChange, onDelete, onGetLabelNames, onGetLabelValues }: Props) {\n  const [state, setState] = useState<{\n    labelNames?: SelectableValue[];\n    labelValues?: SelectableValue[];\n    isLoadingLabelNames?: boolean;\n    isLoadingLabelValues?: boolean;\n  }>({});\n\n  const isMultiSelect = () => {\n    return item.op === operators[0].label;\n  };\n\n  const getSelectOptionsFromString = (item?: string): string[] => {\n    if (item) {\n      if (item.indexOf('|') > 0) {\n        return item.split('|');\n      }\n      return [item];\n    }\n    return [];\n  };\n\n  const getOptions = (): SelectableValue[] => {\n    return [...getSelectOptionsFromString(item?.value).map(toOption), ...(state.labelValues ?? [])];\n  };\n\n  return (\n    <div data-testid=\"prometheus-dimensions-filter-item\">\n      <InputGroup>\n        <Select\n          inputId=\"prometheus-dimensions-filter-item-key\"\n          width=\"auto\"\n          value={item.label ? toOption(item.label) : null}\n          allowCustomValue\n          onOpenMenu={async () => {\n            setState({ isLoadingLabelNames: true });\n            const labelNames = await onGetLabelNames(item);\n            setState({ labelNames, isLoadingLabelNames: undefined });\n          }}\n          isLoading={state.isLoadingLabelNames}\n          options={state.labelNames}\n          onChange={(change) => {\n            if (change.label) {\n              onChange({\n                ...item,\n                op: item.op ?? defaultOp,\n                label: change.label,\n              } as any as QueryBuilderLabelFilter);\n            }\n          }}\n        />\n\n        <Select\n          value={toOption(item.op ?? defaultOp)}\n          options={operators}\n          width=\"auto\"\n          onChange={(change) => {\n            if (change.value != null) {\n              onChange({ ...item, op: change.value } as any as QueryBuilderLabelFilter);\n            }\n          }}\n        />\n\n        <Select\n          inputId=\"prometheus-dimensions-filter-item-value\"\n          width=\"auto\"\n          value={\n            isMultiSelect()\n              ? getSelectOptionsFromString(item?.value).map(toOption)\n              : getSelectOptionsFromString(item?.value).map(toOption)[0]\n          }\n          allowCustomValue\n          onOpenMenu={async () => {\n            setState({ isLoadingLabelValues: true });\n            const labelValues = await onGetLabelValues(item);\n            setState({\n              ...state,\n              labelValues,\n              isLoadingLabelValues: undefined,\n            });\n          }}\n          isMulti={isMultiSelect()}\n          isLoading={state.isLoadingLabelValues}\n          options={getOptions()}\n          onChange={(change) => {\n            if (change.value) {\n              onChange({ ...item, value: change.value, op: item.op ?? defaultOp } as any as QueryBuilderLabelFilter);\n            } else {\n              const changes = change\n                .map((change: any) => {\n                  return change.label;\n                })\n                .join('|');\n              onChange({ ...item, value: changes, op: item.op ?? defaultOp } as any as QueryBuilderLabelFilter);\n            }\n          }}\n        />\n        <AccessoryButton aria-label=\"remove\" icon=\"times\" variant=\"secondary\" onClick={onDelete} />\n      </InputGroup>\n    </div>\n  );\n}\n\nconst operators = [\n  { label: '=~', value: '=~' },\n  { label: '=', value: '=' },\n  { label: '!=', value: '!=' },\n  { label: '!~', value: '!~' },\n];\n","import { isEqual } from 'lodash';\nimport React, { useEffect, useState } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { EditorField, EditorFieldGroup, EditorList } from '@grafana/experimental';\n\nimport { QueryBuilderLabelFilter } from '../shared/types';\n\nimport { LabelFilterItem } from './LabelFilterItem';\n\nexport interface Props {\n  labelsFilters: QueryBuilderLabelFilter[];\n  onChange: (labelFilters: QueryBuilderLabelFilter[]) => void;\n  onGetLabelNames: (forLabel: Partial<QueryBuilderLabelFilter>) => Promise<SelectableValue[]>;\n  onGetLabelValues: (forLabel: Partial<QueryBuilderLabelFilter>) => Promise<SelectableValue[]>;\n}\n\nexport function LabelFilters({ labelsFilters, onChange, onGetLabelNames, onGetLabelValues }: Props) {\n  const defaultOp = '=';\n  const [items, setItems] = useState<Array<Partial<QueryBuilderLabelFilter>>>([{ op: defaultOp }]);\n\n  useEffect(() => {\n    if (labelsFilters.length > 0) {\n      setItems(labelsFilters);\n    } else {\n      setItems([{ op: defaultOp }]);\n    }\n  }, [labelsFilters]);\n\n  const onLabelsChange = (newItems: Array<Partial<QueryBuilderLabelFilter>>) => {\n    setItems(newItems);\n\n    // Extract full label filters with both label & value\n    const newLabels = newItems.filter((x) => x.label != null && x.value != null);\n    if (!isEqual(newLabels, labelsFilters)) {\n      onChange(newLabels as QueryBuilderLabelFilter[]);\n    }\n  };\n\n  return (\n    <EditorFieldGroup>\n      <EditorField label=\"Labels\">\n        <EditorList\n          items={items}\n          onChange={onLabelsChange}\n          renderItem={(item, onChangeItem, onDelete) => (\n            <LabelFilterItem\n              item={item}\n              defaultOp={defaultOp}\n              onChange={onChangeItem}\n              onDelete={onDelete}\n              onGetLabelNames={onGetLabelNames}\n              onGetLabelValues={onGetLabelValues}\n            />\n          )}\n        />\n      </EditorField>\n    </EditorFieldGroup>\n  );\n}\n","import { Registry } from '@grafana/data';\n\nimport { PromVisualQueryOperationCategory } from '../types';\n\nimport { QueryBuilderLabelFilter, QueryBuilderOperation, QueryBuilderOperationDef, VisualQueryModeller } from './types';\n\nexport interface VisualQueryBinary<T> {\n  operator: string;\n  vectorMatchesType?: 'on' | 'ignoring';\n  vectorMatches?: string;\n  query: T;\n}\n\nexport interface PromLokiVisualQuery {\n  metric?: string;\n  labels: QueryBuilderLabelFilter[];\n  operations: QueryBuilderOperation[];\n  binaryQueries?: Array<VisualQueryBinary<PromLokiVisualQuery>>;\n}\n\nexport abstract class LokiAndPromQueryModellerBase implements VisualQueryModeller {\n  protected operationsRegisty: Registry<QueryBuilderOperationDef>;\n  private categories: string[] = [];\n\n  constructor(getOperations: () => QueryBuilderOperationDef[]) {\n    this.operationsRegisty = new Registry<QueryBuilderOperationDef>(getOperations);\n  }\n\n  protected setOperationCategories(categories: string[]) {\n    this.categories = categories;\n  }\n\n  getOperationsForCategory(category: string) {\n    return this.operationsRegisty.list().filter((op) => op.category === category && !op.hideFromList);\n  }\n\n  getAlternativeOperations(key: string) {\n    return this.operationsRegisty.list().filter((op) => op.alternativesKey === key);\n  }\n\n  getCategories() {\n    return this.categories;\n  }\n\n  getOperationDef(id: string): QueryBuilderOperationDef | undefined {\n    return this.operationsRegisty.getIfExists(id);\n  }\n\n  renderOperations(queryString: string, operations: QueryBuilderOperation[]) {\n    for (const operation of operations) {\n      const def = this.operationsRegisty.getIfExists(operation.id);\n      if (!def) {\n        throw new Error(`Could not find operation ${operation.id} in the registry`);\n      }\n      queryString = def.renderer(operation, def, queryString);\n    }\n\n    return queryString;\n  }\n\n  renderBinaryQueries(queryString: string, binaryQueries?: Array<VisualQueryBinary<PromLokiVisualQuery>>) {\n    if (binaryQueries) {\n      for (const binQuery of binaryQueries) {\n        queryString = `${this.renderBinaryQuery(queryString, binQuery)}`;\n      }\n    }\n    return queryString;\n  }\n\n  private renderBinaryQuery(leftOperand: string, binaryQuery: VisualQueryBinary<PromLokiVisualQuery>) {\n    let result = leftOperand + ` ${binaryQuery.operator} `;\n\n    if (binaryQuery.vectorMatches) {\n      result += `${binaryQuery.vectorMatchesType}(${binaryQuery.vectorMatches}) `;\n    }\n\n    return result + this.renderQuery(binaryQuery.query, true);\n  }\n\n  renderLabels(labels: QueryBuilderLabelFilter[]) {\n    if (labels.length === 0) {\n      return '';\n    }\n\n    let expr = '{';\n    for (const filter of labels) {\n      if (expr !== '{') {\n        expr += ', ';\n      }\n\n      expr += `${filter.label}${filter.op}\"${filter.value}\"`;\n    }\n\n    return expr + `}`;\n  }\n\n  renderQuery(query: PromLokiVisualQuery, nested?: boolean) {\n    let queryString = `${query.metric ?? ''}${this.renderLabels(query.labels)}`;\n    queryString = this.renderOperations(queryString, query.operations);\n\n    if (!nested && this.hasBinaryOp(query) && Boolean(query.binaryQueries?.length)) {\n      queryString = `(${queryString})`;\n    }\n\n    queryString = this.renderBinaryQueries(queryString, query.binaryQueries);\n\n    if (nested && (this.hasBinaryOp(query) || Boolean(query.binaryQueries?.length))) {\n      queryString = `(${queryString})`;\n    }\n\n    return queryString;\n  }\n\n  hasBinaryOp(query: PromLokiVisualQuery): boolean {\n    return (\n      query.operations.find((op) => {\n        const def = this.getOperationDef(op.id);\n        return def?.category === PromVisualQueryOperationCategory.BinaryOps;\n      }) !== undefined\n    );\n  }\n}\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2, renderMarkdown } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\n\nexport interface Props {\n  title: string;\n  children?: React.ReactNode;\n  markdown?: string;\n  stepNumber: number;\n}\n\nexport function OperationExplainedBox({ title, stepNumber, markdown, children }: Props) {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.box}>\n      <div className={styles.stepNumber}>{stepNumber}</div>\n      <div className={styles.boxInner}>\n        <div className={styles.header}>\n          <span>{title}</span>\n        </div>\n        <div className={styles.body}>\n          {markdown && <div dangerouslySetInnerHTML={{ __html: renderMarkdown(markdown) }}></div>}\n          {children}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    box: css({\n      background: theme.colors.background.secondary,\n      padding: theme.spacing(1),\n      borderRadius: theme.shape.borderRadius(),\n      position: 'relative',\n      marginBottom: theme.spacing(0.5),\n    }),\n    boxInner: css({\n      marginLeft: theme.spacing(4),\n    }),\n    stepNumber: css({\n      fontWeight: theme.typography.fontWeightMedium,\n      background: theme.colors.secondary.main,\n      width: '20px',\n      height: '20px',\n      borderRadius: '50%',\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      position: 'absolute',\n      top: '10px',\n      left: '11px',\n      fontSize: theme.typography.bodySmall.fontSize,\n    }),\n    header: css({\n      paddingBottom: theme.spacing(0.5),\n      display: 'flex',\n      alignItems: 'center',\n      fontFamily: theme.typography.fontFamilyMonospace,\n    }),\n    body: css({\n      color: theme.colors.text.secondary,\n      'p:last-child': {\n        margin: 0,\n      },\n      a: {\n        color: theme.colors.text.link,\n        textDecoration: 'underline',\n      },\n    }),\n  };\n};\n","import { css } from '@emotion/css';\nimport React, { useState } from 'react';\nimport { usePopperTooltip } from 'react-popper-tooltip';\n\nimport { GrafanaTheme2, renderMarkdown } from '@grafana/data';\nimport { FlexItem } from '@grafana/experimental';\nimport { Button, Portal, useStyles2 } from '@grafana/ui';\n\nimport { QueryBuilderOperation, QueryBuilderOperationDef } from './types';\n\nexport interface Props {\n  operation: QueryBuilderOperation;\n  def: QueryBuilderOperationDef;\n}\n\nexport const OperationInfoButton = React.memo<Props>(({ def, operation }) => {\n  const styles = useStyles2(getStyles);\n  const [show, setShow] = useState(false);\n  const { getTooltipProps, setTooltipRef, setTriggerRef, visible } = usePopperTooltip({\n    placement: 'top',\n    visible: show,\n    offset: [0, 16],\n    onVisibleChange: setShow,\n    interactive: true,\n    trigger: ['click'],\n  });\n\n  return (\n    <>\n      <Button\n        title=\"Click to show description\"\n        ref={setTriggerRef}\n        icon=\"info-circle\"\n        size=\"sm\"\n        variant=\"secondary\"\n        fill=\"text\"\n      />\n      {visible && (\n        <Portal>\n          <div ref={setTooltipRef} {...getTooltipProps()} className={styles.docBox}>\n            <div className={styles.docBoxHeader}>\n              <span>{def.renderer(operation, def, '<expr>')}</span>\n              <FlexItem grow={1} />\n              <Button\n                icon=\"times\"\n                onClick={() => setShow(false)}\n                fill=\"text\"\n                variant=\"secondary\"\n                title=\"Remove operation\"\n              />\n            </div>\n            <div\n              className={styles.docBoxBody}\n              dangerouslySetInnerHTML={{ __html: getOperationDocs(def, operation) }}\n            ></div>\n          </div>\n        </Portal>\n      )}\n    </>\n  );\n});\n\nOperationInfoButton.displayName = 'OperationDocs';\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    docBox: css({\n      overflow: 'hidden',\n      background: theme.colors.background.primary,\n      border: `1px solid ${theme.colors.border.strong}`,\n      boxShadow: theme.shadows.z3,\n      maxWidth: '600px',\n      padding: theme.spacing(1),\n      borderRadius: theme.shape.borderRadius(),\n      zIndex: theme.zIndex.tooltip,\n    }),\n    docBoxHeader: css({\n      fontSize: theme.typography.h5.fontSize,\n      fontFamily: theme.typography.fontFamilyMonospace,\n      paddingBottom: theme.spacing(1),\n      display: 'flex',\n      alignItems: 'center',\n    }),\n    docBoxBody: css({\n      // The markdown paragraph has a marginBottom this removes it\n      marginBottom: theme.spacing(-1),\n      color: theme.colors.text.secondary,\n    }),\n    signature: css({\n      fontSize: theme.typography.bodySmall.fontSize,\n      fontFamily: theme.typography.fontFamilyMonospace,\n    }),\n    dropdown: css({\n      opacity: 0,\n      color: theme.colors.text.secondary,\n    }),\n  };\n};\nfunction getOperationDocs(def: QueryBuilderOperationDef, op: QueryBuilderOperation): string {\n  return renderMarkdown(def.explainHandler ? def.explainHandler(op, def) : def.documentation ?? 'no docs');\n}\n","import { css } from '@emotion/css';\nimport React, { useState } from 'react';\n\nimport { GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport { FlexItem } from '@grafana/experimental';\nimport { Button, Select, useStyles2 } from '@grafana/ui';\n\nimport { OperationInfoButton } from './OperationInfoButton';\nimport { VisualQueryModeller, QueryBuilderOperation, QueryBuilderOperationDef } from './types';\n\nexport interface Props {\n  operation: QueryBuilderOperation;\n  def: QueryBuilderOperationDef;\n  index: number;\n  queryModeller: VisualQueryModeller;\n  dragHandleProps: any;\n  onChange: (index: number, update: QueryBuilderOperation) => void;\n  onRemove: (index: number) => void;\n}\n\ninterface State {\n  isOpen?: boolean;\n  alternatives?: Array<SelectableValue<QueryBuilderOperationDef>>;\n}\n\nexport const OperationHeader = React.memo<Props>(\n  ({ operation, def, index, onChange, onRemove, queryModeller, dragHandleProps }) => {\n    const styles = useStyles2(getStyles);\n    const [state, setState] = useState<State>({});\n\n    const onToggleSwitcher = () => {\n      if (state.isOpen) {\n        setState({ ...state, isOpen: false });\n      } else {\n        const alternatives = queryModeller\n          .getAlternativeOperations(def.alternativesKey!)\n          .map((alt) => ({ label: alt.name, value: alt }));\n        setState({ isOpen: true, alternatives });\n      }\n    };\n\n    return (\n      <div className={styles.header}>\n        {!state.isOpen && (\n          <>\n            <div {...dragHandleProps}>{def.name ?? def.id}</div>\n            <FlexItem grow={1} />\n            <div className={`${styles.operationHeaderButtons} operation-header-show-on-hover`}>\n              <Button\n                icon=\"angle-down\"\n                size=\"sm\"\n                onClick={onToggleSwitcher}\n                fill=\"text\"\n                variant=\"secondary\"\n                title=\"Click to view alternative operations\"\n              />\n              <OperationInfoButton def={def} operation={operation} />\n              <Button\n                icon=\"times\"\n                size=\"sm\"\n                onClick={() => onRemove(index)}\n                fill=\"text\"\n                variant=\"secondary\"\n                title=\"Remove operation\"\n              />\n            </div>\n          </>\n        )}\n        {state.isOpen && (\n          <div className={styles.selectWrapper}>\n            <Select\n              autoFocus\n              openMenuOnFocus\n              placeholder=\"Replace with\"\n              options={state.alternatives}\n              isOpen={true}\n              onCloseMenu={onToggleSwitcher}\n              onChange={(value) => {\n                if (value.value) {\n                  // Operation should exist if it is selectable\n                  const newDef = queryModeller.getOperationDef(value.value.id)!;\n                  let changedOp = { ...operation, id: value.value.id };\n                  onChange(index, def.changeTypeHandler ? def.changeTypeHandler(changedOp, newDef) : changedOp);\n                }\n              }}\n            />\n          </div>\n        )}\n      </div>\n    );\n  }\n);\n\nOperationHeader.displayName = 'OperationHeader';\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    header: css({\n      borderBottom: `1px solid ${theme.colors.border.medium}`,\n      padding: theme.spacing(0.5, 0.5, 0.5, 1),\n      display: 'flex',\n      alignItems: 'center',\n      '&:hover .operation-header-show-on-hover': css({\n        opacity: 1,\n      }),\n    }),\n    operationHeaderButtons: css({\n      opacity: 0,\n      transition: theme.transitions.create(['opacity'], {\n        duration: theme.transitions.duration.short,\n      }),\n    }),\n    selectWrapper: css({\n      paddingRight: theme.spacing(2),\n    }),\n  };\n};\n","import React, { ComponentType } from 'react';\n\nimport { SelectableValue, toOption } from '@grafana/data';\nimport { Checkbox, Select } from '@grafana/ui';\n\nimport { QueryBuilderOperationParamDef, QueryBuilderOperationParamEditorProps } from '../shared/types';\n\nimport { AutoSizeInput } from './AutoSizeInput';\nimport { getOperationParamId } from './operationUtils';\n\nexport function getOperationParamEditor(\n  paramDef: QueryBuilderOperationParamDef\n): ComponentType<QueryBuilderOperationParamEditorProps> {\n  if (paramDef.editor) {\n    return paramDef.editor;\n  }\n\n  if (paramDef.options) {\n    return SelectInputParamEditor;\n  }\n\n  switch (paramDef.type) {\n    case 'boolean':\n      return BoolInputParamEditor;\n    case 'number':\n    case 'string':\n    default:\n      return SimpleInputParamEditor;\n  }\n}\n\nfunction SimpleInputParamEditor(props: QueryBuilderOperationParamEditorProps) {\n  return (\n    <AutoSizeInput\n      id={getOperationParamId(props.operationIndex, props.index)}\n      defaultValue={props.value?.toString()}\n      minWidth={props.paramDef.minWidth}\n      placeholder={props.paramDef.placeholder}\n      title={props.paramDef.description}\n      onCommitChange={(evt) => {\n        props.onChange(props.index, evt.currentTarget.value);\n      }}\n    />\n  );\n}\n\nfunction BoolInputParamEditor(props: QueryBuilderOperationParamEditorProps) {\n  return (\n    <Checkbox\n      id={getOperationParamId(props.operationIndex, props.index)}\n      value={props.value as boolean}\n      onChange={(evt) => props.onChange(props.index, evt.currentTarget.checked)}\n    />\n  );\n}\n\nfunction SelectInputParamEditor({\n  paramDef,\n  value,\n  index,\n  operationIndex,\n  onChange,\n}: QueryBuilderOperationParamEditorProps) {\n  let selectOptions = paramDef.options as Array<SelectableValue<any>>;\n\n  if (!selectOptions[0]?.label) {\n    selectOptions = paramDef.options!.map((option) => ({\n      label: option.toString(),\n      value: option as string,\n    }));\n  }\n\n  let valueOption = selectOptions.find((x) => x.value === value) ?? toOption(value as string);\n\n  return (\n    <Select\n      id={getOperationParamId(operationIndex, index)}\n      menuShouldPortal\n      value={valueOption}\n      options={selectOptions}\n      placeholder={paramDef.placeholder}\n      allowCustomValue={true}\n      onChange={(value) => onChange(index, value.value!)}\n    />\n  );\n}\n","import { css, cx } from '@emotion/css';\nimport React, { useEffect, useState } from 'react';\nimport { Draggable } from 'react-beautiful-dnd';\n\nimport { DataSourceApi, GrafanaTheme2 } from '@grafana/data';\nimport { Stack } from '@grafana/experimental';\nimport { Button, Icon, Tooltip, useStyles2 } from '@grafana/ui';\n\nimport {\n  VisualQueryModeller,\n  QueryBuilderOperation,\n  QueryBuilderOperationParamValue,\n  QueryBuilderOperationDef,\n  QueryBuilderOperationParamDef,\n} from '../shared/types';\n\nimport { OperationHeader } from './OperationHeader';\nimport { getOperationParamEditor } from './OperationParamEditor';\nimport { getOperationParamId } from './operationUtils';\n\nexport interface Props {\n  operation: QueryBuilderOperation;\n  index: number;\n  query: any;\n  datasource: DataSourceApi;\n  queryModeller: VisualQueryModeller;\n  onChange: (index: number, update: QueryBuilderOperation) => void;\n  onRemove: (index: number) => void;\n  onRunQuery: () => void;\n  highlight?: boolean;\n}\n\nexport function OperationEditor({\n  operation,\n  index,\n  onRemove,\n  onChange,\n  onRunQuery,\n  queryModeller,\n  query,\n  datasource,\n  highlight,\n}: Props) {\n  const styles = useStyles2(getStyles);\n  const def = queryModeller.getOperationDef(operation.id);\n  const shouldHighlight = useHighlight(highlight);\n\n  if (!def) {\n    return <span>Operation {operation.id} not found</span>;\n  }\n\n  const onParamValueChanged = (paramIdx: number, value: QueryBuilderOperationParamValue) => {\n    const update: QueryBuilderOperation = { ...operation, params: [...operation.params] };\n    update.params[paramIdx] = value;\n    callParamChangedThenOnChange(def, update, index, paramIdx, onChange);\n  };\n\n  const onAddRestParam = () => {\n    const update: QueryBuilderOperation = { ...operation, params: [...operation.params, ''] };\n    callParamChangedThenOnChange(def, update, index, operation.params.length, onChange);\n  };\n\n  const onRemoveRestParam = (paramIdx: number) => {\n    const update: QueryBuilderOperation = {\n      ...operation,\n      params: [...operation.params.slice(0, paramIdx), ...operation.params.slice(paramIdx + 1)],\n    };\n    callParamChangedThenOnChange(def, update, index, paramIdx, onChange);\n  };\n\n  const operationElements: React.ReactNode[] = [];\n\n  for (let paramIndex = 0; paramIndex < operation.params.length; paramIndex++) {\n    const paramDef = def.params[Math.min(def.params.length - 1, paramIndex)];\n    const Editor = getOperationParamEditor(paramDef);\n\n    operationElements.push(\n      <div className={styles.paramRow} key={`${paramIndex}-1`}>\n        {!paramDef.hideName && (\n          <div className={styles.paramName}>\n            <label htmlFor={getOperationParamId(index, paramIndex)}>{paramDef.name}</label>\n            {paramDef.description && (\n              <Tooltip placement=\"top\" content={paramDef.description} theme=\"info\">\n                <Icon name=\"info-circle\" size=\"sm\" className={styles.infoIcon} />\n              </Tooltip>\n            )}\n          </div>\n        )}\n        <div className={styles.paramValue}>\n          <Stack gap={0.5} direction=\"row\" alignItems=\"center\" wrap={false}>\n            <Editor\n              index={paramIndex}\n              paramDef={paramDef}\n              value={operation.params[paramIndex]}\n              operation={operation}\n              operationIndex={index}\n              onChange={onParamValueChanged}\n              onRunQuery={onRunQuery}\n              query={query}\n              datasource={datasource}\n            />\n            {paramDef.restParam && (operation.params.length > def.params.length || paramDef.optional) && (\n              <Button\n                data-testid={`operations.${index}.remove-rest-param`}\n                size=\"sm\"\n                fill=\"text\"\n                icon=\"times\"\n                variant=\"secondary\"\n                title={`Remove ${paramDef.name}`}\n                onClick={() => onRemoveRestParam(paramIndex)}\n              />\n            )}\n          </Stack>\n        </div>\n      </div>\n    );\n  }\n\n  // Handle adding button for rest params\n  let restParam: React.ReactNode | undefined;\n  if (def.params.length > 0) {\n    const lastParamDef = def.params[def.params.length - 1];\n    if (lastParamDef.restParam) {\n      restParam = renderAddRestParamButton(lastParamDef, onAddRestParam, index, operation.params.length, styles);\n    }\n  }\n\n  return (\n    <Draggable draggableId={`operation-${index}`} index={index}>\n      {(provided) => (\n        <div\n          className={cx(styles.card, shouldHighlight && styles.cardHighlight)}\n          ref={provided.innerRef}\n          {...provided.draggableProps}\n          data-testid={`operations.${index}.wrapper`}\n        >\n          <OperationHeader\n            operation={operation}\n            dragHandleProps={provided.dragHandleProps}\n            def={def}\n            index={index}\n            onChange={onChange}\n            onRemove={onRemove}\n            queryModeller={queryModeller}\n          />\n          <div className={styles.body}>{operationElements}</div>\n          {restParam}\n          {index < query.operations.length - 1 && (\n            <div className={styles.arrow}>\n              <div className={styles.arrowLine} />\n              <div className={styles.arrowArrow} />\n            </div>\n          )}\n        </div>\n      )}\n    </Draggable>\n  );\n}\n\n/**\n * When highlight is switched on makes sure it is switched of right away, so we just flash the highlight and then fade\n * out.\n * @param highlight\n */\nfunction useHighlight(highlight?: boolean) {\n  const [keepHighlight, setKeepHighlight] = useState(true);\n  useEffect(() => {\n    let t: any;\n    if (highlight) {\n      t = setTimeout(() => {\n        setKeepHighlight(false);\n      }, 1);\n    } else {\n      setKeepHighlight(true);\n    }\n\n    return () => clearTimeout(t);\n  }, [highlight]);\n\n  return keepHighlight && highlight;\n}\n\nfunction renderAddRestParamButton(\n  paramDef: QueryBuilderOperationParamDef,\n  onAddRestParam: () => void,\n  operationIndex: number,\n  paramIndex: number,\n  styles: OperationEditorStyles\n) {\n  return (\n    <div className={styles.restParam} key={`${paramIndex}-2`}>\n      <Button\n        size=\"sm\"\n        icon=\"plus\"\n        title={`Add ${paramDef.name}`}\n        variant=\"secondary\"\n        onClick={onAddRestParam}\n        data-testid={`operations.${operationIndex}.add-rest-param`}\n      >\n        {paramDef.name}\n      </Button>\n    </div>\n  );\n}\n\nfunction callParamChangedThenOnChange(\n  def: QueryBuilderOperationDef,\n  operation: QueryBuilderOperation,\n  operationIndex: number,\n  paramIndex: number,\n  onChange: (index: number, update: QueryBuilderOperation) => void\n) {\n  if (def.paramChangedHandler) {\n    onChange(operationIndex, def.paramChangedHandler(paramIndex, operation, def));\n  } else {\n    onChange(operationIndex, operation);\n  }\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    card: css({\n      background: theme.colors.background.primary,\n      border: `1px solid ${theme.colors.border.medium}`,\n      display: 'flex',\n      flexDirection: 'column',\n      cursor: 'grab',\n      borderRadius: theme.shape.borderRadius(1),\n      marginBottom: theme.spacing(1),\n      position: 'relative',\n      transition: 'all 1s ease-in 0s',\n    }),\n    cardHighlight: css({\n      boxShadow: `0px 0px 4px 0px ${theme.colors.primary.border}`,\n      border: `1px solid ${theme.colors.primary.border}`,\n    }),\n    infoIcon: css({\n      marginLeft: theme.spacing(0.5),\n      color: theme.colors.text.secondary,\n      ':hover': {\n        color: theme.colors.text.primary,\n      },\n    }),\n    body: css({\n      margin: theme.spacing(1, 1, 0.5, 1),\n      display: 'table',\n    }),\n    paramRow: css({\n      label: 'paramRow',\n      display: 'table-row',\n      verticalAlign: 'middle',\n    }),\n    paramName: css({\n      display: 'table-cell',\n      padding: theme.spacing(0, 1, 0, 0),\n      fontSize: theme.typography.bodySmall.fontSize,\n      fontWeight: theme.typography.fontWeightMedium,\n      verticalAlign: 'middle',\n      height: '32px',\n    }),\n    paramValue: css({\n      label: 'paramValue',\n      display: 'table-cell',\n      verticalAlign: 'middle',\n    }),\n    restParam: css({\n      padding: theme.spacing(0, 1, 1, 1),\n    }),\n    arrow: css({\n      position: 'absolute',\n      top: '0',\n      right: '-18px',\n      display: 'flex',\n    }),\n    arrowLine: css({\n      height: '2px',\n      width: '8px',\n      backgroundColor: theme.colors.border.strong,\n      position: 'relative',\n      top: '14px',\n    }),\n    arrowArrow: css({\n      width: 0,\n      height: 0,\n      borderTop: `5px solid transparent`,\n      borderBottom: `5px solid transparent`,\n      borderLeft: `7px solid ${theme.colors.border.strong}`,\n      position: 'relative',\n      top: '10px',\n    }),\n  };\n};\n\ntype OperationEditorStyles = ReturnType<typeof getStyles>;\n","import { css } from '@emotion/css';\nimport React, { useState } from 'react';\nimport { DragDropContext, Droppable, DropResult } from 'react-beautiful-dnd';\nimport { useMountedState, usePrevious } from 'react-use';\n\nimport { DataSourceApi, GrafanaTheme2 } from '@grafana/data';\nimport { Stack } from '@grafana/experimental';\nimport { Button, Cascader, CascaderOption, useStyles2 } from '@grafana/ui';\n\nimport { QueryBuilderOperation, QueryWithOperations, VisualQueryModeller } from '../shared/types';\n\nimport { OperationEditor } from './OperationEditor';\n\nexport interface Props<T extends QueryWithOperations> {\n  query: T;\n  datasource: DataSourceApi;\n  onChange: (query: T) => void;\n  onRunQuery: () => void;\n  queryModeller: VisualQueryModeller;\n  explainMode?: boolean;\n}\n\nexport function OperationList<T extends QueryWithOperations>({\n  query,\n  datasource,\n  queryModeller,\n  onChange,\n  onRunQuery,\n}: Props<T>) {\n  const styles = useStyles2(getStyles);\n  const { operations } = query;\n\n  const opsToHighlight = useOperationsHighlight(operations);\n\n  const [cascaderOpen, setCascaderOpen] = useState(false);\n\n  const onOperationChange = (index: number, update: QueryBuilderOperation) => {\n    const updatedList = [...operations];\n    updatedList.splice(index, 1, update);\n    onChange({ ...query, operations: updatedList });\n  };\n\n  const onRemove = (index: number) => {\n    const updatedList = [...operations.slice(0, index), ...operations.slice(index + 1)];\n    onChange({ ...query, operations: updatedList });\n  };\n\n  const addOptions: CascaderOption[] = queryModeller.getCategories().map((category) => {\n    return {\n      value: category,\n      label: category,\n      items: queryModeller.getOperationsForCategory(category).map((operation) => ({\n        value: operation.id,\n        label: operation.name,\n        isLeaf: true,\n      })),\n    };\n  });\n\n  const onAddOperation = (value: string) => {\n    const operationDef = queryModeller.getOperationDef(value);\n    if (!operationDef) {\n      return;\n    }\n    onChange(operationDef.addOperationHandler(operationDef, query, queryModeller));\n    setCascaderOpen(false);\n  };\n\n  const onDragEnd = (result: DropResult) => {\n    if (!result.destination) {\n      return;\n    }\n\n    const updatedList = [...operations];\n    const element = updatedList[result.source.index];\n    updatedList.splice(result.source.index, 1);\n    updatedList.splice(result.destination.index, 0, element);\n    onChange({ ...query, operations: updatedList });\n  };\n\n  const onCascaderBlur = () => {\n    setCascaderOpen(false);\n  };\n\n  return (\n    <Stack gap={1} direction=\"column\">\n      <Stack gap={1}>\n        {operations.length > 0 && (\n          <DragDropContext onDragEnd={onDragEnd}>\n            <Droppable droppableId=\"sortable-field-mappings\" direction=\"horizontal\">\n              {(provided) => (\n                <div className={styles.operationList} ref={provided.innerRef} {...provided.droppableProps}>\n                  {operations.map((op, index) => (\n                    <OperationEditor\n                      key={op.id + index}\n                      queryModeller={queryModeller}\n                      index={index}\n                      operation={op}\n                      query={query}\n                      datasource={datasource}\n                      onChange={onOperationChange}\n                      onRemove={onRemove}\n                      onRunQuery={onRunQuery}\n                      highlight={opsToHighlight[index]}\n                    />\n                  ))}\n                  {provided.placeholder}\n                </div>\n              )}\n            </Droppable>\n          </DragDropContext>\n        )}\n        <div className={styles.addButton}>\n          {cascaderOpen ? (\n            <Cascader\n              options={addOptions}\n              onSelect={onAddOperation}\n              onBlur={onCascaderBlur}\n              autoFocus={true}\n              alwaysOpen={true}\n              hideActiveLevelLabel={true}\n              placeholder={'Search'}\n            />\n          ) : (\n            <Button icon={'plus'} variant={'secondary'} onClick={() => setCascaderOpen(true)} title={'Add operation'}>\n              Operations\n            </Button>\n          )}\n        </div>\n      </Stack>\n    </Stack>\n  );\n}\n\n/**\n * Returns indexes of operations that should be highlighted. We check the diff of operations added but at the same time\n * we want to highlight operations only after the initial render, so we check for mounted state and calculate the diff\n * only after.\n * @param operations\n */\nfunction useOperationsHighlight(operations: QueryBuilderOperation[]) {\n  const isMounted = useMountedState();\n  const prevOperations = usePrevious(operations);\n\n  if (!isMounted()) {\n    return operations.map(() => false);\n  }\n\n  if (!prevOperations) {\n    return operations.map(() => true);\n  }\n\n  let newOps: boolean[] = [];\n\n  if (prevOperations.length - 1 === operations.length && operations.every((op) => prevOperations.includes(op))) {\n    // In case we remove one op and does not change any ops then don't highlight anything.\n    return operations.map(() => false);\n  }\n  if (prevOperations.length + 1 === operations.length && prevOperations.every((op) => operations.includes(op))) {\n    // If we add a single op just find it and highlight just that.\n    const newOp = operations.find((op) => !prevOperations.includes(op));\n    newOps = operations.map((op) => {\n      return op === newOp;\n    });\n  } else {\n    // Default diff of all ops.\n    newOps = operations.map((op, index) => {\n      return !isSameOp(op.id, prevOperations[index]?.id);\n    });\n  }\n  return newOps;\n}\n\nfunction isSameOp(op1?: string, op2?: string) {\n  return op1 === op2 || `__${op1}_by` === op2 || op1 === `__${op2}_by`;\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    heading: css({\n      label: 'heading',\n      fontSize: 12,\n      fontWeight: theme.typography.fontWeightMedium,\n      marginBottom: 0,\n    }),\n    operationList: css({\n      label: 'operationList',\n      display: 'flex',\n      flexWrap: 'wrap',\n      gap: theme.spacing(2),\n    }),\n    addButton: css({\n      label: 'addButton',\n      width: 126,\n      paddingBottom: theme.spacing(1),\n    }),\n  };\n};\n","import React from 'react';\n\nimport { OperationExplainedBox } from './OperationExplainedBox';\nimport { QueryWithOperations, VisualQueryModeller } from './types';\n\nexport interface Props<T extends QueryWithOperations> {\n  query: T;\n  queryModeller: VisualQueryModeller;\n  explainMode?: boolean;\n  stepNumber: number;\n}\n\nexport function OperationListExplained<T extends QueryWithOperations>({ query, queryModeller, stepNumber }: Props<T>) {\n  return (\n    <>\n      {query.operations.map((op, index) => {\n        const def = queryModeller.getOperationDef(op.id);\n        if (!def) {\n          return `Operation ${op.id} not found`;\n        }\n        const title = def.renderer(op, def, '<expr>');\n        const body = def.explainHandler ? def.explainHandler(op, def) : def.documentation ?? 'no docs';\n\n        return <OperationExplainedBox stepNumber={index + stepNumber} key={index} title={title} markdown={body} />;\n      })}\n    </>\n  );\n}\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Stack } from '@grafana/experimental';\nimport { useStyles2 } from '@grafana/ui';\n\ninterface Props {\n  children: React.ReactNode;\n}\n\nexport function OperationsEditorRow({ children }: Props) {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.root}>\n      <Stack gap={1}>{children}</Stack>\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    root: css({\n      padding: theme.spacing(1, 1, 0, 1),\n      backgroundColor: theme.colors.background.secondary,\n      borderRadius: theme.shape.borderRadius(1),\n    }),\n  };\n};\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { RadioButtonGroup, Tag } from '@grafana/ui';\n\nimport { QueryEditorMode } from './types';\n\nexport interface Props {\n  mode: QueryEditorMode;\n  onChange: (mode: QueryEditorMode) => void;\n}\n\nconst editorModes = [\n  { label: 'Explain', value: QueryEditorMode.Explain },\n  {\n    label: 'Builder',\n    value: QueryEditorMode.Builder,\n    component: () => (\n      <Tag\n        className={css({\n          fontSize: 10,\n          padding: '1px 5px',\n          verticalAlign: 'text-bottom',\n        })}\n        name={'Beta'}\n        colorIndex={1}\n      />\n    ),\n  },\n  { label: 'Code', value: QueryEditorMode.Code },\n];\n\nexport function QueryEditorModeToggle({ mode, onChange }: Props) {\n  return (\n    <div data-testid={'QueryEditorModeToggle'}>\n      <RadioButtonGroup options={editorModes} size=\"sm\" value={mode} onChange={onChange} />\n    </div>\n  );\n}\n","import { css } from '@emotion/css';\nimport React from 'react';\nimport { useToggle } from 'react-use';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Stack } from '@grafana/experimental';\nimport { Icon, useStyles2 } from '@grafana/ui';\n\nexport interface Props {\n  title: string;\n  collapsedInfo: string[];\n  children: React.ReactNode;\n}\n\nexport function QueryOptionGroup({ title, children, collapsedInfo }: Props) {\n  const [isOpen, toggleOpen] = useToggle(false);\n  const styles = useStyles2(getStyles);\n\n  return (\n    <Stack gap={0} direction=\"column\">\n      <div className={styles.header} onClick={toggleOpen} title=\"Click to edit options\">\n        <div className={styles.toggle}>\n          <Icon name={isOpen ? 'angle-down' : 'angle-right'} />\n        </div>\n        <h6 className={styles.title}>{title}</h6>\n        {!isOpen && (\n          <div className={styles.description}>\n            {collapsedInfo.map((x, i) => (\n              <span key={i}>{x}</span>\n            ))}\n          </div>\n        )}\n      </div>\n      {isOpen && <div className={styles.body}>{children}</div>}\n    </Stack>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    switchLabel: css({\n      color: theme.colors.text.secondary,\n      cursor: 'pointer',\n      fontSize: theme.typography.bodySmall.fontSize,\n      '&:hover': {\n        color: theme.colors.text.primary,\n      },\n    }),\n    header: css({\n      display: 'flex',\n      cursor: 'pointer',\n      alignItems: 'baseline',\n      color: theme.colors.text.primary,\n      '&:hover': {\n        background: theme.colors.emphasize(theme.colors.background.primary, 0.03),\n      },\n    }),\n    title: css({\n      flexGrow: 1,\n      overflow: 'hidden',\n      fontSize: theme.typography.bodySmall.fontSize,\n      fontWeight: theme.typography.fontWeightMedium,\n      margin: 0,\n    }),\n    description: css({\n      color: theme.colors.text.secondary,\n      fontSize: theme.typography.bodySmall.fontSize,\n      paddingLeft: theme.spacing(2),\n      gap: theme.spacing(2),\n      display: 'flex',\n    }),\n    body: css({\n      display: 'flex',\n      paddingTop: theme.spacing(2),\n      gap: theme.spacing(2),\n      flexWrap: 'wrap',\n    }),\n    toggle: css({\n      color: theme.colors.text.secondary,\n      marginRight: `${theme.spacing(1)}`,\n    }),\n  };\n};\n","import { capitalize } from 'lodash';\nimport pluralize from 'pluralize';\n\nimport { SelectableValue } from '@grafana/data/src';\n\nimport { LabelParamEditor } from '../components/LabelParamEditor';\nimport { PromVisualQueryOperationCategory } from '../types';\n\nimport {\n  QueryBuilderOperation,\n  QueryBuilderOperationDef,\n  QueryBuilderOperationParamDef,\n  QueryBuilderOperationParamValue,\n  QueryWithOperations,\n} from './types';\n\nexport function functionRendererLeft(model: QueryBuilderOperation, def: QueryBuilderOperationDef, innerExpr: string) {\n  const params = renderParams(model, def, innerExpr);\n  const str = model.id + '(';\n\n  if (innerExpr) {\n    params.push(innerExpr);\n  }\n\n  return str + params.join(', ') + ')';\n}\n\nexport function functionRendererRight(model: QueryBuilderOperation, def: QueryBuilderOperationDef, innerExpr: string) {\n  const params = renderParams(model, def, innerExpr);\n  const str = model.id + '(';\n\n  if (innerExpr) {\n    params.unshift(innerExpr);\n  }\n\n  return str + params.join(', ') + ')';\n}\n\nfunction rangeRendererWithParams(\n  model: QueryBuilderOperation,\n  def: QueryBuilderOperationDef,\n  innerExpr: string,\n  renderLeft: boolean\n) {\n  if (def.params.length < 2) {\n    throw `Cannot render a function with params of length [${def.params.length}]`;\n  }\n\n  let rangeVector = (model.params ?? [])[0] ?? '5m';\n\n  // Next frame the remaining parameters, but get rid of the first one because it's used to move the\n  // instant vector into a range vector.\n  const params = renderParams(\n    {\n      ...model,\n      params: model.params.slice(1),\n    },\n    {\n      ...def,\n      params: def.params.slice(1),\n      defaultParams: def.defaultParams.slice(1),\n    },\n    innerExpr\n  );\n\n  const str = model.id + '(';\n\n  // Depending on the renderLeft variable, render parameters to the left or right\n  // renderLeft === true (renderLeft) => (param1, param2, rangeVector[...])\n  // renderLeft === false (renderRight) => (rangeVector[...], param1, param2)\n  if (innerExpr) {\n    renderLeft ? params.push(`${innerExpr}[${rangeVector}]`) : params.unshift(`${innerExpr}[${rangeVector}]`);\n  }\n\n  // stick everything together\n  return str + params.join(', ') + ')';\n}\n\nexport function rangeRendererRightWithParams(\n  model: QueryBuilderOperation,\n  def: QueryBuilderOperationDef,\n  innerExpr: string\n) {\n  return rangeRendererWithParams(model, def, innerExpr, false);\n}\n\nexport function rangeRendererLeftWithParams(\n  model: QueryBuilderOperation,\n  def: QueryBuilderOperationDef,\n  innerExpr: string\n) {\n  return rangeRendererWithParams(model, def, innerExpr, true);\n}\n\nfunction renderParams(model: QueryBuilderOperation, def: QueryBuilderOperationDef, innerExpr: string) {\n  return (model.params ?? []).map((value, index) => {\n    const paramDef = def.params[index];\n    if (paramDef.type === 'string') {\n      return '\"' + value + '\"';\n    }\n\n    return value;\n  });\n}\n\nexport function defaultAddOperationHandler<T extends QueryWithOperations>(def: QueryBuilderOperationDef, query: T) {\n  const newOperation: QueryBuilderOperation = {\n    id: def.id,\n    params: def.defaultParams,\n  };\n\n  return {\n    ...query,\n    operations: [...query.operations, newOperation],\n  };\n}\n\nexport function getPromAndLokiOperationDisplayName(funcName: string) {\n  return capitalize(funcName.replace(/_/g, ' '));\n}\n\nexport function getOperationParamId(operationIndex: number, paramIndex: number) {\n  return `operations.${operationIndex}.param.${paramIndex}`;\n}\n\nexport function getRangeVectorParamDef(withRateInterval = false): QueryBuilderOperationParamDef {\n  const param: QueryBuilderOperationParamDef = {\n    name: 'Range',\n    type: 'string',\n    options: [\n      {\n        label: '$__interval',\n        value: '$__interval',\n        // tooltip: 'Dynamic interval based on max data points, scrape and min interval',\n      },\n      { label: '1m', value: '1m' },\n      { label: '5m', value: '5m' },\n      { label: '10m', value: '10m' },\n      { label: '1h', value: '1h' },\n      { label: '24h', value: '24h' },\n    ],\n  };\n\n  if (withRateInterval) {\n    (param.options as Array<SelectableValue<string>>).unshift({\n      label: '$__rate_interval',\n      value: '$__rate_interval',\n      // tooltip: 'Always above 4x scrape interval',\n    });\n  }\n\n  return param;\n}\n\n/**\n * This function is shared between Prometheus and Loki variants\n */\nexport function createAggregationOperation<T extends QueryWithOperations>(\n  name: string,\n  overrides: Partial<QueryBuilderOperationDef> = {}\n): QueryBuilderOperationDef[] {\n  const operations: QueryBuilderOperationDef[] = [\n    {\n      id: name,\n      name: getPromAndLokiOperationDisplayName(name),\n      params: [\n        {\n          name: 'By label',\n          type: 'string',\n          restParam: true,\n          optional: true,\n        },\n      ],\n      defaultParams: [],\n      alternativesKey: 'plain aggregations',\n      category: PromVisualQueryOperationCategory.Aggregations,\n      renderer: functionRendererLeft,\n      paramChangedHandler: getOnLabelAddedHandler(`__${name}_by`),\n      explainHandler: getAggregationExplainer(name, ''),\n      addOperationHandler: defaultAddOperationHandler,\n      ...overrides,\n    },\n    {\n      id: `__${name}_by`,\n      name: `${getPromAndLokiOperationDisplayName(name)} by`,\n      params: [\n        {\n          name: 'Label',\n          type: 'string',\n          restParam: true,\n          optional: true,\n          editor: LabelParamEditor,\n        },\n      ],\n      defaultParams: [''],\n      alternativesKey: 'aggregations by',\n      category: PromVisualQueryOperationCategory.Aggregations,\n      renderer: getAggregationByRenderer(name),\n      paramChangedHandler: getLastLabelRemovedHandler(name),\n      explainHandler: getAggregationExplainer(name, 'by'),\n      addOperationHandler: defaultAddOperationHandler,\n      hideFromList: true,\n      ...overrides,\n    },\n    {\n      id: `__${name}_without`,\n      name: `${getPromAndLokiOperationDisplayName(name)} without`,\n      params: [\n        {\n          name: 'Label',\n          type: 'string',\n          restParam: true,\n          optional: true,\n          editor: LabelParamEditor,\n        },\n      ],\n      defaultParams: [''],\n      alternativesKey: 'aggregations by',\n      category: PromVisualQueryOperationCategory.Aggregations,\n      renderer: getAggregationWithoutRenderer(name),\n      paramChangedHandler: getLastLabelRemovedHandler(name),\n      explainHandler: getAggregationExplainer(name, 'without'),\n      addOperationHandler: defaultAddOperationHandler,\n      hideFromList: true,\n      ...overrides,\n    },\n  ];\n\n  return operations;\n}\n\nexport function createAggregationOperationWithParam(\n  name: string,\n  paramsDef: { params: QueryBuilderOperationParamDef[]; defaultParams: QueryBuilderOperationParamValue[] },\n  overrides: Partial<QueryBuilderOperationDef> = {}\n): QueryBuilderOperationDef[] {\n  const operations = createAggregationOperation(name, overrides);\n  operations[0].params.unshift(...paramsDef.params);\n  operations[1].params.unshift(...paramsDef.params);\n  operations[2].params.unshift(...paramsDef.params);\n  operations[0].defaultParams = paramsDef.defaultParams;\n  operations[1].defaultParams = [...paramsDef.defaultParams, ''];\n  operations[2].defaultParams = [...paramsDef.defaultParams, ''];\n  operations[1].renderer = getAggregationByRendererWithParameter(name);\n  operations[2].renderer = getAggregationByRendererWithParameter(name);\n  return operations;\n}\n\nfunction getAggregationByRenderer(aggregation: string) {\n  return function aggregationRenderer(model: QueryBuilderOperation, def: QueryBuilderOperationDef, innerExpr: string) {\n    return `${aggregation} by(${model.params.join(', ')}) (${innerExpr})`;\n  };\n}\n\nfunction getAggregationWithoutRenderer(aggregation: string) {\n  return function aggregationRenderer(model: QueryBuilderOperation, def: QueryBuilderOperationDef, innerExpr: string) {\n    return `${aggregation} without(${model.params.join(', ')}) (${innerExpr})`;\n  };\n}\n\n/**\n * Very simple poc implementation, needs to be modified to support all aggregation operators\n */\nfunction getAggregationExplainer(aggregationName: string, mode: 'by' | 'without' | '') {\n  return function aggregationExplainer(model: QueryBuilderOperation) {\n    const labels = model.params.map((label) => `\\`${label}\\``).join(' and ');\n    const labelWord = pluralize('label', model.params.length);\n\n    switch (mode) {\n      case 'by':\n        return `Calculates ${aggregationName} over dimensions while preserving ${labelWord} ${labels}.`;\n      case 'without':\n        return `Calculates ${aggregationName} over the dimensions ${labels}. All other labels are preserved.`;\n      default:\n        return `Calculates ${aggregationName} over the dimensions.`;\n    }\n  };\n}\n\nfunction getAggregationByRendererWithParameter(aggregation: string) {\n  return function aggregationRenderer(model: QueryBuilderOperation, def: QueryBuilderOperationDef, innerExpr: string) {\n    function mapType(p: QueryBuilderOperationParamValue) {\n      if (typeof p === 'string') {\n        return `\\\"${p}\\\"`;\n      }\n      return p;\n    }\n    const params = model.params.slice(0, -1);\n    const restParams = model.params.slice(1);\n    return `${aggregation} by(${restParams.join(', ')}) (${params.map(mapType).join(', ')}, ${innerExpr})`;\n  };\n}\n\n/**\n * This function will transform operations without labels to their plan aggregation operation\n */\nfunction getLastLabelRemovedHandler(changeToOperationId: string) {\n  return function onParamChanged(index: number, op: QueryBuilderOperation, def: QueryBuilderOperationDef) {\n    // If definition has more params then is defined there are no optional rest params anymore.\n    // We then transform this operation into a different one\n    if (op.params.length < def.params.length) {\n      return {\n        ...op,\n        id: changeToOperationId,\n      };\n    }\n\n    return op;\n  };\n}\n\nfunction getOnLabelAddedHandler(changeToOperationId: string) {\n  return function onParamChanged(index: number, op: QueryBuilderOperation, def: QueryBuilderOperationDef) {\n    // Check if we actually have the label param. As it's optional the aggregation can have one less, which is the\n    // case of just simple aggregation without label. When user adds the label it now has the same number of params\n    // as it's definition, and now we can change it to it's `_by` variant.\n    if (op.params.length === def.params.length) {\n      return {\n        ...op,\n        id: changeToOperationId,\n      };\n    }\n    return op;\n  };\n}\n","import { SyntaxNode, TreeCursor } from '@lezer/common';\n\nimport { QueryBuilderOperation } from './types';\n\n// This is used for error type for some reason\nexport const ErrorName = '⚠';\n\nexport function getLeftMostChild(cur: SyntaxNode): SyntaxNode {\n  return cur.firstChild ? getLeftMostChild(cur.firstChild) : cur;\n}\n\nexport function makeError(expr: string, node: SyntaxNode) {\n  return {\n    text: getString(expr, node),\n    // TODO: this are positions in the string with the replaced variables. Means it cannot be used to show exact\n    //  placement of the error for the user. We need some translation table to positions before the variable\n    //  replace.\n    from: node.from,\n    to: node.to,\n    parentType: node.parent?.name,\n  };\n}\n\n// Taken from template_srv, but copied so to not mess with the regex.index which is manipulated in the service\n/*\n * This regex matches 3 types of variable reference with an optional format specifier\n * \\$(\\w+)                          $var1\n * \\[\\[([\\s\\S]+?)(?::(\\w+))?\\]\\]    [[var2]] or [[var2:fmt2]]\n * \\${(\\w+)(?::(\\w+))?}             ${var3} or ${var3:fmt3}\n */\nconst variableRegex = /\\$(\\w+)|\\[\\[([\\s\\S]+?)(?::(\\w+))?\\]\\]|\\${(\\w+)(?:\\.([^:^\\}]+))?(?::([^\\}]+))?}/g;\n\n/**\n * As variables with $ are creating parsing errors, we first replace them with magic string that is parsable and at\n * the same time we can get the variable and it's format back from it.\n * @param expr\n */\nexport function replaceVariables(expr: string) {\n  return expr.replace(variableRegex, (match, var1, var2, fmt2, var3, fieldPath, fmt3) => {\n    const fmt = fmt2 || fmt3;\n    let variable = var1;\n    let varType = '0';\n\n    if (var2) {\n      variable = var2;\n      varType = '1';\n    }\n\n    if (var3) {\n      variable = var3;\n      varType = '2';\n    }\n\n    return `__V_${varType}__` + variable + '__V__' + (fmt ? '__F__' + fmt + '__F__' : '');\n  });\n}\n\nconst varTypeFunc = [\n  (v: string, f?: string) => `\\$${v}`,\n  (v: string, f?: string) => `[[${v}${f ? `:${f}` : ''}]]`,\n  (v: string, f?: string) => `\\$\\{${v}${f ? `:${f}` : ''}\\}`,\n];\n\n/**\n * Get back the text with variables in their original format.\n * @param expr\n */\nfunction returnVariables(expr: string) {\n  return expr.replace(/__V_(\\d)__(.+?)__V__(?:__F__(\\w+)__F__)?/g, (match, type, v, f) => {\n    return varTypeFunc[parseInt(type, 10)](v, f);\n  });\n}\n\n/**\n * Get the actual string of the expression. That is not stored in the tree so we have to get the indexes from the node\n * and then based on that get it from the expression.\n * @param expr\n * @param node\n */\nexport function getString(expr: string, node: SyntaxNode | TreeCursor | null | undefined) {\n  if (!node) {\n    return '';\n  }\n  return returnVariables(expr.substring(node.from, node.to));\n}\n\n/**\n * Create simple scalar binary op object.\n * @param opDef - definition of the op to be created\n * @param expr\n * @param numberNode - the node for the scalar\n * @param hasBool - whether operation has a bool modifier. Is used only for ops for which it makes sense.\n */\nexport function makeBinOp(\n  opDef: { id: string; comparison?: boolean },\n  expr: string,\n  numberNode: SyntaxNode,\n  hasBool: boolean\n): QueryBuilderOperation {\n  const params: any[] = [parseFloat(getString(expr, numberNode))];\n  if (opDef.comparison) {\n    params.push(hasBool);\n  }\n  return {\n    id: opDef.id,\n    params,\n  };\n}\n\n/**\n * Get all nodes with type in the tree. This traverses the tree so it is safe only when you know there shouldn't be\n * too much nesting but you just want to skip some of the wrappers. For example getting function args this way would\n * not be safe is it would also find arguments of nested functions.\n * @param expr\n * @param cur\n * @param type\n */\nexport function getAllByType(expr: string, cur: SyntaxNode, type: string): string[] {\n  if (cur.name === type) {\n    return [getString(expr, cur)];\n  }\n  const values: string[] = [];\n  let pos = 0;\n  let child = cur.childAfter(pos);\n  while (child) {\n    values.push(...getAllByType(expr, child, type));\n    pos = child.to;\n    child = cur.childAfter(pos);\n  }\n  return values;\n}\n\n// Debugging function for convenience. Gives you nice output similar to linux tree util.\n// @ts-ignore\nexport function log(expr: string, cur?: SyntaxNode) {\n  if (!cur) {\n    console.log('<empty>');\n    return;\n  }\n  const json = toJson(expr, cur);\n  const text = jsonToText(json);\n\n  if (!text) {\n    console.log('<empty>');\n    return;\n  }\n  console.log(text);\n}\n\nfunction toJson(expr: string, cur: SyntaxNode) {\n  const treeJson: any = {};\n  const name = nodeToString(expr, cur);\n  const children = [];\n\n  let pos = 0;\n  let child = cur.childAfter(pos);\n  while (child) {\n    children.push(toJson(expr, child));\n    pos = child.to;\n    child = cur.childAfter(pos);\n  }\n\n  treeJson.name = name;\n  treeJson.children = children;\n  return treeJson;\n}\n\ntype JsonNode = {\n  name: string;\n  children: JsonNode[];\n};\n\nfunction jsonToText(\n  node: JsonNode,\n  context: { lastChild: boolean; indent: string } = {\n    lastChild: true,\n    indent: '',\n  }\n) {\n  const name = node.name;\n  const { lastChild, indent } = context;\n  const newIndent = indent !== '' ? indent + (lastChild ? '└─' : '├─') : '';\n  let text = newIndent + name;\n\n  const children = node.children;\n  children.forEach((child: any, index: number) => {\n    const isLastChild = index === children.length - 1;\n    text +=\n      '\\n' +\n      jsonToText(child, {\n        lastChild: isLastChild,\n        indent: indent + (lastChild ? '  ' : '│ '),\n      });\n  });\n\n  return text;\n}\n\nfunction nodeToString(expr: string, node: SyntaxNode) {\n  return node.name + ': ' + getString(expr, node);\n}\n","/**\n * Shared types that can be reused by Loki and other data sources\n */\n\nimport { ComponentType } from 'react';\n\nimport { DataSourceApi, RegistryItem, SelectableValue } from '@grafana/data';\n\nexport interface QueryBuilderLabelFilter {\n  label: string;\n  op: string;\n  value: string;\n}\n\nexport interface QueryBuilderOperation {\n  id: string;\n  params: QueryBuilderOperationParamValue[];\n}\n\nexport interface QueryWithOperations {\n  operations: QueryBuilderOperation[];\n}\n\nexport interface QueryBuilderOperationDef<T = any> extends RegistryItem {\n  documentation?: string;\n  params: QueryBuilderOperationParamDef[];\n  defaultParams: QueryBuilderOperationParamValue[];\n  category: string;\n  hideFromList?: boolean;\n  alternativesKey?: string;\n  /** Can be used to control operation placement when adding a new operations, lower are placed first */\n  orderRank?: number;\n  renderer: QueryBuilderOperationRenderer;\n  addOperationHandler: QueryBuilderAddOperationHandler<T>;\n  paramChangedHandler?: QueryBuilderOnParamChangedHandler;\n  explainHandler?: QueryBuilderExplainOperationHandler;\n  changeTypeHandler?: (op: QueryBuilderOperation, newDef: QueryBuilderOperationDef<T>) => QueryBuilderOperation;\n}\n\nexport type QueryBuilderAddOperationHandler<T> = (\n  def: QueryBuilderOperationDef,\n  query: T,\n  modeller: VisualQueryModeller\n) => T;\n\nexport type QueryBuilderExplainOperationHandler = (op: QueryBuilderOperation, def: QueryBuilderOperationDef) => string;\n\nexport type QueryBuilderOnParamChangedHandler = (\n  index: number,\n  operation: QueryBuilderOperation,\n  operationDef: QueryBuilderOperationDef\n) => QueryBuilderOperation;\n\nexport type QueryBuilderOperationRenderer = (\n  model: QueryBuilderOperation,\n  def: QueryBuilderOperationDef,\n  innerExpr: string\n) => string;\n\nexport type QueryBuilderOperationParamValue = string | number | boolean;\n\nexport interface QueryBuilderOperationParamDef {\n  name: string;\n  type: 'string' | 'number' | 'boolean';\n  options?: string[] | number[] | Array<SelectableValue<string>>;\n  hideName?: boolean;\n  restParam?: boolean;\n  optional?: boolean;\n  placeholder?: string;\n  description?: string;\n  minWidth?: number;\n  editor?: ComponentType<QueryBuilderOperationParamEditorProps>;\n}\n\nexport interface QueryBuilderOperationEditorProps {\n  operation: QueryBuilderOperation;\n  index: number;\n  query: any;\n  datasource: DataSourceApi;\n  queryModeller: VisualQueryModeller;\n  onChange: (index: number, update: QueryBuilderOperation) => void;\n  onRemove: (index: number) => void;\n}\n\nexport interface QueryBuilderOperationParamEditorProps {\n  value?: QueryBuilderOperationParamValue;\n  paramDef: QueryBuilderOperationParamDef;\n  /** Parameter index */\n  index: number;\n  operation: QueryBuilderOperation;\n  operationIndex: number;\n  query: any;\n  datasource: DataSourceApi;\n  onChange: (index: number, value: QueryBuilderOperationParamValue) => void;\n  onRunQuery: () => void;\n}\n\nexport enum QueryEditorMode {\n  Code = 'code',\n  Builder = 'builder',\n  Explain = 'explain',\n}\n\nexport interface VisualQueryModeller {\n  getOperationsForCategory(category: string): QueryBuilderOperationDef[];\n  getAlternativeOperations(key: string): QueryBuilderOperationDef[];\n  getCategories(): string[];\n  getOperationDef(id: string): QueryBuilderOperationDef | undefined;\n}\n","import { VisualQueryBinary } from './shared/LokiAndPromQueryModellerBase';\nimport { QueryBuilderLabelFilter, QueryBuilderOperation } from './shared/types';\n\n/**\n * Visual query model\n */\nexport interface PromVisualQuery {\n  metric: string;\n  labels: QueryBuilderLabelFilter[];\n  operations: QueryBuilderOperation[];\n  binaryQueries?: PromVisualQueryBinary[];\n}\n\nexport type PromVisualQueryBinary = VisualQueryBinary<PromVisualQuery>;\n\nexport enum PromVisualQueryOperationCategory {\n  Aggregations = 'Aggregations',\n  RangeFunctions = 'Range functions',\n  Functions = 'Functions',\n  BinaryOps = 'Binary operations',\n  Trigonometric = 'Trigonometric',\n  Time = 'Time Functions',\n}\n\nexport enum PromOperationId {\n  Abs = 'abs',\n  Absent = 'absent',\n  AbsentOverTime = 'absent_over_time',\n  Acos = 'acos',\n  Acosh = 'acosh',\n  Asin = 'asin',\n  Asinh = 'asinh',\n  Atan = 'atan',\n  Atanh = 'atanh',\n  Avg = 'avg',\n  AvgOverTime = 'avg_over_time',\n  BottomK = 'bottomk',\n  Ceil = 'ceil',\n  Changes = 'changes',\n  Clamp = 'clamp',\n  ClampMax = 'clamp_max',\n  ClampMin = 'clamp_min',\n  Cos = 'cos',\n  Cosh = 'cosh',\n  Count = 'count',\n  CountOverTime = 'count_over_time',\n  CountScalar = 'count_scalar',\n  CountValues = 'count_values',\n  DayOfMonth = 'day_of_month',\n  DayOfWeek = 'day_of_week',\n  DaysInMonth = 'days_in_month',\n  Deg = 'deg',\n  Delta = 'delta',\n  Deriv = 'deriv',\n  DropCommonLabels = 'drop_common_labels',\n  Exp = 'exp',\n  Floor = 'floor',\n  Group = 'group',\n  HistogramQuantile = 'histogram_quantile',\n  HoltWinters = 'holt_winters',\n  Hour = 'hour',\n  Idelta = 'idelta',\n  Increase = 'increase',\n  Irate = 'irate',\n  LabelJoin = 'label_join',\n  LabelReplace = 'label_replace',\n  Last = 'last',\n  LastOverTime = 'last_over_time',\n  Ln = 'ln',\n  Log10 = 'log10',\n  Log2 = 'log2',\n  Max = 'max',\n  MaxOverTime = 'max_over_time',\n  Min = 'min',\n  MinOverTime = 'min_over_time',\n  Minute = 'minute',\n  Month = 'month',\n  Pi = 'pi',\n  PredictLinear = 'predict_linear',\n  Present = 'present',\n  PresentOverTime = 'present_over_time',\n  Quantile = 'quantile',\n  QuantileOverTime = 'quantile_over_time',\n  Rad = 'rad',\n  Rate = 'rate',\n  Resets = 'resets',\n  Round = 'round',\n  Scalar = 'scalar',\n  Sgn = 'sgn',\n  Sin = 'sin',\n  Sinh = 'sinh',\n  Sort = 'sort',\n  SortDesc = 'sort_desc',\n  Sqrt = 'sqrt',\n  Stddev = 'stddev',\n  StddevOverTime = 'stddev_over_time',\n  Sum = 'sum',\n  SumOverTime = 'sum_over_time',\n  Tan = 'tan',\n  Tanh = 'tanh',\n  Time = 'time',\n  Timestamp = 'timestamp',\n  TopK = 'topk',\n  Vector = 'vector',\n  Year = 'year',\n  // Binary ops\n  Addition = '__addition',\n  Subtraction = '__subtraction',\n  MultiplyBy = '__multiply_by',\n  DivideBy = '__divide_by',\n  Modulo = '__modulo',\n  Exponent = '__exponent',\n  NestedQuery = '__nested_query',\n  EqualTo = '__equal_to',\n  NotEqualTo = '__not_equal_to',\n  GreaterThan = '__greater_than',\n  LessThan = '__less_than',\n  GreaterOrEqual = '__greater_or_equal',\n  LessOrEqual = '__less_or_equal',\n}\n\nexport interface PromQueryPattern {\n  name: string;\n  operations: QueryBuilderOperation[];\n}\n","import { DataQuery, DataSourceJsonData, QueryResultMeta, ScopedVars } from '@grafana/data';\n\nimport { QueryEditorMode } from './querybuilder/shared/types';\n\nexport interface PromQuery extends DataQuery {\n  expr: string;\n  format?: string;\n  instant?: boolean;\n  range?: boolean;\n  exemplar?: boolean;\n  hinting?: boolean;\n  interval?: string;\n  intervalFactor?: number;\n  // Timezone offset to align start & end time on backend\n  utcOffsetSec?: number;\n  legendFormat?: string;\n  valueWithRefId?: boolean;\n  requestId?: string;\n  showingGraph?: boolean;\n  showingTable?: boolean;\n  /** Code, Builder or Explain */\n  editorMode?: QueryEditorMode;\n  /** Controls if the raw query text is shown */\n  rawQuery?: boolean;\n}\n\nexport interface PromOptions extends DataSourceJsonData {\n  timeInterval?: string;\n  queryTimeout?: string;\n  httpMethod?: string;\n  directUrl?: string;\n  customQueryParameters?: string;\n  disableMetricsLookup?: boolean;\n  exemplarTraceIdDestinations?: ExemplarTraceIdDestination[];\n}\n\nexport enum PromQueryType {\n  timeSeriesQuery = 'timeSeriesQuery',\n}\n\nexport type ExemplarTraceIdDestination = {\n  name: string;\n  url?: string;\n  urlDisplayLabel?: string;\n  datasourceUid?: string;\n};\n\nexport interface PromQueryRequest extends PromQuery {\n  step?: number;\n  requestId?: string;\n  start: number;\n  end: number;\n  headers?: any;\n}\n\nexport interface PromMetricsMetadataItem {\n  type: string;\n  help: string;\n  unit?: string;\n}\n\nexport interface PromMetricsMetadata {\n  [metric: string]: PromMetricsMetadataItem;\n}\n\nexport interface PromDataSuccessResponse<T = PromData> {\n  status: 'success';\n  data: T;\n}\n\nexport interface PromDataErrorResponse<T = PromData> {\n  status: 'error';\n  errorType: string;\n  error: string;\n  data: T;\n}\n\nexport type PromData = PromMatrixData | PromVectorData | PromScalarData | PromExemplarData[];\n\nexport interface Labels {\n  [index: string]: any;\n}\n\nexport interface Exemplar {\n  labels: Labels;\n  value: number;\n  timestamp: number;\n}\n\nexport interface PromExemplarData {\n  seriesLabels: PromMetric;\n  exemplars: Exemplar[];\n}\n\nexport interface PromVectorData {\n  resultType: 'vector';\n  result: Array<{\n    metric: PromMetric;\n    value: PromValue;\n  }>;\n}\n\nexport interface PromMatrixData {\n  resultType: 'matrix';\n  result: Array<{\n    metric: PromMetric;\n    values: PromValue[];\n  }>;\n}\n\nexport interface PromScalarData {\n  resultType: 'scalar';\n  result: PromValue;\n}\n\nexport type PromValue = [number, any];\n\nexport interface PromMetric {\n  __name__?: string;\n  [index: string]: any;\n}\n\nexport function isMatrixData(result: MatrixOrVectorResult): result is PromMatrixData['result'][0] {\n  return 'values' in result;\n}\n\nexport function isExemplarData(result: PromData): result is PromExemplarData[] {\n  if (result == null || !Array.isArray(result)) {\n    return false;\n  }\n  return result.length ? 'exemplars' in result[0] : false;\n}\n\nexport type MatrixOrVectorResult = PromMatrixData['result'][0] | PromVectorData['result'][0];\n\nexport interface TransformOptions {\n  format?: string;\n  step?: number;\n  legendFormat?: string;\n  start: number;\n  end: number;\n  query: string;\n  responseListLength: number;\n  scopedVars?: ScopedVars;\n  refId: string;\n  valueWithRefId?: boolean;\n  meta: QueryResultMeta;\n}\n\nexport interface PromLabelQueryResponse {\n  data: {\n    status: string;\n    data: string[];\n  };\n  cancelled?: boolean;\n}\n\n/**\n * Auto = query.legendFormat == '__auto'\n * Verbose = query.legendFormat == null/undefined/''\n * Custom query.legendFormat.length > 0 && query.legendFormat !== '__auto'\n */\nexport enum LegendFormatMode {\n  Auto = '__auto',\n  Verbose = '__verbose',\n  Custom = '__custom',\n}\n","import { useEffect, useRef } from 'react';\nexport default function usePrevious(state) {\n    var ref = useRef();\n    useEffect(function () {\n        ref.current = state;\n    });\n    return ref.current;\n}\n","import { useReducer } from 'react';\nvar toggleReducer = function (state, nextValue) {\n    return typeof nextValue === 'boolean' ? nextValue : !state;\n};\nvar useToggle = function (initialValue) {\n    return useReducer(toggleReducer, initialValue);\n};\nexport default useToggle;\n","const perf = typeof performance === 'object' && performance &&\n  typeof performance.now === 'function' ? performance : Date\n\nconst hasAbortController = typeof AbortController !== 'undefined'\n\n/* istanbul ignore next - minimal backwards compatibility polyfill */\nconst AC = hasAbortController ? AbortController : Object.assign(\n  class AbortController {\n    constructor () { this.signal = new AC.AbortSignal }\n    abort () { this.signal.aborted = true }\n  },\n  { AbortSignal: class AbortSignal { constructor () { this.aborted = false }}}\n)\n\nconst warned = new Set()\nconst deprecatedOption = (opt, instead) => {\n  const code = `LRU_CACHE_OPTION_${opt}`\n  if (shouldWarn(code)) {\n    warn(code, `${opt} option`, `options.${instead}`, LRUCache)\n  }\n}\nconst deprecatedMethod = (method, instead) => {\n  const code = `LRU_CACHE_METHOD_${method}`\n  if (shouldWarn(code)) {\n    const { prototype } = LRUCache\n    const { get } = Object.getOwnPropertyDescriptor(prototype, method)\n    warn(code, `${method} method`, `cache.${instead}()`, get)\n  }\n}\nconst deprecatedProperty = (field, instead) => {\n  const code = `LRU_CACHE_PROPERTY_${field}`\n  if (shouldWarn(code)) {\n    const { prototype } = LRUCache\n    const { get } = Object.getOwnPropertyDescriptor(prototype, field)\n    warn(code, `${field} property`, `cache.${instead}`, get)\n  }\n}\n\nconst shouldWarn = code => typeof process === 'object' &&\n  process &&\n  !warned.has(code)\n\nconst warn = (code, what, instead, fn) => {\n  warned.add(code)\n  const msg = `The ${what} is deprecated. Please use ${instead} instead.`\n  process.emitWarning(msg, 'DeprecationWarning', code, fn)\n}\n\nconst isPosInt = n => n && n === Math.floor(n) && n > 0 && isFinite(n)\n\n/* istanbul ignore next - This is a little bit ridiculous, tbh.\n * The maximum array length is 2^32-1 or thereabouts on most JS impls.\n * And well before that point, you're caching the entire world, I mean,\n * that's ~32GB of just integers for the next/prev links, plus whatever\n * else to hold that many keys and values.  Just filling the memory with\n * zeroes at init time is brutal when you get that big.\n * But why not be complete?\n * Maybe in the future, these limits will have expanded. */\nconst getUintArray = max => !isPosInt(max) ? null\n: max <= Math.pow(2, 8) ? Uint8Array\n: max <= Math.pow(2, 16) ? Uint16Array\n: max <= Math.pow(2, 32) ? Uint32Array\n: max <= Number.MAX_SAFE_INTEGER ? ZeroArray\n: null\n\nclass ZeroArray extends Array {\n  constructor (size) {\n    super(size)\n    this.fill(0)\n  }\n}\n\nclass Stack {\n  constructor (max) {\n    const UintArray = max ? getUintArray(max) : Array\n    this.heap = new UintArray(max)\n    this.length = 0\n  }\n  push (n) {\n    this.heap[this.length++] = n\n  }\n  pop () {\n    return this.heap[--this.length]\n  }\n}\n\nclass LRUCache {\n  constructor (options = {}) {\n    const {\n      max = 0,\n      ttl,\n      ttlResolution = 1,\n      ttlAutopurge,\n      updateAgeOnGet,\n      allowStale,\n      dispose,\n      disposeAfter,\n      noDisposeOnSet,\n      noUpdateTTL,\n      maxSize = 0,\n      sizeCalculation,\n      fetchMethod,\n    } = options\n\n    // deprecated options, don't trigger a warning for getting them if\n    // the thing being passed in is another LRUCache we're copying.\n    const {\n      length,\n      maxAge,\n      stale,\n    } = options instanceof LRUCache ? {} : options\n\n    if (max !== 0 && !isPosInt(max)) {\n      throw new TypeError('max option must be a nonnegative integer')\n    }\n\n    const UintArray = max ? getUintArray(max) : Array\n    if (!UintArray) {\n      throw new Error('invalid max value: ' + max)\n    }\n\n    this.max = max\n    this.maxSize = maxSize\n    this.sizeCalculation = sizeCalculation || length\n    if (this.sizeCalculation) {\n      if (!this.maxSize) {\n        throw new TypeError('cannot set sizeCalculation without setting maxSize')\n      }\n      if (typeof this.sizeCalculation !== 'function') {\n        throw new TypeError('sizeCalculating set to non-function')\n      }\n    }\n\n    this.fetchMethod = fetchMethod || null\n    if (this.fetchMethod && typeof this.fetchMethod !== 'function') {\n      throw new TypeError('fetchMethod must be a function if specified')\n    }\n\n\n    this.keyMap = new Map()\n    this.keyList = new Array(max).fill(null)\n    this.valList = new Array(max).fill(null)\n    this.next = new UintArray(max)\n    this.prev = new UintArray(max)\n    this.head = 0\n    this.tail = 0\n    this.free = new Stack(max)\n    this.initialFill = 1\n    this.size = 0\n\n    if (typeof dispose === 'function') {\n      this.dispose = dispose\n    }\n    if (typeof disposeAfter === 'function') {\n      this.disposeAfter = disposeAfter\n      this.disposed = []\n    } else {\n      this.disposeAfter = null\n      this.disposed = null\n    }\n    this.noDisposeOnSet = !!noDisposeOnSet\n    this.noUpdateTTL = !!noUpdateTTL\n\n    if (this.maxSize !== 0) {\n      if (!isPosInt(this.maxSize)) {\n        throw new TypeError('maxSize must be a positive integer if specified')\n      }\n      this.initializeSizeTracking()\n    }\n\n    this.allowStale = !!allowStale || !!stale\n    this.updateAgeOnGet = !!updateAgeOnGet\n    this.ttlResolution = isPosInt(ttlResolution) || ttlResolution === 0\n      ? ttlResolution : 1\n    this.ttlAutopurge = !!ttlAutopurge\n    this.ttl = ttl || maxAge || 0\n    if (this.ttl) {\n      if (!isPosInt(this.ttl)) {\n        throw new TypeError('ttl must be a positive integer if specified')\n      }\n      this.initializeTTLTracking()\n    }\n\n    // do not allow completely unbounded caches\n    if (this.max === 0 && this.ttl === 0 && this.maxSize === 0) {\n      throw new TypeError('At least one of max, maxSize, or ttl is required')\n    }\n    if (!this.ttlAutopurge && !this.max && !this.maxSize) {\n      const code = 'LRU_CACHE_UNBOUNDED'\n      if (shouldWarn(code)) {\n        warned.add(code)\n        const msg = 'TTL caching without ttlAutopurge, max, or maxSize can ' +\n          'result in unbounded memory consumption.'\n        process.emitWarning(msg, 'UnboundedCacheWarning', code, LRUCache)\n      }\n    }\n\n    if (stale) {\n      deprecatedOption('stale', 'allowStale')\n    }\n    if (maxAge) {\n      deprecatedOption('maxAge', 'ttl')\n    }\n    if (length) {\n      deprecatedOption('length', 'sizeCalculation')\n    }\n  }\n\n  getRemainingTTL (key) {\n    return this.has(key) ? Infinity : 0\n  }\n\n  initializeTTLTracking () {\n    this.ttls = new ZeroArray(this.max)\n    this.starts = new ZeroArray(this.max)\n\n    this.setItemTTL = (index, ttl) => {\n      this.starts[index] = ttl !== 0 ? perf.now() : 0\n      this.ttls[index] = ttl\n      if (ttl !== 0 && this.ttlAutopurge) {\n        const t = setTimeout(() => {\n          if (this.isStale(index)) {\n            this.delete(this.keyList[index])\n          }\n        }, ttl + 1)\n        /* istanbul ignore else - unref() not supported on all platforms */\n        if (t.unref) {\n          t.unref()\n        }\n      }\n    }\n\n    this.updateItemAge = (index) => {\n      this.starts[index] = this.ttls[index] !== 0 ? perf.now() : 0\n    }\n\n    // debounce calls to perf.now() to 1s so we're not hitting\n    // that costly call repeatedly.\n    let cachedNow = 0\n    const getNow = () => {\n      const n = perf.now()\n      if (this.ttlResolution > 0) {\n        cachedNow = n\n        const t = setTimeout(() => cachedNow = 0, this.ttlResolution)\n        /* istanbul ignore else - not available on all platforms */\n        if (t.unref) {\n          t.unref()\n        }\n      }\n      return n\n    }\n\n    this.getRemainingTTL = (key) => {\n      const index = this.keyMap.get(key)\n      if (index === undefined) {\n        return 0\n      }\n      return this.ttls[index] === 0 || this.starts[index] === 0 ? Infinity\n        : ((this.starts[index] + this.ttls[index]) - (cachedNow || getNow()))\n    }\n\n    this.isStale = (index) => {\n      return this.ttls[index] !== 0 && this.starts[index] !== 0 &&\n        ((cachedNow || getNow()) - this.starts[index] > this.ttls[index])\n    }\n  }\n  updateItemAge (index) {}\n  setItemTTL (index, ttl) {}\n  isStale (index) { return false }\n\n  initializeSizeTracking () {\n    this.calculatedSize = 0\n    this.sizes = new ZeroArray(this.max)\n    this.removeItemSize = index => this.calculatedSize -= this.sizes[index]\n    this.requireSize = (k, v, size, sizeCalculation) => {\n      if (sizeCalculation && !size) {\n        size = sizeCalculation(v, k)\n      }\n      if (!isPosInt(size)) {\n        throw new TypeError('size must be positive integer')\n      }\n      return size\n    }\n    this.addItemSize = (index, v, k, size) => {\n      this.sizes[index] = size\n      const maxSize = this.maxSize - this.sizes[index]\n      while (this.calculatedSize > maxSize) {\n        this.evict()\n      }\n      this.calculatedSize += this.sizes[index]\n    }\n    this.delete = k => {\n      if (this.size !== 0) {\n        const index = this.keyMap.get(k)\n        if (index !== undefined) {\n          this.calculatedSize -= this.sizes[index]\n        }\n      }\n      return LRUCache.prototype.delete.call(this, k)\n    }\n  }\n  removeItemSize (index) {}\n  addItemSize (index, v, k, size) {}\n  requireSize (k, v, size, sizeCalculation) {\n    if (size || sizeCalculation) {\n      throw new TypeError('cannot set size without setting maxSize on cache')\n    }\n  }\n\n  *indexes ({ allowStale = this.allowStale } = {}) {\n    if (this.size) {\n      for (let i = this.tail; true; ) {\n        if (!this.isValidIndex(i)) {\n          break\n        }\n        if (allowStale || !this.isStale(i)) {\n          yield i\n        }\n        if (i === this.head) {\n          break\n        } else {\n          i = this.prev[i]\n        }\n      }\n    }\n  }\n\n  *rindexes ({ allowStale = this.allowStale } = {}) {\n    if (this.size) {\n      for (let i = this.head; true; ) {\n        if (!this.isValidIndex(i)) {\n          break\n        }\n        if (allowStale || !this.isStale(i)) {\n          yield i\n        }\n        if (i === this.tail) {\n          break\n        } else {\n          i = this.next[i]\n        }\n      }\n    }\n  }\n\n  isValidIndex (index) {\n    return this.keyMap.get(this.keyList[index]) === index\n  }\n\n  *entries () {\n    for (const i of this.indexes()) {\n      yield [this.keyList[i], this.valList[i]]\n    }\n  }\n  *rentries () {\n    for (const i of this.rindexes()) {\n      yield [this.keyList[i], this.valList[i]]\n    }\n  }\n\n  *keys () {\n    for (const i of this.indexes()) {\n      yield this.keyList[i]\n    }\n  }\n  *rkeys () {\n    for (const i of this.rindexes()) {\n      yield this.keyList[i]\n    }\n  }\n\n  *values () {\n    for (const i of this.indexes()) {\n      yield this.valList[i]\n    }\n  }\n  *rvalues () {\n    for (const i of this.rindexes()) {\n      yield this.valList[i]\n    }\n  }\n\n  [Symbol.iterator] () {\n    return this.entries()\n  }\n\n  find (fn, getOptions = {}) {\n    for (const i of this.indexes()) {\n      if (fn(this.valList[i], this.keyList[i], this)) {\n        return this.get(this.keyList[i], getOptions)\n      }\n    }\n  }\n\n  forEach (fn, thisp = this) {\n    for (const i of this.indexes()) {\n      fn.call(thisp, this.valList[i], this.keyList[i], this)\n    }\n  }\n\n  rforEach (fn, thisp = this) {\n    for (const i of this.rindexes()) {\n      fn.call(thisp, this.valList[i], this.keyList[i], this)\n    }\n  }\n\n  get prune () {\n    deprecatedMethod('prune', 'purgeStale')\n    return this.purgeStale\n  }\n\n  purgeStale () {\n    let deleted = false\n    for (const i of this.rindexes({ allowStale: true })) {\n      if (this.isStale(i)) {\n        this.delete(this.keyList[i])\n        deleted = true\n      }\n    }\n    return deleted\n  }\n\n  dump () {\n    const arr = []\n    for (const i of this.indexes()) {\n      const key = this.keyList[i]\n      const value = this.valList[i]\n      const entry = { value }\n      if (this.ttls) {\n        entry.ttl = this.ttls[i]\n      }\n      if (this.sizes) {\n        entry.size = this.sizes[i]\n      }\n      arr.unshift([key, entry])\n    }\n    return arr\n  }\n\n  load (arr) {\n    this.clear()\n    for (const [key, entry] of arr) {\n      this.set(key, entry.value, entry)\n    }\n  }\n\n  dispose (v, k, reason) {}\n\n  set (k, v, {\n    ttl = this.ttl,\n    noDisposeOnSet = this.noDisposeOnSet,\n    size = 0,\n    sizeCalculation = this.sizeCalculation,\n    noUpdateTTL = this.noUpdateTTL,\n  } = {}) {\n    size = this.requireSize(k, v, size, sizeCalculation)\n    let index = this.size === 0 ? undefined : this.keyMap.get(k)\n    if (index === undefined) {\n      // addition\n      index = this.newIndex()\n      this.keyList[index] = k\n      this.valList[index] = v\n      this.keyMap.set(k, index)\n      this.next[this.tail] = index\n      this.prev[index] = this.tail\n      this.tail = index\n      this.size ++\n      this.addItemSize(index, v, k, size)\n      noUpdateTTL = false\n    } else {\n      // update\n      const oldVal = this.valList[index]\n      if (v !== oldVal) {\n        if (this.isBackgroundFetch(oldVal)) {\n          oldVal.__abortController.abort()\n        } else {\n          if (!noDisposeOnSet) {\n            this.dispose(oldVal, k, 'set')\n            if (this.disposeAfter) {\n              this.disposed.push([oldVal, k, 'set'])\n            }\n          }\n        }\n        this.removeItemSize(index)\n        this.valList[index] = v\n        this.addItemSize(index, v, k, size)\n      }\n      this.moveToTail(index)\n    }\n    if (ttl !== 0 && this.ttl === 0 && !this.ttls) {\n      this.initializeTTLTracking()\n    }\n    if (!noUpdateTTL) {\n      this.setItemTTL(index, ttl)\n    }\n    if (this.disposeAfter) {\n      while (this.disposed.length) {\n        this.disposeAfter(...this.disposed.shift())\n      }\n    }\n    return this\n  }\n\n  newIndex () {\n    if (this.size === 0) {\n      return this.tail\n    }\n    if (this.size === this.max) {\n      return this.evict()\n    }\n    if (this.free.length !== 0) {\n      return this.free.pop()\n    }\n    // initial fill, just keep writing down the list\n    return this.initialFill++\n  }\n\n  pop () {\n    if (this.size) {\n      const val = this.valList[this.head]\n      this.evict()\n      return val\n    }\n  }\n\n  evict () {\n    const head = this.head\n    const k = this.keyList[head]\n    const v = this.valList[head]\n    if (this.isBackgroundFetch(v)) {\n      v.__abortController.abort()\n    } else {\n      this.dispose(v, k, 'evict')\n      if (this.disposeAfter) {\n        this.disposed.push([v, k, 'evict'])\n      }\n    }\n    this.removeItemSize(head)\n    this.head = this.next[head]\n    this.keyMap.delete(k)\n    this.size --\n    return head\n  }\n\n  has (k) {\n    return this.keyMap.has(k) && !this.isStale(this.keyMap.get(k))\n  }\n\n  // like get(), but without any LRU updating or TTL expiration\n  peek (k, { allowStale = this.allowStale } = {}) {\n    const index = this.keyMap.get(k)\n    if (index !== undefined && (allowStale || !this.isStale(index))) {\n      return this.valList[index]\n    }\n  }\n\n  backgroundFetch (k, index, options) {\n    const v = index === undefined ? undefined : this.valList[index]\n    if (this.isBackgroundFetch(v)) {\n      return v\n    }\n    const ac = new AbortController()\n    const fetchOpts = {\n      signal: ac.signal,\n      options,\n    }\n    const p = Promise.resolve(this.fetchMethod(k, v, fetchOpts)).then(v => {\n      if (!ac.signal.aborted) {\n        this.set(k, v, fetchOpts.options)\n      }\n      return v\n    })\n    p.__abortController = ac\n    p.__staleWhileFetching = v\n    if (index === undefined) {\n      this.set(k, p, fetchOpts.options)\n      index = this.keyMap.get(k)\n    } else {\n      this.valList[index] = p\n    }\n    return p\n  }\n\n  isBackgroundFetch (p) {\n    return p && typeof p === 'object' && typeof p.then === 'function' &&\n      Object.prototype.hasOwnProperty.call(p, '__staleWhileFetching')\n  }\n\n  // this takes the union of get() and set() opts, because it does both\n  async fetch (k, {\n    allowStale = this.allowStale,\n    updateAgeOnGet = this.updateAgeOnGet,\n    ttl = this.ttl,\n    noDisposeOnSet = this.noDisposeOnSet,\n    size = 0,\n    sizeCalculation = this.sizeCalculation,\n    noUpdateTTL = this.noUpdateTTL,\n  } = {}) {\n    if (!this.fetchMethod) {\n      return this.get(k, {allowStale, updateAgeOnGet})\n    }\n\n    const options = {\n      allowStale,\n      updateAgeOnGet,\n      ttl,\n      noDisposeOnSet,\n      size,\n      sizeCalculation,\n      noUpdateTTL,\n    }\n\n    let index = this.keyMap.get(k)\n    if (index === undefined) {\n      return this.backgroundFetch(k, index, options)\n    } else {\n      // in cache, maybe already fetching\n      const v = this.valList[index]\n      if (this.isBackgroundFetch(v)) {\n        return allowStale && v.__staleWhileFetching !== undefined\n          ? v.__staleWhileFetching : v\n      }\n\n      if (!this.isStale(index)) {\n        this.moveToTail(index)\n        if (updateAgeOnGet) {\n          this.updateItemAge(index)\n        }\n        return v\n      }\n\n      // ok, it is stale, and not already fetching\n      // refresh the cache.\n      const p = this.backgroundFetch(k, index, options)\n      return allowStale && p.__staleWhileFetching !== undefined\n        ? p.__staleWhileFetching : p\n    }\n  }\n\n  get (k, {\n    allowStale = this.allowStale,\n    updateAgeOnGet = this.updateAgeOnGet,\n  } = {}) {\n    const index = this.keyMap.get(k)\n    if (index !== undefined) {\n      const value = this.valList[index]\n      const fetching = this.isBackgroundFetch(value)\n      if (this.isStale(index)) {\n        // delete only if not an in-flight background fetch\n        if (!fetching) {\n          this.delete(k)\n          return allowStale ? value : undefined\n        } else {\n          return allowStale ? value.__staleWhileFetching : undefined\n        }\n      } else {\n        // if we're currently fetching it, we don't actually have it yet\n        // it's not stale, which means this isn't a staleWhileRefetching,\n        // so we just return undefined\n        if (fetching) {\n          return undefined\n        }\n        this.moveToTail(index)\n        if (updateAgeOnGet) {\n          this.updateItemAge(index)\n        }\n        return value\n      }\n    }\n  }\n\n  connect (p, n) {\n    this.prev[n] = p\n    this.next[p] = n\n  }\n\n  moveToTail (index) {\n    // if tail already, nothing to do\n    // if head, move head to next[index]\n    // else\n    //   move next[prev[index]] to next[index] (head has no prev)\n    //   move prev[next[index]] to prev[index]\n    // prev[index] = tail\n    // next[tail] = index\n    // tail = index\n    if (index !== this.tail) {\n      if (index === this.head) {\n        this.head = this.next[index]\n      } else {\n        this.connect(this.prev[index], this.next[index])\n      }\n      this.connect(this.tail, index)\n      this.tail = index\n    }\n  }\n\n  get del () {\n    deprecatedMethod('del', 'delete')\n    return this.delete\n  }\n  delete (k) {\n    let deleted = false\n    if (this.size !== 0) {\n      const index = this.keyMap.get(k)\n      if (index !== undefined) {\n        deleted = true\n        if (this.size === 1) {\n          this.clear()\n        } else {\n          this.removeItemSize(index)\n          const v = this.valList[index]\n          if (this.isBackgroundFetch(v)) {\n            v.__abortController.abort()\n          } else {\n            this.dispose(v, k, 'delete')\n            if (this.disposeAfter) {\n              this.disposed.push([v, k, 'delete'])\n            }\n          }\n          this.keyMap.delete(k)\n          this.keyList[index] = null\n          this.valList[index] = null\n          if (index === this.tail) {\n            this.tail = this.prev[index]\n          } else if (index === this.head) {\n            this.head = this.next[index]\n          } else {\n            this.next[this.prev[index]] = this.next[index]\n            this.prev[this.next[index]] = this.prev[index]\n          }\n          this.size --\n          this.free.push(index)\n        }\n      }\n    }\n    if (this.disposed) {\n      while (this.disposed.length) {\n        this.disposeAfter(...this.disposed.shift())\n      }\n    }\n    return deleted\n  }\n\n  clear () {\n    for (const index of this.rindexes({ allowStale: true })) {\n      const v = this.valList[index]\n      if (this.isBackgroundFetch(v)) {\n        v.__abortController.abort()\n      } else {\n        const k = this.keyList[index]\n        this.dispose(v, k, 'delete')\n        if (this.disposeAfter) {\n          this.disposed.push([v, k, 'delete'])\n        }\n      }\n    }\n\n    this.keyMap.clear()\n    this.valList.fill(null)\n    this.keyList.fill(null)\n    if (this.ttls) {\n      this.ttls.fill(0)\n      this.starts.fill(0)\n    }\n    if (this.sizes) {\n      this.sizes.fill(0)\n    }\n    this.head = 0\n    this.tail = 0\n    this.initialFill = 1\n    this.free.length = 0\n    this.calculatedSize = 0\n    this.size = 0\n    if (this.disposed) {\n      while (this.disposed.length) {\n        this.disposeAfter(...this.disposed.shift())\n      }\n    }\n  }\n  get reset () {\n    deprecatedMethod('reset', 'clear')\n    return this.clear\n  }\n\n  get length () {\n    deprecatedProperty('length', 'size')\n    return this.size\n  }\n}\n\nmodule.exports = LRUCache\n","import { LRParser } from '@lezer/lr';\n\n// This file was generated by lezer-generator. You probably shouldn't edit it.\nconst \n  inf = 146,\n  nan = 147,\n  Bool = 1,\n  Ignoring = 2,\n  On = 3,\n  GroupLeft = 4,\n  GroupRight = 5,\n  Offset = 6,\n  Atan2 = 7,\n  Avg = 8,\n  Bottomk = 9,\n  Count = 10,\n  CountValues = 11,\n  Group = 12,\n  Max = 13,\n  Min = 14,\n  Quantile = 15,\n  Stddev = 16,\n  Stdvar = 17,\n  Sum = 18,\n  Topk = 19,\n  By = 20,\n  Without = 21,\n  And = 22,\n  Or = 23,\n  Unless = 24,\n  Start = 25,\n  End = 26;\n\n// Copyright 2021 The Prometheus Authors\n\nconst keywordTokens = {\n    inf: inf,\n    nan: nan,\n    bool: Bool,\n    ignoring: Ignoring,\n    on: On,\n    group_left: GroupLeft,\n    group_right: GroupRight,\n    offset: Offset,\n};\n\nconst specializeIdentifier = (value, stack) => {\n    return keywordTokens[value.toLowerCase()] || -1;\n};\n\nconst contextualKeywordTokens = {\n    avg: Avg,\n    atan2: Atan2,\n    bottomk: Bottomk,\n    count: Count,\n    count_values: CountValues,\n    group: Group,\n    max: Max,\n    min: Min,\n    quantile: Quantile,\n    stddev: Stddev,\n    stdvar: Stdvar,\n    sum: Sum,\n    topk: Topk,\n    by: By,\n    without: Without,\n    and: And,\n    or: Or,\n    unless: Unless,\n    start: Start,\n    end: End,\n};\n\nconst extendIdentifier = (value, stack) => {\n    return contextualKeywordTokens[value.toLowerCase()] || -1;\n};\n\n// This file was generated by lezer-generator. You probably shouldn't edit it.\nconst spec_Identifier = {__proto__:null,absent_over_time:307, absent:309, abs:311, acos:313, acosh:315, asin:317, asinh:319, atan:321, atanh:323, avg_over_time:325, ceil:327, changes:329, clamp:331, clamp_max:333, clamp_min:335, cos:337, cosh:339, count_over_time:341, days_in_month:343, day_of_month:345, day_of_week:347, deg:349, delta:351, deriv:353, exp:355, floor:357, histogram_quantile:359, holt_winters:361, hour:363, idelta:365, increase:367, irate:369, label_replace:371, label_join:373, last_over_time:375, ln:377, log10:379, log2:381, max_over_time:383, min_over_time:385, minute:387, month:389, pi:391, predict_linear:393, present_over_time:395, quantile_over_time:397, rad:399, rate:401, resets:403, round:405, scalar:407, sgn:409, sin:411, sinh:413, sort:415, sort_desc:417, sqrt:419, stddev_over_time:421, stdvar_over_time:423, sum_over_time:425, tan:427, tanh:429, timestamp:431, time:433, vector:435, year:437};\nconst parser = LRParser.deserialize({\n  version: 13,\n  states: \"6[OYQPOOO&{QPOOOOQO'#C{'#C{O'QQPO'#CzQ']QQOOOOQO'#De'#DeO'WQPO'#DdOOQO'#E}'#E}O(jQPO'#FTOYQPO'#FPOYQPO'#FSOOQO'#FV'#FVO.fQSO'#FWO.nQQO'#FUOOQO'#FU'#FUOOQO'#Cy'#CyOOQO'#Df'#DfOOQO'#Dh'#DhOOQO'#Di'#DiOOQO'#Dj'#DjOOQO'#Dk'#DkOOQO'#Dl'#DlOOQO'#Dm'#DmOOQO'#Dn'#DnOOQO'#Do'#DoOOQO'#Dp'#DpOOQO'#Dq'#DqOOQO'#Dr'#DrOOQO'#Ds'#DsOOQO'#Dt'#DtOOQO'#Du'#DuOOQO'#Dv'#DvOOQO'#Dw'#DwOOQO'#Dx'#DxOOQO'#Dy'#DyOOQO'#Dz'#DzOOQO'#D{'#D{OOQO'#D|'#D|OOQO'#D}'#D}OOQO'#EO'#EOOOQO'#EP'#EPOOQO'#EQ'#EQOOQO'#ER'#EROOQO'#ES'#ESOOQO'#ET'#ETOOQO'#EU'#EUOOQO'#EV'#EVOOQO'#EW'#EWOOQO'#EX'#EXOOQO'#EY'#EYOOQO'#EZ'#EZOOQO'#E['#E[OOQO'#E]'#E]OOQO'#E^'#E^OOQO'#E_'#E_OOQO'#E`'#E`OOQO'#Ea'#EaOOQO'#Eb'#EbOOQO'#Ec'#EcOOQO'#Ed'#EdOOQO'#Ee'#EeOOQO'#Ef'#EfOOQO'#Eg'#EgOOQO'#Eh'#EhOOQO'#Ei'#EiOOQO'#Ej'#EjOOQO'#Ek'#EkOOQO'#El'#ElOOQO'#Em'#EmOOQO'#En'#EnOOQO'#Eo'#EoOOQO'#Ep'#EpOOQO'#Eq'#EqOOQO'#Er'#ErOOQO'#Es'#EsOOQO'#Et'#EtOOQO'#Eu'#EuOOQO'#Ev'#EvOOQO'#Ew'#EwOOQO'#Ex'#ExOOQO'#Ey'#EyOOQO'#Ez'#EzQOQPOOO0XQPO'#C|O0^QPO'#DRO'WQPO,59fO0eQQO,59fO2RQPO,59oO2RQPO,59oO2RQPO,59oO2RQPO,59oO2RQPO,59oO7}QQO,5;gO8SQQO,5;jO8[QPO,5;yOOQO,5:O,5:OOOQO,5;i,5;iO8sQQO,5;kO8zQQO,5;nO:bQPO'#FYO:pQPO,5;rOOQO'#FX'#FXOOQO,5;r,5;rOOQO,5;p,5;pO:xQSO'#C}OOQO,59h,59hO;QQPO,59mO;YQQO'#DSOOQO,59m,59mOOQO1G/Q1G/QO0XQPO'#DWOAVQPO'#DVOAaQPO'#DVOYQPO1G/ZOYQPO1G/ZOYQPO1G/ZOYQPO1G/ZOYQPO1G/ZOAkQSO1G1ROOQO1G1U1G1UOAsQQO1G1UOAxQPO'#E}OOQO'#Fa'#FaOOQO1G1e1G1eOBTQPO1G1eOOQO1G1V1G1VOOQO'#FZ'#FZOBYQPO,5;tOB_QSO1G1^OOQO1G1^1G1^OOQO'#DP'#DPOBgQPO,59iOOQO'#DO'#DOOOQO,59i,59iOYQPO,59nOOQO1G/X1G/XOOQO,59r,59rOH_QPO,59qOHfQPO,59qOI}QQO7+$uOJ_QQO7+$uOKsQQO7+$uOLZQQO7+$uOMrQQO7+$uOOQO7+&m7+&mON]QQO7+&sOOQO7+&p7+&pONeQPO7+'POOQO1G1`1G1`OOQO1G1_1G1_OOQO7+&x7+&xONjQSO1G/TOOQO1G/T1G/TONrQQO1G/YOOQO1G/]1G/]ON|QPO1G/]OOQO<<J_<<J_O!&oQPO<<J_OOQO<<Jk<<JkOOQO1G/U1G/UOOQO7+$o7+$oOOQO7+$w7+$wOOQOAN?yAN?y\",\n  stateData: \"!&t~O$ZOSkOS~OWQOXQOYQOZQO[QO]QO^QO_QO`QOaQObQOcQO!ZZO#t_O$WVO$XVO$[XO$_`O$`aO$abO$bcO$cdO$deO$efO$fgO$ghO$hiO$ijO$jkO$klO$lmO$mnO$noO$opO$pqO$qrO$rsO$stO$tuO$uvO$vwO$wxO$xyO$yzO$z{O${|O$|}O$}!OO%O!PO%P!QO%Q!RO%R!SO%S!TO%T!UO%U!VO%V!WO%W!XO%X!YO%Y!ZO%Z![O%[!]O%]!^O%^!_O%_!`O%`!aO%a!bO%b!cO%c!dO%d!eO%e!fO%f!gO%g!hO%h!iO%i!jO%j!kO%k!lO%l!mO%m!nO%n!oO%o!pO%p!qO%q!rO%r!sO%uWO%vWO%wVO%y[O~O!ZZO~Od!uOe!uO$[!vO~OU#POV!yOf!|Og!}Oh!|Ox!yO{!yO|!yO}!yO!O!zO!P!zO!Q!{O!R!{O!S!{O!T!{O!U!{O!V!{O$S#QO%s#OO~O$W#SO$X#SO%w#SOW#wXX#wXY#wXZ#wX[#wX]#wX^#wX_#wX`#wXa#wXb#wXc#wX!Z#wX#t#wX$W#wX$X#wX$[#wX$_#wX$`#wX$a#wX$b#wX$c#wX$d#wX$e#wX$f#wX$g#wX$h#wX$i#wX$j#wX$k#wX$l#wX$m#wX$n#wX$o#wX$p#wX$q#wX$r#wX$s#wX$t#wX$u#wX$v#wX$w#wX$x#wX$y#wX$z#wX${#wX$|#wX$}#wX%O#wX%P#wX%Q#wX%R#wX%S#wX%T#wX%U#wX%V#wX%W#wX%X#wX%Y#wX%Z#wX%[#wX%]#wX%^#wX%_#wX%`#wX%a#wX%b#wX%c#wX%d#wX%e#wX%f#wX%g#wX%h#wX%i#wX%j#wX%k#wX%l#wX%m#wX%n#wX%o#wX%p#wX%q#wX%r#wX%u#wX%v#wX%w#wX%y#wX~Ot#VO%z#YO~O%y[OU#xXV#xXf#xXg#xXh#xXx#xX{#xX|#xX}#xX!O#xX!P#xX!Q#xX!R#xX!S#xX!T#xX!U#xX!V#xX$S#xX$V#xX%s#xX$^#xX$]#xX~O$[#[O~O$^#`O~PYOd!uOe!uOUnaVnafnagnahnaxna{na|na}na!Ona!Pna!Qna!Rna!Sna!Tna!Una!Vna$Sna$Vna%sna$^na$]na~OP#dOQ#bOR#bOWyPXyPYyPZyP[yP]yP^yP_yP`yPayPbyPcyP!ZyP#tyP$WyP$XyP$[yP$_yP$`yP$ayP$byP$cyP$dyP$eyP$fyP$gyP$hyP$iyP$jyP$kyP$lyP$myP$nyP$oyP$pyP$qyP$ryP$syP$tyP$uyP$vyP$wyP$xyP$yyP$zyP${yP$|yP$}yP%OyP%PyP%QyP%RyP%SyP%TyP%UyP%VyP%WyP%XyP%YyP%ZyP%[yP%]yP%^yP%_yP%`yP%ayP%byP%cyP%dyP%eyP%fyP%gyP%hyP%iyP%jyP%kyP%lyP%myP%nyP%oyP%pyP%qyP%ryP%uyP%vyP%wyP%yyP~O#p#jO~O!P#lO#p#kO~Oi#nOj#nO$WVO$XVO%u#mO%v#mO%wVO~O$^#qO~P']Ox!yOU#vaV#vaf#vag#vah#va{#va|#va}#va!O#va!P#va!Q#va!R#va!S#va!T#va!U#va!V#va$S#va$V#va%s#va$^#va$]#va~O!V#rO$O#rO$P#rO$Q#rO~O$]#tO%z#uO~Ot#vO$^#yO~O$]#zO$^#{O~O$]vX$^vX~P']OWyXXyXYyXZyX[yX]yX^yX_yX`yXayXbyXcyX!ZyX#tyX$WyX$XyX$[yX$_yX$`yX$ayX$byX$cyX$dyX$eyX$fyX$gyX$hyX$iyX$jyX$kyX$lyX$myX$nyX$oyX$pyX$qyX$ryX$syX$tyX$uyX$vyX$wyX$xyX$yyX$zyX${yX$|yX$}yX%OyX%PyX%QyX%RyX%SyX%TyX%UyX%VyX%WyX%XyX%YyX%ZyX%[yX%]yX%^yX%_yX%`yX%ayX%byX%cyX%dyX%eyX%fyX%gyX%hyX%iyX%jyX%kyX%lyX%myX%nyX%oyX%pyX%qyX%ryX%uyX%vyX%wyX%yyX~OS#}OT#}O~P;dOQ#bOR#bO~P;dO%t$UO%x$VO~O#p$WO~O$W#SO$X#SO%w#SO~O$[$XO~O#t$YO~Ot#VO%z$[O~O$]$]O$^$^O~OWyaXyaYyaZya[ya]ya^ya_ya`yaayabyacya!Zya#tya$Wya$Xya$_ya$`ya$aya$bya$cya$dya$eya$fya$gya$hya$iya$jya$kya$lya$mya$nya$oya$pya$qya$rya$sya$tya$uya$vya$wya$xya$yya$zya${ya$|ya$}ya%Oya%Pya%Qya%Rya%Sya%Tya%Uya%Vya%Wya%Xya%Yya%Zya%[ya%]ya%^ya%_ya%`ya%aya%bya%cya%dya%eya%fya%gya%hya%iya%jya%kya%lya%mya%nya%oya%pya%qya%rya%uya%vya%wya%yya~O$[#[O~PBoOS$aOT$aO$[ya~PBoOx!yOUwqfwqgwqhwq!Owq!Pwq!Qwq!Rwq!Swq!Twq!Uwq!Vwq$Swq$Vwq%swq$^wq$]wq~OVwq{wq|wq}wq~PHsOV!yO{!yO|!yO}!yO~PHsOV!yOx!yO{!yO|!yO}!yO!O!zO!P!zOUwqfwqgwqhwq$Swq$Vwq%swq$^wq$]wq~O!Qwq!Rwq!Swq!Twq!Uwq!Vwq~PJoO!Q!{O!R!{O!S!{O!T!{O!U!{O!V!{O~PJoOV!yOf!|Oh!|Ox!yO{!yO|!yO}!yO!O!zO!P!zO!Q!{O!R!{O!S!{O!T!{O!U!{O!V!{O~OUwqgwq$Swq$Vwq%swq$^wq$]wq~PLqO#p$cO%t$bO~O$^$dO~Ot#vO$^$fO~O$]vi$^vi~P']O$[#[OWyiXyiYyiZyi[yi]yi^yi_yi`yiayibyicyi!Zyi#tyi$Wyi$Xyi$_yi$`yi$ayi$byi$cyi$dyi$eyi$fyi$gyi$hyi$iyi$jyi$kyi$lyi$myi$nyi$oyi$pyi$qyi$ryi$syi$tyi$uyi$vyi$wyi$xyi$yyi$zyi${yi$|yi$}yi%Oyi%Pyi%Qyi%Ryi%Syi%Tyi%Uyi%Vyi%Wyi%Xyi%Yyi%Zyi%[yi%]yi%^yi%_yi%`yi%ayi%byi%cyi%dyi%eyi%fyi%gyi%hyi%iyi%jyi%kyi%lyi%myi%nyi%oyi%pyi%qyi%ryi%uyi%vyi%wyi%yyi~O%t$hO~O\",\n  goto: \"(u$UPPPPPPPPPPPPPPPPPPPPPPPPPPPPP$V$u%R%_%e%q%tP%z&T$uP&W&gPPPPPPPPPPP$u&q&}P&}&}&}&}&}&}&}&}&}&}&}&}&}&}&}&}&}&}&}&}&}&}&}&}&}&}&}&}&}&}&}&}&}&}&}&}&}&}&}&}&}&}&}&}&}&}&}&}&}&}&}&}&}&}&}&}&}&}&}&}&}&}&}&}&}$uP'Z$u$uP$u$u'j$u'v(V(f(i(oPPP$uP(rQSOQ#TXQ#UYQ#_!vQ$P#eQ$Q#fQ$R#gQ$S#hQ$T#iR$_#ze_OXY!v#e#f#g#h#i#zeROXY!v#e#f#g#h#i#zQ!wRR#a!xQ#]!uQ#|#bQ$`#}R$g$aR#w#[Q#x#[R$e$]Q!xRQ#RUR#a!wR#^!vQ#e!yQ#f!zQ#g!{Q#h!|R#i!}Y#c!y!z!{!|!}R$O#deUOXY!v#e#f#g#h#i#zeTOXY!v#e#f#g#h#i#zd_OXY!v#e#f#g#h#i#zR#o#QeYOXY!v#e#f#g#h#i#zd]OXY!v#e#f#g#h#i#zR!tPd^OXY!v#e#f#g#h#i#zR#Z]R#W[Q#X[R$Z#tR#s#VR#p#Q\",\n  nodeNames: \"⚠ Bool Ignoring On GroupLeft GroupRight Offset Atan2 Avg Bottomk Count CountValues Group Max Min Quantile Stddev Stdvar Sum Topk By Without And Or Unless Start End LineComment PromQL Expr AggregateExpr AggregateOp AggregateModifier GroupingLabels GroupingLabelList GroupingLabel LabelName FunctionCallBody FunctionCallArgs BinaryExpr Pow BinModifiers OnOrIgnoring Mul Div Mod Add Sub Eql Gte Gtr Lte Lss Neq FunctionCall FunctionIdentifier AbsentOverTime Identifier Absent Abs Acos Acosh Asin Asinh Atan Atanh AvgOverTime Ceil Changes Clamp ClampMax ClampMin Cos Cosh CountOverTime DaysInMonth DayOfMonth DayOfWeek Deg Delta Deriv Exp Floor HistogramQuantile HoltWinters Hour Idelta Increase Irate LabelReplace LabelJoin LastOverTime Ln Log10 Log2 MaxOverTime MinOverTime Minute Month Pi PredictLinear PresentOverTime QuantileOverTime Rad Rate Resets Round Scalar Sgn Sin Sinh Sort SortDesc Sqrt StddevOverTime StdvarOverTime SumOverTime Tan Tanh Timestamp Time Vector Year MatrixSelector Duration NumberLiteral OffsetExpr ParenExpr StringLiteral SubqueryExpr UnaryExpr UnaryOp VectorSelector MetricIdentifier LabelMatchers LabelMatchList LabelMatcher MatchOp EqlSingle EqlRegex NeqRegex StepInvariantExpr At AtModifierPreprocessors MetricName\",\n  maxTerm: 226,\n  skippedNodes: [0,27],\n  repeatNodeCount: 0,\n  tokenData: \"1R~RwX^#lpq#lqr$ars$tst%huv%swx%xxy&gyz&lz{&q{|&v|}&}}!O'S!O!P'Z!P!Q(Z!Q!R(`!R![)W![!]-r!^!_.n!_!`.{!`!a/b!b!c/o!c!}/t!}#O0[#P#Q0a#Q#R0f#R#S/t#S#T0k#T#o/t#o#p0w#q#r0|#y#z#l$f$g#l#BY#BZ#l$IS$I_#l$I|$JO#l$JT$JU#l$KV$KW#l&FU&FV#l~#qY$Z~X^#lpq#l#y#z#l$f$g#l#BY#BZ#l$IS$I_#l$I|$JO#l$JT$JU#l$KV$KW#l&FU&FV#l~$dQ!_!`$j#r#s$o~$oO!V~~$tO$Q~~$yU#t~OY$tZr$trs%]s#O$t#O#P%b#P~$t~%bO#t~~%ePO~$t~%mQk~OY%hZ~%h~%xO}~~%}U#t~OY%xZw%xwx%]x#O%x#O#P&a#P~%x~&dPO~%x~&lO$[~~&qO$^~~&vO{~R&}O%vP!OQ~'SO$]~R'ZO%uP!PQP'^P!Q!['aP'fR%wP!Q!['a!g!h'o#X#Y'oP'rR{|'{}!O'{!Q![(RP(OP!Q![(RP(WP%wP!Q![(R~(`O|~R(eZ%wP!O!P'a!Q![)W!g!h'o#W#X){#X#Y'o#[#]*d#a#b*x#g#h+l#k#l+}#l#m-W#m#n,iR)]Y%wP!O!P'a!Q![)W!g!h'o#W#X){#X#Y'o#[#]*d#a#b*x#g#h+l#k#l+}#m#n,iQ*QP#pQ!Q![*TQ*WS!Q![*T#[#]*d#a#b*x#g#h+lQ*iP#pQ!Q![*lQ*oR!Q![*l#a#b*x#g#h+lQ*}Q#pQ!Q![+T#g#h+gQ+WR!Q![+T#a#b+a#g#h+lQ+dP#g#h+gQ+lO#pQQ+qP#pQ!Q![+tQ+wQ!Q![+t#a#b+aQ,SP#pQ!Q![,VQ,YT!Q![,V#W#X){#[#]*d#a#b*x#g#h+lQ,nP#pQ!Q![,qQ,tU!Q![,q#W#X){#[#]*d#a#b*x#g#h+l#k#l+}P-ZR!Q![-d!c!i-d#T#Z-dP-iR%wP!Q![-d!c!i-d#T#Z-dV-yT%xS!ZR!Q![.Y![!].Y!c!}.Y#R#S.Y#T#o.YR._T!ZR!Q![.Y![!].Y!c!}.Y#R#S.Y#T#o.Y~.sP!U~!_!`.v~.{O!T~~/QQ$OP!_!`/W#r#s/]Q/]O!QQ~/bO$P~~/gP!S~!_!`/j~/oO!R~~/tO$S~V/{T!ZRtS!Q![/t![!].Y!c!}/t#R#S/t#T#o/t~0aO%s~~0fO%t~~0kOx~~0nRO#S0k#S#T%]#T~0k~0|O%y~~1RO%z~\",\n  tokenizers: [0, 1, 2],\n  topRules: {\"PromQL\":[0,28],\"MetricName\":[1,144]},\n  specialized: [{term: 57, get: (value, stack) => (specializeIdentifier(value) << 1)},{term: 57, get: (value, stack) => (extendIdentifier(value) << 1) | 1},{term: 57, get: value => spec_Identifier[value] || -1}],\n  tokenPrec: 0\n});\n// This file was generated by lezer-generator. You probably shouldn't edit it.\nconst \n  inf$1 = 146,\n  nan$1 = 147,\n  Bool$1 = 1,\n  Ignoring$1 = 2,\n  On$1 = 3,\n  GroupLeft$1 = 4,\n  GroupRight$1 = 5,\n  Offset$1 = 6,\n  Atan2$1 = 7,\n  Avg$1 = 8,\n  Bottomk$1 = 9,\n  Count$1 = 10,\n  CountValues$1 = 11,\n  Group$1 = 12,\n  Max$1 = 13,\n  Min$1 = 14,\n  Quantile$1 = 15,\n  Stddev$1 = 16,\n  Stdvar$1 = 17,\n  Sum$1 = 18,\n  Topk$1 = 19,\n  By$1 = 20,\n  Without$1 = 21,\n  And$1 = 22,\n  Or$1 = 23,\n  Unless$1 = 24,\n  Start$1 = 25,\n  End$1 = 26,\n  LineComment = 27,\n  PromQL = 28,\n  Expr = 29,\n  AggregateExpr = 30,\n  AggregateOp = 31,\n  AggregateModifier = 32,\n  GroupingLabels = 33,\n  GroupingLabelList = 34,\n  GroupingLabel = 35,\n  LabelName = 36,\n  FunctionCallBody = 37,\n  FunctionCallArgs = 38,\n  BinaryExpr = 39,\n  Pow = 40,\n  BinModifiers = 41,\n  OnOrIgnoring = 42,\n  Mul = 43,\n  Div = 44,\n  Mod = 45,\n  Add = 46,\n  Sub = 47,\n  Eql = 48,\n  Gte = 49,\n  Gtr = 50,\n  Lte = 51,\n  Lss = 52,\n  Neq = 53,\n  FunctionCall = 54,\n  FunctionIdentifier = 55,\n  AbsentOverTime = 56,\n  Identifier = 57,\n  Absent = 58,\n  Abs = 59,\n  Acos = 60,\n  Acosh = 61,\n  Asin = 62,\n  Asinh = 63,\n  Atan = 64,\n  Atanh = 65,\n  AvgOverTime = 66,\n  Ceil = 67,\n  Changes = 68,\n  Clamp = 69,\n  ClampMax = 70,\n  ClampMin = 71,\n  Cos = 72,\n  Cosh = 73,\n  CountOverTime = 74,\n  DaysInMonth = 75,\n  DayOfMonth = 76,\n  DayOfWeek = 77,\n  Deg = 78,\n  Delta = 79,\n  Deriv = 80,\n  Exp = 81,\n  Floor = 82,\n  HistogramQuantile = 83,\n  HoltWinters = 84,\n  Hour = 85,\n  Idelta = 86,\n  Increase = 87,\n  Irate = 88,\n  LabelReplace = 89,\n  LabelJoin = 90,\n  LastOverTime = 91,\n  Ln = 92,\n  Log10 = 93,\n  Log2 = 94,\n  MaxOverTime = 95,\n  MinOverTime = 96,\n  Minute = 97,\n  Month = 98,\n  Pi = 99,\n  PredictLinear = 100,\n  PresentOverTime = 101,\n  QuantileOverTime = 102,\n  Rad = 103,\n  Rate = 104,\n  Resets = 105,\n  Round = 106,\n  Scalar = 107,\n  Sgn = 108,\n  Sin = 109,\n  Sinh = 110,\n  Sort = 111,\n  SortDesc = 112,\n  Sqrt = 113,\n  StddevOverTime = 114,\n  StdvarOverTime = 115,\n  SumOverTime = 116,\n  Tan = 117,\n  Tanh = 118,\n  Timestamp = 119,\n  Time = 120,\n  Vector = 121,\n  Year = 122,\n  MatrixSelector = 123,\n  Duration = 124,\n  NumberLiteral = 125,\n  OffsetExpr = 126,\n  ParenExpr = 127,\n  StringLiteral = 128,\n  SubqueryExpr = 129,\n  UnaryExpr = 130,\n  UnaryOp = 131,\n  VectorSelector = 132,\n  MetricIdentifier = 133,\n  LabelMatchers = 134,\n  LabelMatchList = 135,\n  LabelMatcher = 136,\n  MatchOp = 137,\n  EqlSingle = 138,\n  EqlRegex = 139,\n  NeqRegex = 140,\n  StepInvariantExpr = 141,\n  At = 142,\n  AtModifierPreprocessors = 143,\n  MetricName = 144;\n\nexport { Abs, Absent, AbsentOverTime, Acos, Acosh, Add, AggregateExpr, AggregateModifier, AggregateOp, And$1 as And, Asin, Asinh, At, AtModifierPreprocessors, Atan, Atan2$1 as Atan2, Atanh, Avg$1 as Avg, AvgOverTime, BinModifiers, BinaryExpr, Bool$1 as Bool, Bottomk$1 as Bottomk, By$1 as By, Ceil, Changes, Clamp, ClampMax, ClampMin, Cos, Cosh, Count$1 as Count, CountOverTime, CountValues$1 as CountValues, DayOfMonth, DayOfWeek, DaysInMonth, Deg, Delta, Deriv, Div, Duration, End$1 as End, Eql, EqlRegex, EqlSingle, Exp, Expr, Floor, FunctionCall, FunctionCallArgs, FunctionCallBody, FunctionIdentifier, Group$1 as Group, GroupLeft$1 as GroupLeft, GroupRight$1 as GroupRight, GroupingLabel, GroupingLabelList, GroupingLabels, Gte, Gtr, HistogramQuantile, HoltWinters, Hour, Idelta, Identifier, Ignoring$1 as Ignoring, Increase, Irate, LabelJoin, LabelMatchList, LabelMatcher, LabelMatchers, LabelName, LabelReplace, LastOverTime, LineComment, Ln, Log10, Log2, Lss, Lte, MatchOp, MatrixSelector, Max$1 as Max, MaxOverTime, MetricIdentifier, MetricName, Min$1 as Min, MinOverTime, Minute, Mod, Month, Mul, Neq, NeqRegex, NumberLiteral, Offset$1 as Offset, OffsetExpr, On$1 as On, OnOrIgnoring, Or$1 as Or, ParenExpr, Pi, Pow, PredictLinear, PresentOverTime, PromQL, Quantile$1 as Quantile, QuantileOverTime, Rad, Rate, Resets, Round, Scalar, Sgn, Sin, Sinh, Sort, SortDesc, Sqrt, Start$1 as Start, Stddev$1 as Stddev, StddevOverTime, Stdvar$1 as Stdvar, StdvarOverTime, StepInvariantExpr, StringLiteral, Sub, SubqueryExpr, Sum$1 as Sum, SumOverTime, Tan, Tanh, Time, Timestamp, Topk$1 as Topk, UnaryExpr, UnaryOp, Unless$1 as Unless, Vector, VectorSelector, Without$1 as Without, Year, inf$1 as inf, nan$1 as nan, parser };\n","// FIXME profile adding a per-Tree TreeNode cache, validating it by\n// parent pointer\n/// The default maximum length of a `TreeBuffer` node (1024).\nconst DefaultBufferLength = 1024;\nlet nextPropID = 0;\nclass Range {\n    constructor(from, to) {\n        this.from = from;\n        this.to = to;\n    }\n}\n/// Each [node type](#common.NodeType) or [individual tree](#common.Tree)\n/// can have metadata associated with it in props. Instances of this\n/// class represent prop names.\nclass NodeProp {\n    /// Create a new node prop type.\n    constructor(config = {}) {\n        this.id = nextPropID++;\n        this.perNode = !!config.perNode;\n        this.deserialize = config.deserialize || (() => {\n            throw new Error(\"This node type doesn't define a deserialize function\");\n        });\n    }\n    /// This is meant to be used with\n    /// [`NodeSet.extend`](#common.NodeSet.extend) or\n    /// [`LRParser.configure`](#lr.ParserConfig.props) to compute\n    /// prop values for each node type in the set. Takes a [match\n    /// object](#common.NodeType^match) or function that returns undefined\n    /// if the node type doesn't get this prop, and the prop's value if\n    /// it does.\n    add(match) {\n        if (this.perNode)\n            throw new RangeError(\"Can't add per-node props to node types\");\n        if (typeof match != \"function\")\n            match = NodeType.match(match);\n        return (type) => {\n            let result = match(type);\n            return result === undefined ? null : [this, result];\n        };\n    }\n}\n/// Prop that is used to describe matching delimiters. For opening\n/// delimiters, this holds an array of node names (written as a\n/// space-separated string when declaring this prop in a grammar)\n/// for the node types of closing delimiters that match it.\nNodeProp.closedBy = new NodeProp({ deserialize: str => str.split(\" \") });\n/// The inverse of [`closedBy`](#common.NodeProp^closedBy). This is\n/// attached to closing delimiters, holding an array of node names\n/// of types of matching opening delimiters.\nNodeProp.openedBy = new NodeProp({ deserialize: str => str.split(\" \") });\n/// Used to assign node types to groups (for example, all node\n/// types that represent an expression could be tagged with an\n/// `\"Expression\"` group).\nNodeProp.group = new NodeProp({ deserialize: str => str.split(\" \") });\n/// The hash of the [context](#lr.ContextTracker.constructor)\n/// that the node was parsed in, if any. Used to limit reuse of\n/// contextual nodes.\nNodeProp.contextHash = new NodeProp({ perNode: true });\n/// The distance beyond the end of the node that the tokenizer\n/// looked ahead for any of the tokens inside the node. (The LR\n/// parser only stores this when it is larger than 25, for\n/// efficiency reasons.)\nNodeProp.lookAhead = new NodeProp({ perNode: true });\n/// This per-node prop is used to replace a given node, or part of a\n/// node, with another tree. This is useful to include trees from\n/// different languages.\nNodeProp.mounted = new NodeProp({ perNode: true });\n/// A mounted tree, which can be [stored](#common.NodeProp^mounted) on\n/// a tree node to indicate that parts of its content are\n/// represented by another tree.\nclass MountedTree {\n    constructor(\n    /// The inner tree.\n    tree, \n    /// If this is null, this tree replaces the entire node (it will\n    /// be included in the regular iteration instead of its host\n    /// node). If not, only the given ranges are considered to be\n    /// covered by this tree. This is used for trees that are mixed in\n    /// a way that isn't strictly hierarchical. Such mounted trees are\n    /// only entered by [`resolveInner`](#common.Tree.resolveInner)\n    /// and [`enter`](#common.SyntaxNode.enter).\n    overlay, \n    /// The parser used to create this subtree.\n    parser) {\n        this.tree = tree;\n        this.overlay = overlay;\n        this.parser = parser;\n    }\n}\nconst noProps = Object.create(null);\n/// Each node in a syntax tree has a node type associated with it.\nclass NodeType {\n    /// @internal\n    constructor(\n    /// The name of the node type. Not necessarily unique, but if the\n    /// grammar was written properly, different node types with the\n    /// same name within a node set should play the same semantic\n    /// role.\n    name, \n    /// @internal\n    props, \n    /// The id of this node in its set. Corresponds to the term ids\n    /// used in the parser.\n    id, \n    /// @internal\n    flags = 0) {\n        this.name = name;\n        this.props = props;\n        this.id = id;\n        this.flags = flags;\n    }\n    static define(spec) {\n        let props = spec.props && spec.props.length ? Object.create(null) : noProps;\n        let flags = (spec.top ? 1 /* Top */ : 0) | (spec.skipped ? 2 /* Skipped */ : 0) |\n            (spec.error ? 4 /* Error */ : 0) | (spec.name == null ? 8 /* Anonymous */ : 0);\n        let type = new NodeType(spec.name || \"\", props, spec.id, flags);\n        if (spec.props)\n            for (let src of spec.props) {\n                if (!Array.isArray(src))\n                    src = src(type);\n                if (src) {\n                    if (src[0].perNode)\n                        throw new RangeError(\"Can't store a per-node prop on a node type\");\n                    props[src[0].id] = src[1];\n                }\n            }\n        return type;\n    }\n    /// Retrieves a node prop for this type. Will return `undefined` if\n    /// the prop isn't present on this node.\n    prop(prop) { return this.props[prop.id]; }\n    /// True when this is the top node of a grammar.\n    get isTop() { return (this.flags & 1 /* Top */) > 0; }\n    /// True when this node is produced by a skip rule.\n    get isSkipped() { return (this.flags & 2 /* Skipped */) > 0; }\n    /// Indicates whether this is an error node.\n    get isError() { return (this.flags & 4 /* Error */) > 0; }\n    /// When true, this node type doesn't correspond to a user-declared\n    /// named node, for example because it is used to cache repetition.\n    get isAnonymous() { return (this.flags & 8 /* Anonymous */) > 0; }\n    /// Returns true when this node's name or one of its\n    /// [groups](#common.NodeProp^group) matches the given string.\n    is(name) {\n        if (typeof name == 'string') {\n            if (this.name == name)\n                return true;\n            let group = this.prop(NodeProp.group);\n            return group ? group.indexOf(name) > -1 : false;\n        }\n        return this.id == name;\n    }\n    /// Create a function from node types to arbitrary values by\n    /// specifying an object whose property names are node or\n    /// [group](#common.NodeProp^group) names. Often useful with\n    /// [`NodeProp.add`](#common.NodeProp.add). You can put multiple\n    /// names, separated by spaces, in a single property name to map\n    /// multiple node names to a single value.\n    static match(map) {\n        let direct = Object.create(null);\n        for (let prop in map)\n            for (let name of prop.split(\" \"))\n                direct[name] = map[prop];\n        return (node) => {\n            for (let groups = node.prop(NodeProp.group), i = -1; i < (groups ? groups.length : 0); i++) {\n                let found = direct[i < 0 ? node.name : groups[i]];\n                if (found)\n                    return found;\n            }\n        };\n    }\n}\n/// An empty dummy node type to use when no actual type is available.\nNodeType.none = new NodeType(\"\", Object.create(null), 0, 8 /* Anonymous */);\n/// A node set holds a collection of node types. It is used to\n/// compactly represent trees by storing their type ids, rather than a\n/// full pointer to the type object, in a numeric array. Each parser\n/// [has](#lr.LRParser.nodeSet) a node set, and [tree\n/// buffers](#common.TreeBuffer) can only store collections of nodes\n/// from the same set. A set can have a maximum of 2**16 (65536) node\n/// types in it, so that the ids fit into 16-bit typed array slots.\nclass NodeSet {\n    /// Create a set with the given types. The `id` property of each\n    /// type should correspond to its position within the array.\n    constructor(\n    /// The node types in this set, by id.\n    types) {\n        this.types = types;\n        for (let i = 0; i < types.length; i++)\n            if (types[i].id != i)\n                throw new RangeError(\"Node type ids should correspond to array positions when creating a node set\");\n    }\n    /// Create a copy of this set with some node properties added. The\n    /// arguments to this method should be created with\n    /// [`NodeProp.add`](#common.NodeProp.add).\n    extend(...props) {\n        let newTypes = [];\n        for (let type of this.types) {\n            let newProps = null;\n            for (let source of props) {\n                let add = source(type);\n                if (add) {\n                    if (!newProps)\n                        newProps = Object.assign({}, type.props);\n                    newProps[add[0].id] = add[1];\n                }\n            }\n            newTypes.push(newProps ? new NodeType(type.name, newProps, type.id, type.flags) : type);\n        }\n        return new NodeSet(newTypes);\n    }\n}\nconst CachedNode = new WeakMap(), CachedInnerNode = new WeakMap();\n/// A piece of syntax tree. There are two ways to approach these\n/// trees: the way they are actually stored in memory, and the\n/// convenient way.\n///\n/// Syntax trees are stored as a tree of `Tree` and `TreeBuffer`\n/// objects. By packing detail information into `TreeBuffer` leaf\n/// nodes, the representation is made a lot more memory-efficient.\n///\n/// However, when you want to actually work with tree nodes, this\n/// representation is very awkward, so most client code will want to\n/// use the [`TreeCursor`](#common.TreeCursor) or\n/// [`SyntaxNode`](#common.SyntaxNode) interface instead, which provides\n/// a view on some part of this data structure, and can be used to\n/// move around to adjacent nodes.\nclass Tree {\n    /// Construct a new tree. See also [`Tree.build`](#common.Tree^build).\n    constructor(\n    /// The type of the top node.\n    type, \n    /// This node's child nodes.\n    children, \n    /// The positions (offsets relative to the start of this tree) of\n    /// the children.\n    positions, \n    /// The total length of this tree\n    length, \n    /// Per-node [node props](#common.NodeProp) to associate with this node.\n    props) {\n        this.type = type;\n        this.children = children;\n        this.positions = positions;\n        this.length = length;\n        /// @internal\n        this.props = null;\n        if (props && props.length) {\n            this.props = Object.create(null);\n            for (let [prop, value] of props)\n                this.props[typeof prop == \"number\" ? prop : prop.id] = value;\n        }\n    }\n    /// @internal\n    toString() {\n        let mounted = this.prop(NodeProp.mounted);\n        if (mounted && !mounted.overlay)\n            return mounted.tree.toString();\n        let children = \"\";\n        for (let ch of this.children) {\n            let str = ch.toString();\n            if (str) {\n                if (children)\n                    children += \",\";\n                children += str;\n            }\n        }\n        return !this.type.name ? children :\n            (/\\W/.test(this.type.name) && !this.type.isError ? JSON.stringify(this.type.name) : this.type.name) +\n                (children.length ? \"(\" + children + \")\" : \"\");\n    }\n    /// Get a [tree cursor](#common.TreeCursor) rooted at this tree. When\n    /// `pos` is given, the cursor is [moved](#common.TreeCursor.moveTo)\n    /// to the given position and side.\n    cursor(pos, side = 0) {\n        let scope = (pos != null && CachedNode.get(this)) || this.topNode;\n        let cursor = new TreeCursor(scope);\n        if (pos != null) {\n            cursor.moveTo(pos, side);\n            CachedNode.set(this, cursor._tree);\n        }\n        return cursor;\n    }\n    /// Get a [tree cursor](#common.TreeCursor) that, unlike regular\n    /// cursors, doesn't skip through\n    /// [anonymous](#common.NodeType.isAnonymous) nodes and doesn't\n    /// automatically enter mounted nodes.\n    fullCursor() {\n        return new TreeCursor(this.topNode, 1 /* Full */);\n    }\n    /// Get a [syntax node](#common.SyntaxNode) object for the top of the\n    /// tree.\n    get topNode() {\n        return new TreeNode(this, 0, 0, null);\n    }\n    /// Get the [syntax node](#common.SyntaxNode) at the given position.\n    /// If `side` is -1, this will move into nodes that end at the\n    /// position. If 1, it'll move into nodes that start at the\n    /// position. With 0, it'll only enter nodes that cover the position\n    /// from both sides.\n    resolve(pos, side = 0) {\n        let node = resolveNode(CachedNode.get(this) || this.topNode, pos, side, false);\n        CachedNode.set(this, node);\n        return node;\n    }\n    /// Like [`resolve`](#common.Tree.resolve), but will enter\n    /// [overlaid](#common.MountedTree.overlay) nodes, producing a syntax node\n    /// pointing into the innermost overlaid tree at the given position\n    /// (with parent links going through all parent structure, including\n    /// the host trees).\n    resolveInner(pos, side = 0) {\n        let node = resolveNode(CachedInnerNode.get(this) || this.topNode, pos, side, true);\n        CachedInnerNode.set(this, node);\n        return node;\n    }\n    /// Iterate over the tree and its children, calling `enter` for any\n    /// node that touches the `from`/`to` region (if given) before\n    /// running over such a node's children, and `leave` (if given) when\n    /// leaving the node. When `enter` returns `false`, that node will\n    /// not have its children iterated over (or `leave` called).\n    iterate(spec) {\n        let { enter, leave, from = 0, to = this.length } = spec;\n        for (let c = this.cursor(), get = () => c.node;;) {\n            let mustLeave = false;\n            if (c.from <= to && c.to >= from && (c.type.isAnonymous || enter(c.type, c.from, c.to, get) !== false)) {\n                if (c.firstChild())\n                    continue;\n                if (!c.type.isAnonymous)\n                    mustLeave = true;\n            }\n            for (;;) {\n                if (mustLeave && leave)\n                    leave(c.type, c.from, c.to, get);\n                mustLeave = c.type.isAnonymous;\n                if (c.nextSibling())\n                    break;\n                if (!c.parent())\n                    return;\n                mustLeave = true;\n            }\n        }\n    }\n    /// Get the value of the given [node prop](#common.NodeProp) for this\n    /// node. Works with both per-node and per-type props.\n    prop(prop) {\n        return !prop.perNode ? this.type.prop(prop) : this.props ? this.props[prop.id] : undefined;\n    }\n    /// Returns the node's [per-node props](#common.NodeProp.perNode) in a\n    /// format that can be passed to the [`Tree`](#common.Tree)\n    /// constructor.\n    get propValues() {\n        let result = [];\n        if (this.props)\n            for (let id in this.props)\n                result.push([+id, this.props[id]]);\n        return result;\n    }\n    /// Balance the direct children of this tree, producing a copy of\n    /// which may have children grouped into subtrees with type\n    /// [`NodeType.none`](#common.NodeType^none).\n    balance(config = {}) {\n        return this.children.length <= 8 /* BranchFactor */ ? this :\n            balanceRange(NodeType.none, this.children, this.positions, 0, this.children.length, 0, this.length, (children, positions, length) => new Tree(this.type, children, positions, length, this.propValues), config.makeTree || ((children, positions, length) => new Tree(NodeType.none, children, positions, length)));\n    }\n    /// Build a tree from a postfix-ordered buffer of node information,\n    /// or a cursor over such a buffer.\n    static build(data) { return buildTree(data); }\n}\n/// The empty tree\nTree.empty = new Tree(NodeType.none, [], [], 0);\nclass FlatBufferCursor {\n    constructor(buffer, index) {\n        this.buffer = buffer;\n        this.index = index;\n    }\n    get id() { return this.buffer[this.index - 4]; }\n    get start() { return this.buffer[this.index - 3]; }\n    get end() { return this.buffer[this.index - 2]; }\n    get size() { return this.buffer[this.index - 1]; }\n    get pos() { return this.index; }\n    next() { this.index -= 4; }\n    fork() { return new FlatBufferCursor(this.buffer, this.index); }\n}\n/// Tree buffers contain (type, start, end, endIndex) quads for each\n/// node. In such a buffer, nodes are stored in prefix order (parents\n/// before children, with the endIndex of the parent indicating which\n/// children belong to it)\nclass TreeBuffer {\n    /// Create a tree buffer.\n    constructor(\n    /// The buffer's content.\n    buffer, \n    /// The total length of the group of nodes in the buffer.\n    length, \n    /// The node set used in this buffer.\n    set) {\n        this.buffer = buffer;\n        this.length = length;\n        this.set = set;\n    }\n    /// @internal\n    get type() { return NodeType.none; }\n    /// @internal\n    toString() {\n        let result = [];\n        for (let index = 0; index < this.buffer.length;) {\n            result.push(this.childString(index));\n            index = this.buffer[index + 3];\n        }\n        return result.join(\",\");\n    }\n    /// @internal\n    childString(index) {\n        let id = this.buffer[index], endIndex = this.buffer[index + 3];\n        let type = this.set.types[id], result = type.name;\n        if (/\\W/.test(result) && !type.isError)\n            result = JSON.stringify(result);\n        index += 4;\n        if (endIndex == index)\n            return result;\n        let children = [];\n        while (index < endIndex) {\n            children.push(this.childString(index));\n            index = this.buffer[index + 3];\n        }\n        return result + \"(\" + children.join(\",\") + \")\";\n    }\n    /// @internal\n    findChild(startIndex, endIndex, dir, pos, side) {\n        let { buffer } = this, pick = -1;\n        for (let i = startIndex; i != endIndex; i = buffer[i + 3]) {\n            if (checkSide(side, pos, buffer[i + 1], buffer[i + 2])) {\n                pick = i;\n                if (dir > 0)\n                    break;\n            }\n        }\n        return pick;\n    }\n    /// @internal\n    slice(startI, endI, from, to) {\n        let b = this.buffer;\n        let copy = new Uint16Array(endI - startI);\n        for (let i = startI, j = 0; i < endI;) {\n            copy[j++] = b[i++];\n            copy[j++] = b[i++] - from;\n            copy[j++] = b[i++] - from;\n            copy[j++] = b[i++] - startI;\n        }\n        return new TreeBuffer(copy, to - from, this.set);\n    }\n}\nfunction checkSide(side, pos, from, to) {\n    switch (side) {\n        case -2 /* Before */: return from < pos;\n        case -1 /* AtOrBefore */: return to >= pos && from < pos;\n        case 0 /* Around */: return from < pos && to > pos;\n        case 1 /* AtOrAfter */: return from <= pos && to > pos;\n        case 2 /* After */: return to > pos;\n        case 4 /* DontCare */: return true;\n    }\n}\nfunction enterUnfinishedNodesBefore(node, pos) {\n    let scan = node.childBefore(pos);\n    while (scan) {\n        let last = scan.lastChild;\n        if (!last || last.to != scan.to)\n            break;\n        if (last.type.isError && last.from == last.to) {\n            node = scan;\n            scan = last.prevSibling;\n        }\n        else {\n            scan = last;\n        }\n    }\n    return node;\n}\nfunction resolveNode(node, pos, side, overlays) {\n    var _a;\n    // Move up to a node that actually holds the position, if possible\n    while (node.from == node.to ||\n        (side < 1 ? node.from >= pos : node.from > pos) ||\n        (side > -1 ? node.to <= pos : node.to < pos)) {\n        let parent = !overlays && node instanceof TreeNode && node.index < 0 ? null : node.parent;\n        if (!parent)\n            return node;\n        node = parent;\n    }\n    // Must go up out of overlays when those do not overlap with pos\n    if (overlays)\n        for (let scan = node, parent = scan.parent; parent; scan = parent, parent = scan.parent) {\n            if (scan instanceof TreeNode && scan.index < 0 && ((_a = parent.enter(pos, side, true)) === null || _a === void 0 ? void 0 : _a.from) != scan.from)\n                node = parent;\n        }\n    for (;;) {\n        let inner = node.enter(pos, side, overlays);\n        if (!inner)\n            return node;\n        node = inner;\n    }\n}\nclass TreeNode {\n    constructor(node, _from, \n    // Index in parent node, set to -1 if the node is not a direct child of _parent.node (overlay)\n    index, _parent) {\n        this.node = node;\n        this._from = _from;\n        this.index = index;\n        this._parent = _parent;\n    }\n    get type() { return this.node.type; }\n    get name() { return this.node.type.name; }\n    get from() { return this._from; }\n    get to() { return this._from + this.node.length; }\n    nextChild(i, dir, pos, side, mode = 0) {\n        for (let parent = this;;) {\n            for (let { children, positions } = parent.node, e = dir > 0 ? children.length : -1; i != e; i += dir) {\n                let next = children[i], start = positions[i] + parent._from;\n                if (!checkSide(side, pos, start, start + next.length))\n                    continue;\n                if (next instanceof TreeBuffer) {\n                    if (mode & 2 /* NoEnterBuffer */)\n                        continue;\n                    let index = next.findChild(0, next.buffer.length, dir, pos - start, side);\n                    if (index > -1)\n                        return new BufferNode(new BufferContext(parent, next, i, start), null, index);\n                }\n                else if ((mode & 1 /* Full */) || (!next.type.isAnonymous || hasChild(next))) {\n                    let mounted;\n                    if (!(mode & 1 /* Full */) && next.props && (mounted = next.prop(NodeProp.mounted)) && !mounted.overlay)\n                        return new TreeNode(mounted.tree, start, i, parent);\n                    let inner = new TreeNode(next, start, i, parent);\n                    return (mode & 1 /* Full */) || !inner.type.isAnonymous ? inner\n                        : inner.nextChild(dir < 0 ? next.children.length - 1 : 0, dir, pos, side);\n                }\n            }\n            if ((mode & 1 /* Full */) || !parent.type.isAnonymous)\n                return null;\n            if (parent.index >= 0)\n                i = parent.index + dir;\n            else\n                i = dir < 0 ? -1 : parent._parent.node.children.length;\n            parent = parent._parent;\n            if (!parent)\n                return null;\n        }\n    }\n    get firstChild() { return this.nextChild(0, 1, 0, 4 /* DontCare */); }\n    get lastChild() { return this.nextChild(this.node.children.length - 1, -1, 0, 4 /* DontCare */); }\n    childAfter(pos) { return this.nextChild(0, 1, pos, 2 /* After */); }\n    childBefore(pos) { return this.nextChild(this.node.children.length - 1, -1, pos, -2 /* Before */); }\n    enter(pos, side, overlays = true, buffers = true) {\n        let mounted;\n        if (overlays && (mounted = this.node.prop(NodeProp.mounted)) && mounted.overlay) {\n            let rPos = pos - this.from;\n            for (let { from, to } of mounted.overlay) {\n                if ((side > 0 ? from <= rPos : from < rPos) &&\n                    (side < 0 ? to >= rPos : to > rPos))\n                    return new TreeNode(mounted.tree, mounted.overlay[0].from + this.from, -1, this);\n            }\n        }\n        return this.nextChild(0, 1, pos, side, buffers ? 0 : 2 /* NoEnterBuffer */);\n    }\n    nextSignificantParent() {\n        let val = this;\n        while (val.type.isAnonymous && val._parent)\n            val = val._parent;\n        return val;\n    }\n    get parent() {\n        return this._parent ? this._parent.nextSignificantParent() : null;\n    }\n    get nextSibling() {\n        return this._parent && this.index >= 0 ? this._parent.nextChild(this.index + 1, 1, 0, 4 /* DontCare */) : null;\n    }\n    get prevSibling() {\n        return this._parent && this.index >= 0 ? this._parent.nextChild(this.index - 1, -1, 0, 4 /* DontCare */) : null;\n    }\n    get cursor() { return new TreeCursor(this); }\n    get tree() { return this.node; }\n    toTree() { return this.node; }\n    resolve(pos, side = 0) {\n        return resolveNode(this, pos, side, false);\n    }\n    resolveInner(pos, side = 0) {\n        return resolveNode(this, pos, side, true);\n    }\n    enterUnfinishedNodesBefore(pos) { return enterUnfinishedNodesBefore(this, pos); }\n    getChild(type, before = null, after = null) {\n        let r = getChildren(this, type, before, after);\n        return r.length ? r[0] : null;\n    }\n    getChildren(type, before = null, after = null) {\n        return getChildren(this, type, before, after);\n    }\n    /// @internal\n    toString() { return this.node.toString(); }\n}\nfunction getChildren(node, type, before, after) {\n    let cur = node.cursor, result = [];\n    if (!cur.firstChild())\n        return result;\n    if (before != null)\n        while (!cur.type.is(before))\n            if (!cur.nextSibling())\n                return result;\n    for (;;) {\n        if (after != null && cur.type.is(after))\n            return result;\n        if (cur.type.is(type))\n            result.push(cur.node);\n        if (!cur.nextSibling())\n            return after == null ? result : [];\n    }\n}\nclass BufferContext {\n    constructor(parent, buffer, index, start) {\n        this.parent = parent;\n        this.buffer = buffer;\n        this.index = index;\n        this.start = start;\n    }\n}\nclass BufferNode {\n    constructor(context, _parent, index) {\n        this.context = context;\n        this._parent = _parent;\n        this.index = index;\n        this.type = context.buffer.set.types[context.buffer.buffer[index]];\n    }\n    get name() { return this.type.name; }\n    get from() { return this.context.start + this.context.buffer.buffer[this.index + 1]; }\n    get to() { return this.context.start + this.context.buffer.buffer[this.index + 2]; }\n    child(dir, pos, side) {\n        let { buffer } = this.context;\n        let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], dir, pos - this.context.start, side);\n        return index < 0 ? null : new BufferNode(this.context, this, index);\n    }\n    get firstChild() { return this.child(1, 0, 4 /* DontCare */); }\n    get lastChild() { return this.child(-1, 0, 4 /* DontCare */); }\n    childAfter(pos) { return this.child(1, pos, 2 /* After */); }\n    childBefore(pos) { return this.child(-1, pos, -2 /* Before */); }\n    enter(pos, side, overlays, buffers = true) {\n        if (!buffers)\n            return null;\n        let { buffer } = this.context;\n        let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], side > 0 ? 1 : -1, pos - this.context.start, side);\n        return index < 0 ? null : new BufferNode(this.context, this, index);\n    }\n    get parent() {\n        return this._parent || this.context.parent.nextSignificantParent();\n    }\n    externalSibling(dir) {\n        return this._parent ? null : this.context.parent.nextChild(this.context.index + dir, dir, 0, 4 /* DontCare */);\n    }\n    get nextSibling() {\n        let { buffer } = this.context;\n        let after = buffer.buffer[this.index + 3];\n        if (after < (this._parent ? buffer.buffer[this._parent.index + 3] : buffer.buffer.length))\n            return new BufferNode(this.context, this._parent, after);\n        return this.externalSibling(1);\n    }\n    get prevSibling() {\n        let { buffer } = this.context;\n        let parentStart = this._parent ? this._parent.index + 4 : 0;\n        if (this.index == parentStart)\n            return this.externalSibling(-1);\n        return new BufferNode(this.context, this._parent, buffer.findChild(parentStart, this.index, -1, 0, 4 /* DontCare */));\n    }\n    get cursor() { return new TreeCursor(this); }\n    get tree() { return null; }\n    toTree() {\n        let children = [], positions = [];\n        let { buffer } = this.context;\n        let startI = this.index + 4, endI = buffer.buffer[this.index + 3];\n        if (endI > startI) {\n            let from = buffer.buffer[this.index + 1], to = buffer.buffer[this.index + 2];\n            children.push(buffer.slice(startI, endI, from, to));\n            positions.push(0);\n        }\n        return new Tree(this.type, children, positions, this.to - this.from);\n    }\n    resolve(pos, side = 0) {\n        return resolveNode(this, pos, side, false);\n    }\n    resolveInner(pos, side = 0) {\n        return resolveNode(this, pos, side, true);\n    }\n    enterUnfinishedNodesBefore(pos) { return enterUnfinishedNodesBefore(this, pos); }\n    /// @internal\n    toString() { return this.context.buffer.childString(this.index); }\n    getChild(type, before = null, after = null) {\n        let r = getChildren(this, type, before, after);\n        return r.length ? r[0] : null;\n    }\n    getChildren(type, before = null, after = null) {\n        return getChildren(this, type, before, after);\n    }\n}\n/// A tree cursor object focuses on a given node in a syntax tree, and\n/// allows you to move to adjacent nodes.\nclass TreeCursor {\n    /// @internal\n    constructor(node, \n    /// @internal\n    mode = 0) {\n        this.mode = mode;\n        this.buffer = null;\n        this.stack = [];\n        this.index = 0;\n        this.bufferNode = null;\n        if (node instanceof TreeNode) {\n            this.yieldNode(node);\n        }\n        else {\n            this._tree = node.context.parent;\n            this.buffer = node.context;\n            for (let n = node._parent; n; n = n._parent)\n                this.stack.unshift(n.index);\n            this.bufferNode = node;\n            this.yieldBuf(node.index);\n        }\n    }\n    /// Shorthand for `.type.name`.\n    get name() { return this.type.name; }\n    yieldNode(node) {\n        if (!node)\n            return false;\n        this._tree = node;\n        this.type = node.type;\n        this.from = node.from;\n        this.to = node.to;\n        return true;\n    }\n    yieldBuf(index, type) {\n        this.index = index;\n        let { start, buffer } = this.buffer;\n        this.type = type || buffer.set.types[buffer.buffer[index]];\n        this.from = start + buffer.buffer[index + 1];\n        this.to = start + buffer.buffer[index + 2];\n        return true;\n    }\n    yield(node) {\n        if (!node)\n            return false;\n        if (node instanceof TreeNode) {\n            this.buffer = null;\n            return this.yieldNode(node);\n        }\n        this.buffer = node.context;\n        return this.yieldBuf(node.index, node.type);\n    }\n    /// @internal\n    toString() {\n        return this.buffer ? this.buffer.buffer.childString(this.index) : this._tree.toString();\n    }\n    /// @internal\n    enterChild(dir, pos, side) {\n        if (!this.buffer)\n            return this.yield(this._tree.nextChild(dir < 0 ? this._tree.node.children.length - 1 : 0, dir, pos, side, this.mode));\n        let { buffer } = this.buffer;\n        let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], dir, pos - this.buffer.start, side);\n        if (index < 0)\n            return false;\n        this.stack.push(this.index);\n        return this.yieldBuf(index);\n    }\n    /// Move the cursor to this node's first child. When this returns\n    /// false, the node has no child, and the cursor has not been moved.\n    firstChild() { return this.enterChild(1, 0, 4 /* DontCare */); }\n    /// Move the cursor to this node's last child.\n    lastChild() { return this.enterChild(-1, 0, 4 /* DontCare */); }\n    /// Move the cursor to the first child that ends after `pos`.\n    childAfter(pos) { return this.enterChild(1, pos, 2 /* After */); }\n    /// Move to the last child that starts before `pos`.\n    childBefore(pos) { return this.enterChild(-1, pos, -2 /* Before */); }\n    /// Move the cursor to the child around `pos`. If side is -1 the\n    /// child may end at that position, when 1 it may start there. This\n    /// will also enter [overlaid](#common.MountedTree.overlay)\n    /// [mounted](#common.NodeProp^mounted) trees unless `overlays` is\n    /// set to false.\n    enter(pos, side, overlays = true, buffers = true) {\n        if (!this.buffer)\n            return this.yield(this._tree.enter(pos, side, overlays && !(this.mode & 1 /* Full */), buffers));\n        return buffers ? this.enterChild(1, pos, side) : false;\n    }\n    /// Move to the node's parent node, if this isn't the top node.\n    parent() {\n        if (!this.buffer)\n            return this.yieldNode((this.mode & 1 /* Full */) ? this._tree._parent : this._tree.parent);\n        if (this.stack.length)\n            return this.yieldBuf(this.stack.pop());\n        let parent = (this.mode & 1 /* Full */) ? this.buffer.parent : this.buffer.parent.nextSignificantParent();\n        this.buffer = null;\n        return this.yieldNode(parent);\n    }\n    /// @internal\n    sibling(dir) {\n        if (!this.buffer)\n            return !this._tree._parent ? false\n                : this.yield(this._tree.index < 0 ? null\n                    : this._tree._parent.nextChild(this._tree.index + dir, dir, 0, 4 /* DontCare */, this.mode));\n        let { buffer } = this.buffer, d = this.stack.length - 1;\n        if (dir < 0) {\n            let parentStart = d < 0 ? 0 : this.stack[d] + 4;\n            if (this.index != parentStart)\n                return this.yieldBuf(buffer.findChild(parentStart, this.index, -1, 0, 4 /* DontCare */));\n        }\n        else {\n            let after = buffer.buffer[this.index + 3];\n            if (after < (d < 0 ? buffer.buffer.length : buffer.buffer[this.stack[d] + 3]))\n                return this.yieldBuf(after);\n        }\n        return d < 0 ? this.yield(this.buffer.parent.nextChild(this.buffer.index + dir, dir, 0, 4 /* DontCare */, this.mode)) : false;\n    }\n    /// Move to this node's next sibling, if any.\n    nextSibling() { return this.sibling(1); }\n    /// Move to this node's previous sibling, if any.\n    prevSibling() { return this.sibling(-1); }\n    atLastNode(dir) {\n        let index, parent, { buffer } = this;\n        if (buffer) {\n            if (dir > 0) {\n                if (this.index < buffer.buffer.buffer.length)\n                    return false;\n            }\n            else {\n                for (let i = 0; i < this.index; i++)\n                    if (buffer.buffer.buffer[i + 3] < this.index)\n                        return false;\n            }\n            ({ index, parent } = buffer);\n        }\n        else {\n            ({ index, _parent: parent } = this._tree);\n        }\n        for (; parent; { index, _parent: parent } = parent) {\n            if (index > -1)\n                for (let i = index + dir, e = dir < 0 ? -1 : parent.node.children.length; i != e; i += dir) {\n                    let child = parent.node.children[i];\n                    if ((this.mode & 1 /* Full */) || child instanceof TreeBuffer || !child.type.isAnonymous || hasChild(child))\n                        return false;\n                }\n        }\n        return true;\n    }\n    move(dir, enter) {\n        if (enter && this.enterChild(dir, 0, 4 /* DontCare */))\n            return true;\n        for (;;) {\n            if (this.sibling(dir))\n                return true;\n            if (this.atLastNode(dir) || !this.parent())\n                return false;\n        }\n    }\n    /// Move to the next node in a\n    /// [pre-order](https://en.wikipedia.org/wiki/Tree_traversal#Pre-order_(NLR))\n    /// traversal, going from a node to its first child or, if the\n    /// current node is empty or `enter` is false, its next sibling or\n    /// the next sibling of the first parent node that has one.\n    next(enter = true) { return this.move(1, enter); }\n    /// Move to the next node in a last-to-first pre-order traveral. A\n    /// node is followed by its last child or, if it has none, its\n    /// previous sibling or the previous sibling of the first parent\n    /// node that has one.\n    prev(enter = true) { return this.move(-1, enter); }\n    /// Move the cursor to the innermost node that covers `pos`. If\n    /// `side` is -1, it will enter nodes that end at `pos`. If it is 1,\n    /// it will enter nodes that start at `pos`.\n    moveTo(pos, side = 0) {\n        // Move up to a node that actually holds the position, if possible\n        while (this.from == this.to ||\n            (side < 1 ? this.from >= pos : this.from > pos) ||\n            (side > -1 ? this.to <= pos : this.to < pos))\n            if (!this.parent())\n                break;\n        // Then scan down into child nodes as far as possible\n        while (this.enterChild(1, pos, side)) { }\n        return this;\n    }\n    /// Get a [syntax node](#common.SyntaxNode) at the cursor's current\n    /// position.\n    get node() {\n        if (!this.buffer)\n            return this._tree;\n        let cache = this.bufferNode, result = null, depth = 0;\n        if (cache && cache.context == this.buffer) {\n            scan: for (let index = this.index, d = this.stack.length; d >= 0;) {\n                for (let c = cache; c; c = c._parent)\n                    if (c.index == index) {\n                        if (index == this.index)\n                            return c;\n                        result = c;\n                        depth = d + 1;\n                        break scan;\n                    }\n                index = this.stack[--d];\n            }\n        }\n        for (let i = depth; i < this.stack.length; i++)\n            result = new BufferNode(this.buffer, result, this.stack[i]);\n        return this.bufferNode = new BufferNode(this.buffer, result, this.index);\n    }\n    /// Get the [tree](#common.Tree) that represents the current node, if\n    /// any. Will return null when the node is in a [tree\n    /// buffer](#common.TreeBuffer).\n    get tree() {\n        return this.buffer ? null : this._tree.node;\n    }\n}\nfunction hasChild(tree) {\n    return tree.children.some(ch => ch instanceof TreeBuffer || !ch.type.isAnonymous || hasChild(ch));\n}\nfunction buildTree(data) {\n    var _a;\n    let { buffer, nodeSet, maxBufferLength = DefaultBufferLength, reused = [], minRepeatType = nodeSet.types.length } = data;\n    let cursor = Array.isArray(buffer) ? new FlatBufferCursor(buffer, buffer.length) : buffer;\n    let types = nodeSet.types;\n    let contextHash = 0, lookAhead = 0;\n    function takeNode(parentStart, minPos, children, positions, inRepeat) {\n        let { id, start, end, size } = cursor;\n        let lookAheadAtStart = lookAhead;\n        while (size < 0) {\n            cursor.next();\n            if (size == -1 /* Reuse */) {\n                let node = reused[id];\n                children.push(node);\n                positions.push(start - parentStart);\n                return;\n            }\n            else if (size == -3 /* ContextChange */) { // Context change\n                contextHash = id;\n                return;\n            }\n            else if (size == -4 /* LookAhead */) {\n                lookAhead = id;\n                return;\n            }\n            else {\n                throw new RangeError(`Unrecognized record size: ${size}`);\n            }\n        }\n        let type = types[id], node, buffer;\n        let startPos = start - parentStart;\n        if (end - start <= maxBufferLength && (buffer = findBufferSize(cursor.pos - minPos, inRepeat))) {\n            // Small enough for a buffer, and no reused nodes inside\n            let data = new Uint16Array(buffer.size - buffer.skip);\n            let endPos = cursor.pos - buffer.size, index = data.length;\n            while (cursor.pos > endPos)\n                index = copyToBuffer(buffer.start, data, index);\n            node = new TreeBuffer(data, end - buffer.start, nodeSet);\n            startPos = buffer.start - parentStart;\n        }\n        else { // Make it a node\n            let endPos = cursor.pos - size;\n            cursor.next();\n            let localChildren = [], localPositions = [];\n            let localInRepeat = id >= minRepeatType ? id : -1;\n            let lastGroup = 0, lastEnd = end;\n            while (cursor.pos > endPos) {\n                if (localInRepeat >= 0 && cursor.id == localInRepeat && cursor.size >= 0) {\n                    if (cursor.end <= lastEnd - maxBufferLength) {\n                        makeRepeatLeaf(localChildren, localPositions, start, lastGroup, cursor.end, lastEnd, localInRepeat, lookAheadAtStart);\n                        lastGroup = localChildren.length;\n                        lastEnd = cursor.end;\n                    }\n                    cursor.next();\n                }\n                else {\n                    takeNode(start, endPos, localChildren, localPositions, localInRepeat);\n                }\n            }\n            if (localInRepeat >= 0 && lastGroup > 0 && lastGroup < localChildren.length)\n                makeRepeatLeaf(localChildren, localPositions, start, lastGroup, start, lastEnd, localInRepeat, lookAheadAtStart);\n            localChildren.reverse();\n            localPositions.reverse();\n            if (localInRepeat > -1 && lastGroup > 0) {\n                let make = makeBalanced(type);\n                node = balanceRange(type, localChildren, localPositions, 0, localChildren.length, 0, end - start, make, make);\n            }\n            else {\n                node = makeTree(type, localChildren, localPositions, end - start, lookAheadAtStart - end);\n            }\n        }\n        children.push(node);\n        positions.push(startPos);\n    }\n    function makeBalanced(type) {\n        return (children, positions, length) => {\n            let lookAhead = 0, lastI = children.length - 1, last, lookAheadProp;\n            if (lastI >= 0 && (last = children[lastI]) instanceof Tree) {\n                if (!lastI && last.type == type && last.length == length)\n                    return last;\n                if (lookAheadProp = last.prop(NodeProp.lookAhead))\n                    lookAhead = positions[lastI] + last.length + lookAheadProp;\n            }\n            return makeTree(type, children, positions, length, lookAhead);\n        };\n    }\n    function makeRepeatLeaf(children, positions, base, i, from, to, type, lookAhead) {\n        let localChildren = [], localPositions = [];\n        while (children.length > i) {\n            localChildren.push(children.pop());\n            localPositions.push(positions.pop() + base - from);\n        }\n        children.push(makeTree(nodeSet.types[type], localChildren, localPositions, to - from, lookAhead - to));\n        positions.push(from - base);\n    }\n    function makeTree(type, children, positions, length, lookAhead = 0, props) {\n        if (contextHash) {\n            let pair = [NodeProp.contextHash, contextHash];\n            props = props ? [pair].concat(props) : [pair];\n        }\n        if (lookAhead > 25) {\n            let pair = [NodeProp.lookAhead, lookAhead];\n            props = props ? [pair].concat(props) : [pair];\n        }\n        return new Tree(type, children, positions, length, props);\n    }\n    function findBufferSize(maxSize, inRepeat) {\n        // Scan through the buffer to find previous siblings that fit\n        // together in a TreeBuffer, and don't contain any reused nodes\n        // (which can't be stored in a buffer).\n        // If `inRepeat` is > -1, ignore node boundaries of that type for\n        // nesting, but make sure the end falls either at the start\n        // (`maxSize`) or before such a node.\n        let fork = cursor.fork();\n        let size = 0, start = 0, skip = 0, minStart = fork.end - maxBufferLength;\n        let result = { size: 0, start: 0, skip: 0 };\n        scan: for (let minPos = fork.pos - maxSize; fork.pos > minPos;) {\n            let nodeSize = fork.size;\n            // Pretend nested repeat nodes of the same type don't exist\n            if (fork.id == inRepeat && nodeSize >= 0) {\n                // Except that we store the current state as a valid return\n                // value.\n                result.size = size;\n                result.start = start;\n                result.skip = skip;\n                skip += 4;\n                size += 4;\n                fork.next();\n                continue;\n            }\n            let startPos = fork.pos - nodeSize;\n            if (nodeSize < 0 || startPos < minPos || fork.start < minStart)\n                break;\n            let localSkipped = fork.id >= minRepeatType ? 4 : 0;\n            let nodeStart = fork.start;\n            fork.next();\n            while (fork.pos > startPos) {\n                if (fork.size < 0) {\n                    if (fork.size == -3 /* ContextChange */)\n                        localSkipped += 4;\n                    else\n                        break scan;\n                }\n                else if (fork.id >= minRepeatType) {\n                    localSkipped += 4;\n                }\n                fork.next();\n            }\n            start = nodeStart;\n            size += nodeSize;\n            skip += localSkipped;\n        }\n        if (inRepeat < 0 || size == maxSize) {\n            result.size = size;\n            result.start = start;\n            result.skip = skip;\n        }\n        return result.size > 4 ? result : undefined;\n    }\n    function copyToBuffer(bufferStart, buffer, index) {\n        let { id, start, end, size } = cursor;\n        cursor.next();\n        if (size >= 0 && id < minRepeatType) {\n            let startIndex = index;\n            if (size > 4) {\n                let endPos = cursor.pos - (size - 4);\n                while (cursor.pos > endPos)\n                    index = copyToBuffer(bufferStart, buffer, index);\n            }\n            buffer[--index] = startIndex;\n            buffer[--index] = end - bufferStart;\n            buffer[--index] = start - bufferStart;\n            buffer[--index] = id;\n        }\n        else if (size == -3 /* ContextChange */) {\n            contextHash = id;\n        }\n        else if (size == -4 /* LookAhead */) {\n            lookAhead = id;\n        }\n        return index;\n    }\n    let children = [], positions = [];\n    while (cursor.pos > 0)\n        takeNode(data.start || 0, data.bufferStart || 0, children, positions, -1);\n    let length = (_a = data.length) !== null && _a !== void 0 ? _a : (children.length ? positions[0] + children[0].length : 0);\n    return new Tree(types[data.topID], children.reverse(), positions.reverse(), length);\n}\nconst nodeSizeCache = new WeakMap;\nfunction nodeSize(balanceType, node) {\n    if (!balanceType.isAnonymous || node instanceof TreeBuffer || node.type != balanceType)\n        return 1;\n    let size = nodeSizeCache.get(node);\n    if (size == null) {\n        size = 1;\n        for (let child of node.children) {\n            if (child.type != balanceType || !(child instanceof Tree)) {\n                size = 1;\n                break;\n            }\n            size += nodeSize(balanceType, child);\n        }\n        nodeSizeCache.set(node, size);\n    }\n    return size;\n}\nfunction balanceRange(\n// The type the balanced tree's inner nodes.\nbalanceType, \n// The direct children and their positions\nchildren, positions, \n// The index range in children/positions to use\nfrom, to, \n// The start position of the nodes, relative to their parent.\nstart, \n// Length of the outer node\nlength, \n// Function to build the top node of the balanced tree\nmkTop, \n// Function to build internal nodes for the balanced tree\nmkTree) {\n    let total = 0;\n    for (let i = from; i < to; i++)\n        total += nodeSize(balanceType, children[i]);\n    let maxChild = Math.ceil((total * 1.5) / 8 /* BranchFactor */);\n    let localChildren = [], localPositions = [];\n    function divide(children, positions, from, to, offset) {\n        for (let i = from; i < to;) {\n            let groupFrom = i, groupStart = positions[i], groupSize = nodeSize(balanceType, children[i]);\n            i++;\n            for (; i < to; i++) {\n                let nextSize = nodeSize(balanceType, children[i]);\n                if (groupSize + nextSize >= maxChild)\n                    break;\n                groupSize += nextSize;\n            }\n            if (i == groupFrom + 1) {\n                if (groupSize > maxChild) {\n                    let only = children[groupFrom]; // Only trees can have a size > 1\n                    divide(only.children, only.positions, 0, only.children.length, positions[groupFrom] + offset);\n                    continue;\n                }\n                localChildren.push(children[groupFrom]);\n            }\n            else {\n                let length = positions[i - 1] + children[i - 1].length - groupStart;\n                localChildren.push(balanceRange(balanceType, children, positions, groupFrom, i, groupStart, length, null, mkTree));\n            }\n            localPositions.push(groupStart + offset - start);\n        }\n    }\n    divide(children, positions, from, to, 0);\n    return (mkTop || mkTree)(localChildren, localPositions, length);\n}\n\n/// Tree fragments are used during [incremental\n/// parsing](#common.Parser.startParse) to track parts of old trees\n/// that can be reused in a new parse. An array of fragments is used\n/// to track regions of an old tree whose nodes might be reused in new\n/// parses. Use the static\n/// [`applyChanges`](#common.TreeFragment^applyChanges) method to\n/// update fragments for document changes.\nclass TreeFragment {\n    /// Construct a tree fragment.\n    constructor(\n    /// The start of the unchanged range pointed to by this fragment.\n    /// This refers to an offset in the _updated_ document (as opposed\n    /// to the original tree).\n    from, \n    /// The end of the unchanged range.\n    to, \n    /// The tree that this fragment is based on.\n    tree, \n    /// The offset between the fragment's tree and the document that\n    /// this fragment can be used against. Add this when going from\n    /// document to tree positions, subtract it to go from tree to\n    /// document positions.\n    offset, openStart = false, openEnd = false) {\n        this.from = from;\n        this.to = to;\n        this.tree = tree;\n        this.offset = offset;\n        this.open = (openStart ? 1 /* Start */ : 0) | (openEnd ? 2 /* End */ : 0);\n    }\n    /// Whether the start of the fragment represents the start of a\n    /// parse, or the end of a change. (In the second case, it may not\n    /// be safe to reuse some nodes at the start, depending on the\n    /// parsing algorithm.)\n    get openStart() { return (this.open & 1 /* Start */) > 0; }\n    /// Whether the end of the fragment represents the end of a\n    /// full-document parse, or the start of a change.\n    get openEnd() { return (this.open & 2 /* End */) > 0; }\n    /// Create a set of fragments from a freshly parsed tree, or update\n    /// an existing set of fragments by replacing the ones that overlap\n    /// with a tree with content from the new tree. When `partial` is\n    /// true, the parse is treated as incomplete, and the resulting\n    /// fragment has [`openEnd`](#common.TreeFragment.openEnd) set to\n    /// true.\n    static addTree(tree, fragments = [], partial = false) {\n        let result = [new TreeFragment(0, tree.length, tree, 0, false, partial)];\n        for (let f of fragments)\n            if (f.to > tree.length)\n                result.push(f);\n        return result;\n    }\n    /// Apply a set of edits to an array of fragments, removing or\n    /// splitting fragments as necessary to remove edited ranges, and\n    /// adjusting offsets for fragments that moved.\n    static applyChanges(fragments, changes, minGap = 128) {\n        if (!changes.length)\n            return fragments;\n        let result = [];\n        let fI = 1, nextF = fragments.length ? fragments[0] : null;\n        for (let cI = 0, pos = 0, off = 0;; cI++) {\n            let nextC = cI < changes.length ? changes[cI] : null;\n            let nextPos = nextC ? nextC.fromA : 1e9;\n            if (nextPos - pos >= minGap)\n                while (nextF && nextF.from < nextPos) {\n                    let cut = nextF;\n                    if (pos >= cut.from || nextPos <= cut.to || off) {\n                        let fFrom = Math.max(cut.from, pos) - off, fTo = Math.min(cut.to, nextPos) - off;\n                        cut = fFrom >= fTo ? null : new TreeFragment(fFrom, fTo, cut.tree, cut.offset + off, cI > 0, !!nextC);\n                    }\n                    if (cut)\n                        result.push(cut);\n                    if (nextF.to > nextPos)\n                        break;\n                    nextF = fI < fragments.length ? fragments[fI++] : null;\n                }\n            if (!nextC)\n                break;\n            pos = nextC.toA;\n            off = nextC.toA - nextC.toB;\n        }\n        return result;\n    }\n}\n/// A superclass that parsers should extend.\nclass Parser {\n    /// Start a parse, returning a [partial parse](#common.PartialParse)\n    /// object. [`fragments`](#common.TreeFragment) can be passed in to\n    /// make the parse incremental.\n    ///\n    /// By default, the entire input is parsed. You can pass `ranges`,\n    /// which should be a sorted array of non-empty, non-overlapping\n    /// ranges, to parse only those ranges. The tree returned in that\n    /// case will start at `ranges[0].from`.\n    startParse(input, fragments, ranges) {\n        if (typeof input == \"string\")\n            input = new StringInput(input);\n        ranges = !ranges ? [new Range(0, input.length)] : ranges.length ? ranges.map(r => new Range(r.from, r.to)) : [new Range(0, 0)];\n        return this.createParse(input, fragments || [], ranges);\n    }\n    /// Run a full parse, returning the resulting tree.\n    parse(input, fragments, ranges) {\n        let parse = this.startParse(input, fragments, ranges);\n        for (;;) {\n            let done = parse.advance();\n            if (done)\n                return done;\n        }\n    }\n}\nclass StringInput {\n    constructor(string) {\n        this.string = string;\n    }\n    get length() { return this.string.length; }\n    chunk(from) { return this.string.slice(from); }\n    get lineChunks() { return false; }\n    read(from, to) { return this.string.slice(from, to); }\n}\n\n/// Create a parse wrapper that, after the inner parse completes,\n/// scans its tree for mixed language regions with the `nest`\n/// function, runs the resulting [inner parses](#common.NestedParse),\n/// and then [mounts](#common.NodeProp^mounted) their results onto the\n/// tree.\n///\n/// The nesting function is passed a cursor to provide context for a\n/// node, but _should not_ move that cursor, only inspect its\n/// properties and optionally access its\n/// [node object](#common.TreeCursor.node).\nfunction parseMixed(nest) {\n    return (parse, input, fragments, ranges) => new MixedParse(parse, nest, input, fragments, ranges);\n}\nclass InnerParse {\n    constructor(parser, parse, overlay, target, ranges) {\n        this.parser = parser;\n        this.parse = parse;\n        this.overlay = overlay;\n        this.target = target;\n        this.ranges = ranges;\n    }\n}\nclass ActiveOverlay {\n    constructor(parser, predicate, mounts, index, start, target, prev) {\n        this.parser = parser;\n        this.predicate = predicate;\n        this.mounts = mounts;\n        this.index = index;\n        this.start = start;\n        this.target = target;\n        this.prev = prev;\n        this.depth = 0;\n        this.ranges = [];\n    }\n}\nconst stoppedInner = new NodeProp({ perNode: true });\nclass MixedParse {\n    constructor(base, nest, input, fragments, ranges) {\n        this.nest = nest;\n        this.input = input;\n        this.fragments = fragments;\n        this.ranges = ranges;\n        this.inner = [];\n        this.innerDone = 0;\n        this.baseTree = null;\n        this.stoppedAt = null;\n        this.baseParse = base;\n    }\n    advance() {\n        if (this.baseParse) {\n            let done = this.baseParse.advance();\n            if (!done)\n                return null;\n            this.baseParse = null;\n            this.baseTree = done;\n            this.startInner();\n            if (this.stoppedAt != null)\n                for (let inner of this.inner)\n                    inner.parse.stopAt(this.stoppedAt);\n        }\n        if (this.innerDone == this.inner.length) {\n            let result = this.baseTree;\n            if (this.stoppedAt != null)\n                result = new Tree(result.type, result.children, result.positions, result.length, result.propValues.concat([[stoppedInner, this.stoppedAt]]));\n            return result;\n        }\n        let inner = this.inner[this.innerDone], done = inner.parse.advance();\n        if (done) {\n            this.innerDone++;\n            // This is a somewhat dodgy but super helpful hack where we\n            // patch up nodes created by the inner parse (and thus\n            // presumably not aliased anywhere else) to hold the information\n            // about the inner parse.\n            let props = Object.assign(Object.create(null), inner.target.props);\n            props[NodeProp.mounted.id] = new MountedTree(done, inner.overlay, inner.parser);\n            inner.target.props = props;\n        }\n        return null;\n    }\n    get parsedPos() {\n        if (this.baseParse)\n            return 0;\n        let pos = this.input.length;\n        for (let i = this.innerDone; i < this.inner.length; i++) {\n            if (this.inner[i].ranges[0].from < pos)\n                pos = Math.min(pos, this.inner[i].parse.parsedPos);\n        }\n        return pos;\n    }\n    stopAt(pos) {\n        this.stoppedAt = pos;\n        if (this.baseParse)\n            this.baseParse.stopAt(pos);\n        else\n            for (let i = this.innerDone; i < this.inner.length; i++)\n                this.inner[i].parse.stopAt(pos);\n    }\n    startInner() {\n        let fragmentCursor = new FragmentCursor(this.fragments);\n        let overlay = null;\n        let covered = null;\n        let cursor = new TreeCursor(new TreeNode(this.baseTree, this.ranges[0].from, 0, null), 1 /* Full */);\n        scan: for (let nest, isCovered; this.stoppedAt == null || cursor.from < this.stoppedAt;) {\n            let enter = true, range;\n            if (fragmentCursor.hasNode(cursor)) {\n                if (overlay) {\n                    let match = overlay.mounts.find(m => m.frag.from <= cursor.from && m.frag.to >= cursor.to && m.mount.overlay);\n                    if (match)\n                        for (let r of match.mount.overlay) {\n                            let from = r.from + match.pos, to = r.to + match.pos;\n                            if (from >= cursor.from && to <= cursor.to && !overlay.ranges.some(r => r.from < to && r.to > from))\n                                overlay.ranges.push({ from, to });\n                        }\n                }\n                enter = false;\n            }\n            else if (covered && (isCovered = checkCover(covered.ranges, cursor.from, cursor.to))) {\n                enter = isCovered != 2 /* Full */;\n            }\n            else if (!cursor.type.isAnonymous && cursor.from < cursor.to && (nest = this.nest(cursor, this.input))) {\n                if (!cursor.tree)\n                    materialize(cursor);\n                let oldMounts = fragmentCursor.findMounts(cursor.from, nest.parser);\n                if (typeof nest.overlay == \"function\") {\n                    overlay = new ActiveOverlay(nest.parser, nest.overlay, oldMounts, this.inner.length, cursor.from, cursor.tree, overlay);\n                }\n                else {\n                    let ranges = punchRanges(this.ranges, nest.overlay || [new Range(cursor.from, cursor.to)]);\n                    if (ranges.length)\n                        this.inner.push(new InnerParse(nest.parser, nest.parser.startParse(this.input, enterFragments(oldMounts, ranges), ranges), nest.overlay ? nest.overlay.map(r => new Range(r.from - cursor.from, r.to - cursor.from)) : null, cursor.tree, ranges));\n                    if (!nest.overlay)\n                        enter = false;\n                    else if (ranges.length)\n                        covered = { ranges, depth: 0, prev: covered };\n                }\n            }\n            else if (overlay && (range = overlay.predicate(cursor))) {\n                if (range === true)\n                    range = new Range(cursor.from, cursor.to);\n                if (range.from < range.to)\n                    overlay.ranges.push(range);\n            }\n            if (enter && cursor.firstChild()) {\n                if (overlay)\n                    overlay.depth++;\n                if (covered)\n                    covered.depth++;\n            }\n            else {\n                for (;;) {\n                    if (cursor.nextSibling())\n                        break;\n                    if (!cursor.parent())\n                        break scan;\n                    if (overlay && !--overlay.depth) {\n                        let ranges = punchRanges(this.ranges, overlay.ranges);\n                        if (ranges.length)\n                            this.inner.splice(overlay.index, 0, new InnerParse(overlay.parser, overlay.parser.startParse(this.input, enterFragments(overlay.mounts, ranges), ranges), overlay.ranges.map(r => new Range(r.from - overlay.start, r.to - overlay.start)), overlay.target, ranges));\n                        overlay = overlay.prev;\n                    }\n                    if (covered && !--covered.depth)\n                        covered = covered.prev;\n                }\n            }\n        }\n    }\n}\nfunction checkCover(covered, from, to) {\n    for (let range of covered) {\n        if (range.from >= to)\n            break;\n        if (range.to > from)\n            return range.from <= from && range.to >= to ? 2 /* Full */ : 1 /* Partial */;\n    }\n    return 0 /* None */;\n}\n// Take a piece of buffer and convert it into a stand-alone\n// TreeBuffer.\nfunction sliceBuf(buf, startI, endI, nodes, positions, off) {\n    if (startI < endI) {\n        let from = buf.buffer[startI + 1], to = buf.buffer[endI - 2];\n        nodes.push(buf.slice(startI, endI, from, to));\n        positions.push(from - off);\n    }\n}\n// This function takes a node that's in a buffer, and converts it, and\n// its parent buffer nodes, into a Tree. This is again acting on the\n// assumption that the trees and buffers have been constructed by the\n// parse that was ran via the mix parser, and thus aren't shared with\n// any other code, making violations of the immutability safe.\nfunction materialize(cursor) {\n    let { node } = cursor, depth = 0;\n    // Scan up to the nearest tree\n    do {\n        cursor.parent();\n        depth++;\n    } while (!cursor.tree);\n    // Find the index of the buffer in that tree\n    let i = 0, base = cursor.tree, off = 0;\n    for (;; i++) {\n        off = base.positions[i] + cursor.from;\n        if (off <= node.from && off + base.children[i].length >= node.to)\n            break;\n    }\n    let buf = base.children[i], b = buf.buffer;\n    // Split a level in the buffer, putting the nodes before and after\n    // the child that contains `node` into new buffers.\n    function split(startI, endI, type, innerOffset, length) {\n        let i = startI;\n        while (b[i + 2] + off <= node.from)\n            i = b[i + 3];\n        let children = [], positions = [];\n        sliceBuf(buf, startI, i, children, positions, innerOffset);\n        let from = b[i + 1], to = b[i + 2];\n        let isTarget = from + off == node.from && to + off == node.to && b[i] == node.type.id;\n        children.push(isTarget ? node.toTree() : split(i + 4, b[i + 3], buf.set.types[b[i]], from, to - from));\n        positions.push(from - innerOffset);\n        sliceBuf(buf, b[i + 3], endI, children, positions, innerOffset);\n        return new Tree(type, children, positions, length);\n    }\n    base.children[i] = split(0, b.length, NodeType.none, 0, buf.length);\n    // Move the cursor back to the target node\n    for (let d = 0; d <= depth; d++)\n        cursor.childAfter(node.from);\n}\nclass StructureCursor {\n    constructor(root, offset) {\n        this.offset = offset;\n        this.done = false;\n        this.cursor = root.fullCursor();\n    }\n    // Move to the first node (in pre-order) that starts at or after `pos`.\n    moveTo(pos) {\n        let { cursor } = this, p = pos - this.offset;\n        while (!this.done && cursor.from < p) {\n            if (cursor.to >= pos && cursor.enter(p, 1, false, false)) ;\n            else if (!cursor.next(false))\n                this.done = true;\n        }\n    }\n    hasNode(cursor) {\n        this.moveTo(cursor.from);\n        if (!this.done && this.cursor.from + this.offset == cursor.from && this.cursor.tree) {\n            for (let tree = this.cursor.tree;;) {\n                if (tree == cursor.tree)\n                    return true;\n                if (tree.children.length && tree.positions[0] == 0 && tree.children[0] instanceof Tree)\n                    tree = tree.children[0];\n                else\n                    break;\n            }\n        }\n        return false;\n    }\n}\nclass FragmentCursor {\n    constructor(fragments) {\n        var _a;\n        this.fragments = fragments;\n        this.curTo = 0;\n        this.fragI = 0;\n        if (fragments.length) {\n            let first = this.curFrag = fragments[0];\n            this.curTo = (_a = first.tree.prop(stoppedInner)) !== null && _a !== void 0 ? _a : first.to;\n            this.inner = new StructureCursor(first.tree, -first.offset);\n        }\n        else {\n            this.curFrag = this.inner = null;\n        }\n    }\n    hasNode(node) {\n        while (this.curFrag && node.from >= this.curTo)\n            this.nextFrag();\n        return this.curFrag && this.curFrag.from <= node.from && this.curTo >= node.to && this.inner.hasNode(node);\n    }\n    nextFrag() {\n        var _a;\n        this.fragI++;\n        if (this.fragI == this.fragments.length) {\n            this.curFrag = this.inner = null;\n        }\n        else {\n            let frag = this.curFrag = this.fragments[this.fragI];\n            this.curTo = (_a = frag.tree.prop(stoppedInner)) !== null && _a !== void 0 ? _a : frag.to;\n            this.inner = new StructureCursor(frag.tree, -frag.offset);\n        }\n    }\n    findMounts(pos, parser) {\n        var _a;\n        let result = [];\n        if (this.inner) {\n            this.inner.cursor.moveTo(pos, 1);\n            for (let pos = this.inner.cursor.node; pos; pos = pos.parent) {\n                let mount = (_a = pos.tree) === null || _a === void 0 ? void 0 : _a.prop(NodeProp.mounted);\n                if (mount && mount.parser == parser) {\n                    for (let i = this.fragI; i < this.fragments.length; i++) {\n                        let frag = this.fragments[i];\n                        if (frag.from >= pos.to)\n                            break;\n                        if (frag.tree == this.curFrag.tree)\n                            result.push({\n                                frag,\n                                pos: pos.from - frag.offset,\n                                mount\n                            });\n                    }\n                }\n            }\n        }\n        return result;\n    }\n}\nfunction punchRanges(outer, ranges) {\n    let copy = null, current = ranges;\n    for (let i = 1, j = 0; i < outer.length; i++) {\n        let gapFrom = outer[i - 1].to, gapTo = outer[i].from;\n        for (; j < current.length; j++) {\n            let r = current[j];\n            if (r.from >= gapTo)\n                break;\n            if (r.to <= gapFrom)\n                continue;\n            if (!copy)\n                current = copy = ranges.slice();\n            if (r.from < gapFrom) {\n                copy[j] = new Range(r.from, gapFrom);\n                if (r.to > gapTo)\n                    copy.splice(j + 1, 0, new Range(gapTo, r.to));\n            }\n            else if (r.to > gapTo) {\n                copy[j--] = new Range(gapTo, r.to);\n            }\n            else {\n                copy.splice(j--, 1);\n            }\n        }\n    }\n    return current;\n}\nfunction findCoverChanges(a, b, from, to) {\n    let iA = 0, iB = 0, inA = false, inB = false, pos = -1e9;\n    let result = [];\n    for (;;) {\n        let nextA = iA == a.length ? 1e9 : inA ? a[iA].to : a[iA].from;\n        let nextB = iB == b.length ? 1e9 : inB ? b[iB].to : b[iB].from;\n        if (inA != inB) {\n            let start = Math.max(pos, from), end = Math.min(nextA, nextB, to);\n            if (start < end)\n                result.push(new Range(start, end));\n        }\n        pos = Math.min(nextA, nextB);\n        if (pos == 1e9)\n            break;\n        if (nextA == pos) {\n            if (!inA)\n                inA = true;\n            else {\n                inA = false;\n                iA++;\n            }\n        }\n        if (nextB == pos) {\n            if (!inB)\n                inB = true;\n            else {\n                inB = false;\n                iB++;\n            }\n        }\n    }\n    return result;\n}\n// Given a number of fragments for the outer tree, and a set of ranges\n// to parse, find fragments for inner trees mounted around those\n// ranges, if any.\nfunction enterFragments(mounts, ranges) {\n    let result = [];\n    for (let { pos, mount, frag } of mounts) {\n        let startPos = pos + (mount.overlay ? mount.overlay[0].from : 0), endPos = startPos + mount.tree.length;\n        let from = Math.max(frag.from, startPos), to = Math.min(frag.to, endPos);\n        if (mount.overlay) {\n            let overlay = mount.overlay.map(r => new Range(r.from + pos, r.to + pos));\n            let changes = findCoverChanges(ranges, overlay, from, to);\n            for (let i = 0, pos = from;; i++) {\n                let last = i == changes.length, end = last ? to : changes[i].from;\n                if (end > pos)\n                    result.push(new TreeFragment(pos, end, mount.tree, -startPos, frag.from >= pos, frag.to <= end));\n                if (last)\n                    break;\n                pos = changes[i].to;\n            }\n        }\n        else {\n            result.push(new TreeFragment(from, to, mount.tree, -startPos, frag.from >= startPos, frag.to <= endPos));\n        }\n    }\n    return result;\n}\n\nexport { DefaultBufferLength, MountedTree, NodeProp, NodeSet, NodeType, Parser, Tree, TreeBuffer, TreeCursor, TreeFragment, parseMixed };\n","import { Parser, NodeSet, NodeType, DefaultBufferLength, NodeProp, Tree } from '@lezer/common';\n\n/// A parse stack. These are used internally by the parser to track\n/// parsing progress. They also provide some properties and methods\n/// that external code such as a tokenizer can use to get information\n/// about the parse state.\nclass Stack {\n    /// @internal\n    constructor(\n    /// The parse that this stack is part of @internal\n    p, \n    /// Holds state, input pos, buffer index triplets for all but the\n    /// top state @internal\n    stack, \n    /// The current parse state @internal\n    state, \n    // The position at which the next reduce should take place. This\n    // can be less than `this.pos` when skipped expressions have been\n    // added to the stack (which should be moved outside of the next\n    // reduction)\n    /// @internal\n    reducePos, \n    /// The input position up to which this stack has parsed.\n    pos, \n    /// The dynamic score of the stack, including dynamic precedence\n    /// and error-recovery penalties\n    /// @internal\n    score, \n    // The output buffer. Holds (type, start, end, size) quads\n    // representing nodes created by the parser, where `size` is\n    // amount of buffer array entries covered by this node.\n    /// @internal\n    buffer, \n    // The base offset of the buffer. When stacks are split, the split\n    // instance shared the buffer history with its parent up to\n    // `bufferBase`, which is the absolute offset (including the\n    // offset of previous splits) into the buffer at which this stack\n    // starts writing.\n    /// @internal\n    bufferBase, \n    /// @internal\n    curContext, \n    /// @internal\n    lookAhead = 0, \n    // A parent stack from which this was split off, if any. This is\n    // set up so that it always points to a stack that has some\n    // additional buffer content, never to a stack with an equal\n    // `bufferBase`.\n    /// @internal\n    parent) {\n        this.p = p;\n        this.stack = stack;\n        this.state = state;\n        this.reducePos = reducePos;\n        this.pos = pos;\n        this.score = score;\n        this.buffer = buffer;\n        this.bufferBase = bufferBase;\n        this.curContext = curContext;\n        this.lookAhead = lookAhead;\n        this.parent = parent;\n    }\n    /// @internal\n    toString() {\n        return `[${this.stack.filter((_, i) => i % 3 == 0).concat(this.state)}]@${this.pos}${this.score ? \"!\" + this.score : \"\"}`;\n    }\n    // Start an empty stack\n    /// @internal\n    static start(p, state, pos = 0) {\n        let cx = p.parser.context;\n        return new Stack(p, [], state, pos, pos, 0, [], 0, cx ? new StackContext(cx, cx.start) : null, 0, null);\n    }\n    /// The stack's current [context](#lr.ContextTracker) value, if\n    /// any. Its type will depend on the context tracker's type\n    /// parameter, or it will be `null` if there is no context\n    /// tracker.\n    get context() { return this.curContext ? this.curContext.context : null; }\n    // Push a state onto the stack, tracking its start position as well\n    // as the buffer base at that point.\n    /// @internal\n    pushState(state, start) {\n        this.stack.push(this.state, start, this.bufferBase + this.buffer.length);\n        this.state = state;\n    }\n    // Apply a reduce action\n    /// @internal\n    reduce(action) {\n        let depth = action >> 19 /* ReduceDepthShift */, type = action & 65535 /* ValueMask */;\n        let { parser } = this.p;\n        let dPrec = parser.dynamicPrecedence(type);\n        if (dPrec)\n            this.score += dPrec;\n        if (depth == 0) {\n            this.pushState(parser.getGoto(this.state, type, true), this.reducePos);\n            // Zero-depth reductions are a special case—they add stuff to\n            // the stack without popping anything off.\n            if (type < parser.minRepeatTerm)\n                this.storeNode(type, this.reducePos, this.reducePos, 4, true);\n            this.reduceContext(type, this.reducePos);\n            return;\n        }\n        // Find the base index into `this.stack`, content after which will\n        // be dropped. Note that with `StayFlag` reductions we need to\n        // consume two extra frames (the dummy parent node for the skipped\n        // expression and the state that we'll be staying in, which should\n        // be moved to `this.state`).\n        let base = this.stack.length - ((depth - 1) * 3) - (action & 262144 /* StayFlag */ ? 6 : 0);\n        let start = this.stack[base - 2];\n        let bufferBase = this.stack[base - 1], count = this.bufferBase + this.buffer.length - bufferBase;\n        // Store normal terms or `R -> R R` repeat reductions\n        if (type < parser.minRepeatTerm || (action & 131072 /* RepeatFlag */)) {\n            let pos = parser.stateFlag(this.state, 1 /* Skipped */) ? this.pos : this.reducePos;\n            this.storeNode(type, start, pos, count + 4, true);\n        }\n        if (action & 262144 /* StayFlag */) {\n            this.state = this.stack[base];\n        }\n        else {\n            let baseStateID = this.stack[base - 3];\n            this.state = parser.getGoto(baseStateID, type, true);\n        }\n        while (this.stack.length > base)\n            this.stack.pop();\n        this.reduceContext(type, start);\n    }\n    // Shift a value into the buffer\n    /// @internal\n    storeNode(term, start, end, size = 4, isReduce = false) {\n        if (term == 0 /* Err */) { // Try to omit/merge adjacent error nodes\n            let cur = this, top = this.buffer.length;\n            if (top == 0 && cur.parent) {\n                top = cur.bufferBase - cur.parent.bufferBase;\n                cur = cur.parent;\n            }\n            if (top > 0 && cur.buffer[top - 4] == 0 /* Err */ && cur.buffer[top - 1] > -1) {\n                if (start == end)\n                    return;\n                if (cur.buffer[top - 2] >= start) {\n                    cur.buffer[top - 2] = end;\n                    return;\n                }\n            }\n        }\n        if (!isReduce || this.pos == end) { // Simple case, just append\n            this.buffer.push(term, start, end, size);\n        }\n        else { // There may be skipped nodes that have to be moved forward\n            let index = this.buffer.length;\n            if (index > 0 && this.buffer[index - 4] != 0 /* Err */)\n                while (index > 0 && this.buffer[index - 2] > end) {\n                    // Move this record forward\n                    this.buffer[index] = this.buffer[index - 4];\n                    this.buffer[index + 1] = this.buffer[index - 3];\n                    this.buffer[index + 2] = this.buffer[index - 2];\n                    this.buffer[index + 3] = this.buffer[index - 1];\n                    index -= 4;\n                    if (size > 4)\n                        size -= 4;\n                }\n            this.buffer[index] = term;\n            this.buffer[index + 1] = start;\n            this.buffer[index + 2] = end;\n            this.buffer[index + 3] = size;\n        }\n    }\n    // Apply a shift action\n    /// @internal\n    shift(action, next, nextEnd) {\n        let start = this.pos;\n        if (action & 131072 /* GotoFlag */) {\n            this.pushState(action & 65535 /* ValueMask */, this.pos);\n        }\n        else if ((action & 262144 /* StayFlag */) == 0) { // Regular shift\n            let nextState = action, { parser } = this.p;\n            if (nextEnd > this.pos || next <= parser.maxNode) {\n                this.pos = nextEnd;\n                if (!parser.stateFlag(nextState, 1 /* Skipped */))\n                    this.reducePos = nextEnd;\n            }\n            this.pushState(nextState, start);\n            this.shiftContext(next, start);\n            if (next <= parser.maxNode)\n                this.buffer.push(next, start, nextEnd, 4);\n        }\n        else { // Shift-and-stay, which means this is a skipped token\n            this.pos = nextEnd;\n            this.shiftContext(next, start);\n            if (next <= this.p.parser.maxNode)\n                this.buffer.push(next, start, nextEnd, 4);\n        }\n    }\n    // Apply an action\n    /// @internal\n    apply(action, next, nextEnd) {\n        if (action & 65536 /* ReduceFlag */)\n            this.reduce(action);\n        else\n            this.shift(action, next, nextEnd);\n    }\n    // Add a prebuilt (reused) node into the buffer.\n    /// @internal\n    useNode(value, next) {\n        let index = this.p.reused.length - 1;\n        if (index < 0 || this.p.reused[index] != value) {\n            this.p.reused.push(value);\n            index++;\n        }\n        let start = this.pos;\n        this.reducePos = this.pos = start + value.length;\n        this.pushState(next, start);\n        this.buffer.push(index, start, this.reducePos, -1 /* size == -1 means this is a reused value */);\n        if (this.curContext)\n            this.updateContext(this.curContext.tracker.reuse(this.curContext.context, value, this, this.p.stream.reset(this.pos - value.length)));\n    }\n    // Split the stack. Due to the buffer sharing and the fact\n    // that `this.stack` tends to stay quite shallow, this isn't very\n    // expensive.\n    /// @internal\n    split() {\n        let parent = this;\n        let off = parent.buffer.length;\n        // Because the top of the buffer (after this.pos) may be mutated\n        // to reorder reductions and skipped tokens, and shared buffers\n        // should be immutable, this copies any outstanding skipped tokens\n        // to the new buffer, and puts the base pointer before them.\n        while (off > 0 && parent.buffer[off - 2] > parent.reducePos)\n            off -= 4;\n        let buffer = parent.buffer.slice(off), base = parent.bufferBase + off;\n        // Make sure parent points to an actual parent with content, if there is such a parent.\n        while (parent && base == parent.bufferBase)\n            parent = parent.parent;\n        return new Stack(this.p, this.stack.slice(), this.state, this.reducePos, this.pos, this.score, buffer, base, this.curContext, this.lookAhead, parent);\n    }\n    // Try to recover from an error by 'deleting' (ignoring) one token.\n    /// @internal\n    recoverByDelete(next, nextEnd) {\n        let isNode = next <= this.p.parser.maxNode;\n        if (isNode)\n            this.storeNode(next, this.pos, nextEnd, 4);\n        this.storeNode(0 /* Err */, this.pos, nextEnd, isNode ? 8 : 4);\n        this.pos = this.reducePos = nextEnd;\n        this.score -= 190 /* Delete */;\n    }\n    /// Check if the given term would be able to be shifted (optionally\n    /// after some reductions) on this stack. This can be useful for\n    /// external tokenizers that want to make sure they only provide a\n    /// given token when it applies.\n    canShift(term) {\n        for (let sim = new SimulatedStack(this);;) {\n            let action = this.p.parser.stateSlot(sim.state, 4 /* DefaultReduce */) || this.p.parser.hasAction(sim.state, term);\n            if ((action & 65536 /* ReduceFlag */) == 0)\n                return true;\n            if (action == 0)\n                return false;\n            sim.reduce(action);\n        }\n    }\n    // Apply up to Recover.MaxNext recovery actions that conceptually\n    // inserts some missing token or rule.\n    /// @internal\n    recoverByInsert(next) {\n        if (this.stack.length >= 300 /* MaxInsertStackDepth */)\n            return [];\n        let nextStates = this.p.parser.nextStates(this.state);\n        if (nextStates.length > 4 /* MaxNext */ << 1 || this.stack.length >= 120 /* DampenInsertStackDepth */) {\n            let best = [];\n            for (let i = 0, s; i < nextStates.length; i += 2) {\n                if ((s = nextStates[i + 1]) != this.state && this.p.parser.hasAction(s, next))\n                    best.push(nextStates[i], s);\n            }\n            if (this.stack.length < 120 /* DampenInsertStackDepth */)\n                for (let i = 0; best.length < 4 /* MaxNext */ << 1 && i < nextStates.length; i += 2) {\n                    let s = nextStates[i + 1];\n                    if (!best.some((v, i) => (i & 1) && v == s))\n                        best.push(nextStates[i], s);\n                }\n            nextStates = best;\n        }\n        let result = [];\n        for (let i = 0; i < nextStates.length && result.length < 4 /* MaxNext */; i += 2) {\n            let s = nextStates[i + 1];\n            if (s == this.state)\n                continue;\n            let stack = this.split();\n            stack.storeNode(0 /* Err */, stack.pos, stack.pos, 4, true);\n            stack.pushState(s, this.pos);\n            stack.shiftContext(nextStates[i], this.pos);\n            stack.score -= 200 /* Insert */;\n            result.push(stack);\n        }\n        return result;\n    }\n    // Force a reduce, if possible. Return false if that can't\n    // be done.\n    /// @internal\n    forceReduce() {\n        let reduce = this.p.parser.stateSlot(this.state, 5 /* ForcedReduce */);\n        if ((reduce & 65536 /* ReduceFlag */) == 0)\n            return false;\n        let { parser } = this.p;\n        if (!parser.validAction(this.state, reduce)) {\n            let depth = reduce >> 19 /* ReduceDepthShift */, term = reduce & 65535 /* ValueMask */;\n            let target = this.stack.length - depth * 3;\n            if (target < 0 || parser.getGoto(this.stack[target], term, false) < 0)\n                return false;\n            this.storeNode(0 /* Err */, this.reducePos, this.reducePos, 4, true);\n            this.score -= 100 /* Reduce */;\n        }\n        this.reduce(reduce);\n        return true;\n    }\n    /// @internal\n    forceAll() {\n        while (!this.p.parser.stateFlag(this.state, 2 /* Accepting */)) {\n            if (!this.forceReduce()) {\n                this.storeNode(0 /* Err */, this.pos, this.pos, 4, true);\n                break;\n            }\n        }\n        return this;\n    }\n    /// Check whether this state has no further actions (assumed to be a direct descendant of the\n    /// top state, since any other states must be able to continue\n    /// somehow). @internal\n    get deadEnd() {\n        if (this.stack.length != 3)\n            return false;\n        let { parser } = this.p;\n        return parser.data[parser.stateSlot(this.state, 1 /* Actions */)] == 65535 /* End */ &&\n            !parser.stateSlot(this.state, 4 /* DefaultReduce */);\n    }\n    /// Restart the stack (put it back in its start state). Only safe\n    /// when this.stack.length == 3 (state is directly below the top\n    /// state). @internal\n    restart() {\n        this.state = this.stack[0];\n        this.stack.length = 0;\n    }\n    /// @internal\n    sameState(other) {\n        if (this.state != other.state || this.stack.length != other.stack.length)\n            return false;\n        for (let i = 0; i < this.stack.length; i += 3)\n            if (this.stack[i] != other.stack[i])\n                return false;\n        return true;\n    }\n    /// Get the parser used by this stack.\n    get parser() { return this.p.parser; }\n    /// Test whether a given dialect (by numeric ID, as exported from\n    /// the terms file) is enabled.\n    dialectEnabled(dialectID) { return this.p.parser.dialect.flags[dialectID]; }\n    shiftContext(term, start) {\n        if (this.curContext)\n            this.updateContext(this.curContext.tracker.shift(this.curContext.context, term, this, this.p.stream.reset(start)));\n    }\n    reduceContext(term, start) {\n        if (this.curContext)\n            this.updateContext(this.curContext.tracker.reduce(this.curContext.context, term, this, this.p.stream.reset(start)));\n    }\n    /// @internal\n    emitContext() {\n        let last = this.buffer.length - 1;\n        if (last < 0 || this.buffer[last] != -3)\n            this.buffer.push(this.curContext.hash, this.reducePos, this.reducePos, -3);\n    }\n    /// @internal\n    emitLookAhead() {\n        let last = this.buffer.length - 1;\n        if (last < 0 || this.buffer[last] != -4)\n            this.buffer.push(this.lookAhead, this.reducePos, this.reducePos, -4);\n    }\n    updateContext(context) {\n        if (context != this.curContext.context) {\n            let newCx = new StackContext(this.curContext.tracker, context);\n            if (newCx.hash != this.curContext.hash)\n                this.emitContext();\n            this.curContext = newCx;\n        }\n    }\n    /// @internal\n    setLookAhead(lookAhead) {\n        if (lookAhead > this.lookAhead) {\n            this.emitLookAhead();\n            this.lookAhead = lookAhead;\n        }\n    }\n    /// @internal\n    close() {\n        if (this.curContext && this.curContext.tracker.strict)\n            this.emitContext();\n        if (this.lookAhead > 0)\n            this.emitLookAhead();\n    }\n}\nclass StackContext {\n    constructor(tracker, context) {\n        this.tracker = tracker;\n        this.context = context;\n        this.hash = tracker.strict ? tracker.hash(context) : 0;\n    }\n}\nvar Recover;\n(function (Recover) {\n    Recover[Recover[\"Insert\"] = 200] = \"Insert\";\n    Recover[Recover[\"Delete\"] = 190] = \"Delete\";\n    Recover[Recover[\"Reduce\"] = 100] = \"Reduce\";\n    Recover[Recover[\"MaxNext\"] = 4] = \"MaxNext\";\n    Recover[Recover[\"MaxInsertStackDepth\"] = 300] = \"MaxInsertStackDepth\";\n    Recover[Recover[\"DampenInsertStackDepth\"] = 120] = \"DampenInsertStackDepth\";\n})(Recover || (Recover = {}));\n// Used to cheaply run some reductions to scan ahead without mutating\n// an entire stack\nclass SimulatedStack {\n    constructor(start) {\n        this.start = start;\n        this.state = start.state;\n        this.stack = start.stack;\n        this.base = this.stack.length;\n    }\n    reduce(action) {\n        let term = action & 65535 /* ValueMask */, depth = action >> 19 /* ReduceDepthShift */;\n        if (depth == 0) {\n            if (this.stack == this.start.stack)\n                this.stack = this.stack.slice();\n            this.stack.push(this.state, 0, 0);\n            this.base += 3;\n        }\n        else {\n            this.base -= (depth - 1) * 3;\n        }\n        let goto = this.start.p.parser.getGoto(this.stack[this.base - 3], term, true);\n        this.state = goto;\n    }\n}\n// This is given to `Tree.build` to build a buffer, and encapsulates\n// the parent-stack-walking necessary to read the nodes.\nclass StackBufferCursor {\n    constructor(stack, pos, index) {\n        this.stack = stack;\n        this.pos = pos;\n        this.index = index;\n        this.buffer = stack.buffer;\n        if (this.index == 0)\n            this.maybeNext();\n    }\n    static create(stack, pos = stack.bufferBase + stack.buffer.length) {\n        return new StackBufferCursor(stack, pos, pos - stack.bufferBase);\n    }\n    maybeNext() {\n        let next = this.stack.parent;\n        if (next != null) {\n            this.index = this.stack.bufferBase - next.bufferBase;\n            this.stack = next;\n            this.buffer = next.buffer;\n        }\n    }\n    get id() { return this.buffer[this.index - 4]; }\n    get start() { return this.buffer[this.index - 3]; }\n    get end() { return this.buffer[this.index - 2]; }\n    get size() { return this.buffer[this.index - 1]; }\n    next() {\n        this.index -= 4;\n        this.pos -= 4;\n        if (this.index == 0)\n            this.maybeNext();\n    }\n    fork() {\n        return new StackBufferCursor(this.stack, this.pos, this.index);\n    }\n}\n\nclass CachedToken {\n    constructor() {\n        this.start = -1;\n        this.value = -1;\n        this.end = -1;\n        this.extended = -1;\n        this.lookAhead = 0;\n        this.mask = 0;\n        this.context = 0;\n    }\n}\nconst nullToken = new CachedToken;\n/// [Tokenizers](#lr.ExternalTokenizer) interact with the input\n/// through this interface. It presents the input as a stream of\n/// characters, tracking lookahead and hiding the complexity of\n/// [ranges](#common.Parser.parse^ranges) from tokenizer code.\nclass InputStream {\n    /// @internal\n    constructor(\n    /// @internal\n    input, \n    /// @internal\n    ranges) {\n        this.input = input;\n        this.ranges = ranges;\n        /// @internal\n        this.chunk = \"\";\n        /// @internal\n        this.chunkOff = 0;\n        /// Backup chunk\n        this.chunk2 = \"\";\n        this.chunk2Pos = 0;\n        /// The character code of the next code unit in the input, or -1\n        /// when the stream is at the end of the input.\n        this.next = -1;\n        /// @internal\n        this.token = nullToken;\n        this.rangeIndex = 0;\n        this.pos = this.chunkPos = ranges[0].from;\n        this.range = ranges[0];\n        this.end = ranges[ranges.length - 1].to;\n        this.readNext();\n    }\n    resolveOffset(offset, assoc) {\n        let range = this.range, index = this.rangeIndex;\n        let pos = this.pos + offset;\n        while (pos < range.from) {\n            if (!index)\n                return null;\n            let next = this.ranges[--index];\n            pos -= range.from - next.to;\n            range = next;\n        }\n        while (assoc < 0 ? pos > range.to : pos >= range.to) {\n            if (index == this.ranges.length - 1)\n                return null;\n            let next = this.ranges[++index];\n            pos += next.from - range.to;\n            range = next;\n        }\n        return pos;\n    }\n    /// Look at a code unit near the stream position. `.peek(0)` equals\n    /// `.next`, `.peek(-1)` gives you the previous character, and so\n    /// on.\n    ///\n    /// Note that looking around during tokenizing creates dependencies\n    /// on potentially far-away content, which may reduce the\n    /// effectiveness incremental parsing—when looking forward—or even\n    /// cause invalid reparses when looking backward more than 25 code\n    /// units, since the library does not track lookbehind.\n    peek(offset) {\n        let idx = this.chunkOff + offset, pos, result;\n        if (idx >= 0 && idx < this.chunk.length) {\n            pos = this.pos + offset;\n            result = this.chunk.charCodeAt(idx);\n        }\n        else {\n            let resolved = this.resolveOffset(offset, 1);\n            if (resolved == null)\n                return -1;\n            pos = resolved;\n            if (pos >= this.chunk2Pos && pos < this.chunk2Pos + this.chunk2.length) {\n                result = this.chunk2.charCodeAt(pos - this.chunk2Pos);\n            }\n            else {\n                let i = this.rangeIndex, range = this.range;\n                while (range.to <= pos)\n                    range = this.ranges[++i];\n                this.chunk2 = this.input.chunk(this.chunk2Pos = pos);\n                if (pos + this.chunk2.length > range.to)\n                    this.chunk2 = this.chunk2.slice(0, range.to - pos);\n                result = this.chunk2.charCodeAt(0);\n            }\n        }\n        if (pos >= this.token.lookAhead)\n            this.token.lookAhead = pos + 1;\n        return result;\n    }\n    /// Accept a token. By default, the end of the token is set to the\n    /// current stream position, but you can pass an offset (relative to\n    /// the stream position) to change that.\n    acceptToken(token, endOffset = 0) {\n        let end = endOffset ? this.resolveOffset(endOffset, -1) : this.pos;\n        if (end == null || end < this.token.start)\n            throw new RangeError(\"Token end out of bounds\");\n        this.token.value = token;\n        this.token.end = end;\n    }\n    getChunk() {\n        if (this.pos >= this.chunk2Pos && this.pos < this.chunk2Pos + this.chunk2.length) {\n            let { chunk, chunkPos } = this;\n            this.chunk = this.chunk2;\n            this.chunkPos = this.chunk2Pos;\n            this.chunk2 = chunk;\n            this.chunk2Pos = chunkPos;\n            this.chunkOff = this.pos - this.chunkPos;\n        }\n        else {\n            this.chunk2 = this.chunk;\n            this.chunk2Pos = this.chunkPos;\n            let nextChunk = this.input.chunk(this.pos);\n            let end = this.pos + nextChunk.length;\n            this.chunk = end > this.range.to ? nextChunk.slice(0, this.range.to - this.pos) : nextChunk;\n            this.chunkPos = this.pos;\n            this.chunkOff = 0;\n        }\n    }\n    readNext() {\n        if (this.chunkOff >= this.chunk.length) {\n            this.getChunk();\n            if (this.chunkOff == this.chunk.length)\n                return this.next = -1;\n        }\n        return this.next = this.chunk.charCodeAt(this.chunkOff);\n    }\n    /// Move the stream forward N (defaults to 1) code units. Returns\n    /// the new value of [`next`](#lr.InputStream.next).\n    advance(n = 1) {\n        this.chunkOff += n;\n        while (this.pos + n >= this.range.to) {\n            if (this.rangeIndex == this.ranges.length - 1)\n                return this.setDone();\n            n -= this.range.to - this.pos;\n            this.range = this.ranges[++this.rangeIndex];\n            this.pos = this.range.from;\n        }\n        this.pos += n;\n        if (this.pos >= this.token.lookAhead)\n            this.token.lookAhead = this.pos + 1;\n        return this.readNext();\n    }\n    setDone() {\n        this.pos = this.chunkPos = this.end;\n        this.range = this.ranges[this.rangeIndex = this.ranges.length - 1];\n        this.chunk = \"\";\n        return this.next = -1;\n    }\n    /// @internal\n    reset(pos, token) {\n        if (token) {\n            this.token = token;\n            token.start = pos;\n            token.lookAhead = pos + 1;\n            token.value = token.extended = -1;\n        }\n        else {\n            this.token = nullToken;\n        }\n        if (this.pos != pos) {\n            this.pos = pos;\n            if (pos == this.end) {\n                this.setDone();\n                return this;\n            }\n            while (pos < this.range.from)\n                this.range = this.ranges[--this.rangeIndex];\n            while (pos >= this.range.to)\n                this.range = this.ranges[++this.rangeIndex];\n            if (pos >= this.chunkPos && pos < this.chunkPos + this.chunk.length) {\n                this.chunkOff = pos - this.chunkPos;\n            }\n            else {\n                this.chunk = \"\";\n                this.chunkOff = 0;\n            }\n            this.readNext();\n        }\n        return this;\n    }\n    /// @internal\n    read(from, to) {\n        if (from >= this.chunkPos && to <= this.chunkPos + this.chunk.length)\n            return this.chunk.slice(from - this.chunkPos, to - this.chunkPos);\n        if (from >= this.chunk2Pos && to <= this.chunk2Pos + this.chunk2.length)\n            return this.chunk2.slice(from - this.chunk2Pos, to - this.chunk2Pos);\n        if (from >= this.range.from && to <= this.range.to)\n            return this.input.read(from, to);\n        let result = \"\";\n        for (let r of this.ranges) {\n            if (r.from >= to)\n                break;\n            if (r.to > from)\n                result += this.input.read(Math.max(r.from, from), Math.min(r.to, to));\n        }\n        return result;\n    }\n}\n/// @internal\nclass TokenGroup {\n    constructor(data, id) {\n        this.data = data;\n        this.id = id;\n    }\n    token(input, stack) { readToken(this.data, input, stack, this.id); }\n}\nTokenGroup.prototype.contextual = TokenGroup.prototype.fallback = TokenGroup.prototype.extend = false;\n/// `@external tokens` declarations in the grammar should resolve to\n/// an instance of this class.\nclass ExternalTokenizer {\n    /// Create a tokenizer. The first argument is the function that,\n    /// given an input stream, scans for the types of tokens it\n    /// recognizes at the stream's position, and calls\n    /// [`acceptToken`](#lr.InputStream.acceptToken) when it finds\n    /// one.\n    constructor(\n    /// @internal\n    token, options = {}) {\n        this.token = token;\n        this.contextual = !!options.contextual;\n        this.fallback = !!options.fallback;\n        this.extend = !!options.extend;\n    }\n}\n// Tokenizer data is stored a big uint16 array containing, for each\n// state:\n//\n//  - A group bitmask, indicating what token groups are reachable from\n//    this state, so that paths that can only lead to tokens not in\n//    any of the current groups can be cut off early.\n//\n//  - The position of the end of the state's sequence of accepting\n//    tokens\n//\n//  - The number of outgoing edges for the state\n//\n//  - The accepting tokens, as (token id, group mask) pairs\n//\n//  - The outgoing edges, as (start character, end character, state\n//    index) triples, with end character being exclusive\n//\n// This function interprets that data, running through a stream as\n// long as new states with the a matching group mask can be reached,\n// and updating `token` when it matches a token.\nfunction readToken(data, input, stack, group) {\n    let state = 0, groupMask = 1 << group, { parser } = stack.p, { dialect } = parser;\n    scan: for (;;) {\n        if ((groupMask & data[state]) == 0)\n            break;\n        let accEnd = data[state + 1];\n        // Check whether this state can lead to a token in the current group\n        // Accept tokens in this state, possibly overwriting\n        // lower-precedence / shorter tokens\n        for (let i = state + 3; i < accEnd; i += 2)\n            if ((data[i + 1] & groupMask) > 0) {\n                let term = data[i];\n                if (dialect.allows(term) &&\n                    (input.token.value == -1 || input.token.value == term || parser.overrides(term, input.token.value))) {\n                    input.acceptToken(term);\n                    break;\n                }\n            }\n        // Do a binary search on the state's edges\n        for (let next = input.next, low = 0, high = data[state + 2]; low < high;) {\n            let mid = (low + high) >> 1;\n            let index = accEnd + mid + (mid << 1);\n            let from = data[index], to = data[index + 1];\n            if (next < from)\n                high = mid;\n            else if (next >= to)\n                low = mid + 1;\n            else {\n                state = data[index + 2];\n                input.advance();\n                continue scan;\n            }\n        }\n        break;\n    }\n}\n\n// See lezer-generator/src/encode.ts for comments about the encoding\n// used here\nfunction decodeArray(input, Type = Uint16Array) {\n    if (typeof input != \"string\")\n        return input;\n    let array = null;\n    for (let pos = 0, out = 0; pos < input.length;) {\n        let value = 0;\n        for (;;) {\n            let next = input.charCodeAt(pos++), stop = false;\n            if (next == 126 /* BigValCode */) {\n                value = 65535 /* BigVal */;\n                break;\n            }\n            if (next >= 92 /* Gap2 */)\n                next--;\n            if (next >= 34 /* Gap1 */)\n                next--;\n            let digit = next - 32 /* Start */;\n            if (digit >= 46 /* Base */) {\n                digit -= 46 /* Base */;\n                stop = true;\n            }\n            value += digit;\n            if (stop)\n                break;\n            value *= 46 /* Base */;\n        }\n        if (array)\n            array[out++] = value;\n        else\n            array = new Type(value);\n    }\n    return array;\n}\n\n// FIXME find some way to reduce recovery work done when the input\n// doesn't match the grammar at all.\n// Environment variable used to control console output\nconst verbose = typeof process != \"undefined\" && /\\bparse\\b/.test(process.env.LOG);\nlet stackIDs = null;\nvar Safety;\n(function (Safety) {\n    Safety[Safety[\"Margin\"] = 25] = \"Margin\";\n})(Safety || (Safety = {}));\nfunction cutAt(tree, pos, side) {\n    let cursor = tree.fullCursor();\n    cursor.moveTo(pos);\n    for (;;) {\n        if (!(side < 0 ? cursor.childBefore(pos) : cursor.childAfter(pos)))\n            for (;;) {\n                if ((side < 0 ? cursor.to < pos : cursor.from > pos) && !cursor.type.isError)\n                    return side < 0 ? Math.max(0, Math.min(cursor.to - 1, pos - 25 /* Margin */))\n                        : Math.min(tree.length, Math.max(cursor.from + 1, pos + 25 /* Margin */));\n                if (side < 0 ? cursor.prevSibling() : cursor.nextSibling())\n                    break;\n                if (!cursor.parent())\n                    return side < 0 ? 0 : tree.length;\n            }\n    }\n}\nclass FragmentCursor {\n    constructor(fragments, nodeSet) {\n        this.fragments = fragments;\n        this.nodeSet = nodeSet;\n        this.i = 0;\n        this.fragment = null;\n        this.safeFrom = -1;\n        this.safeTo = -1;\n        this.trees = [];\n        this.start = [];\n        this.index = [];\n        this.nextFragment();\n    }\n    nextFragment() {\n        let fr = this.fragment = this.i == this.fragments.length ? null : this.fragments[this.i++];\n        if (fr) {\n            this.safeFrom = fr.openStart ? cutAt(fr.tree, fr.from + fr.offset, 1) - fr.offset : fr.from;\n            this.safeTo = fr.openEnd ? cutAt(fr.tree, fr.to + fr.offset, -1) - fr.offset : fr.to;\n            while (this.trees.length) {\n                this.trees.pop();\n                this.start.pop();\n                this.index.pop();\n            }\n            this.trees.push(fr.tree);\n            this.start.push(-fr.offset);\n            this.index.push(0);\n            this.nextStart = this.safeFrom;\n        }\n        else {\n            this.nextStart = 1e9;\n        }\n    }\n    // `pos` must be >= any previously given `pos` for this cursor\n    nodeAt(pos) {\n        if (pos < this.nextStart)\n            return null;\n        while (this.fragment && this.safeTo <= pos)\n            this.nextFragment();\n        if (!this.fragment)\n            return null;\n        for (;;) {\n            let last = this.trees.length - 1;\n            if (last < 0) { // End of tree\n                this.nextFragment();\n                return null;\n            }\n            let top = this.trees[last], index = this.index[last];\n            if (index == top.children.length) {\n                this.trees.pop();\n                this.start.pop();\n                this.index.pop();\n                continue;\n            }\n            let next = top.children[index];\n            let start = this.start[last] + top.positions[index];\n            if (start > pos) {\n                this.nextStart = start;\n                return null;\n            }\n            if (next instanceof Tree) {\n                if (start == pos) {\n                    if (start < this.safeFrom)\n                        return null;\n                    let end = start + next.length;\n                    if (end <= this.safeTo) {\n                        let lookAhead = next.prop(NodeProp.lookAhead);\n                        if (!lookAhead || end + lookAhead < this.fragment.to)\n                            return next;\n                    }\n                }\n                this.index[last]++;\n                if (start + next.length >= Math.max(this.safeFrom, pos)) { // Enter this node\n                    this.trees.push(next);\n                    this.start.push(start);\n                    this.index.push(0);\n                }\n            }\n            else {\n                this.index[last]++;\n                this.nextStart = start + next.length;\n            }\n        }\n    }\n}\nclass TokenCache {\n    constructor(parser, stream) {\n        this.stream = stream;\n        this.tokens = [];\n        this.mainToken = null;\n        this.actions = [];\n        this.tokens = parser.tokenizers.map(_ => new CachedToken);\n    }\n    getActions(stack) {\n        let actionIndex = 0;\n        let main = null;\n        let { parser } = stack.p, { tokenizers } = parser;\n        let mask = parser.stateSlot(stack.state, 3 /* TokenizerMask */);\n        let context = stack.curContext ? stack.curContext.hash : 0;\n        let lookAhead = 0;\n        for (let i = 0; i < tokenizers.length; i++) {\n            if (((1 << i) & mask) == 0)\n                continue;\n            let tokenizer = tokenizers[i], token = this.tokens[i];\n            if (main && !tokenizer.fallback)\n                continue;\n            if (tokenizer.contextual || token.start != stack.pos || token.mask != mask || token.context != context) {\n                this.updateCachedToken(token, tokenizer, stack);\n                token.mask = mask;\n                token.context = context;\n            }\n            if (token.lookAhead > token.end + 25 /* Margin */)\n                lookAhead = Math.max(token.lookAhead, lookAhead);\n            if (token.value != 0 /* Err */) {\n                let startIndex = actionIndex;\n                if (token.extended > -1)\n                    actionIndex = this.addActions(stack, token.extended, token.end, actionIndex);\n                actionIndex = this.addActions(stack, token.value, token.end, actionIndex);\n                if (!tokenizer.extend) {\n                    main = token;\n                    if (actionIndex > startIndex)\n                        break;\n                }\n            }\n        }\n        while (this.actions.length > actionIndex)\n            this.actions.pop();\n        if (lookAhead)\n            stack.setLookAhead(lookAhead);\n        if (!main && stack.pos == this.stream.end) {\n            main = new CachedToken;\n            main.value = stack.p.parser.eofTerm;\n            main.start = main.end = stack.pos;\n            actionIndex = this.addActions(stack, main.value, main.end, actionIndex);\n        }\n        this.mainToken = main;\n        return this.actions;\n    }\n    getMainToken(stack) {\n        if (this.mainToken)\n            return this.mainToken;\n        let main = new CachedToken, { pos, p } = stack;\n        main.start = pos;\n        main.end = Math.min(pos + 1, p.stream.end);\n        main.value = pos == p.stream.end ? p.parser.eofTerm : 0 /* Err */;\n        return main;\n    }\n    updateCachedToken(token, tokenizer, stack) {\n        tokenizer.token(this.stream.reset(stack.pos, token), stack);\n        if (token.value > -1) {\n            let { parser } = stack.p;\n            for (let i = 0; i < parser.specialized.length; i++)\n                if (parser.specialized[i] == token.value) {\n                    let result = parser.specializers[i](this.stream.read(token.start, token.end), stack);\n                    if (result >= 0 && stack.p.parser.dialect.allows(result >> 1)) {\n                        if ((result & 1) == 0 /* Specialize */)\n                            token.value = result >> 1;\n                        else\n                            token.extended = result >> 1;\n                        break;\n                    }\n                }\n        }\n        else {\n            token.value = 0 /* Err */;\n            token.end = Math.min(stack.p.stream.end, stack.pos + 1);\n        }\n    }\n    putAction(action, token, end, index) {\n        // Don't add duplicate actions\n        for (let i = 0; i < index; i += 3)\n            if (this.actions[i] == action)\n                return index;\n        this.actions[index++] = action;\n        this.actions[index++] = token;\n        this.actions[index++] = end;\n        return index;\n    }\n    addActions(stack, token, end, index) {\n        let { state } = stack, { parser } = stack.p, { data } = parser;\n        for (let set = 0; set < 2; set++) {\n            for (let i = parser.stateSlot(state, set ? 2 /* Skip */ : 1 /* Actions */);; i += 3) {\n                if (data[i] == 65535 /* End */) {\n                    if (data[i + 1] == 1 /* Next */) {\n                        i = pair(data, i + 2);\n                    }\n                    else {\n                        if (index == 0 && data[i + 1] == 2 /* Other */)\n                            index = this.putAction(pair(data, i + 2), token, end, index);\n                        break;\n                    }\n                }\n                if (data[i] == token)\n                    index = this.putAction(pair(data, i + 1), token, end, index);\n            }\n        }\n        return index;\n    }\n}\nvar Rec;\n(function (Rec) {\n    Rec[Rec[\"Distance\"] = 5] = \"Distance\";\n    Rec[Rec[\"MaxRemainingPerStep\"] = 3] = \"MaxRemainingPerStep\";\n    // When two stacks have been running independently long enough to\n    // add this many elements to their buffers, prune one.\n    Rec[Rec[\"MinBufferLengthPrune\"] = 500] = \"MinBufferLengthPrune\";\n    Rec[Rec[\"ForceReduceLimit\"] = 10] = \"ForceReduceLimit\";\n    // Once a stack reaches this depth (in .stack.length) force-reduce\n    // it back to CutTo to avoid creating trees that overflow the stack\n    // on recursive traversal.\n    Rec[Rec[\"CutDepth\"] = 15000] = \"CutDepth\";\n    Rec[Rec[\"CutTo\"] = 9000] = \"CutTo\";\n})(Rec || (Rec = {}));\nclass Parse {\n    constructor(parser, input, fragments, ranges) {\n        this.parser = parser;\n        this.input = input;\n        this.ranges = ranges;\n        this.recovering = 0;\n        this.nextStackID = 0x2654; // ♔, ♕, ♖, ♗, ♘, ♙, ♠, ♡, ♢, ♣, ♤, ♥, ♦, ♧\n        this.minStackPos = 0;\n        this.reused = [];\n        this.stoppedAt = null;\n        this.stream = new InputStream(input, ranges);\n        this.tokens = new TokenCache(parser, this.stream);\n        this.topTerm = parser.top[1];\n        let { from } = ranges[0];\n        this.stacks = [Stack.start(this, parser.top[0], from)];\n        this.fragments = fragments.length && this.stream.end - from > parser.bufferLength * 4\n            ? new FragmentCursor(fragments, parser.nodeSet) : null;\n    }\n    get parsedPos() {\n        return this.minStackPos;\n    }\n    // Move the parser forward. This will process all parse stacks at\n    // `this.pos` and try to advance them to a further position. If no\n    // stack for such a position is found, it'll start error-recovery.\n    //\n    // When the parse is finished, this will return a syntax tree. When\n    // not, it returns `null`.\n    advance() {\n        let stacks = this.stacks, pos = this.minStackPos;\n        // This will hold stacks beyond `pos`.\n        let newStacks = this.stacks = [];\n        let stopped, stoppedTokens;\n        // Keep advancing any stacks at `pos` until they either move\n        // forward or can't be advanced. Gather stacks that can't be\n        // advanced further in `stopped`.\n        for (let i = 0; i < stacks.length; i++) {\n            let stack = stacks[i];\n            for (;;) {\n                this.tokens.mainToken = null;\n                if (stack.pos > pos) {\n                    newStacks.push(stack);\n                }\n                else if (this.advanceStack(stack, newStacks, stacks)) {\n                    continue;\n                }\n                else {\n                    if (!stopped) {\n                        stopped = [];\n                        stoppedTokens = [];\n                    }\n                    stopped.push(stack);\n                    let tok = this.tokens.getMainToken(stack);\n                    stoppedTokens.push(tok.value, tok.end);\n                }\n                break;\n            }\n        }\n        if (!newStacks.length) {\n            let finished = stopped && findFinished(stopped);\n            if (finished)\n                return this.stackToTree(finished);\n            if (this.parser.strict) {\n                if (verbose && stopped)\n                    console.log(\"Stuck with token \" + (this.tokens.mainToken ? this.parser.getName(this.tokens.mainToken.value) : \"none\"));\n                throw new SyntaxError(\"No parse at \" + pos);\n            }\n            if (!this.recovering)\n                this.recovering = 5 /* Distance */;\n        }\n        if (this.recovering && stopped) {\n            let finished = this.stoppedAt != null && stopped[0].pos > this.stoppedAt ? stopped[0]\n                : this.runRecovery(stopped, stoppedTokens, newStacks);\n            if (finished)\n                return this.stackToTree(finished.forceAll());\n        }\n        if (this.recovering) {\n            let maxRemaining = this.recovering == 1 ? 1 : this.recovering * 3 /* MaxRemainingPerStep */;\n            if (newStacks.length > maxRemaining) {\n                newStacks.sort((a, b) => b.score - a.score);\n                while (newStacks.length > maxRemaining)\n                    newStacks.pop();\n            }\n            if (newStacks.some(s => s.reducePos > pos))\n                this.recovering--;\n        }\n        else if (newStacks.length > 1) {\n            // Prune stacks that are in the same state, or that have been\n            // running without splitting for a while, to avoid getting stuck\n            // with multiple successful stacks running endlessly on.\n            outer: for (let i = 0; i < newStacks.length - 1; i++) {\n                let stack = newStacks[i];\n                for (let j = i + 1; j < newStacks.length; j++) {\n                    let other = newStacks[j];\n                    if (stack.sameState(other) ||\n                        stack.buffer.length > 500 /* MinBufferLengthPrune */ && other.buffer.length > 500 /* MinBufferLengthPrune */) {\n                        if (((stack.score - other.score) || (stack.buffer.length - other.buffer.length)) > 0) {\n                            newStacks.splice(j--, 1);\n                        }\n                        else {\n                            newStacks.splice(i--, 1);\n                            continue outer;\n                        }\n                    }\n                }\n            }\n        }\n        this.minStackPos = newStacks[0].pos;\n        for (let i = 1; i < newStacks.length; i++)\n            if (newStacks[i].pos < this.minStackPos)\n                this.minStackPos = newStacks[i].pos;\n        return null;\n    }\n    stopAt(pos) {\n        if (this.stoppedAt != null && this.stoppedAt < pos)\n            throw new RangeError(\"Can't move stoppedAt forward\");\n        this.stoppedAt = pos;\n    }\n    // Returns an updated version of the given stack, or null if the\n    // stack can't advance normally. When `split` and `stacks` are\n    // given, stacks split off by ambiguous operations will be pushed to\n    // `split`, or added to `stacks` if they move `pos` forward.\n    advanceStack(stack, stacks, split) {\n        let start = stack.pos, { parser } = this;\n        let base = verbose ? this.stackID(stack) + \" -> \" : \"\";\n        if (this.stoppedAt != null && start > this.stoppedAt)\n            return stack.forceReduce() ? stack : null;\n        if (this.fragments) {\n            let strictCx = stack.curContext && stack.curContext.tracker.strict, cxHash = strictCx ? stack.curContext.hash : 0;\n            for (let cached = this.fragments.nodeAt(start); cached;) {\n                let match = this.parser.nodeSet.types[cached.type.id] == cached.type ? parser.getGoto(stack.state, cached.type.id) : -1;\n                if (match > -1 && cached.length && (!strictCx || (cached.prop(NodeProp.contextHash) || 0) == cxHash)) {\n                    stack.useNode(cached, match);\n                    if (verbose)\n                        console.log(base + this.stackID(stack) + ` (via reuse of ${parser.getName(cached.type.id)})`);\n                    return true;\n                }\n                if (!(cached instanceof Tree) || cached.children.length == 0 || cached.positions[0] > 0)\n                    break;\n                let inner = cached.children[0];\n                if (inner instanceof Tree && cached.positions[0] == 0)\n                    cached = inner;\n                else\n                    break;\n            }\n        }\n        let defaultReduce = parser.stateSlot(stack.state, 4 /* DefaultReduce */);\n        if (defaultReduce > 0) {\n            stack.reduce(defaultReduce);\n            if (verbose)\n                console.log(base + this.stackID(stack) + ` (via always-reduce ${parser.getName(defaultReduce & 65535 /* ValueMask */)})`);\n            return true;\n        }\n        if (stack.stack.length >= 15000 /* CutDepth */) {\n            while (stack.stack.length > 9000 /* CutTo */ && stack.forceReduce()) { }\n        }\n        let actions = this.tokens.getActions(stack);\n        for (let i = 0; i < actions.length;) {\n            let action = actions[i++], term = actions[i++], end = actions[i++];\n            let last = i == actions.length || !split;\n            let localStack = last ? stack : stack.split();\n            localStack.apply(action, term, end);\n            if (verbose)\n                console.log(base + this.stackID(localStack) + ` (via ${(action & 65536 /* ReduceFlag */) == 0 ? \"shift\"\n                    : `reduce of ${parser.getName(action & 65535 /* ValueMask */)}`} for ${parser.getName(term)} @ ${start}${localStack == stack ? \"\" : \", split\"})`);\n            if (last)\n                return true;\n            else if (localStack.pos > start)\n                stacks.push(localStack);\n            else\n                split.push(localStack);\n        }\n        return false;\n    }\n    // Advance a given stack forward as far as it will go. Returns the\n    // (possibly updated) stack if it got stuck, or null if it moved\n    // forward and was given to `pushStackDedup`.\n    advanceFully(stack, newStacks) {\n        let pos = stack.pos;\n        for (;;) {\n            if (!this.advanceStack(stack, null, null))\n                return false;\n            if (stack.pos > pos) {\n                pushStackDedup(stack, newStacks);\n                return true;\n            }\n        }\n    }\n    runRecovery(stacks, tokens, newStacks) {\n        let finished = null, restarted = false;\n        for (let i = 0; i < stacks.length; i++) {\n            let stack = stacks[i], token = tokens[i << 1], tokenEnd = tokens[(i << 1) + 1];\n            let base = verbose ? this.stackID(stack) + \" -> \" : \"\";\n            if (stack.deadEnd) {\n                if (restarted)\n                    continue;\n                restarted = true;\n                stack.restart();\n                if (verbose)\n                    console.log(base + this.stackID(stack) + \" (restarted)\");\n                let done = this.advanceFully(stack, newStacks);\n                if (done)\n                    continue;\n            }\n            let force = stack.split(), forceBase = base;\n            for (let j = 0; force.forceReduce() && j < 10 /* ForceReduceLimit */; j++) {\n                if (verbose)\n                    console.log(forceBase + this.stackID(force) + \" (via force-reduce)\");\n                let done = this.advanceFully(force, newStacks);\n                if (done)\n                    break;\n                if (verbose)\n                    forceBase = this.stackID(force) + \" -> \";\n            }\n            for (let insert of stack.recoverByInsert(token)) {\n                if (verbose)\n                    console.log(base + this.stackID(insert) + \" (via recover-insert)\");\n                this.advanceFully(insert, newStacks);\n            }\n            if (this.stream.end > stack.pos) {\n                if (tokenEnd == stack.pos) {\n                    tokenEnd++;\n                    token = 0 /* Err */;\n                }\n                stack.recoverByDelete(token, tokenEnd);\n                if (verbose)\n                    console.log(base + this.stackID(stack) + ` (via recover-delete ${this.parser.getName(token)})`);\n                pushStackDedup(stack, newStacks);\n            }\n            else if (!finished || finished.score < stack.score) {\n                finished = stack;\n            }\n        }\n        return finished;\n    }\n    // Convert the stack's buffer to a syntax tree.\n    stackToTree(stack) {\n        stack.close();\n        return Tree.build({ buffer: StackBufferCursor.create(stack),\n            nodeSet: this.parser.nodeSet,\n            topID: this.topTerm,\n            maxBufferLength: this.parser.bufferLength,\n            reused: this.reused,\n            start: this.ranges[0].from,\n            length: stack.pos - this.ranges[0].from,\n            minRepeatType: this.parser.minRepeatTerm });\n    }\n    stackID(stack) {\n        let id = (stackIDs || (stackIDs = new WeakMap)).get(stack);\n        if (!id)\n            stackIDs.set(stack, id = String.fromCodePoint(this.nextStackID++));\n        return id + stack;\n    }\n}\nfunction pushStackDedup(stack, newStacks) {\n    for (let i = 0; i < newStacks.length; i++) {\n        let other = newStacks[i];\n        if (other.pos == stack.pos && other.sameState(stack)) {\n            if (newStacks[i].score < stack.score)\n                newStacks[i] = stack;\n            return;\n        }\n    }\n    newStacks.push(stack);\n}\nclass Dialect {\n    constructor(source, flags, disabled) {\n        this.source = source;\n        this.flags = flags;\n        this.disabled = disabled;\n    }\n    allows(term) { return !this.disabled || this.disabled[term] == 0; }\n}\nconst id = x => x;\n/// Context trackers are used to track stateful context (such as\n/// indentation in the Python grammar, or parent elements in the XML\n/// grammar) needed by external tokenizers. You declare them in a\n/// grammar file as `@context exportName from \"module\"`.\n///\n/// Context values should be immutable, and can be updated (replaced)\n/// on shift or reduce actions.\n///\n/// The export used in a `@context` declaration should be of this\n/// type.\nclass ContextTracker {\n    /// Define a context tracker.\n    constructor(spec) {\n        this.start = spec.start;\n        this.shift = spec.shift || id;\n        this.reduce = spec.reduce || id;\n        this.reuse = spec.reuse || id;\n        this.hash = spec.hash || (() => 0);\n        this.strict = spec.strict !== false;\n    }\n}\n/// A parser holds the parse tables for a given grammar, as generated\n/// by `lezer-generator`.\nclass LRParser extends Parser {\n    /// @internal\n    constructor(spec) {\n        super();\n        /// @internal\n        this.wrappers = [];\n        if (spec.version != 13 /* Version */)\n            throw new RangeError(`Parser version (${spec.version}) doesn't match runtime version (${13 /* Version */})`);\n        let nodeNames = spec.nodeNames.split(\" \");\n        this.minRepeatTerm = nodeNames.length;\n        for (let i = 0; i < spec.repeatNodeCount; i++)\n            nodeNames.push(\"\");\n        let topTerms = Object.keys(spec.topRules).map(r => spec.topRules[r][1]);\n        let nodeProps = [];\n        for (let i = 0; i < nodeNames.length; i++)\n            nodeProps.push([]);\n        function setProp(nodeID, prop, value) {\n            nodeProps[nodeID].push([prop, prop.deserialize(String(value))]);\n        }\n        if (spec.nodeProps)\n            for (let propSpec of spec.nodeProps) {\n                let prop = propSpec[0];\n                for (let i = 1; i < propSpec.length;) {\n                    let next = propSpec[i++];\n                    if (next >= 0) {\n                        setProp(next, prop, propSpec[i++]);\n                    }\n                    else {\n                        let value = propSpec[i + -next];\n                        for (let j = -next; j > 0; j--)\n                            setProp(propSpec[i++], prop, value);\n                        i++;\n                    }\n                }\n            }\n        this.nodeSet = new NodeSet(nodeNames.map((name, i) => NodeType.define({\n            name: i >= this.minRepeatTerm ? undefined : name,\n            id: i,\n            props: nodeProps[i],\n            top: topTerms.indexOf(i) > -1,\n            error: i == 0,\n            skipped: spec.skippedNodes && spec.skippedNodes.indexOf(i) > -1\n        })));\n        this.strict = false;\n        this.bufferLength = DefaultBufferLength;\n        let tokenArray = decodeArray(spec.tokenData);\n        this.context = spec.context;\n        this.specialized = new Uint16Array(spec.specialized ? spec.specialized.length : 0);\n        this.specializers = [];\n        if (spec.specialized)\n            for (let i = 0; i < spec.specialized.length; i++) {\n                this.specialized[i] = spec.specialized[i].term;\n                this.specializers[i] = spec.specialized[i].get;\n            }\n        this.states = decodeArray(spec.states, Uint32Array);\n        this.data = decodeArray(spec.stateData);\n        this.goto = decodeArray(spec.goto);\n        this.maxTerm = spec.maxTerm;\n        this.tokenizers = spec.tokenizers.map(value => typeof value == \"number\" ? new TokenGroup(tokenArray, value) : value);\n        this.topRules = spec.topRules;\n        this.dialects = spec.dialects || {};\n        this.dynamicPrecedences = spec.dynamicPrecedences || null;\n        this.tokenPrecTable = spec.tokenPrec;\n        this.termNames = spec.termNames || null;\n        this.maxNode = this.nodeSet.types.length - 1;\n        this.dialect = this.parseDialect();\n        this.top = this.topRules[Object.keys(this.topRules)[0]];\n    }\n    createParse(input, fragments, ranges) {\n        let parse = new Parse(this, input, fragments, ranges);\n        for (let w of this.wrappers)\n            parse = w(parse, input, fragments, ranges);\n        return parse;\n    }\n    /// Get a goto table entry @internal\n    getGoto(state, term, loose = false) {\n        let table = this.goto;\n        if (term >= table[0])\n            return -1;\n        for (let pos = table[term + 1];;) {\n            let groupTag = table[pos++], last = groupTag & 1;\n            let target = table[pos++];\n            if (last && loose)\n                return target;\n            for (let end = pos + (groupTag >> 1); pos < end; pos++)\n                if (table[pos] == state)\n                    return target;\n            if (last)\n                return -1;\n        }\n    }\n    /// Check if this state has an action for a given terminal @internal\n    hasAction(state, terminal) {\n        let data = this.data;\n        for (let set = 0; set < 2; set++) {\n            for (let i = this.stateSlot(state, set ? 2 /* Skip */ : 1 /* Actions */), next;; i += 3) {\n                if ((next = data[i]) == 65535 /* End */) {\n                    if (data[i + 1] == 1 /* Next */)\n                        next = data[i = pair(data, i + 2)];\n                    else if (data[i + 1] == 2 /* Other */)\n                        return pair(data, i + 2);\n                    else\n                        break;\n                }\n                if (next == terminal || next == 0 /* Err */)\n                    return pair(data, i + 1);\n            }\n        }\n        return 0;\n    }\n    /// @internal\n    stateSlot(state, slot) {\n        return this.states[(state * 6 /* Size */) + slot];\n    }\n    /// @internal\n    stateFlag(state, flag) {\n        return (this.stateSlot(state, 0 /* Flags */) & flag) > 0;\n    }\n    /// @internal\n    validAction(state, action) {\n        if (action == this.stateSlot(state, 4 /* DefaultReduce */))\n            return true;\n        for (let i = this.stateSlot(state, 1 /* Actions */);; i += 3) {\n            if (this.data[i] == 65535 /* End */) {\n                if (this.data[i + 1] == 1 /* Next */)\n                    i = pair(this.data, i + 2);\n                else\n                    return false;\n            }\n            if (action == pair(this.data, i + 1))\n                return true;\n        }\n    }\n    /// Get the states that can follow this one through shift actions or\n    /// goto jumps. @internal\n    nextStates(state) {\n        let result = [];\n        for (let i = this.stateSlot(state, 1 /* Actions */);; i += 3) {\n            if (this.data[i] == 65535 /* End */) {\n                if (this.data[i + 1] == 1 /* Next */)\n                    i = pair(this.data, i + 2);\n                else\n                    break;\n            }\n            if ((this.data[i + 2] & (65536 /* ReduceFlag */ >> 16)) == 0) {\n                let value = this.data[i + 1];\n                if (!result.some((v, i) => (i & 1) && v == value))\n                    result.push(this.data[i], value);\n            }\n        }\n        return result;\n    }\n    /// @internal\n    overrides(token, prev) {\n        let iPrev = findOffset(this.data, this.tokenPrecTable, prev);\n        return iPrev < 0 || findOffset(this.data, this.tokenPrecTable, token) < iPrev;\n    }\n    /// Configure the parser. Returns a new parser instance that has the\n    /// given settings modified. Settings not provided in `config` are\n    /// kept from the original parser.\n    configure(config) {\n        // Hideous reflection-based kludge to make it easy to create a\n        // slightly modified copy of a parser.\n        let copy = Object.assign(Object.create(LRParser.prototype), this);\n        if (config.props)\n            copy.nodeSet = this.nodeSet.extend(...config.props);\n        if (config.top) {\n            let info = this.topRules[config.top];\n            if (!info)\n                throw new RangeError(`Invalid top rule name ${config.top}`);\n            copy.top = info;\n        }\n        if (config.tokenizers)\n            copy.tokenizers = this.tokenizers.map(t => {\n                let found = config.tokenizers.find(r => r.from == t);\n                return found ? found.to : t;\n            });\n        if (config.contextTracker)\n            copy.context = config.contextTracker;\n        if (config.dialect)\n            copy.dialect = this.parseDialect(config.dialect);\n        if (config.strict != null)\n            copy.strict = config.strict;\n        if (config.wrap)\n            copy.wrappers = copy.wrappers.concat(config.wrap);\n        if (config.bufferLength != null)\n            copy.bufferLength = config.bufferLength;\n        return copy;\n    }\n    /// Returns the name associated with a given term. This will only\n    /// work for all terms when the parser was generated with the\n    /// `--names` option. By default, only the names of tagged terms are\n    /// stored.\n    getName(term) {\n        return this.termNames ? this.termNames[term] : String(term <= this.maxNode && this.nodeSet.types[term].name || term);\n    }\n    /// The eof term id is always allocated directly after the node\n    /// types. @internal\n    get eofTerm() { return this.maxNode + 1; }\n    /// The type of top node produced by the parser.\n    get topNode() { return this.nodeSet.types[this.top[1]]; }\n    /// @internal\n    dynamicPrecedence(term) {\n        let prec = this.dynamicPrecedences;\n        return prec == null ? 0 : prec[term] || 0;\n    }\n    /// @internal\n    parseDialect(dialect) {\n        let values = Object.keys(this.dialects), flags = values.map(() => false);\n        if (dialect)\n            for (let part of dialect.split(\" \")) {\n                let id = values.indexOf(part);\n                if (id >= 0)\n                    flags[id] = true;\n            }\n        let disabled = null;\n        for (let i = 0; i < values.length; i++)\n            if (!flags[i]) {\n                for (let j = this.dialects[values[i]], id; (id = this.data[j++]) != 65535 /* End */;)\n                    (disabled || (disabled = new Uint8Array(this.maxTerm + 1)))[id] = 1;\n            }\n        return new Dialect(dialect, flags, disabled);\n    }\n    /// (used by the output of the parser generator) @internal\n    static deserialize(spec) {\n        return new LRParser(spec);\n    }\n}\nfunction pair(data, off) { return data[off] | (data[off + 1] << 16); }\nfunction findOffset(data, start, term) {\n    for (let i = start, next; (next = data[i]) != 65535 /* End */; i++)\n        if (next == term)\n            return i - start;\n    return -1;\n}\nfunction findFinished(stacks) {\n    let best = null;\n    for (let stack of stacks) {\n        let stopped = stack.p.stoppedAt;\n        if ((stack.pos == stack.p.stream.end || stopped != null && stack.pos > stopped) &&\n            stack.p.parser.stateFlag(stack.state, 2 /* Accepting */) &&\n            (!best || best.score < stack.score))\n            best = stack;\n    }\n    return best;\n}\n\nexport { ContextTracker, ExternalTokenizer, InputStream, LRParser, Stack };\n"],"names":["addLabelToQuery","query","key","value","operator","Error","vectorSelectorPositions","getVectorSelectorPositions","length","filter","toLabelFilter","addFilter","tree","parser","positions","iterate","enter","type","from","to","get","name","visQuery","buildVisualQueryFromString","substring","push","label","op","Infinity","toString","modeller","PromQueryModeller","newQuery","prev","i","match","isLast","start","end","labelExists","labels","renderQuery","find","PrometheusMetricFindQuery","constructor","datasource","this","range","getTimeSrv","timeRange","process","labelNamesQuery","labelValuesQuery","metricNamesQuery","metricNameQuery","queryResultQuery","lastValueFrom","metricNameAndLabelsQuery","getPrometheusTime","params","metadataRequest","then","result","_map","data","text","metric","url","_labels","uniq","map","expandable","metricFilterPattern","chain","metricName","RegExp","test","matchedMetricName","instantQuery","expr","performInstantQuery","pipe","metricData","__name__","v","k","join","self","getOriginalMetricName","transformV2","response","request","options","tableFrames","framesWithoutTable","partition","df","dataFrame","app","CoreApp","meta","custom","resultType","target","targets","refId","format","isTableResult","processedTableFrames","dfs","dataFramesByRefId","groupBy","refIds","Object","keys","valueText","responseLength","getValueText","valueField","getValueField","valueName","timeField","getTimeField","labelFields","forEach","promLabels","fields","sort","some","l","numberField","config","filterable","FieldType","values","ArrayVector","toArray","add","parseSampleValue","labelsForField","field","getLabelValue","preferredVisualisationType","transformDFToTable","exemplarFrames","framesWithoutTableAndExemplars","exemplarTraceIdDestinations","destinations","processedExemplarFrames","exemplarTraceIdDestination","traceIDField","links","getDataLinks","dataTopic","DataTopic","heatmapResults","framesWithoutTableHeatmapsAndExemplars","isHeatmapResult","processedHeatmapFrames","mergeHeatmapFrames","transformToHistogramOverTime","sortSeriesByLabel","otherFrames","transform","transformOptions","step","legendFormat","responseListLength","scopedVars","valueWithRefId","instant","prometheusResult","isExemplarData","events","exemplarData","exemplars","exemplar","TIME_SERIES_TIME_FIELD_NAME","timestamp","TIME_SERIES_VALUE_FIELD_NAME","seriesLabels","sampledExemplars","bucketedExemplars","alignedTs","String","Math","floor","standardDeviation","deviation","sampledBuckets","ts","exemplarsInBucket","sampledBucketValues","ex","descending","reduce","acc","curr","sampleExemplars","ArrayDataFrame","tableData","md","metricFields","series","d","isMatrixData","val","metricField","transformMetricDataToTable","renderLegendFormat","getTemplateSrv","replace","labelsWithoutName","labelPart","formatLabels","title","createLabelInfo","stepMs","NaN","baseTimestamp","dps","dpValue","isNaN","t","endTimestamp","parseValue","displayNameFromDS","transformToDataFrame","dataLinks","datasourceUid","dsSettings","getDataSourceSrv","getInstanceSettings","urlDisplayLabel","internal","queryType","datasourceName","targetBlank","hasOwnProperty","isMs","display","getDisplayProcessor","frames","countFields","frame","DataFrameType","seriesList","topSeries","s","bottomSeries","j","bottomPoint","s1","s2","le1","le2","err","console","error","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","parseFloat","PrometheusVariableSupport","StandardVariableSupport","templateSrv","timeSrv","super","bind","of","__interval","interval","__interval_ms","rangeUtil","getRangeScopedVars","interpolated","interpolateQueryExpr","metricFindQuery","results","toDataQuery","ANNOTATION_QUERY_STEP_DEFAULT","GET_AND_POST_METADATA_ENDPOINTS","PrometheusDatasource","DataSourceWithBackend","instanceSettings","languageProvider","LRU","max","async","loadRules","exemplarsAvailable","areExemplarsAvailable","queries","activeTargets","clonedTargets","cloneDeep","hide","requestId","panelId","histogramMetrics","m","includes","instantTarget","maxDataPoints","rangeTarget","activeTarget","exemplarTarget","createQuery","message","statusText","safeStringifyValue","status","toDataQueryResponse","annotation","tagKeys","titleFormat","textFormat","tagKeysArray","split","eventList","tags","timeValueTuple","idx","timeStampValue","valueValue","time","useValueForTime","activeValuesTimestamps","latestEvent","timeEnd","subType","PromApplication","rulerEnabled","editorSrc","id","access","basicAuth","withCredentials","jsonData","timeInterval","queryTimeout","httpMethod","directUrl","ruleMappings","PrometheusLanguageProvider","lookupsDisabled","disableMetricsLookup","customQueryParameters","URLSearchParams","variables","getQueryDisplayText","_addTracingHeaders","httpOptions","headers","dashboardId","_request","overrides","defaults","method","search","entries","encodeURIComponent","Authorization","getBackendSrv","fetch","abstractQueries","abstractQuery","importFromAbstractQuery","exportToAbstractQuery","endpoint","hideFromInspector","warn","variable","multi","includeAll","prometheusRegularEscape","prometheusSpecialRegexEscape","escapedValues","targetContainsTemplate","containsTemplate","shouldRunExemplarQuery","currentTargetIdx","findIndex","slice","processTargetV2","PromQueryType","utcOffsetSec","utcOffset","prepareTargets","exploreQuery","panelsQuery","state","LoadingState","runningQueriesCount","subQueries","index","filterAndMapResponse","tap","cancelled","runQuery","merge","observables","forkJoin","current","getExemplars","catchError","performTimeSeriesQuery","hinting","ceil","minInterval","scrapeInterval","intervalFactor","adjustedInterval","adjustInterval","getRateIntervalScopedVariable","assign","enhanceExprWithAdHocFilters","adjusted","alignedEnd","alignedStart","alignRange","rateInterval","__rate_interval","safeInterval","throwError","handleErrors","Promise","resolve","msRange","diff","sRange","round","__range_ms","__range_s","__range","queryModel","getRef","applyTemplateVariables","rsp","processAnnotationResponse","buildInfo","getBuildInfo","getBuildInfoMessage","all","fetchSeriesLabels","Set","fetchDataSourceBuildInfo","enabled","Badge","color","icon","disabled","unsupported","Tooltip","placement","content","LOGOS","COLORS","applicationSubType","style","width","height","verticalAlign","src","application","gridTemplateColumns","rowGap","columnGap","marginTop","features","rulerApiEnabled","now","Date","getTime","intervalMs","dateTime","res","details","verboseMessage","catch","interpolateVariablesInQueries","expandedQueries","getQueryHints","hints","trim","fix","action","indexOf","nameMatch","counterNameMetric","metricsMetadata","metricMetadataKeys","certain","toLowerCase","metricRegex","fixableQuery","mapping","mappingForQuery","ruleName","size","preventSubmit","getInitHints","metrics","groups","group","rules","rule","extractRuleMappingFromGroups","e","log","modifyQuery","expression","expandRecordingRules","date","roundUp","dateMath","valueOf","getTimeRangeParams","labelData","finalQuery","getAdhocFilters","filterQuery","getVariables","interpolateString","string","undefined","DEFAULT_KEYS","SUGGESTIONS_LIMIT","wrapLabel","setFunctionKind","suggestion","kind","getMetadataString","metadata","help","toUpperCase","PREFIX_DELIMITER_REGEX","PromQlLanguageProvider","LanguageProvider","initialValues","defaultValue","fetchLabels","fetchLabelValues","loadMetricsMetadata","processHistogramMetrics","prefix","labelKey","wrapperClasses","context","emptyResult","suggestions","empty","document","selectedLines","getTextsAtRange","selection","currentLine","first","getText","nextCharacter","anchor","offset","tokenRecognized","prefixUnrecognized","noSuffix","safePrefix","operatorsPattern","isNextOperand","getRangeCompletionItems","getLabelCompletionItems","getAggregationCompletionItems","getEmptyCompletionItems","getBeginningCompletionItems","getTermCompletionItems","history","historyItems","h","take","item","cutoffTs","historyForItem","count","recent","hint","fromNow","documentation","addHistoryMetadata","searchFunctionType","SearchFunctionType","skipSort","items","FUNCTIONS","addMetricsMetadata","queryOffset","queryText","getBlocks","block","blockText","anchorBlock","openParensAggregationIndex","lastIndexOf","openParensSelectorIndex","closeParensSelectorIndex","closeParensAggregationIndex","selectorString","selector","parseSelector","getSeries","labelKeys","limitInfo","addLimitInfo","line","cursorOffset","suffix","substr","isValueStart","isValueEnd","isPreValue","parsedSelector","containsMetric","existingKeys","possibleKeys","difference","newItems","newSuggestion","withName","interpolatedName","urlParams","cacheKey","roundSecToMin","parseInt","labelsCache","processLabels","set","once","cleanText","pop","trimLeft","syntax","PromqlSyntax","fixSummariesMetadata","getLabelKeys","RATE_RANGES","labelBasedQuery","toPromLikeQuery","promQuery","labelMatchers","tokens","Prism","extractLabelMatchers","nameLabelValue","prop","getNameLabelValue","AbstractLabelOperator","fetchDefaultSeries","labelFetchTs","Array","isArray","resultSet","regexp","valueSet","rest","has","valueArray","limitSuggestions","selectorRegexp","labelRegexp","prefixOpen","prefixClose","suffixCloseIndex","suffixClose","suffixOpenIndex","suffixOpen","labelOffset","valueStart","valueEnd","metricPrefix","metricMatch","cleanSelector","ruleNames","rulesRegex","queryArray","pre","post","invalidLabelsRegex","correctlyExpandedQueryArray","invalidLabelsRegexp","indexOfRegexMatch","exprBeforeRegexMatch","exprAfterRegexMatch","arrayOfLabelObjects","Boolean","obj","addLabelsToExpression","baseMetadata","summaryMetadata","syntheticMetadata","roundMsToMin","milliseconds","seconds","RE2_METACHARACTERS","escapeLabelValueInExactSelector","labelValue","escapeLabelValueInRegexSelector","FromPromLikeMap","ToPromLikeMap","invert","toPromLikeExpr","Token","token","labelOperator","contentTokens","currentToken","currentStr","labelComparator","createFunction","definition","getPromAndLokiOperationDisplayName","defaultParams","category","PromVisualQueryOperationCategory","renderer","functionRendererRight","functionRendererLeft","addOperationHandler","defaultAddOperationHandler","createRangeFunction","withRateInterval","getRangeVectorParamDef","alternativesKey","operationWithRangeVectorRenderer","addOperationWithRangeVector","changeTypeHandler","operationTypeChangedHandlerForRangeFunction","operation","newDef","model","def","innerExpr","rangeVector","newOperation","operations","getOperationDef","addNestedQueryHandler","binaryQueries","labelJoinRenderer","separator","labelJoinAddOperationHandler","createAggregationOverTime","LokiAndPromQueryModellerBase","allOperations","PromOperationId","rangeRendererRightWithParams","rangeRendererLeftWithParams","binaryScalarOperations","editor","LabelParamEditor","restParam","optional","createAggregationOperation","createAggregationOperationWithParam","func","x","insertText","setOperationCategories","getQueryPatterns","promQueryModeller","binaryScalarDefs","sign","comparison","binaryScalarOperatorToOperatorName","opDef","description","param","bool","onChange","operationIndex","setState","useState","Select","inputId","getOperationParamId","menuShouldPortal","autoFocus","openMenuOnFocus","onOpenMenu","isLoading","loadGroupByLabels","allowCustomValue","noOptionsMessage","loadingMessage","toOption","replacedExpr","replaceVariables","node","topNode","errors","handleExpression","isEmptyQuery","getString","getChild","getLabel","ErrorName","makeError","nameNode","funcName","callArgs","rangeFunctions","endsWith","unshift","updateFunctionArgs","handleFunction","modifier","getAllByType","handleAggregation","left","firstChild","nextSibling","binModifier","isBool","isMatcher","matcher","matches","matchType","getBinaryModifier","right","lastChild","leftNumber","rightNumber","rightBinary","makeBinOp","leftMostChild","getLeftMostChild","binQuery","vectorMatchesType","vectorMatches","handleBinary","prevSibling","isIntervalVariableError","child","AutoSizeInput","React","props","ref","minWidth","maxWidth","onCommitChange","onKeyDown","onBlur","restProps","setValue","inputWidth","setInputWidth","useEffect","extraSpace","realWidth","measureText","getWidthFor","Input","event","currentTarget","displayName","LabelFilterItem","defaultOp","onDelete","onGetLabelNames","onGetLabelValues","isMultiSelect","operators","getSelectOptionsFromString","InputGroup","isLoadingLabelNames","labelNames","change","isLoadingLabelValues","labelValues","isMulti","changes","AccessoryButton","variant","onClick","LabelFilters","labelsFilters","setItems","EditorFieldGroup","EditorField","EditorList","newLabels","isEqual","renderItem","onChangeItem","getOperations","operationsRegisty","Registry","categories","getOperationsForCategory","list","hideFromList","getAlternativeOperations","getCategories","getIfExists","renderOperations","queryString","renderBinaryQueries","renderBinaryQuery","leftOperand","binaryQuery","renderLabels","nested","hasBinaryOp","OperationExplainedBox","stepNumber","markdown","children","styles","useStyles2","getStyles","className","box","boxInner","header","body","dangerouslySetInnerHTML","__html","renderMarkdown","theme","css","background","colors","secondary","padding","spacing","borderRadius","shape","position","marginBottom","marginLeft","fontWeight","typography","fontWeightMedium","main","alignItems","justifyContent","top","fontSize","bodySmall","paddingBottom","fontFamily","fontFamilyMonospace","margin","a","link","textDecoration","OperationInfoButton","show","setShow","getTooltipProps","setTooltipRef","setTriggerRef","visible","usePopperTooltip","onVisibleChange","interactive","trigger","Button","fill","Portal","docBox","docBoxHeader","FlexItem","grow","docBoxBody","getOperationDocs","overflow","primary","border","strong","boxShadow","shadows","z3","zIndex","tooltip","h5","signature","dropdown","opacity","explainHandler","OperationHeader","onRemove","queryModeller","dragHandleProps","onToggleSwitcher","isOpen","alternatives","alt","operationHeaderButtons","selectWrapper","placeholder","onCloseMenu","changedOp","borderBottom","medium","transition","transitions","create","duration","short","paddingRight","getOperationParamEditor","paramDef","SelectInputParamEditor","BoolInputParamEditor","SimpleInputParamEditor","evt","Checkbox","checked","selectOptions","option","valueOption","OperationEditor","onRunQuery","highlight","shouldHighlight","keepHighlight","setKeepHighlight","setTimeout","clearTimeout","useHighlight","onParamValueChanged","paramIdx","update","callParamChangedThenOnChange","onAddRestParam","onRemoveRestParam","operationElements","paramIndex","min","Editor","paramRow","hideName","paramName","htmlFor","Icon","infoIcon","paramValue","Stack","gap","direction","wrap","lastParamDef","renderAddRestParamButton","draggableId","provided","cx","card","cardHighlight","innerRef","draggableProps","arrow","arrowLine","arrowArrow","paramChangedHandler","flexDirection","cursor","backgroundColor","borderTop","borderLeft","OperationList","opsToHighlight","isMounted","useMountedState","prevOperations","usePrevious","newOps","every","newOp","op1","op2","useOperationsHighlight","cascaderOpen","setCascaderOpen","onOperationChange","updatedList","splice","addOptions","isLeaf","onDragEnd","destination","element","source","droppableId","operationList","droppableProps","addButton","Cascader","onSelect","operationDef","alwaysOpen","hideActiveLevelLabel","heading","flexWrap","OperationListExplained","OperationsEditorRow","root","editorModes","QueryEditorMode","component","Tag","colorIndex","QueryEditorModeToggle","mode","RadioButtonGroup","QueryOptionGroup","collapsedInfo","toggleOpen","useToggle","toggle","switchLabel","emphasize","flexGrow","paddingLeft","paddingTop","marginRight","renderParams","str","rangeRendererWithParams","renderLeft","capitalize","getOnLabelAddedHandler","getAggregationExplainer","getAggregationByRenderer","getLastLabelRemovedHandler","getAggregationWithoutRenderer","paramsDef","getAggregationByRendererWithParameter","aggregation","aggregationName","labelWord","pluralize","restParams","p","changeToOperationId","cur","parentType","parent","variableRegex","var1","var2","fmt2","var3","fieldPath","fmt3","fmt","varType","varTypeFunc","f","returnVariables","numberNode","hasBool","pos","childAfter","LegendFormatMode","useRef","toggleReducer","nextValue","initialValue","useReducer","perf","performance","AC","AbortController","signal","AbortSignal","abort","aborted","warned","deprecatedOption","opt","instead","code","shouldWarn","LRUCache","deprecatedMethod","prototype","getOwnPropertyDescriptor","what","fn","msg","emitWarning","isPosInt","n","isFinite","getUintArray","pow","Uint8Array","Uint16Array","Uint32Array","MAX_SAFE_INTEGER","ZeroArray","UintArray","heap","ttl","ttlResolution","ttlAutopurge","updateAgeOnGet","allowStale","dispose","disposeAfter","noDisposeOnSet","noUpdateTTL","maxSize","sizeCalculation","fetchMethod","maxAge","stale","TypeError","keyMap","Map","keyList","valList","next","head","tail","free","initialFill","disposed","initializeSizeTracking","initializeTTLTracking","getRemainingTTL","ttls","starts","setItemTTL","isStale","delete","unref","updateItemAge","cachedNow","getNow","calculatedSize","sizes","removeItemSize","requireSize","addItemSize","evict","call","isValidIndex","indexes","rindexes","Symbol","iterator","getOptions","thisp","rforEach","prune","purgeStale","deleted","dump","arr","entry","load","clear","reason","newIndex","oldVal","isBackgroundFetch","__abortController","moveToTail","shift","peek","backgroundFetch","ac","fetchOpts","__staleWhileFetching","fetching","connect","del","reset","deprecatedProperty","module","exports","keywordTokens","inf","nan","ignoring","on","group_left","group_right","contextualKeywordTokens","avg","atan2","bottomk","count_values","quantile","stddev","stdvar","sum","topk","by","without","and","or","unless","spec_Identifier","__proto__","absent_over_time","absent","abs","acos","acosh","asin","asinh","atan","atanh","avg_over_time","clamp","clamp_max","clamp_min","cos","cosh","count_over_time","days_in_month","day_of_month","day_of_week","deg","delta","deriv","exp","histogram_quantile","holt_winters","hour","idelta","increase","irate","label_replace","label_join","last_over_time","ln","log10","log2","max_over_time","min_over_time","minute","month","pi","predict_linear","present_over_time","quantile_over_time","rad","rate","resets","scalar","sgn","sin","sinh","sort_desc","sqrt","stddev_over_time","stdvar_over_time","sum_over_time","tan","tanh","vector","year","version","states","stateData","goto","nodeNames","maxTerm","skippedNodes","repeatNodeCount","tokenData","tokenizers","topRules","specialized","term","stack","specializeIdentifier","extendIdentifier","tokenPrec","DefaultBufferLength","nextPropID","Range","NodeProp","perNode","deserialize","RangeError","NodeType","closedBy","openedBy","contextHash","lookAhead","mounted","noProps","flags","static","spec","skipped","isTop","isSkipped","isError","isAnonymous","is","direct","found","none","NodeSet","types","extend","newTypes","newProps","CachedNode","WeakMap","CachedInnerNode","Tree","overlay","ch","JSON","stringify","side","scope","TreeCursor","moveTo","_tree","fullCursor","TreeNode","resolveNode","resolveInner","leave","c","mustLeave","propValues","balance","balanceRange","makeTree","_a","buffer","nodeSet","maxBufferLength","reused","minRepeatType","FlatBufferCursor","takeNode","parentStart","minPos","inRepeat","lookAheadAtStart","startPos","findBufferSize","skip","endPos","copyToBuffer","TreeBuffer","localChildren","localPositions","localInRepeat","lastGroup","lastEnd","makeRepeatLeaf","reverse","make","makeBalanced","last","lookAheadProp","lastI","base","pair","concat","fork","minStart","scan","nodeSize","localSkipped","nodeStart","bufferStart","startIndex","topID","buildTree","childString","endIndex","findChild","dir","pick","checkSide","startI","endI","b","copy","enterUnfinishedNodesBefore","childBefore","overlays","inner","_from","_parent","nextChild","BufferNode","BufferContext","hasChild","buffers","rPos","nextSignificantParent","toTree","before","after","r","getChildren","externalSibling","bufferNode","yieldNode","yieldBuf","yield","enterChild","sibling","atLastNode","move","cache","depth","nodeSizeCache","balanceType","mkTop","mkTree","total","maxChild","divide","groupFrom","groupStart","groupSize","nextSize","only","StringInput","chunk","lineChunks","read","reducePos","score","bufferBase","curContext","_","StackContext","pushState","dPrec","dynamicPrecedence","getGoto","minRepeatTerm","storeNode","reduceContext","stateFlag","baseStateID","isReduce","nextEnd","nextState","maxNode","shiftContext","apply","useNode","updateContext","tracker","reuse","stream","off","recoverByDelete","isNode","canShift","sim","SimulatedStack","stateSlot","hasAction","recoverByInsert","nextStates","best","forceReduce","validAction","forceAll","deadEnd","restart","sameState","other","dialectEnabled","dialectID","dialect","emitContext","hash","emitLookAhead","newCx","setLookAhead","close","strict","Recover","StackBufferCursor","maybeNext","CachedToken","extended","mask","nullToken","InputStream","input","ranges","chunkOff","chunk2","chunk2Pos","rangeIndex","chunkPos","readNext","resolveOffset","assoc","charCodeAt","resolved","acceptToken","endOffset","getChunk","nextChunk","advance","setDone","TokenGroup","groupMask","accEnd","allows","low","high","mid","readToken","contextual","fallback","decodeArray","Type","array","out","stop","digit","verbose","env","LOG","stackIDs","Safety","Rec","cutAt","fragments","fragment","safeFrom","safeTo","trees","nextFragment","fr","openStart","openEnd","nextStart","nodeAt","TokenCache","mainToken","actions","getActions","actionIndex","tokenizer","updateCachedToken","addActions","eofTerm","getMainToken","specializers","putAction","Parse","recovering","nextStackID","minStackPos","stoppedAt","topTerm","stacks","bufferLength","parsedPos","stopped","stoppedTokens","newStacks","advanceStack","tok","finished","findFinished","stackToTree","getName","SyntaxError","runRecovery","maxRemaining","outer","stopAt","stackID","strictCx","cxHash","cached","defaultReduce","localStack","advanceFully","pushStackDedup","restarted","tokenEnd","force","forceBase","insert","build","fromCodePoint","Dialect","LRParser","startParse","createParse","parse","done","wrappers","topTerms","nodeProps","setProp","nodeID","propSpec","define","tokenArray","dialects","dynamicPrecedences","tokenPrecTable","termNames","parseDialect","w","loose","table","groupTag","terminal","slot","flag","iPrev","findOffset","configure","info","contextTracker","prec","part"],"sourceRoot":""}