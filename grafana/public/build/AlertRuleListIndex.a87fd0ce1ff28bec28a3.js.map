{"version":3,"file":"AlertRuleListIndex.a87fd0ce1ff28bec28a3.js","mappings":"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","sources":["webpack://grafana/./public/app/core/hooks/useCleanup.ts","webpack://grafana/./public/app/features/alerting/AlertHowToModal.tsx","webpack://grafana/./public/app/features/alerting/AlertRuleItem.tsx","webpack://grafana/./public/app/features/alerting/components/UnifiedAlertingPromotion.tsx","webpack://grafana/./public/app/features/alerting/state/selectors.ts","webpack://grafana/./public/app/features/alerting/AlertRuleList.tsx","webpack://grafana/./public/app/features/alerting/state/actions.ts","webpack://grafana/./public/app/features/alerting/unified/components/rules/NoRulesCTA.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/RuleListErrors.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/EditCloudGroupModal.tsx","webpack://grafana/./public/app/features/alerting/unified/components/StateColoredText.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/RuleStats.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/RulesGroup.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/CloudRules.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/GrafanaRules.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/RuleListStateSection.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/RulesFilter.tsx","webpack://grafana/./public/app/features/alerting/unified/hooks/useFilteredRules.ts","webpack://grafana/./public/app/features/alerting/unified/RuleList.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/RuleListGroupView.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/RuleListStateView.tsx","webpack://grafana/./public/app/features/alerting/unified/components/AlertingPageWrapper.tsx","webpack://grafana/./public/app/features/alerting/unified/components/Authorize.tsx","webpack://grafana/./public/app/features/alerting/unified/components/DynamicTableWithGuidelines.tsx","webpack://grafana/./public/app/features/alerting/unified/components/RuleLocation.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/ActionIcon.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/RuleDetails.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/RulesTable.tsx","webpack://grafana/./public/app/features/alerting/unified/hooks/useHasRuler.ts","webpack://grafana/./public/app/features/alerting/unified/utils/accessControlHooks.ts"],"sourcesContent":["import { useEffect, useRef } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { cleanUpAction, StateSelector } from '../actions/cleanUp';\n\nexport function useCleanup<T>(stateSelector: StateSelector<T>) {\n  const dispatch = useDispatch();\n  //bit of a hack to unburden user from having to wrap stateSelcetor in a useCallback. Otherwise cleanup would happen on every render\n  const selectorRef = useRef(stateSelector);\n  selectorRef.current = stateSelector;\n  useEffect(() => {\n    return () => {\n      dispatch(cleanUpAction({ stateSelector: selectorRef.current }));\n    };\n  }, [dispatch]);\n}\n","import React from 'react';\n\nimport { Modal, VerticalGroup } from '@grafana/ui';\n\nexport interface AlertHowToModalProps {\n  onDismiss: () => void;\n}\n\nexport function AlertHowToModal({ onDismiss }: AlertHowToModalProps): JSX.Element {\n  return (\n    <Modal title=\"Adding an Alert\" isOpen onDismiss={onDismiss} onClickBackdrop={onDismiss}>\n      <VerticalGroup spacing=\"sm\">\n        <img src=\"public/img/alert_howto_new.png\" alt=\"link to how to alert image\" />\n        <p>\n          Alerts are added and configured in the Alert tab of any dashboard graph panel, letting you build and visualize\n          an alert using existing queries.\n        </p>\n        <p>Remember to save the dashboard to persist your alert rule changes.</p>\n      </VerticalGroup>\n    </Modal>\n  );\n}\n","import React, { useCallback } from 'react';\n// @ts-ignore\nimport Highlighter from 'react-highlight-words';\n\nimport { Icon, IconName, Button, LinkButton, Card } from '@grafana/ui';\n\nimport { AlertRule } from '../../types';\n\nexport interface Props {\n  rule: AlertRule;\n  search: string;\n  onTogglePause: () => void;\n}\n\nconst AlertRuleItem = ({ rule, search, onTogglePause }: Props) => {\n  const ruleUrl = `${rule.url}?editPanel=${rule.panelId}&tab=alert`;\n  const renderText = useCallback(\n    (text) => (\n      <Highlighter\n        key={text}\n        highlightClassName=\"highlight-search-match\"\n        textToHighlight={text}\n        searchWords={[search]}\n      />\n    ),\n    [search]\n  );\n\n  return (\n    <Card>\n      <Card.Heading>{renderText(rule.name)}</Card.Heading>\n      <Card.Figure>\n        <Icon size=\"xl\" name={rule.stateIcon as IconName} className={`alert-rule-item__icon ${rule.stateClass}`} />\n      </Card.Figure>\n      <Card.Meta>\n        <span key=\"state\">\n          <span key=\"text\" className={`${rule.stateClass}`}>\n            {renderText(rule.stateText)}{' '}\n          </span>\n          for {rule.stateAge}\n        </span>\n        {rule.info ? renderText(rule.info) : null}\n      </Card.Meta>\n      <Card.Actions>\n        <Button\n          key=\"play\"\n          variant=\"secondary\"\n          icon={rule.state === 'paused' ? 'play' : 'pause'}\n          onClick={onTogglePause}\n        >\n          {rule.state === 'paused' ? 'Resume' : 'Pause'}\n        </Button>\n        <LinkButton key=\"edit\" variant=\"secondary\" href={ruleUrl} icon=\"cog\">\n          Edit alert\n        </LinkButton>\n      </Card.Actions>\n    </Card>\n  );\n};\n\nexport default AlertRuleItem;\n","import React, { FC } from 'react';\nimport { useLocalStorage } from 'react-use';\n\nimport { Alert } from '@grafana/ui';\n\nexport const LOCAL_STORAGE_KEY = 'grafana.legacyalerting.unifiedalertingpromo';\n\nconst UnifiedAlertingPromotion: FC<{}> = () => {\n  const [showUnifiedAlertingPromotion, setShowUnifiedAlertingPromotion] = useLocalStorage<boolean>(\n    LOCAL_STORAGE_KEY,\n    true\n  );\n\n  if (!showUnifiedAlertingPromotion) {\n    return null;\n  }\n\n  return (\n    <Alert\n      severity=\"info\"\n      title=\"Try out the Grafana 8 alerting!\"\n      onRemove={() => setShowUnifiedAlertingPromotion(false)}\n    >\n      <p>\n        You are using the legacy Grafana alerting.\n        <br />\n        While we have no plans of deprecating it any time soon, we invite you to give the improved Grafana 8 alerting a\n        try.\n      </p>\n      <p>\n        See{' '}\n        <a href=\"https://grafana.com/docs/grafana/latest/alerting/unified-alerting/difference-old-new/\">\n          What’s New with Grafana 8 alerting\n        </a>{' '}\n        to learn more about what&lsquo;s new in Grafana 8 alerting or learn{' '}\n        <a href=\"https://grafana.com/docs/grafana/latest/alerting/unified-alerting/opt-in/\">\n          how to enable the new Grafana 8 alerting feature\n        </a>\n        .\n      </p>\n    </Alert>\n  );\n};\n\nexport { UnifiedAlertingPromotion };\n","import { AlertRule, AlertRulesState, NotificationChannelState, StoreState } from 'app/types';\n\nexport const getSearchQuery = (state: AlertRulesState) => state.searchQuery;\n\nexport const getAlertRuleItems = (state: StoreState): AlertRule[] => {\n  const regex = new RegExp(state.alertRules.searchQuery, 'i');\n\n  return state.alertRules.items.filter((item) => {\n    return regex.test(item.name) || regex.test(item.stateText) || regex.test(item.info!);\n  });\n};\n\nexport const getNotificationChannel = (state: NotificationChannelState, channelId: number) => {\n  if (state.notificationChannel.id === channelId) {\n    return state.notificationChannel;\n  }\n\n  return null;\n};\n","import React, { PureComponent } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { SelectableValue } from '@grafana/data';\nimport { config, locationService } from '@grafana/runtime';\nimport { Button, FilterInput, LinkButton, Select, VerticalGroup } from '@grafana/ui';\nimport appEvents from 'app/core/app_events';\nimport Page from 'app/core/components/Page/Page';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { AlertRule, StoreState } from 'app/types';\n\nimport { ShowModalReactEvent } from '../../types/events';\n\nimport { AlertHowToModal } from './AlertHowToModal';\nimport AlertRuleItem from './AlertRuleItem';\nimport { UnifiedAlertingPromotion } from './components/UnifiedAlertingPromotion';\nimport { getAlertRulesAsync, togglePauseAlertRule } from './state/actions';\nimport { setSearchQuery } from './state/reducers';\nimport { getAlertRuleItems, getSearchQuery } from './state/selectors';\n\nfunction mapStateToProps(state: StoreState) {\n  return {\n    navModel: getNavModel(state.navIndex, 'alert-list'),\n    alertRules: getAlertRuleItems(state),\n    search: getSearchQuery(state.alertRules),\n    isLoading: state.alertRules.isLoading,\n  };\n}\n\nconst mapDispatchToProps = {\n  getAlertRulesAsync,\n  setSearchQuery,\n  togglePauseAlertRule,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ninterface OwnProps extends GrafanaRouteComponentProps<{}, { state: string }> {}\n\nexport type Props = OwnProps & ConnectedProps<typeof connector>;\n\nexport class AlertRuleListUnconnected extends PureComponent<Props> {\n  stateFilters = [\n    { label: 'All', value: 'all' },\n    { label: 'OK', value: 'ok' },\n    { label: 'Not OK', value: 'not_ok' },\n    { label: 'Alerting', value: 'alerting' },\n    { label: 'No data', value: 'no_data' },\n    { label: 'Paused', value: 'paused' },\n    { label: 'Pending', value: 'pending' },\n  ];\n\n  componentDidMount() {\n    this.fetchRules();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.queryParams.state !== this.props.queryParams.state) {\n      this.fetchRules();\n    }\n  }\n\n  async fetchRules() {\n    await this.props.getAlertRulesAsync({ state: this.getStateFilter() });\n  }\n\n  getStateFilter(): string {\n    return this.props.queryParams.state ?? 'all';\n  }\n\n  onStateFilterChanged = (option: SelectableValue) => {\n    locationService.partial({ state: option.value });\n  };\n\n  onOpenHowTo = () => {\n    appEvents.publish(new ShowModalReactEvent({ component: AlertHowToModal }));\n  };\n\n  onSearchQueryChange = (value: string) => {\n    this.props.setSearchQuery(value);\n  };\n\n  onTogglePause = (rule: AlertRule) => {\n    this.props.togglePauseAlertRule(rule.id, { paused: rule.state !== 'paused' });\n  };\n\n  alertStateFilterOption = ({ text, value }: { text: string; value: string }) => {\n    return (\n      <option key={value} value={value}>\n        {text}\n      </option>\n    );\n  };\n\n  render() {\n    const { navModel, alertRules, search, isLoading } = this.props;\n\n    return (\n      <Page navModel={navModel}>\n        <Page.Contents isLoading={isLoading}>\n          <div className=\"page-action-bar\">\n            <div className=\"gf-form gf-form--grow\">\n              <FilterInput placeholder=\"Search alerts\" value={search} onChange={this.onSearchQueryChange} />\n            </div>\n            <div className=\"gf-form\">\n              <label className=\"gf-form-label\" htmlFor=\"alert-state-filter\">\n                States\n              </label>\n\n              <div className=\"width-13\">\n                <Select\n                  inputId={'alert-state-filter'}\n                  menuShouldPortal\n                  options={this.stateFilters}\n                  onChange={this.onStateFilterChanged}\n                  value={this.getStateFilter()}\n                />\n              </div>\n            </div>\n            <div className=\"page-action-bar__spacer\" />\n            {config.unifiedAlertingEnabled && (\n              <LinkButton variant=\"primary\" href=\"alerting/ng/new\">\n                Add NG Alert\n              </LinkButton>\n            )}\n            <Button variant=\"secondary\" onClick={this.onOpenHowTo}>\n              How to add an alert\n            </Button>\n          </div>\n          <UnifiedAlertingPromotion />\n          <VerticalGroup spacing=\"none\">\n            {alertRules.map((rule) => {\n              return (\n                <AlertRuleItem\n                  rule={rule as AlertRule}\n                  key={rule.id}\n                  search={search}\n                  onTogglePause={() => this.onTogglePause(rule as AlertRule)}\n                />\n              );\n            })}\n          </VerticalGroup>\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nexport default connector(AlertRuleListUnconnected);\n","import { getBackendSrv, locationService } from '@grafana/runtime';\nimport { notifyApp } from 'app/core/actions';\nimport { createErrorNotification, createSuccessNotification } from 'app/core/copy/appNotification';\nimport { AlertRuleDTO, NotifierDTO, ThunkResult } from 'app/types';\n\nimport { loadAlertRules, loadedAlertRules, notificationChannelLoaded, setNotificationChannels } from './reducers';\n\nexport function getAlertRulesAsync(options: { state: string }): ThunkResult<void> {\n  return async (dispatch) => {\n    dispatch(loadAlertRules());\n    const rules: AlertRuleDTO[] = await getBackendSrv().get('/api/alerts', options);\n    dispatch(loadedAlertRules(rules));\n  };\n}\n\nexport function togglePauseAlertRule(id: number, options: { paused: boolean }): ThunkResult<void> {\n  return async (dispatch) => {\n    await getBackendSrv().post(`/api/alerts/${id}/pause`, options);\n    const stateFilter = locationService.getSearchObject().state || 'all';\n    dispatch(getAlertRulesAsync({ state: stateFilter.toString() }));\n  };\n}\n\nexport function createNotificationChannel(data: any): ThunkResult<Promise<void>> {\n  return async (dispatch) => {\n    try {\n      await getBackendSrv().post(`/api/alert-notifications`, data);\n      dispatch(notifyApp(createSuccessNotification('Notification created')));\n      locationService.push('/alerting/notifications');\n    } catch (error) {\n      dispatch(notifyApp(createErrorNotification(error.data.error)));\n    }\n  };\n}\n\nexport function updateNotificationChannel(data: any): ThunkResult<void> {\n  return async (dispatch) => {\n    try {\n      await getBackendSrv().put(`/api/alert-notifications/${data.id}`, data);\n      dispatch(notifyApp(createSuccessNotification('Notification updated')));\n    } catch (error) {\n      dispatch(notifyApp(createErrorNotification(error.data.error)));\n    }\n  };\n}\n\nexport function testNotificationChannel(data: any): ThunkResult<void> {\n  return async (dispatch, getState) => {\n    const channel = getState().notificationChannel.notificationChannel;\n    await getBackendSrv().post('/api/alert-notifications/test', { id: channel.id, ...data });\n  };\n}\n\nexport function loadNotificationTypes(): ThunkResult<void> {\n  return async (dispatch) => {\n    const alertNotifiers: NotifierDTO[] = await getBackendSrv().get(`/api/alert-notifiers`);\n\n    const notificationTypes = alertNotifiers.sort((o1, o2) => {\n      if (o1.name > o2.name) {\n        return 1;\n      }\n      return -1;\n    });\n\n    dispatch(setNotificationChannels(notificationTypes));\n  };\n}\n\nexport function loadNotificationChannel(id: number): ThunkResult<void> {\n  return async (dispatch) => {\n    await dispatch(loadNotificationTypes());\n    const notificationChannel = await getBackendSrv().get(`/api/alert-notifications/${id}`);\n    dispatch(notificationChannelLoaded(notificationChannel));\n  };\n}\n","import React, { FC } from 'react';\n\nimport { CallToActionCard } from '@grafana/ui';\nimport EmptyListCTA from 'app/core/components/EmptyListCTA/EmptyListCTA';\n\nimport { useRulesAccess } from '../../utils/accessControlHooks';\n\nexport const NoRulesSplash: FC = () => {\n  const { canCreateGrafanaRules, canCreateCloudRules } = useRulesAccess();\n\n  if (canCreateGrafanaRules || canCreateCloudRules) {\n    return (\n      <EmptyListCTA\n        title=\"You haven`t created any alert rules yet\"\n        buttonIcon=\"bell\"\n        buttonLink={'alerting/new'}\n        buttonTitle=\"New alert rule\"\n        proTip=\"you can also create alert rules from existing panels and queries.\"\n        proTipLink=\"https://grafana.com/docs/\"\n        proTipLinkTitle=\"Learn more\"\n        proTipTarget=\"_blank\"\n      />\n    );\n  }\n  return <CallToActionCard message=\"No rules exist yet.\" callToActionElement={<div />} />;\n};\n","import { css } from '@emotion/css';\nimport { SerializedError } from '@reduxjs/toolkit';\nimport pluralize from 'pluralize';\nimport React, { useMemo, ReactElement, useState, FC } from 'react';\nimport { useLocalStorage } from 'react-use';\n\nimport { DataSourceInstanceSettings, GrafanaTheme2 } from '@grafana/data';\nimport { Alert, Button, Tooltip, useStyles2 } from '@grafana/ui';\n\nimport { useUnifiedAlertingSelector } from '../../hooks/useUnifiedAlertingSelector';\nimport { getRulesDataSources, GRAFANA_RULES_SOURCE_NAME } from '../../utils/datasource';\nimport { isRulerNotSupportedResponse } from '../../utils/rules';\n\nexport function RuleListErrors(): ReactElement {\n  const [expanded, setExpanded] = useState(false);\n  const [closed, setClosed] = useLocalStorage('grafana.unifiedalerting.hideErrors', false);\n  const dataSourceConfigRequests = useUnifiedAlertingSelector((state) => state.dataSources);\n  const promRuleRequests = useUnifiedAlertingSelector((state) => state.promRules);\n  const rulerRuleRequests = useUnifiedAlertingSelector((state) => state.rulerRules);\n  const styles = useStyles2(getStyles);\n\n  const errors = useMemo((): JSX.Element[] => {\n    const [dataSourceConfigErrors, promRequestErrors, rulerRequestErrors] = [\n      dataSourceConfigRequests,\n      promRuleRequests,\n      rulerRuleRequests,\n    ].map((requests) =>\n      getRulesDataSources().reduce<Array<{ error: SerializedError; dataSource: DataSourceInstanceSettings }>>(\n        (result, dataSource) => {\n          const error = requests[dataSource.name]?.error;\n          if (requests[dataSource.name] && error && !isRulerNotSupportedResponse(requests[dataSource.name])) {\n            return [...result, { dataSource, error }];\n          }\n          return result;\n        },\n        []\n      )\n    );\n    const grafanaPromError = promRuleRequests[GRAFANA_RULES_SOURCE_NAME]?.error;\n    const grafanaRulerError = rulerRuleRequests[GRAFANA_RULES_SOURCE_NAME]?.error;\n\n    const result: JSX.Element[] = [];\n\n    if (grafanaPromError) {\n      result.push(<>Failed to load Grafana rules state: {grafanaPromError.message || 'Unknown error.'}</>);\n    }\n    if (grafanaRulerError) {\n      result.push(<>Failed to load Grafana rules config: {grafanaRulerError.message || 'Unknown error.'}</>);\n    }\n\n    dataSourceConfigErrors.forEach(({ dataSource, error }) => {\n      result.push(\n        <>\n          Failed to load the data source configuration for{' '}\n          <a href={`datasources/edit/${dataSource.uid}`}>{dataSource.name}</a>: {error.message || 'Unknown error.'}\n        </>\n      );\n    });\n\n    promRequestErrors.forEach(({ dataSource, error }) =>\n      result.push(\n        <>\n          Failed to load rules state from <a href={`datasources/edit/${dataSource.uid}`}>{dataSource.name}</a>:{' '}\n          {error.message || 'Unknown error.'}\n        </>\n      )\n    );\n\n    rulerRequestErrors.forEach(({ dataSource, error }) =>\n      result.push(\n        <>\n          Failed to load rules config from <a href={`datasources/edit/${dataSource.uid}`}>{dataSource.name}</a>:{' '}\n          {error.message || 'Unknown error.'}\n        </>\n      )\n    );\n\n    return result;\n  }, [dataSourceConfigRequests, promRuleRequests, rulerRuleRequests]);\n\n  return (\n    <>\n      {!!errors.length && closed && (\n        <ErrorSummaryButton count={errors.length} onClick={() => setClosed((closed) => !closed)} />\n      )}\n      {!!errors.length && !closed && (\n        <Alert\n          data-testid=\"cloud-rulessource-errors\"\n          title=\"Errors loading rules\"\n          severity=\"error\"\n          onRemove={() => setClosed(true)}\n        >\n          {expanded && errors.map((item, idx) => <div key={idx}>{item}</div>)}\n          {!expanded && (\n            <>\n              <div>{errors[0]}</div>\n              {errors.length >= 2 && (\n                <Button\n                  className={styles.moreButton}\n                  fill=\"text\"\n                  icon=\"angle-right\"\n                  size=\"sm\"\n                  onClick={() => setExpanded(true)}\n                >\n                  {errors.length - 1} more {pluralize('error', errors.length - 1)}\n                </Button>\n              )}\n            </>\n          )}\n        </Alert>\n      )}\n    </>\n  );\n}\n\ninterface ErrorSummaryProps {\n  count: number;\n  onClick: () => void;\n}\n\nconst ErrorSummaryButton: FC<ErrorSummaryProps> = ({ count, onClick }) => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.floatRight}>\n      <Tooltip content=\"Show all errors\" placement=\"bottom\">\n        <Button fill=\"text\" variant=\"destructive\" icon=\"exclamation-triangle\" onClick={onClick}>\n          {count > 1 ? <>{count} errors</> : <>1 error</>}\n        </Button>\n      </Tooltip>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  moreButton: css`\n    padding: 0;\n  `,\n  floatRight: css`\n    display: flex;\n    justify-content: flex-end;\n  `,\n});\n","import { css } from '@emotion/css';\nimport React, { useEffect, useMemo } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { Modal, Button, Form, Field, Input, useStyles2 } from '@grafana/ui';\nimport { useCleanup } from 'app/core/hooks/useCleanup';\nimport { CombinedRuleGroup, CombinedRuleNamespace } from 'app/types/unified-alerting';\n\nimport { useUnifiedAlertingSelector } from '../../hooks/useUnifiedAlertingSelector';\nimport { updateLotexNamespaceAndGroupAction } from '../../state/actions';\nimport { getRulesSourceName } from '../../utils/datasource';\nimport { initialAsyncRequestState } from '../../utils/redux';\nimport { durationValidationPattern } from '../../utils/time';\n\ninterface Props {\n  namespace: CombinedRuleNamespace;\n  group: CombinedRuleGroup;\n  onClose: () => void;\n}\n\ninterface FormValues {\n  namespaceName: string;\n  groupName: string;\n  groupInterval: string;\n}\n\nexport function EditCloudGroupModal(props: Props): React.ReactElement {\n  const { namespace, group, onClose } = props;\n  const styles = useStyles2(getStyles);\n  const dispatch = useDispatch();\n  const { loading, error, dispatched } =\n    useUnifiedAlertingSelector((state) => state.updateLotexNamespaceAndGroup) ?? initialAsyncRequestState;\n\n  const defaultValues = useMemo(\n    (): FormValues => ({\n      namespaceName: namespace.name,\n      groupName: group.name,\n      groupInterval: group.interval ?? '',\n    }),\n    [namespace, group]\n  );\n\n  // close modal if successfully saved\n  useEffect(() => {\n    if (dispatched && !loading && !error) {\n      onClose();\n    }\n  }, [dispatched, loading, onClose, error]);\n\n  useCleanup((state) => state.unifiedAlerting.updateLotexNamespaceAndGroup);\n\n  const onSubmit = (values: FormValues) => {\n    dispatch(\n      updateLotexNamespaceAndGroupAction({\n        rulesSourceName: getRulesSourceName(namespace.rulesSource),\n        groupName: group.name,\n        newGroupName: values.groupName,\n        namespaceName: namespace.name,\n        newNamespaceName: values.namespaceName,\n        groupInterval: values.groupInterval || undefined,\n      })\n    );\n  };\n\n  return (\n    <Modal\n      className={styles.modal}\n      isOpen={true}\n      title=\"Edit namespace or rule group\"\n      onDismiss={onClose}\n      onClickBackdrop={onClose}\n    >\n      <Form defaultValues={defaultValues} onSubmit={onSubmit} key={JSON.stringify(defaultValues)}>\n        {({ register, errors, formState: { isDirty } }) => (\n          <>\n            <Field label=\"Namespace\" invalid={!!errors.namespaceName} error={errors.namespaceName?.message}>\n              <Input\n                id=\"namespaceName\"\n                {...register('namespaceName', {\n                  required: 'Namespace name is required.',\n                })}\n              />\n            </Field>\n            <Field label=\"Rule group\" invalid={!!errors.groupName} error={errors.groupName?.message}>\n              <Input\n                id=\"groupName\"\n                {...register('groupName', {\n                  required: 'Rule group name is required.',\n                })}\n              />\n            </Field>\n            <Field\n              label=\"Rule group evaluation interval\"\n              invalid={!!errors.groupInterval}\n              error={errors.groupInterval?.message}\n            >\n              <Input\n                id=\"groupInterval\"\n                placeholder=\"1m\"\n                {...register('groupInterval', {\n                  pattern: durationValidationPattern,\n                })}\n              />\n            </Field>\n\n            <Modal.ButtonRow>\n              <Button variant=\"secondary\" type=\"button\" disabled={loading} onClick={onClose} fill=\"outline\">\n                Close\n              </Button>\n              <Button type=\"submit\" disabled={!isDirty || loading}>\n                {loading ? 'Saving...' : 'Save changes'}\n              </Button>\n            </Modal.ButtonRow>\n          </>\n        )}\n      </Form>\n    </Modal>\n  );\n}\n\nconst getStyles = () => ({\n  modal: css`\n    max-width: 560px;\n  `,\n});\n","import { css } from '@emotion/css';\nimport React, { FC } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\nimport { PromAlertingRuleState } from 'app/types/unified-alerting-dto';\n\ntype Props = {\n  status: PromAlertingRuleState | 'neutral';\n};\n\nexport const StateColoredText: FC<Props> = ({ children, status }) => {\n  const styles = useStyles2(getStyles);\n\n  return <span className={styles[status]}>{children || status}</span>;\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  [PromAlertingRuleState.Inactive]: css`\n    color: ${theme.colors.success.text};\n  `,\n  [PromAlertingRuleState.Pending]: css`\n    color: ${theme.colors.warning.text};\n  `,\n  [PromAlertingRuleState.Firing]: css`\n    color: ${theme.colors.error.text};\n  `,\n  neutral: css`\n    color: ${theme.colors.text.secondary};\n  `,\n});\n","import pluralize from 'pluralize';\nimport React, { FC, Fragment, useMemo } from 'react';\n\nimport { CombinedRule, CombinedRuleGroup, CombinedRuleNamespace } from 'app/types/unified-alerting';\nimport { PromAlertingRuleState } from 'app/types/unified-alerting-dto';\n\nimport { isAlertingRule, isRecordingRule, isRecordingRulerRule } from '../../utils/rules';\nimport { StateColoredText } from '../StateColoredText';\n\ninterface Props {\n  showInactive?: boolean;\n  showRecording?: boolean;\n  group?: CombinedRuleGroup;\n  namespaces?: CombinedRuleNamespace[];\n}\n\nconst emptyStats = {\n  total: 0,\n  recording: 0,\n  [PromAlertingRuleState.Firing]: 0,\n  [PromAlertingRuleState.Pending]: 0,\n  [PromAlertingRuleState.Inactive]: 0,\n  error: 0,\n} as const;\n\nexport const RuleStats: FC<Props> = ({ showInactive, showRecording, group, namespaces }) => {\n  const calculated = useMemo(() => {\n    const stats = { ...emptyStats };\n    const calcRule = (rule: CombinedRule) => {\n      if (rule.promRule && isAlertingRule(rule.promRule)) {\n        stats[rule.promRule.state] += 1;\n      }\n      if (rule.promRule?.health === 'err' || rule.promRule?.health === 'error') {\n        stats.error += 1;\n      }\n      if (\n        (rule.promRule && isRecordingRule(rule.promRule)) ||\n        (rule.rulerRule && isRecordingRulerRule(rule.rulerRule))\n      ) {\n        stats.recording += 1;\n      }\n      stats.total += 1;\n    };\n    if (group) {\n      group.rules.forEach(calcRule);\n    }\n    if (namespaces) {\n      namespaces.forEach((namespace) => namespace.groups.forEach((group) => group.rules.forEach(calcRule)));\n    }\n    return stats;\n  }, [group, namespaces]);\n\n  const statsComponents: React.ReactNode[] = [];\n  if (calculated[PromAlertingRuleState.Firing]) {\n    statsComponents.push(\n      <StateColoredText key=\"firing\" status={PromAlertingRuleState.Firing}>\n        {calculated[PromAlertingRuleState.Firing]} firing\n      </StateColoredText>\n    );\n  }\n  if (calculated.error) {\n    statsComponents.push(\n      <StateColoredText key=\"errors\" status={PromAlertingRuleState.Firing}>\n        {calculated.error} errors\n      </StateColoredText>\n    );\n  }\n  if (calculated[PromAlertingRuleState.Pending]) {\n    statsComponents.push(\n      <StateColoredText key=\"pending\" status={PromAlertingRuleState.Pending}>\n        {calculated[PromAlertingRuleState.Pending]} pending\n      </StateColoredText>\n    );\n  }\n  if (showInactive && calculated[PromAlertingRuleState.Inactive]) {\n    statsComponents.push(\n      <StateColoredText key=\"inactive\" status=\"neutral\">\n        {calculated[PromAlertingRuleState.Inactive]} normal\n      </StateColoredText>\n    );\n  }\n  if (showRecording && calculated.recording) {\n    statsComponents.push(\n      <StateColoredText key=\"recording\" status=\"neutral\">\n        {calculated.recording} recording\n      </StateColoredText>\n    );\n  }\n\n  return (\n    <div>\n      <span>\n        {calculated.total} {pluralize('rule', calculated.total)}\n      </span>\n      {!!statsComponents.length && (\n        <>\n          <span>: </span>\n          {statsComponents.reduce<React.ReactNode[]>(\n            (prev, curr, idx) =>\n              prev.length\n                ? [\n                    prev,\n                    <Fragment key={idx}>\n                      <span>, </span>\n                    </Fragment>,\n                    curr,\n                  ]\n                : [curr],\n            []\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n","import { css } from '@emotion/css';\nimport pluralize from 'pluralize';\nimport React, { FC, useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Badge, ConfirmModal, HorizontalGroup, Icon, Spinner, Tooltip, useStyles2 } from '@grafana/ui';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport kbn from 'app/core/utils/kbn';\nimport { AccessControlAction } from 'app/types';\nimport { CombinedRuleGroup, CombinedRuleNamespace } from 'app/types/unified-alerting';\n\nimport { useFolder } from '../../hooks/useFolder';\nimport { useHasRuler } from '../../hooks/useHasRuler';\nimport { deleteRulesGroupAction } from '../../state/actions';\nimport { GRAFANA_RULES_SOURCE_NAME, isCloudRulesSource } from '../../utils/datasource';\nimport { isFederatedRuleGroup, isGrafanaRulerRule } from '../../utils/rules';\nimport { CollapseToggle } from '../CollapseToggle';\nimport { RuleLocation } from '../RuleLocation';\n\nimport { ActionIcon } from './ActionIcon';\nimport { EditCloudGroupModal } from './EditCloudGroupModal';\nimport { RuleStats } from './RuleStats';\nimport { RulesTable } from './RulesTable';\n\ninterface Props {\n  namespace: CombinedRuleNamespace;\n  group: CombinedRuleGroup;\n  expandAll: boolean;\n}\n\nexport const RulesGroup: FC<Props> = React.memo(({ group, namespace, expandAll }) => {\n  const { rulesSource } = namespace;\n  const dispatch = useDispatch();\n  const styles = useStyles2(getStyles);\n\n  const [isEditingGroup, setIsEditingGroup] = useState(false);\n  const [isDeletingGroup, setIsDeletingGroup] = useState(false);\n  const [isCollapsed, setIsCollapsed] = useState(!expandAll);\n\n  const canEditCloudRules = contextSrv.hasPermission(AccessControlAction.AlertingRuleExternalWrite);\n\n  useEffect(() => {\n    setIsCollapsed(!expandAll);\n  }, [expandAll]);\n\n  const hasRuler = useHasRuler();\n  const rulerRule = group.rules[0]?.rulerRule;\n  const folderUID = (rulerRule && isGrafanaRulerRule(rulerRule) && rulerRule.grafana_alert.namespace_uid) || undefined;\n  const { folder } = useFolder(folderUID);\n\n  // group \"is deleting\" if rules source has ruler, but this group has no rules that are in ruler\n  const isDeleting = hasRuler(rulesSource) && !group.rules.find((rule) => !!rule.rulerRule);\n  const isFederated = isFederatedRuleGroup(group);\n\n  const deleteGroup = () => {\n    dispatch(deleteRulesGroupAction(namespace, group));\n    setIsDeletingGroup(false);\n  };\n\n  const actionIcons: React.ReactNode[] = [];\n\n  // for grafana, link to folder views\n  if (isDeleting) {\n    actionIcons.push(\n      <HorizontalGroup key=\"is-deleting\">\n        <Spinner />\n        deleting\n      </HorizontalGroup>\n    );\n  } else if (rulesSource === GRAFANA_RULES_SOURCE_NAME) {\n    if (folderUID) {\n      const baseUrl = `/dashboards/f/${folderUID}/${kbn.slugifyForUrl(namespace.name)}`;\n      if (folder?.canSave) {\n        actionIcons.push(\n          <ActionIcon\n            aria-label=\"edit folder\"\n            key=\"edit\"\n            icon=\"pen\"\n            tooltip=\"edit folder\"\n            to={baseUrl + '/settings'}\n            target=\"__blank\"\n          />\n        );\n      }\n      if (folder?.canAdmin) {\n        actionIcons.push(\n          <ActionIcon\n            aria-label=\"manage permissions\"\n            key=\"manage-perms\"\n            icon=\"lock\"\n            tooltip=\"manage permissions\"\n            to={baseUrl + '/permissions'}\n            target=\"__blank\"\n          />\n        );\n      }\n    }\n  } else if (canEditCloudRules && hasRuler(rulesSource)) {\n    if (!isFederated) {\n      actionIcons.push(\n        <ActionIcon\n          aria-label=\"edit rule group\"\n          data-testid=\"edit-group\"\n          key=\"edit\"\n          icon=\"pen\"\n          tooltip=\"edit rule group\"\n          onClick={() => setIsEditingGroup(true)}\n        />\n      );\n    }\n\n    actionIcons.push(\n      <ActionIcon\n        aria-label=\"delete rule group\"\n        data-testid=\"delete-group\"\n        key=\"delete-group\"\n        icon=\"trash-alt\"\n        tooltip=\"delete rule group\"\n        onClick={() => setIsDeletingGroup(true)}\n      />\n    );\n  }\n\n  // ungrouped rules are rules that are in the \"default\" group name\n  const isUngrouped = group.name === 'default';\n  const groupName = isUngrouped ? (\n    <RuleLocation namespace={namespace.name} />\n  ) : (\n    <RuleLocation namespace={namespace.name} group={group.name} />\n  );\n\n  return (\n    <div className={styles.wrapper} data-testid=\"rule-group\">\n      <div className={styles.header} data-testid=\"rule-group-header\">\n        <CollapseToggle\n          className={styles.collapseToggle}\n          isCollapsed={isCollapsed}\n          onToggle={setIsCollapsed}\n          data-testid=\"group-collapse-toggle\"\n        />\n        <Icon name={isCollapsed ? 'folder' : 'folder-open'} />\n        {isCloudRulesSource(rulesSource) && (\n          <Tooltip content={rulesSource.name} placement=\"top\">\n            <img\n              alt={rulesSource.meta.name}\n              className={styles.dataSourceIcon}\n              src={rulesSource.meta.info.logos.small}\n            />\n          </Tooltip>\n        )}\n        <h6 className={styles.heading}>\n          {isFederated && <Badge color=\"purple\" text=\"Federated\" />} {groupName}\n        </h6>\n        <div className={styles.spacer} />\n        <div className={styles.headerStats}>\n          <RuleStats showInactive={false} group={group} />\n        </div>\n        {!!actionIcons.length && (\n          <>\n            <div className={styles.actionsSeparator}>|</div>\n            <div className={styles.actionIcons}>{actionIcons}</div>\n          </>\n        )}\n      </div>\n      {!isCollapsed && (\n        <RulesTable showSummaryColumn={true} className={styles.rulesTable} showGuidelines={true} rules={group.rules} />\n      )}\n      {isEditingGroup && (\n        <EditCloudGroupModal group={group} namespace={namespace} onClose={() => setIsEditingGroup(false)} />\n      )}\n      <ConfirmModal\n        isOpen={isDeletingGroup}\n        title=\"Delete group\"\n        body={\n          <div>\n            Deleting this group will permanently remove the group\n            <br />\n            and {group.rules.length} alert {pluralize('rule', group.rules.length)} belonging to it.\n            <br />\n            Are you sure you want to delete this group?\n          </div>\n        }\n        onConfirm={deleteGroup}\n        onDismiss={() => setIsDeletingGroup(false)}\n        confirmText=\"Delete\"\n      />\n    </div>\n  );\n});\n\nRulesGroup.displayName = 'RulesGroup';\n\nexport const getStyles = (theme: GrafanaTheme2) => ({\n  wrapper: css`\n    & + & {\n      margin-top: ${theme.spacing(2)};\n    }\n  `,\n  header: css`\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    padding: ${theme.spacing(1)} ${theme.spacing(1)} ${theme.spacing(1)} 0;\n    background-color: ${theme.colors.background.secondary};\n    flex-wrap: wrap;\n  `,\n  headerStats: css`\n    span {\n      vertical-align: middle;\n    }\n\n    ${theme.breakpoints.down('sm')} {\n      order: 2;\n      width: 100%;\n      padding-left: ${theme.spacing(1)};\n    }\n  `,\n  heading: css`\n    margin-left: ${theme.spacing(1)};\n    margin-bottom: 0;\n  `,\n  spacer: css`\n    flex: 1;\n  `,\n  collapseToggle: css`\n    background: none;\n    border: none;\n    margin-top: -${theme.spacing(1)};\n    margin-bottom: -${theme.spacing(1)};\n\n    svg {\n      margin-bottom: 0;\n    }\n  `,\n  dataSourceIcon: css`\n    width: ${theme.spacing(2)};\n    height: ${theme.spacing(2)};\n    margin-left: ${theme.spacing(2)};\n  `,\n  dataSourceOrigin: css`\n    margin-right: 1em;\n    color: ${theme.colors.text.disabled};\n  `,\n  actionsSeparator: css`\n    margin: 0 ${theme.spacing(2)};\n  `,\n  actionIcons: css`\n    & > * + * {\n      margin-left: ${theme.spacing(0.5)};\n    }\n  `,\n  rulesTable: css`\n    margin-top: ${theme.spacing(3)};\n  `,\n});\n","import { css } from '@emotion/css';\nimport pluralize from 'pluralize';\nimport React, { FC, useMemo } from 'react';\n\nimport { GrafanaTheme } from '@grafana/data';\nimport { LoadingPlaceholder, useStyles } from '@grafana/ui';\nimport { CombinedRuleNamespace } from 'app/types/unified-alerting';\n\nimport { useUnifiedAlertingSelector } from '../../hooks/useUnifiedAlertingSelector';\nimport { getRulesDataSources, getRulesSourceName } from '../../utils/datasource';\n\nimport { RulesGroup } from './RulesGroup';\n\ninterface Props {\n  namespaces: CombinedRuleNamespace[];\n  expandAll: boolean;\n}\n\nexport const CloudRules: FC<Props> = ({ namespaces, expandAll }) => {\n  const styles = useStyles(getStyles);\n  const rules = useUnifiedAlertingSelector((state) => state.promRules);\n  const rulesDataSources = useMemo(getRulesDataSources, []);\n\n  const dataSourcesLoading = useMemo(\n    () => rulesDataSources.filter((ds) => rules[ds.name]?.loading),\n    [rules, rulesDataSources]\n  );\n\n  return (\n    <section className={styles.wrapper}>\n      <div className={styles.sectionHeader}>\n        <h5>Mimir / Cortex / Loki</h5>\n        {dataSourcesLoading.length ? (\n          <LoadingPlaceholder\n            className={styles.loader}\n            text={`Loading rules from ${dataSourcesLoading.length} ${pluralize('source', dataSourcesLoading.length)}`}\n          />\n        ) : (\n          <div />\n        )}\n      </div>\n\n      {namespaces.map((namespace) => {\n        const { groups, rulesSource } = namespace;\n        return groups.map((group) => (\n          <RulesGroup\n            group={group}\n            key={`${getRulesSourceName(rulesSource)}-${name}-${group.name}`}\n            namespace={namespace}\n            expandAll={expandAll}\n          />\n        ));\n      })}\n      {namespaces?.length === 0 && !!rulesDataSources.length && <p>No rules found.</p>}\n      {!rulesDataSources.length && <p>There are no Prometheus or Loki datas sources configured.</p>}\n    </section>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme) => ({\n  loader: css`\n    margin-bottom: 0;\n  `,\n  sectionHeader: css`\n    display: flex;\n    justify-content: space-between;\n  `,\n  wrapper: css`\n    margin-bottom: ${theme.spacing.xl};\n  `,\n});\n","import { css } from '@emotion/css';\nimport React, { FC } from 'react';\n\nimport { GrafanaTheme } from '@grafana/data';\nimport { LoadingPlaceholder, useStyles } from '@grafana/ui';\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport { CombinedRuleNamespace } from 'app/types/unified-alerting';\n\nimport { flattenGrafanaManagedRules } from '../../hooks/useCombinedRuleNamespaces';\nimport { useUnifiedAlertingSelector } from '../../hooks/useUnifiedAlertingSelector';\nimport { GRAFANA_RULES_SOURCE_NAME } from '../../utils/datasource';\nimport { initialAsyncRequestState } from '../../utils/redux';\n\nimport { RulesGroup } from './RulesGroup';\n\ninterface Props {\n  namespaces: CombinedRuleNamespace[];\n  expandAll: boolean;\n}\n\nexport const GrafanaRules: FC<Props> = ({ namespaces, expandAll }) => {\n  const styles = useStyles(getStyles);\n  const [queryParams] = useQueryParams();\n\n  const { loading } = useUnifiedAlertingSelector(\n    (state) => state.promRules[GRAFANA_RULES_SOURCE_NAME] || initialAsyncRequestState\n  );\n\n  const wantsGroupedView = queryParams['view'] === 'grouped';\n  const namespacesFormat = wantsGroupedView ? namespaces : flattenGrafanaManagedRules(namespaces);\n\n  return (\n    <section className={styles.wrapper}>\n      <div className={styles.sectionHeader}>\n        <h5>Grafana</h5>\n        {loading ? <LoadingPlaceholder className={styles.loader} text=\"Loading...\" /> : <div />}\n      </div>\n\n      {namespacesFormat?.map((namespace) =>\n        namespace.groups.map((group) => (\n          <RulesGroup\n            group={group}\n            key={`${namespace.name}-${group.name}`}\n            namespace={namespace}\n            expandAll={expandAll}\n          />\n        ))\n      )}\n      {namespacesFormat?.length === 0 && <p>No rules found.</p>}\n    </section>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme) => ({\n  loader: css`\n    margin-bottom: 0;\n  `,\n  sectionHeader: css`\n    display: flex;\n    justify-content: space-between;\n  `,\n  wrapper: css`\n    margin-bottom: ${theme.spacing.xl};\n  `,\n});\n","import { css } from '@emotion/css';\nimport React, { FC, useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\nimport { CombinedRule } from 'app/types/unified-alerting';\nimport { PromAlertingRuleState } from 'app/types/unified-alerting-dto';\n\nimport { alertStateToReadable } from '../../utils/rules';\nimport { CollapseToggle } from '../CollapseToggle';\n\nimport { RulesTable } from './RulesTable';\n\ninterface Props {\n  rules: CombinedRule[];\n  state: PromAlertingRuleState;\n  defaultCollapsed?: boolean;\n}\n\nexport const RuleListStateSection: FC<Props> = ({ rules, state, defaultCollapsed = false }) => {\n  const [collapsed, setCollapsed] = useState(defaultCollapsed);\n  const styles = useStyles2(getStyles);\n  return (\n    <>\n      <h4 className={styles.header}>\n        <CollapseToggle\n          className={styles.collapseToggle}\n          size=\"xxl\"\n          isCollapsed={collapsed}\n          onToggle={() => setCollapsed(!collapsed)}\n        />\n        {alertStateToReadable(state)} ({rules.length})\n      </h4>\n      {!collapsed && <RulesTable className={styles.rulesTable} rules={rules} showGroupColumn={true} />}\n    </>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  collapseToggle: css`\n    vertical-align: middle;\n  `,\n  header: css`\n    margin-top: ${theme.spacing(2)};\n  `,\n  rulesTable: css`\n    margin-top: ${theme.spacing(3)};\n  `,\n});\n","import { css, cx } from '@emotion/css';\nimport { debounce } from 'lodash';\nimport React, { FormEvent, useState } from 'react';\n\nimport { DataSourceInstanceSettings, GrafanaTheme, SelectableValue } from '@grafana/data';\nimport { Stack } from '@grafana/experimental';\nimport { DataSourcePicker } from '@grafana/runtime';\nimport { Button, Field, Icon, Input, Label, RadioButtonGroup, Tooltip, useStyles } from '@grafana/ui';\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport { PromAlertingRuleState, PromRuleType } from 'app/types/unified-alerting-dto';\n\nimport { getFiltersFromUrlParams } from '../../utils/misc';\nimport { alertStateToReadable } from '../../utils/rules';\n\nconst ViewOptions: SelectableValue[] = [\n  {\n    icon: 'list-ul',\n    label: 'List',\n    value: 'list',\n  },\n  {\n    icon: 'folder',\n    label: 'Grouped',\n    value: 'grouped',\n  },\n  {\n    icon: 'heart-rate',\n    label: 'State',\n    value: 'state',\n  },\n];\n\nconst RuleTypeOptions: SelectableValue[] = [\n  {\n    label: 'Alert ',\n    value: PromRuleType.Alerting,\n  },\n  {\n    label: 'Recording ',\n    value: PromRuleType.Recording,\n  },\n];\n\nconst RulesFilter = () => {\n  const [queryParams, setQueryParams] = useQueryParams();\n  // This key is used to force a rerender on the inputs when the filters are cleared\n  const [filterKey, setFilterKey] = useState<number>(Math.floor(Math.random() * 100));\n  const dataSourceKey = `dataSource-${filterKey}`;\n  const queryStringKey = `queryString-${filterKey}`;\n\n  const { dataSource, alertState, queryString, ruleType } = getFiltersFromUrlParams(queryParams);\n\n  const styles = useStyles(getStyles);\n  const stateOptions = Object.entries(PromAlertingRuleState).map(([key, value]) => ({\n    label: alertStateToReadable(value),\n    value,\n  }));\n\n  const handleDataSourceChange = (dataSourceValue: DataSourceInstanceSettings) => {\n    setQueryParams({ dataSource: dataSourceValue.name });\n  };\n\n  const clearDataSource = () => {\n    setQueryParams({ dataSource: null });\n  };\n\n  const handleQueryStringChange = debounce((e: FormEvent<HTMLInputElement>) => {\n    const target = e.target as HTMLInputElement;\n    setQueryParams({ queryString: target.value || null });\n  }, 600);\n\n  const handleAlertStateChange = (value: string) => {\n    setQueryParams({ alertState: value });\n  };\n\n  const handleViewChange = (view: string) => {\n    setQueryParams({ view });\n  };\n\n  const handleRuleTypeChange = (ruleType: PromRuleType) => {\n    setQueryParams({ ruleType });\n  };\n\n  const handleClearFiltersClick = () => {\n    setQueryParams({\n      alertState: null,\n      queryString: null,\n      dataSource: null,\n      ruleType: null,\n    });\n    setTimeout(() => setFilterKey(filterKey + 1), 100);\n  };\n\n  const searchIcon = <Icon name={'search'} />;\n  return (\n    <div className={styles.container}>\n      <Field className={styles.inputWidth} label=\"Search by data source\">\n        <DataSourcePicker\n          key={dataSourceKey}\n          alerting\n          noDefault\n          placeholder=\"All data sources\"\n          current={dataSource}\n          onChange={handleDataSourceChange}\n          onClear={clearDataSource}\n        />\n      </Field>\n      <div className={cx(styles.flexRow, styles.spaceBetween)}>\n        <div className={styles.flexRow}>\n          <Field\n            className={styles.rowChild}\n            label={\n              <Label>\n                <Stack gap={0.5}>\n                  <span>Search by label</span>\n                  <Tooltip\n                    content={\n                      <div>\n                        Filter rules and alerts using label querying, ex:\n                        <code>{`{severity=\"critical\", instance=~\"cluster-us-.+\"}`}</code>\n                      </div>\n                    }\n                  >\n                    <Icon name=\"info-circle\" size=\"sm\" />\n                  </Tooltip>\n                </Stack>\n              </Label>\n            }\n          >\n            <Input\n              key={queryStringKey}\n              className={styles.inputWidth}\n              prefix={searchIcon}\n              onChange={handleQueryStringChange}\n              defaultValue={queryString}\n              placeholder=\"Search\"\n              data-testid=\"search-query-input\"\n            />\n          </Field>\n          <div className={styles.rowChild}>\n            <Label>State</Label>\n            <RadioButtonGroup options={stateOptions} value={alertState} onChange={handleAlertStateChange} />\n          </div>\n          <div className={styles.rowChild}>\n            <Label>Rule type</Label>\n            <RadioButtonGroup\n              options={RuleTypeOptions}\n              value={ruleType as PromRuleType}\n              onChange={handleRuleTypeChange}\n            />\n          </div>\n          <div className={styles.rowChild}>\n            <Label>View as</Label>\n            <RadioButtonGroup\n              options={ViewOptions}\n              value={String(queryParams['view'] ?? ViewOptions[0].value)}\n              onChange={handleViewChange}\n            />\n          </div>\n        </div>\n        {(dataSource || alertState || queryString || ruleType) && (\n          <div className={styles.flexRow}>\n            <Button\n              className={styles.clearButton}\n              fullWidth={false}\n              icon=\"times\"\n              variant=\"secondary\"\n              onClick={handleClearFiltersClick}\n            >\n              Clear filters\n            </Button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme) => {\n  return {\n    container: css`\n      display: flex;\n      flex-direction: column;\n      padding-bottom: ${theme.spacing.sm};\n      margin-bottom: ${theme.spacing.sm};\n    `,\n    inputWidth: css`\n      width: 340px;\n      flex-grow: 0;\n    `,\n    flexRow: css`\n      display: flex;\n      flex-direction: row;\n      align-items: flex-end;\n      width: 100%;\n      flex-wrap: wrap;\n    `,\n    spaceBetween: css`\n      justify-content: space-between;\n    `,\n    rowChild: css`\n      margin: 0 ${theme.spacing.sm} 0 0;\n    `,\n    clearButton: css`\n      margin-top: ${theme.spacing.sm};\n    `,\n  };\n};\n\nexport default RulesFilter;\n","import { useMemo } from 'react';\n\nimport { getDataSourceSrv } from '@grafana/runtime';\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport { CombinedRuleGroup, CombinedRuleNamespace, FilterState } from 'app/types/unified-alerting';\nimport { PromRuleType, RulerGrafanaRuleDTO } from 'app/types/unified-alerting-dto';\n\nimport { labelsMatchMatchers, parseMatchers } from '../utils/alertmanager';\nimport { isCloudRulesSource } from '../utils/datasource';\nimport { getFiltersFromUrlParams } from '../utils/misc';\nimport { isAlertingRule, isGrafanaRulerRule } from '../utils/rules';\n\nexport const useFilteredRules = (namespaces: CombinedRuleNamespace[]) => {\n  const [queryParams] = useQueryParams();\n  const filters = getFiltersFromUrlParams(queryParams);\n\n  return useMemo(() => {\n    const filteredNamespaces = namespaces\n      // Filter by data source\n      // TODO: filter by multiple data sources for grafana-managed alerts\n      .filter(({ rulesSource }) =>\n        filters.dataSource && isCloudRulesSource(rulesSource) ? rulesSource.name === filters.dataSource : true\n      )\n      // If a namespace and group have rules that match the rules filters then keep them.\n      .reduce(reduceNamespaces(filters), [] as CombinedRuleNamespace[]);\n    return filteredNamespaces;\n  }, [namespaces, filters]);\n};\n\nconst reduceNamespaces = (filters: FilterState) => {\n  return (namespaceAcc: CombinedRuleNamespace[], namespace: CombinedRuleNamespace) => {\n    const groups = namespace.groups.reduce(reduceGroups(filters), [] as CombinedRuleGroup[]);\n\n    if (groups.length) {\n      namespaceAcc.push({\n        ...namespace,\n        groups,\n      });\n    }\n\n    return namespaceAcc;\n  };\n};\n\n// Reduces groups to only groups that have rules matching the filters\nconst reduceGroups = (filters: FilterState) => {\n  return (groupAcc: CombinedRuleGroup[], group: CombinedRuleGroup) => {\n    const rules = group.rules.filter((rule) => {\n      if (filters.ruleType && filters.ruleType !== rule.promRule?.type) {\n        return false;\n      }\n      if (filters.dataSource && isGrafanaRulerRule(rule.rulerRule) && !isQueryingDataSource(rule.rulerRule, filters)) {\n        return false;\n      }\n      // Query strings can match alert name, label keys, and label values\n      if (filters.queryString) {\n        const normalizedQueryString = filters.queryString.toLocaleLowerCase();\n        const doesNameContainsQueryString = rule.name?.toLocaleLowerCase().includes(normalizedQueryString);\n        const matchers = parseMatchers(filters.queryString);\n\n        const doRuleLabelsMatchQuery = labelsMatchMatchers(rule.labels, matchers);\n        const doAlertsContainMatchingLabels =\n          rule.promRule &&\n          rule.promRule.type === PromRuleType.Alerting &&\n          rule.promRule.alerts &&\n          rule.promRule.alerts.some((alert) => labelsMatchMatchers(alert.labels, matchers));\n\n        if (!(doesNameContainsQueryString || doRuleLabelsMatchQuery || doAlertsContainMatchingLabels)) {\n          return false;\n        }\n      }\n      if (\n        filters.alertState &&\n        !(rule.promRule && isAlertingRule(rule.promRule) && rule.promRule.state === filters.alertState)\n      ) {\n        return false;\n      }\n      return true;\n    });\n    // Add rules to the group that match the rule list filters\n    if (rules.length) {\n      groupAcc.push({\n        ...group,\n        rules,\n      });\n    }\n    return groupAcc;\n  };\n};\n\nconst isQueryingDataSource = (rulerRule: RulerGrafanaRuleDTO, filter: FilterState): boolean => {\n  if (!filter.dataSource) {\n    return true;\n  }\n\n  return !!rulerRule.grafana_alert.data.find((query) => {\n    if (!query.datasourceUid) {\n      return false;\n    }\n    const ds = getDataSourceSrv().getInstanceSettings(query.datasourceUid);\n    return ds?.name === filter.dataSource;\n  });\n};\n","import { css } from '@emotion/css';\nimport React, { useEffect, useMemo, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useLocation } from 'react-router-dom';\n\nimport { GrafanaTheme2, urlUtil } from '@grafana/data';\nimport { Button, LinkButton, useStyles2, withErrorBoundary } from '@grafana/ui';\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\n\nimport { AlertingPageWrapper } from './components/AlertingPageWrapper';\nimport { NoRulesSplash } from './components/rules/NoRulesCTA';\nimport { RuleListErrors } from './components/rules/RuleListErrors';\nimport { RuleListGroupView } from './components/rules/RuleListGroupView';\nimport { RuleListStateView } from './components/rules/RuleListStateView';\nimport { RuleStats } from './components/rules/RuleStats';\nimport RulesFilter from './components/rules/RulesFilter';\nimport { useCombinedRuleNamespaces } from './hooks/useCombinedRuleNamespaces';\nimport { useFilteredRules } from './hooks/useFilteredRules';\nimport { useUnifiedAlertingSelector } from './hooks/useUnifiedAlertingSelector';\nimport { fetchAllPromAndRulerRulesAction } from './state/actions';\nimport { useRulesAccess } from './utils/accessControlHooks';\nimport { RULE_LIST_POLL_INTERVAL_MS } from './utils/constants';\nimport { getAllRulesSourceNames } from './utils/datasource';\nimport { getFiltersFromUrlParams } from './utils/misc';\n\nconst VIEWS = {\n  groups: RuleListGroupView,\n  state: RuleListStateView,\n};\n\nconst RuleList = withErrorBoundary(\n  () => {\n    const dispatch = useDispatch();\n    const styles = useStyles2(getStyles);\n    const rulesDataSourceNames = useMemo(getAllRulesSourceNames, []);\n    const location = useLocation();\n    const [expandAll, setExpandAll] = useState(false);\n\n    const [queryParams] = useQueryParams();\n    const filters = getFiltersFromUrlParams(queryParams);\n    const filtersActive = Object.values(filters).some((filter) => filter !== undefined);\n\n    const { canCreateGrafanaRules, canCreateCloudRules } = useRulesAccess();\n\n    const view = VIEWS[queryParams['view'] as keyof typeof VIEWS]\n      ? (queryParams['view'] as keyof typeof VIEWS)\n      : 'groups';\n\n    const ViewComponent = VIEWS[view];\n\n    // fetch rules, then poll every RULE_LIST_POLL_INTERVAL_MS\n    useEffect(() => {\n      dispatch(fetchAllPromAndRulerRulesAction());\n      const interval = setInterval(() => dispatch(fetchAllPromAndRulerRulesAction()), RULE_LIST_POLL_INTERVAL_MS);\n      return () => {\n        clearInterval(interval);\n      };\n    }, [dispatch]);\n\n    const promRuleRequests = useUnifiedAlertingSelector((state) => state.promRules);\n    const rulerRuleRequests = useUnifiedAlertingSelector((state) => state.rulerRules);\n\n    const dispatched = rulesDataSourceNames.some(\n      (name) => promRuleRequests[name]?.dispatched || rulerRuleRequests[name]?.dispatched\n    );\n    const loading = rulesDataSourceNames.some(\n      (name) => promRuleRequests[name]?.loading || rulerRuleRequests[name]?.loading\n    );\n    const haveResults = rulesDataSourceNames.some(\n      (name) =>\n        (promRuleRequests[name]?.result?.length && !promRuleRequests[name]?.error) ||\n        (Object.keys(rulerRuleRequests[name]?.result || {}).length && !rulerRuleRequests[name]?.error)\n    );\n\n    const showNewAlertSplash = dispatched && !loading && !haveResults;\n\n    const combinedNamespaces = useCombinedRuleNamespaces();\n    const filteredNamespaces = useFilteredRules(combinedNamespaces);\n    return (\n      <AlertingPageWrapper pageId=\"alert-list\" isLoading={loading && !haveResults}>\n        <RuleListErrors />\n        {!showNewAlertSplash && (\n          <>\n            <RulesFilter />\n            <div className={styles.break} />\n            <div className={styles.buttonsContainer}>\n              <div className={styles.statsContainer}>\n                {view === 'groups' && filtersActive && (\n                  <Button\n                    className={styles.expandAllButton}\n                    icon={expandAll ? 'angle-double-up' : 'angle-double-down'}\n                    variant=\"secondary\"\n                    onClick={() => setExpandAll(!expandAll)}\n                  >\n                    {expandAll ? 'Collapse all' : 'Expand all'}\n                  </Button>\n                )}\n                <RuleStats showInactive={true} showRecording={true} namespaces={filteredNamespaces} />\n              </div>\n              {(canCreateGrafanaRules || canCreateCloudRules) && (\n                <LinkButton\n                  href={urlUtil.renderUrl('alerting/new', { returnTo: location.pathname + location.search })}\n                  icon=\"plus\"\n                >\n                  New alert rule\n                </LinkButton>\n              )}\n            </div>\n          </>\n        )}\n        {showNewAlertSplash && <NoRulesSplash />}\n        {haveResults && <ViewComponent expandAll={expandAll} namespaces={filteredNamespaces} />}\n      </AlertingPageWrapper>\n    );\n  },\n  { style: 'page' }\n);\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  break: css`\n    width: 100%;\n    height: 0;\n    margin-bottom: ${theme.spacing(2)};\n    border-bottom: solid 1px ${theme.colors.border.medium};\n  `,\n  buttonsContainer: css`\n    margin-bottom: ${theme.spacing(2)};\n    display: flex;\n    justify-content: space-between;\n  `,\n  statsContainer: css`\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n  `,\n  expandAllButton: css`\n    margin-right: ${theme.spacing(1)};\n  `,\n});\n\nexport default RuleList;\n","import React, { FC, useMemo } from 'react';\n\nimport { AccessControlAction } from 'app/types';\nimport { CombinedRuleNamespace } from 'app/types/unified-alerting';\n\nimport { isCloudRulesSource, isGrafanaRulesSource } from '../../utils/datasource';\nimport { Authorize } from '../Authorize';\n\nimport { CloudRules } from './CloudRules';\nimport { GrafanaRules } from './GrafanaRules';\n\ninterface Props {\n  namespaces: CombinedRuleNamespace[];\n  expandAll: boolean;\n}\n\nexport const RuleListGroupView: FC<Props> = ({ namespaces, expandAll }) => {\n  const [grafanaNamespaces, cloudNamespaces] = useMemo(() => {\n    const sorted = namespaces\n      .map((namespace) => ({\n        ...namespace,\n        groups: namespace.groups.sort((a, b) => a.name.localeCompare(b.name)),\n      }))\n      .sort((a, b) => a.name.localeCompare(b.name));\n    return [\n      sorted.filter((ns) => isGrafanaRulesSource(ns.rulesSource)),\n      sorted.filter((ns) => isCloudRulesSource(ns.rulesSource)),\n    ];\n  }, [namespaces]);\n\n  return (\n    <>\n      <Authorize actions={[AccessControlAction.AlertingRuleRead]}>\n        <GrafanaRules namespaces={grafanaNamespaces} expandAll={expandAll} />\n      </Authorize>\n      <Authorize actions={[AccessControlAction.AlertingRuleExternalRead]}>\n        <CloudRules namespaces={cloudNamespaces} expandAll={expandAll} />\n      </Authorize>\n    </>\n  );\n};\n","import React, { FC, useMemo } from 'react';\n\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport { CombinedRule, CombinedRuleNamespace } from 'app/types/unified-alerting';\nimport { PromAlertingRuleState } from 'app/types/unified-alerting-dto';\n\nimport { getFiltersFromUrlParams } from '../../utils/misc';\nimport { isAlertingRule } from '../../utils/rules';\n\nimport { RuleListStateSection } from './RuleListStateSection';\n\ninterface Props {\n  namespaces: CombinedRuleNamespace[];\n  expandAll?: boolean;\n}\n\ntype GroupedRules = Record<PromAlertingRuleState, CombinedRule[]>;\n\nexport const RuleListStateView: FC<Props> = ({ namespaces }) => {\n  const filters = getFiltersFromUrlParams(useQueryParams()[0]);\n\n  const groupedRules = useMemo(() => {\n    const result: GroupedRules = {\n      [PromAlertingRuleState.Firing]: [],\n      [PromAlertingRuleState.Inactive]: [],\n      [PromAlertingRuleState.Pending]: [],\n    };\n\n    namespaces.forEach((namespace) =>\n      namespace.groups.forEach((group) =>\n        group.rules.forEach((rule) => {\n          if (rule.promRule && isAlertingRule(rule.promRule)) {\n            result[rule.promRule.state].push(rule);\n          }\n        })\n      )\n    );\n\n    Object.values(result).forEach((rules) => rules.sort((a, b) => a.name.localeCompare(b.name)));\n\n    return result;\n  }, [namespaces]);\n  return (\n    <>\n      {(!filters.alertState || filters.alertState === PromAlertingRuleState.Firing) && (\n        <RuleListStateSection state={PromAlertingRuleState.Firing} rules={groupedRules[PromAlertingRuleState.Firing]} />\n      )}\n      {(!filters.alertState || filters.alertState === PromAlertingRuleState.Pending) && (\n        <RuleListStateSection\n          state={PromAlertingRuleState.Pending}\n          rules={groupedRules[PromAlertingRuleState.Pending]}\n        />\n      )}\n      {(!filters.alertState || filters.alertState === PromAlertingRuleState.Inactive) && (\n        <RuleListStateSection\n          defaultCollapsed={filters.alertState !== PromAlertingRuleState.Inactive}\n          state={PromAlertingRuleState.Inactive}\n          rules={groupedRules[PromAlertingRuleState.Inactive]}\n        />\n      )}\n    </>\n  );\n};\n","import React, { FC } from 'react';\nimport { useSelector } from 'react-redux';\n\nimport Page from 'app/core/components/Page/Page';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { StoreState } from 'app/types/store';\n\ninterface Props {\n  pageId: string;\n  isLoading?: boolean;\n}\n\nexport const AlertingPageWrapper: FC<Props> = ({ children, pageId, isLoading }) => {\n  const navModel = getNavModel(\n    useSelector((state: StoreState) => state.navIndex),\n    pageId\n  );\n\n  return (\n    <Page navModel={navModel}>\n      <Page.Contents isLoading={isLoading}>{children}</Page.Contents>\n    </Page>\n  );\n};\n","import React, { FC } from 'react';\n\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { AccessControlAction } from 'app/types';\n\ntype Props = {\n  actions: AccessControlAction[];\n  fallback?: boolean;\n};\n\nexport const Authorize: FC<Props> = ({ actions, children, fallback = true }) => {\n  if (actions.some((action) => contextSrv.hasAccess(action, fallback))) {\n    return <>{children}</>;\n  } else {\n    return null;\n  }\n};\n","import { css, cx } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\n\nimport { DynamicTable, DynamicTableProps } from './DynamicTable';\n\nexport type DynamicTableWithGuidelinesProps<T> = Omit<DynamicTableProps<T>, 'renderPrefixHeader, renderPrefixCell'>;\n\n// DynamicTable, but renders visual guidelines on the left, for larger screen widths\nexport const DynamicTableWithGuidelines = <T extends object>({\n  renderExpandedContent,\n  ...props\n}: DynamicTableWithGuidelinesProps<T>) => {\n  const styles = useStyles2(getStyles);\n  return (\n    <DynamicTable\n      renderExpandedContent={\n        renderExpandedContent\n          ? (item, index, items) => (\n              <>\n                {!(index === items.length - 1) && <div className={cx(styles.contentGuideline, styles.guideline)} />}\n                {renderExpandedContent(item, index, items)}\n              </>\n            )\n          : undefined\n      }\n      renderPrefixHeader={() => (\n        <div className={styles.relative}>\n          <div className={cx(styles.headerGuideline, styles.guideline)} />\n        </div>\n      )}\n      renderPrefixCell={(_, index, items) => (\n        <div className={styles.relative}>\n          <div className={cx(styles.topGuideline, styles.guideline)} />\n          {!(index === items.length - 1) && <div className={cx(styles.bottomGuideline, styles.guideline)} />}\n        </div>\n      )}\n      {...props}\n    />\n  );\n};\n\nexport const getStyles = (theme: GrafanaTheme2) => ({\n  relative: css`\n    position: relative;\n    height: 100%;\n  `,\n  guideline: css`\n    left: -19px;\n    border-left: 1px solid ${theme.colors.border.medium};\n    position: absolute;\n\n    ${theme.breakpoints.down('md')} {\n      display: none;\n    }\n  `,\n  topGuideline: css`\n    width: 18px;\n    border-bottom: 1px solid ${theme.colors.border.medium};\n    top: 0;\n    bottom: 50%;\n  `,\n  bottomGuideline: css`\n    top: 50%;\n    bottom: 0;\n  `,\n  contentGuideline: css`\n    top: 0;\n    bottom: 0;\n    left: -49px !important;\n  `,\n  headerGuideline: css`\n    top: -25px;\n    bottom: 0;\n  `,\n});\n","import React, { FC } from 'react';\n\nimport { Icon } from '@grafana/ui';\n\ninterface RuleLocationProps {\n  namespace: string;\n  group?: string;\n}\n\nconst RuleLocation: FC<RuleLocationProps> = ({ namespace, group }) => {\n  if (!group) {\n    return <>{namespace}</>;\n  }\n\n  return (\n    <>\n      {namespace} <Icon name=\"angle-right\" /> {group}\n    </>\n  );\n};\n\nexport { RuleLocation };\n","import React, { FC } from 'react';\n\nimport { IconName, Tooltip, LinkButton, Button } from '@grafana/ui';\nimport { PopoverContent, TooltipPlacement } from '@grafana/ui/src/components/Tooltip';\n\ninterface Props {\n  tooltip: PopoverContent;\n  icon: IconName;\n  className?: string;\n  tooltipPlacement?: TooltipPlacement;\n  to?: string;\n  target?: string;\n  onClick?: () => void;\n  'data-testid'?: string;\n}\n\nexport const ActionIcon: FC<Props> = ({\n  tooltip,\n  icon,\n  to,\n  target,\n  onClick,\n  className,\n  tooltipPlacement = 'top',\n  ...rest\n}) => {\n  const ariaLabel = typeof tooltip === 'string' ? tooltip : undefined;\n\n  return (\n    <Tooltip content={tooltip} placement={tooltipPlacement}>\n      {to ? (\n        <LinkButton\n          variant=\"secondary\"\n          fill=\"text\"\n          icon={icon}\n          href={to}\n          size=\"sm\"\n          target={target}\n          {...rest}\n          aria-label={ariaLabel}\n        />\n      ) : (\n        <Button\n          className={className}\n          variant=\"secondary\"\n          fill=\"text\"\n          size=\"sm\"\n          icon={icon}\n          type=\"button\"\n          onClick={onClick}\n          {...rest}\n          aria-label={ariaLabel}\n        />\n      )}\n    </Tooltip>\n  );\n};\n","import { css } from '@emotion/css';\nimport React, { FC } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\nimport { CombinedRule } from 'app/types/unified-alerting';\n\nimport { AlertLabels } from '../AlertLabels';\nimport { DetailsField } from '../DetailsField';\n\nimport { RuleDetailsActionButtons } from './RuleDetailsActionButtons';\nimport { RuleDetailsAnnotations } from './RuleDetailsAnnotations';\nimport { RuleDetailsDataSources } from './RuleDetailsDataSources';\nimport { RuleDetailsExpression } from './RuleDetailsExpression';\nimport { RuleDetailsMatchingInstances } from './RuleDetailsMatchingInstances';\n\ninterface Props {\n  rule: CombinedRule;\n}\n\nexport const RuleDetails: FC<Props> = ({ rule }) => {\n  const styles = useStyles2(getStyles);\n  const {\n    promRule,\n    namespace: { rulesSource },\n  } = rule;\n\n  const annotations = Object.entries(rule.annotations).filter(([_, value]) => !!value.trim());\n\n  return (\n    <div>\n      <RuleDetailsActionButtons rule={rule} rulesSource={rulesSource} />\n      <div className={styles.wrapper}>\n        <div className={styles.leftSide}>\n          {!!rule.labels && !!Object.keys(rule.labels).length && (\n            <DetailsField label=\"Labels\" horizontal={true}>\n              <AlertLabels labels={rule.labels} />\n            </DetailsField>\n          )}\n          <RuleDetailsExpression rulesSource={rulesSource} rule={rule} annotations={annotations} />\n          <RuleDetailsAnnotations annotations={annotations} />\n        </div>\n        <div className={styles.rightSide}>\n          <RuleDetailsDataSources rulesSource={rulesSource} rule={rule} />\n        </div>\n      </div>\n      <RuleDetailsMatchingInstances promRule={promRule} />\n    </div>\n  );\n};\n\nexport const getStyles = (theme: GrafanaTheme2) => ({\n  wrapper: css`\n    display: flex;\n    flex-direction: row;\n    ${theme.breakpoints.down('md')} {\n      flex-direction: column;\n    }\n  `,\n  leftSide: css`\n    flex: 1;\n  `,\n  rightSide: css`\n    ${theme.breakpoints.up('md')} {\n      padding-left: 90px;\n      width: 300px;\n    }\n  `,\n});\n","import { css, cx } from '@emotion/css';\nimport React, { FC, useMemo } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\nimport { CombinedRule } from 'app/types/unified-alerting';\n\nimport { useHasRuler } from '../../hooks/useHasRuler';\nimport { Annotation } from '../../utils/constants';\nimport { DynamicTable, DynamicTableColumnProps, DynamicTableItemProps } from '../DynamicTable';\nimport { DynamicTableWithGuidelines } from '../DynamicTableWithGuidelines';\nimport { RuleLocation } from '../RuleLocation';\n\nimport { RuleDetails } from './RuleDetails';\nimport { RuleHealth } from './RuleHealth';\nimport { RuleState } from './RuleState';\n\ntype RuleTableColumnProps = DynamicTableColumnProps<CombinedRule>;\ntype RuleTableItemProps = DynamicTableItemProps<CombinedRule>;\n\ninterface Props {\n  rules: CombinedRule[];\n  showGuidelines?: boolean;\n  showGroupColumn?: boolean;\n  showSummaryColumn?: boolean;\n  emptyMessage?: string;\n  className?: string;\n}\n\nexport const RulesTable: FC<Props> = ({\n  rules,\n  className,\n  showGuidelines = false,\n  emptyMessage = 'No rules found.',\n  showGroupColumn = false,\n  showSummaryColumn = false,\n}) => {\n  const styles = useStyles2(getStyles);\n\n  const wrapperClass = cx(styles.wrapper, className, { [styles.wrapperMargin]: showGuidelines });\n\n  const items = useMemo((): RuleTableItemProps[] => {\n    const seenKeys: string[] = [];\n    return rules.map((rule, ruleIdx) => {\n      let key = JSON.stringify([rule.promRule?.type, rule.labels, rule.query, rule.name, rule.annotations]);\n      if (seenKeys.includes(key)) {\n        key += `-${ruleIdx}`;\n      }\n      seenKeys.push(key);\n      return {\n        id: key,\n        data: rule,\n      };\n    });\n  }, [rules]);\n\n  const columns = useColumns(showSummaryColumn, showGroupColumn);\n\n  if (!rules.length) {\n    return <div className={cx(wrapperClass, styles.emptyMessage)}>{emptyMessage}</div>;\n  }\n\n  const TableComponent = showGuidelines ? DynamicTableWithGuidelines : DynamicTable;\n\n  return (\n    <div className={wrapperClass} data-testid=\"rules-table\">\n      <TableComponent\n        cols={columns}\n        isExpandable={true}\n        items={items}\n        renderExpandedContent={({ data: rule }) => <RuleDetails rule={rule} />}\n      />\n    </div>\n  );\n};\n\nexport const getStyles = (theme: GrafanaTheme2) => ({\n  wrapperMargin: css`\n    ${theme.breakpoints.up('md')} {\n      margin-left: 36px;\n    }\n  `,\n  emptyMessage: css`\n    padding: ${theme.spacing(1)};\n  `,\n  wrapper: css`\n    width: auto;\n    background-color: ${theme.colors.background.secondary};\n    border-radius: ${theme.shape.borderRadius()};\n  `,\n});\n\nfunction useColumns(showSummaryColumn: boolean, showGroupColumn: boolean) {\n  const hasRuler = useHasRuler();\n\n  return useMemo((): RuleTableColumnProps[] => {\n    const columns: RuleTableColumnProps[] = [\n      {\n        id: 'state',\n        label: 'State',\n        // eslint-disable-next-line react/display-name\n        renderCell: ({ data: rule }) => {\n          const { namespace } = rule;\n          const { rulesSource } = namespace;\n          const { promRule, rulerRule } = rule;\n          const isDeleting = !!(hasRuler(rulesSource) && promRule && !rulerRule);\n          const isCreating = !!(hasRuler(rulesSource) && rulerRule && !promRule);\n          return <RuleState rule={rule} isDeleting={isDeleting} isCreating={isCreating} />;\n        },\n        size: '165px',\n      },\n      {\n        id: 'name',\n        label: 'Name',\n        // eslint-disable-next-line react/display-name\n        renderCell: ({ data: rule }) => rule.name,\n        size: 5,\n      },\n      {\n        id: 'health',\n        label: 'Health',\n        // eslint-disable-next-line react/display-name\n        renderCell: ({ data: { promRule } }) => (promRule ? <RuleHealth rule={promRule} /> : null),\n        size: '75px',\n      },\n    ];\n    if (showSummaryColumn) {\n      columns.push({\n        id: 'summary',\n        label: 'Summary',\n        // eslint-disable-next-line react/display-name\n        renderCell: ({ data: rule }) => rule.annotations[Annotation.summary] ?? '',\n        size: 5,\n      });\n    }\n    if (showGroupColumn) {\n      columns.push({\n        id: 'group',\n        label: 'Group',\n        // eslint-disable-next-line react/display-name\n        renderCell: ({ data: rule }) => {\n          const { namespace, group } = rule;\n          // ungrouped rules are rules that are in the \"default\" group name\n          const isUngrouped = group.name === 'default';\n          const groupName = isUngrouped ? (\n            <RuleLocation namespace={namespace.name} />\n          ) : (\n            <RuleLocation namespace={namespace.name} group={group.name} />\n          );\n\n          return groupName;\n        },\n        size: 5,\n      });\n    }\n    return columns;\n  }, [hasRuler, showSummaryColumn, showGroupColumn]);\n}\n","import { useCallback } from 'react';\n\nimport { RulesSource } from 'app/types/unified-alerting';\n\nimport { GRAFANA_RULES_SOURCE_NAME } from '../utils/datasource';\n\nimport { useUnifiedAlertingSelector } from './useUnifiedAlertingSelector';\n\n// datasource has ruler if it's grafana managed or if we're able to load rules from it\nexport function useHasRuler(): (rulesSource: string | RulesSource) => boolean {\n  const rulerRules = useUnifiedAlertingSelector((state) => state.rulerRules);\n  return useCallback(\n    (rulesSource: string | RulesSource) => {\n      const rulesSourceName = typeof rulesSource === 'string' ? rulesSource : rulesSource.name;\n      return rulesSourceName === GRAFANA_RULES_SOURCE_NAME || !!rulerRules[rulesSourceName]?.result;\n    },\n    [rulerRules]\n  );\n}\n","import { useMemo } from 'react';\n\nimport { getRulesAccess } from './access-control';\n\nexport function useRulesAccess() {\n  return useMemo(() => getRulesAccess(), []);\n}\n"],"names":["useCleanup","stateSelector","dispatch","useDispatch","selectorRef","useRef","current","useEffect","cleanUpAction","AlertHowToModal","onDismiss","Modal","title","isOpen","onClickBackdrop","VerticalGroup","spacing","src","alt","rule","search","onTogglePause","ruleUrl","url","panelId","renderText","useCallback","text","highlightClassName","textToHighlight","searchWords","Card","name","Icon","size","stateIcon","className","stateClass","stateText","stateAge","info","Button","variant","icon","state","onClick","LinkButton","href","UnifiedAlertingPromotion","showUnifiedAlertingPromotion","setShowUnifiedAlertingPromotion","useLocalStorage","Alert","severity","onRemove","getSearchQuery","searchQuery","getAlertRuleItems","regex","RegExp","alertRules","items","filter","item","test","mapDispatchToProps","getAlertRulesAsync","setSearchQuery","togglePauseAlertRule","connector","connect","navModel","getNavModel","navIndex","isLoading","AlertRuleListUnconnected","PureComponent","label","value","option","locationService","appEvents","ShowModalReactEvent","component","this","props","id","paused","componentDidMount","fetchRules","componentDidUpdate","prevProps","queryParams","getStateFilter","render","Page","FilterInput","placeholder","onChange","onSearchQueryChange","htmlFor","Select","inputId","menuShouldPortal","options","stateFilters","onStateFilterChanged","config","onOpenHowTo","map","async","loadAlertRules","rules","getBackendSrv","get","loadedAlertRules","post","toString","createNotificationChannel","data","notifyApp","createSuccessNotification","error","createErrorNotification","updateNotificationChannel","put","testNotificationChannel","getState","channel","notificationChannel","loadNotificationTypes","notificationTypes","sort","o1","o2","setNotificationChannels","loadNotificationChannel","notificationChannelLoaded","NoRulesSplash","canCreateGrafanaRules","canCreateCloudRules","useRulesAccess","EmptyListCTA","buttonIcon","buttonLink","buttonTitle","proTip","proTipLink","proTipLinkTitle","proTipTarget","CallToActionCard","message","callToActionElement","RuleListErrors","expanded","setExpanded","useState","closed","setClosed","dataSourceConfigRequests","useUnifiedAlertingSelector","dataSources","promRuleRequests","promRules","rulerRuleRequests","rulerRules","styles","useStyles2","getStyles","errors","useMemo","dataSourceConfigErrors","promRequestErrors","rulerRequestErrors","requests","getRulesDataSources","reduce","result","dataSource","isRulerNotSupportedResponse","grafanaPromError","GRAFANA_RULES_SOURCE_NAME","grafanaRulerError","push","forEach","uid","length","ErrorSummaryButton","count","idx","moreButton","fill","pluralize","floatRight","Tooltip","content","placement","theme","css","EditCloudGroupModal","namespace","group","onClose","loading","dispatched","updateLotexNamespaceAndGroup","initialAsyncRequestState","defaultValues","namespaceName","groupName","groupInterval","interval","unifiedAlerting","modal","Form","onSubmit","values","updateLotexNamespaceAndGroupAction","rulesSourceName","getRulesSourceName","rulesSource","newGroupName","newNamespaceName","undefined","register","formState","isDirty","Field","invalid","Input","required","pattern","durationValidationPattern","type","disabled","JSON","stringify","StateColoredText","children","status","PromAlertingRuleState","colors","success","warning","neutral","secondary","emptyStats","total","recording","RuleStats","showInactive","showRecording","namespaces","calculated","stats","calcRule","promRule","isAlertingRule","health","isRecordingRule","rulerRule","isRecordingRulerRule","groups","statsComponents","prev","curr","Fragment","RulesGroup","React","expandAll","isEditingGroup","setIsEditingGroup","isDeletingGroup","setIsDeletingGroup","isCollapsed","setIsCollapsed","canEditCloudRules","contextSrv","AccessControlAction","hasRuler","useHasRuler","folderUID","isGrafanaRulerRule","grafana_alert","namespace_uid","folder","useFolder","isDeleting","find","isFederated","isFederatedRuleGroup","actionIcons","HorizontalGroup","Spinner","baseUrl","kbn","canSave","ActionIcon","A","tooltip","to","target","canAdmin","RuleLocation","wrapper","header","CollapseToggle","collapseToggle","onToggle","isCloudRulesSource","meta","dataSourceIcon","logos","small","heading","Badge","color","spacer","headerStats","actionsSeparator","RulesTable","showSummaryColumn","rulesTable","showGuidelines","ConfirmModal","body","onConfirm","deleteRulesGroupAction","confirmText","displayName","background","breakpoints","down","dataSourceOrigin","CloudRules","useStyles","rulesDataSources","dataSourcesLoading","ds","sectionHeader","LoadingPlaceholder","loader","xl","GrafanaRules","useQueryParams","namespacesFormat","flattenGrafanaManagedRules","RuleListStateSection","defaultCollapsed","collapsed","setCollapsed","alertStateToReadable","showGroupColumn","ViewOptions","RuleTypeOptions","PromRuleType","container","sm","inputWidth","flexRow","spaceBetween","rowChild","clearButton","setQueryParams","filterKey","setFilterKey","Math","floor","random","dataSourceKey","queryStringKey","alertState","queryString","ruleType","getFiltersFromUrlParams","stateOptions","Object","entries","key","handleQueryStringChange","debounce","e","searchIcon","DataSourcePicker","alerting","noDefault","dataSourceValue","onClear","cx","Label","Stack","gap","prefix","defaultValue","RadioButtonGroup","String","view","fullWidth","setTimeout","reduceNamespaces","filters","namespaceAcc","reduceGroups","groupAcc","isQueryingDataSource","normalizedQueryString","toLocaleLowerCase","doesNameContainsQueryString","includes","matchers","parseMatchers","doRuleLabelsMatchQuery","labelsMatchMatchers","labels","doAlertsContainMatchingLabels","alerts","some","alert","query","datasourceUid","getDataSourceSrv","getInstanceSettings","VIEWS","grafanaNamespaces","cloudNamespaces","sorted","a","b","localeCompare","ns","isGrafanaRulesSource","Authorize","actions","groupedRules","RuleList","withErrorBoundary","rulesDataSourceNames","getAllRulesSourceNames","location","useLocation","setExpandAll","filtersActive","ViewComponent","fetchAllPromAndRulerRulesAction","setInterval","RULE_LIST_POLL_INTERVAL_MS","clearInterval","haveResults","keys","showNewAlertSplash","filteredNamespaces","useFilteredRules","useCombinedRuleNamespaces","AlertingPageWrapper","pageId","break","buttonsContainer","statsContainer","expandAllButton","urlUtil","returnTo","pathname","style","border","medium","useSelector","fallback","action","DynamicTableWithGuidelines","renderExpandedContent","index","contentGuideline","guideline","renderPrefixHeader","relative","headerGuideline","renderPrefixCell","_","topGuideline","bottomGuideline","tooltipPlacement","rest","ariaLabel","RuleDetails","annotations","trim","RuleDetailsActionButtons","leftSide","DetailsField","horizontal","AlertLabels","RuleDetailsExpression","RuleDetailsAnnotations","rightSide","RuleDetailsDataSources","RuleDetailsMatchingInstances","up","emptyMessage","wrapperClass","wrapperMargin","seenKeys","ruleIdx","columns","renderCell","isCreating","RuleState","RuleHealth","Annotation","useColumns","TableComponent","DynamicTable","cols","isExpandable","shape","borderRadius","getRulesAccess"],"sourceRoot":""}