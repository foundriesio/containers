{"version":3,"file":"FolderPermissions.a87fd0ce1ff28bec28a3.js","mappings":"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","sources":["webpack://grafana/./public/app/features/folders/AccessControlFolderPermissions.tsx","webpack://grafana/./public/app/features/folders/FolderPermissions.tsx"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { Permissions } from 'app/core/components/AccessControl';\nimport Page from 'app/core/components/Page/Page';\nimport { contextSrv } from 'app/core/core';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { AccessControlAction, StoreState } from 'app/types';\n\nimport { getFolderByUid } from './state/actions';\nimport { getLoadingNav } from './state/navModel';\n\ninterface RouteProps extends GrafanaRouteComponentProps<{ uid: string }> {}\n\nfunction mapStateToProps(state: StoreState, props: RouteProps) {\n  const uid = props.match.params.uid;\n  return {\n    uid: uid,\n    navModel: getNavModel(state.navIndex, `folder-permissions-${uid}`, getLoadingNav(1)),\n  };\n}\n\nconst mapDispatchToProps = {\n  getFolderByUid,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\nexport type Props = ConnectedProps<typeof connector>;\n\nexport const AccessControlFolderPermissions = ({ uid, getFolderByUid, navModel }: Props) => {\n  useEffect(() => {\n    getFolderByUid(uid);\n  }, [getFolderByUid, uid]);\n\n  const canListUsers = contextSrv.hasPermission(AccessControlAction.OrgUsersRead);\n  const canSetPermissions = contextSrv.hasPermission(AccessControlAction.FoldersPermissionsWrite);\n\n  return (\n    <Page navModel={navModel}>\n      <Page.Contents>\n        <Permissions\n          resource=\"folders\"\n          resourceId={uid}\n          canListUsers={canListUsers}\n          canSetPermissions={canSetPermissions}\n        />\n      </Page.Contents>\n    </Page>\n  );\n};\n\nexport default connector(AccessControlFolderPermissions);\n","import React, { PureComponent } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { Tooltip, Icon, Button } from '@grafana/ui';\nimport { SlideDown } from 'app/core/components/Animations/SlideDown';\nimport Page from 'app/core/components/Page/Page';\nimport AddPermission from 'app/core/components/PermissionList/AddPermission';\nimport PermissionList from 'app/core/components/PermissionList/PermissionList';\nimport PermissionsInfo from 'app/core/components/PermissionList/PermissionsInfo';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { StoreState } from 'app/types';\nimport { DashboardAcl, PermissionLevel, NewDashboardAclItem } from 'app/types/acl';\n\nimport {\n  getFolderByUid,\n  getFolderPermissions,\n  updateFolderPermission,\n  removeFolderPermission,\n  addFolderPermission,\n} from './state/actions';\nimport { getLoadingNav } from './state/navModel';\n\nexport interface OwnProps extends GrafanaRouteComponentProps<{ uid: string }> {}\n\nconst mapStateToProps = (state: StoreState, props: OwnProps) => {\n  const uid = props.match.params.uid;\n  return {\n    navModel: getNavModel(state.navIndex, `folder-permissions-${uid}`, getLoadingNav(1)),\n    folderUid: uid,\n    folder: state.folder,\n  };\n};\n\nconst mapDispatchToProps = {\n  getFolderByUid,\n  getFolderPermissions,\n  updateFolderPermission,\n  removeFolderPermission,\n  addFolderPermission,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport type Props = OwnProps & ConnectedProps<typeof connector>;\n\nexport interface State {\n  isAdding: boolean;\n}\n\nexport class FolderPermissions extends PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      isAdding: false,\n    };\n  }\n\n  componentDidMount() {\n    this.props.getFolderByUid(this.props.folderUid);\n    this.props.getFolderPermissions(this.props.folderUid);\n  }\n\n  onOpenAddPermissions = () => {\n    this.setState({ isAdding: true });\n  };\n\n  onRemoveItem = (item: DashboardAcl) => {\n    this.props.removeFolderPermission(item);\n  };\n\n  onPermissionChanged = (item: DashboardAcl, level: PermissionLevel) => {\n    this.props.updateFolderPermission(item, level);\n  };\n\n  onAddPermission = (newItem: NewDashboardAclItem) => {\n    return this.props.addFolderPermission(newItem);\n  };\n\n  onCancelAddPermission = () => {\n    this.setState({ isAdding: false });\n  };\n\n  render() {\n    const { navModel, folder } = this.props;\n    const { isAdding } = this.state;\n\n    if (folder.id === 0) {\n      return (\n        <Page navModel={navModel}>\n          <Page.Contents isLoading={true}>\n            <span />\n          </Page.Contents>\n        </Page>\n      );\n    }\n\n    const folderInfo = { title: folder.title, url: folder.url, id: folder.id };\n\n    return (\n      <Page navModel={navModel}>\n        <Page.Contents>\n          <div className=\"page-action-bar\">\n            <h3 className=\"page-sub-heading\">Folder Permissions</h3>\n            <Tooltip placement=\"auto\" content={<PermissionsInfo />}>\n              <Icon className=\"icon--has-hover page-sub-heading-icon\" name=\"question-circle\" />\n            </Tooltip>\n            <div className=\"page-action-bar__spacer\" />\n            <Button className=\"pull-right\" onClick={this.onOpenAddPermissions} disabled={isAdding}>\n              Add Permission\n            </Button>\n          </div>\n          <SlideDown in={isAdding}>\n            <AddPermission onAddPermission={this.onAddPermission} onCancel={this.onCancelAddPermission} />\n          </SlideDown>\n          <PermissionList\n            items={folder.permissions}\n            onRemoveItem={this.onRemoveItem}\n            onPermissionChanged={this.onPermissionChanged}\n            isFetching={false}\n            folderInfo={folderInfo}\n          />\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nexport default connector(FolderPermissions);\n"],"names":["mapDispatchToProps","getFolderByUid","connector","connect","state","props","uid","match","params","navModel","getNavModel","navIndex","getLoadingNav","AccessControlFolderPermissions","useEffect","canListUsers","contextSrv","AccessControlAction","canSetPermissions","P","resource","resourceId","getFolderPermissions","updateFolderPermission","removeFolderPermission","addFolderPermission","folderUid","folder","FolderPermissions","PureComponent","constructor","super","this","setState","isAdding","item","level","newItem","componentDidMount","render","id","isLoading","folderInfo","title","url","className","Tooltip","placement","content","Icon","name","Button","onClick","onOpenAddPermissions","disabled","in","onAddPermission","onCancel","onCancelAddPermission","items","permissions","onRemoveItem","onPermissionChanged","isFetching"],"sourceRoot":""}