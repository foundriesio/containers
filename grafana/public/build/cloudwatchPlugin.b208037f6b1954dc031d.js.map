{"version":3,"file":"cloudwatchPlugin.b208037f6b1954dc031d.js","mappings":"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","sources":["webpack://grafana/./public/app/plugins/datasource/cloudwatch/metric-math/language.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/annotations_query_ctrl.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/XrayLinkConfig.tsx","webpack://grafana/../../opt/drone/yarncache/common-tags-npm-1.8.2-2c30ba69b3-767a6255a8.zip/node_modules/common-tags/es/TemplateTag/TemplateTag.js","webpack://grafana/../../opt/drone/yarncache/common-tags-npm-1.8.2-2c30ba69b3-767a6255a8.zip/node_modules/common-tags/es/inlineArrayTransformer/inlineArrayTransformer.js","webpack://grafana/../../opt/drone/yarncache/common-tags-npm-1.8.2-2c30ba69b3-767a6255a8.zip/node_modules/common-tags/es/stripIndentTransformer/stripIndentTransformer.js","webpack://grafana/../../opt/drone/yarncache/common-tags-npm-1.8.2-2c30ba69b3-767a6255a8.zip/node_modules/common-tags/es/trimResultTransformer/trimResultTransformer.js","webpack://grafana/../../opt/drone/yarncache/common-tags-npm-1.8.2-2c30ba69b3-767a6255a8.zip/node_modules/common-tags/es/commaLists/commaLists.js","webpack://grafana/../../opt/drone/yarncache/common-tags-npm-1.8.2-2c30ba69b3-767a6255a8.zip/node_modules/common-tags/es/commaListsAnd/commaListsAnd.js","webpack://grafana/../../opt/drone/yarncache/common-tags-npm-1.8.2-2c30ba69b3-767a6255a8.zip/node_modules/common-tags/es/commaListsOr/commaListsOr.js","webpack://grafana/../../opt/drone/yarncache/common-tags-npm-1.8.2-2c30ba69b3-767a6255a8.zip/node_modules/common-tags/es/splitStringTransformer/splitStringTransformer.js","webpack://grafana/../../opt/drone/yarncache/common-tags-npm-1.8.2-2c30ba69b3-767a6255a8.zip/node_modules/common-tags/es/removeNonPrintingValuesTransformer/removeNonPrintingValuesTransformer.js","webpack://grafana/../../opt/drone/yarncache/common-tags-npm-1.8.2-2c30ba69b3-767a6255a8.zip/node_modules/common-tags/es/html/html.js","webpack://grafana/../../opt/drone/yarncache/common-tags-npm-1.8.2-2c30ba69b3-767a6255a8.zip/node_modules/common-tags/es/replaceSubstitutionTransformer/replaceSubstitutionTransformer.js","webpack://grafana/../../opt/drone/yarncache/common-tags-npm-1.8.2-2c30ba69b3-767a6255a8.zip/node_modules/common-tags/es/safeHtml/safeHtml.js","webpack://grafana/../../opt/drone/yarncache/common-tags-npm-1.8.2-2c30ba69b3-767a6255a8.zip/node_modules/common-tags/es/replaceResultTransformer/replaceResultTransformer.js","webpack://grafana/../../opt/drone/yarncache/common-tags-npm-1.8.2-2c30ba69b3-767a6255a8.zip/node_modules/common-tags/es/oneLine/oneLine.js","webpack://grafana/../../opt/drone/yarncache/common-tags-npm-1.8.2-2c30ba69b3-767a6255a8.zip/node_modules/common-tags/es/oneLineTrim/oneLineTrim.js","webpack://grafana/../../opt/drone/yarncache/common-tags-npm-1.8.2-2c30ba69b3-767a6255a8.zip/node_modules/common-tags/es/oneLineCommaLists/oneLineCommaLists.js","webpack://grafana/../../opt/drone/yarncache/common-tags-npm-1.8.2-2c30ba69b3-767a6255a8.zip/node_modules/common-tags/es/oneLineCommaListsOr/oneLineCommaListsOr.js","webpack://grafana/../../opt/drone/yarncache/common-tags-npm-1.8.2-2c30ba69b3-767a6255a8.zip/node_modules/common-tags/es/oneLineCommaListsAnd/oneLineCommaListsAnd.js","webpack://grafana/../../opt/drone/yarncache/common-tags-npm-1.8.2-2c30ba69b3-767a6255a8.zip/node_modules/common-tags/es/inlineLists/inlineLists.js","webpack://grafana/../../opt/drone/yarncache/common-tags-npm-1.8.2-2c30ba69b3-767a6255a8.zip/node_modules/common-tags/es/oneLineInlineLists/oneLineInlineLists.js","webpack://grafana/../../opt/drone/yarncache/common-tags-npm-1.8.2-2c30ba69b3-767a6255a8.zip/node_modules/common-tags/es/stripIndent/stripIndent.js","webpack://grafana/../../opt/drone/yarncache/common-tags-npm-1.8.2-2c30ba69b3-767a6255a8.zip/node_modules/common-tags/es/stripIndents/stripIndents.js","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/LogsCheatSheet.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/monarch/LinkedToken.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/monarch/types.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/monarch/CompletionItemProvider.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/monarch/linkedTokenBuilder.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/cloudwatch-sql/completion/types.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/cloudwatch-sql/completion/statementPosition.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/cloudwatch-sql/completion/suggestionKind.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/cloudwatch-sql/completion/tokenUtils.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/cloudwatch-sql/completion/CompletionItemProvider.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/ThrottlingErrorMessage.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/language_provider.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/memoizedDebounce.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/metric-math/completion/types.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/metric-math/completion/statementPosition.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/metric-math/completion/suggestionKind.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/metric-math/completion/CompletionItemProvider.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/utils/datalinks.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/utils/logsRetry.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/utils/rxjs/increasingInterval.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/VariableQueryEditor/VariableQueryField.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/VariableQueryEditor/VariableTextField.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/VariableQueryEditor/VariableQueryEditor.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/variables.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/datasource.ts","webpack://grafana/./public/app/plugins/datasource/cloudwatch/module.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/ConfigEditor.tsx","webpack://grafana/./public/app/plugins/datasource/cloudwatch/components/MetaInspector.tsx"],"sourcesContent":["import type * as monacoType from 'monaco-editor/esm/vs/editor/editor.api';\n\n// Metric Math: https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/using-metric-math.html\nexport const METRIC_MATH_FNS = [\n  'ABS',\n  'ANOMALY_DETECTION_BAND',\n  'AVG',\n  'CEIL',\n  'DATAPOINT_COUNT',\n  'DIFF',\n  'DIFF_TIME',\n  'FILL',\n  'FIRST',\n  'LAST',\n  'FLOOR',\n  'IF',\n  'INSIGHT_RULE_METRIC',\n  'LOG',\n  'LOG10',\n  'MAX',\n  'METRIC_COUNT',\n  'METRICS',\n  'MIN',\n  'MINUTE',\n  'HOUR',\n  'DAY',\n  'DATE',\n  'MONTH',\n  'YEAR',\n  'EPOCH',\n  'PERIOD',\n  'RATE',\n  'REMOVE_EMPTY',\n  'RUNNING_SUM',\n  'SEARCH',\n  'SERVICE_QUOTA',\n  'SLICE',\n  'SORT',\n  'STDDEV',\n  'SUM',\n  'TIME_SERIES',\n];\n\nexport const METRIC_MATH_STATISTIC_KEYWORD_STRINGS = ['Average', 'Maximum', 'Minimum', 'Sum', 'SampleCount']; // second arguments to SEARCH function\n\nexport const METRIC_MATH_KEYWORDS = ['REPEAT', 'LINEAR', 'ASC', 'DSC']; // standalone magic arguments to functions\n\nexport const METRIC_MATH_OPERATORS = [\n  '+',\n  '-',\n  '*',\n  '/',\n  '^',\n  '==',\n  '!=',\n  '<=',\n  '>=',\n  '<',\n  '>',\n  'AND',\n  '&&',\n  'OR',\n  '||',\n];\n\nexport const METRIC_MATH_PERIODS = [10, 60, 300, 900, 3000, 21600, 86400];\n\nexport const language: monacoType.languages.IMonarchLanguage = {\n  id: 'metricMath',\n  ignoreCase: false,\n  brackets: [\n    { open: '[', close: ']', token: 'delimiter.square' },\n    { open: '(', close: ')', token: 'delimiter.parenthesis' },\n    { open: '{', close: '}', token: 'delimiter.curly' },\n  ],\n  tokenizer: {\n    root: [{ include: '@nonNestableStates' }, { include: '@strings' }],\n    nonNestableStates: [\n      { include: '@variables' },\n      { include: '@whitespace' },\n      { include: '@numbers' },\n      { include: '@assignment' },\n      { include: '@keywords' },\n      { include: '@operators' },\n      { include: '@builtInFunctions' },\n      [/[;,.]/, 'delimiter'],\n      [/[(){}\\[\\]]/, '@brackets'], // [], (), {} are all brackets\n    ],\n    keywords: [[METRIC_MATH_KEYWORDS.map(escapeRegExp).join('|'), 'keyword']],\n    operators: [[METRIC_MATH_OPERATORS.map(escapeRegExp).join('|'), 'operator']],\n    builtInFunctions: [[METRIC_MATH_FNS.map(escapeRegExp).join('|'), 'predefined']],\n    variables: [\n      [/\\$[a-zA-Z0-9-_]+/, 'variable'], // $ followed by any letter/number we assume could be grafana template variable\n    ],\n    whitespace: [[/\\s+/, 'white']],\n    assignment: [[/=/, 'tag']],\n    numbers: [\n      [/0[xX][0-9a-fA-F]*/, 'number'],\n      [/[$][+-]*\\d*(\\.\\d*)?/, 'number'],\n      [/((\\d+(\\.\\d*)?)|(\\.\\d+))([eE][\\-+]?\\d+)?/, 'number'],\n    ],\n    // states that start other states (aka nested states):\n    strings: [\n      [/'/, { token: 'string', next: '@string' }],\n      [/\"/, { token: 'type', next: '@string_double' }],\n    ],\n    string: [\n      [/{/, { token: 'delimiter.curly', next: '@nestedCurly' }], // escape out of string and into nestedCurly\n      [/\\(/, { token: 'delimiter.parenthesis', next: '@nestedParens' }], // escape out of string and into nestedCurly\n      [/\"/, { token: 'type', next: '@string_double' }], // jump into double string\n      [/'/, { token: 'string', next: '@pop' }], // stop being a string\n      { include: '@nonNestableStates' },\n      [/[^']/, 'string'], // anything that is not a quote, is marked as string\n    ],\n    string_double: [\n      [/[^\"]/, 'type'], // mark anything not a quote as a \"type\" (different type of string for visual difference)\n      [/\"/, { token: 'type', next: '@pop' }], // mark also as a type and stop being in the double string state\n    ],\n    nestedCurly: [\n      [/}/, { token: 'delimiter.curly', next: '@pop' }], // escape out of string and into braces\n      [/'/, { token: 'string', next: '@string' }], // go to string if see start of string\n      [/\"/, { token: 'type', next: '@string_double' }], // go to string_double if see start of double string\n    ],\n    nestedParens: [\n      [/\\)/, { token: 'delimiter.parenthesis', next: '@pop' }], // escape out of string and into braces\n      [/'/, { token: 'string', next: '@string' }], // go to string if see start of string\n      [/\"/, { token: 'type', next: '@string_double' }], // go to string_double if see start of double string\n    ],\n  },\n};\n\nexport const conf: monacoType.languages.LanguageConfiguration = {\n  brackets: [\n    ['{', '}'],\n    ['[', ']'],\n    ['(', ')'],\n  ],\n  autoClosingPairs: [\n    { open: '{', close: '}' },\n    { open: '[', close: ']' },\n    { open: '(', close: ')' },\n    { open: '\"', close: '\"' },\n    { open: \"'\", close: \"'\" },\n  ],\n  surroundingPairs: [\n    { open: '{', close: '}' },\n    { open: '[', close: ']' },\n    { open: '(', close: ')' },\n    { open: '\"', close: '\"' },\n    { open: \"'\", close: \"'\" },\n  ],\n};\n\nfunction escapeRegExp(string: string) {\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& means the whole matched string\n}\n","import { defaultsDeep } from 'lodash';\n\nimport { CloudWatchAnnotationQuery } from './types';\n\nexport class CloudWatchAnnotationsQueryCtrl {\n  static templateUrl = 'partials/annotations.editor.html';\n  declare annotation: any;\n\n  /** @ngInject */\n  constructor($scope: any) {\n    this.annotation = $scope.ctrl.annotation;\n\n    defaultsDeep(this.annotation, {\n      namespace: '',\n      metricName: '',\n      expression: '',\n      dimensions: {},\n      region: 'default',\n      id: '',\n      alias: '',\n      statistic: 'Average',\n      matchExact: true,\n      prefixMatching: false,\n      actionPrefix: '',\n      alarmNamePrefix: '',\n    });\n\n    this.onChange = this.onChange.bind(this);\n  }\n\n  onChange(query: CloudWatchAnnotationQuery) {\n    Object.assign(this.annotation, query);\n  }\n}\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { DataSourcePicker } from '@grafana/runtime';\nimport { Alert, InlineField, useStyles2 } from '@grafana/ui';\nimport { getDatasourceSrv } from 'app/features/plugins/datasource_srv';\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  infoText: css`\n    padding-bottom: ${theme.spacing(2)};\n    color: ${theme.colors.text.secondary};\n  `,\n});\n\ninterface Props {\n  datasourceUid?: string;\n  onChange: (uid: string) => void;\n}\n\nconst xRayDsId = 'grafana-x-ray-datasource';\n\nexport function XrayLinkConfig({ datasourceUid, onChange }: Props) {\n  const hasXrayDatasource = Boolean(getDatasourceSrv().getList({ pluginId: xRayDsId }).length);\n\n  const styles = useStyles2(getStyles);\n\n  return (\n    <>\n      <h3 className=\"page-heading\">X-ray trace link</h3>\n\n      <div className={styles.infoText}>\n        Grafana will automatically create a link to a trace in X-ray data source if logs contain @xrayTraceId field\n      </div>\n\n      {!hasXrayDatasource && (\n        <Alert\n          title={\n            'There is no X-ray datasource to link to. First add an X-ray data source and then link it to Cloud Watch. '\n          }\n          severity=\"info\"\n        />\n      )}\n\n      <div className=\"gf-form-group\">\n        <InlineField\n          htmlFor=\"data-source-picker\"\n          label=\"Data source\"\n          labelWidth={28}\n          tooltip=\"X-ray data source containing traces\"\n        >\n          <DataSourcePicker\n            pluginId={xRayDsId}\n            onChange={(ds) => onChange(ds.uid)}\n            current={datasourceUid}\n            noDefault={true}\n          />\n        </InlineField>\n      </div>\n    </>\n  );\n}\n","var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _templateObject = _taggedTemplateLiteral(['', ''], ['', '']);\n\nfunction _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * @class TemplateTag\n * @classdesc Consumes a pipeline of composable transformer plugins and produces a template tag.\n */\nvar TemplateTag = function () {\n  /**\n   * constructs a template tag\n   * @constructs TemplateTag\n   * @param  {...Object} [...transformers] - an array or arguments list of transformers\n   * @return {Function}                    - a template tag\n   */\n  function TemplateTag() {\n    var _this = this;\n\n    for (var _len = arguments.length, transformers = Array(_len), _key = 0; _key < _len; _key++) {\n      transformers[_key] = arguments[_key];\n    }\n\n    _classCallCheck(this, TemplateTag);\n\n    this.tag = function (strings) {\n      for (var _len2 = arguments.length, expressions = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        expressions[_key2 - 1] = arguments[_key2];\n      }\n\n      if (typeof strings === 'function') {\n        // if the first argument passed is a function, assume it is a template tag and return\n        // an intermediary tag that processes the template using the aforementioned tag, passing the\n        // result to our tag\n        return _this.interimTag.bind(_this, strings);\n      }\n\n      if (typeof strings === 'string') {\n        // if the first argument passed is a string, just transform it\n        return _this.transformEndResult(strings);\n      }\n\n      // else, return a transformed end result of processing the template with our tag\n      strings = strings.map(_this.transformString.bind(_this));\n      return _this.transformEndResult(strings.reduce(_this.processSubstitutions.bind(_this, expressions)));\n    };\n\n    // if first argument is an array, extrude it as a list of transformers\n    if (transformers.length > 0 && Array.isArray(transformers[0])) {\n      transformers = transformers[0];\n    }\n\n    // if any transformers are functions, this means they are not initiated - automatically initiate them\n    this.transformers = transformers.map(function (transformer) {\n      return typeof transformer === 'function' ? transformer() : transformer;\n    });\n\n    // return an ES2015 template tag\n    return this.tag;\n  }\n\n  /**\n   * Applies all transformers to a template literal tagged with this method.\n   * If a function is passed as the first argument, assumes the function is a template tag\n   * and applies it to the template, returning a template tag.\n   * @param  {(Function|String|Array<String>)} strings        - Either a template tag or an array containing template strings separated by identifier\n   * @param  {...*}                            ...expressions - Optional list of substitution values.\n   * @return {(String|Function)}                              - Either an intermediary tag function or the results of processing the template.\n   */\n\n\n  _createClass(TemplateTag, [{\n    key: 'interimTag',\n\n\n    /**\n     * An intermediary template tag that receives a template tag and passes the result of calling the template with the received\n     * template tag to our own template tag.\n     * @param  {Function}        nextTag          - the received template tag\n     * @param  {Array<String>}   template         - the template to process\n     * @param  {...*}            ...substitutions - `substitutions` is an array of all substitutions in the template\n     * @return {*}                                - the final processed value\n     */\n    value: function interimTag(previousTag, template) {\n      for (var _len3 = arguments.length, substitutions = Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {\n        substitutions[_key3 - 2] = arguments[_key3];\n      }\n\n      return this.tag(_templateObject, previousTag.apply(undefined, [template].concat(substitutions)));\n    }\n\n    /**\n     * Performs bulk processing on the tagged template, transforming each substitution and then\n     * concatenating the resulting values into a string.\n     * @param  {Array<*>} substitutions - an array of all remaining substitutions present in this template\n     * @param  {String}   resultSoFar   - this iteration's result string so far\n     * @param  {String}   remainingPart - the template chunk after the current substitution\n     * @return {String}                 - the result of joining this iteration's processed substitution with the result\n     */\n\n  }, {\n    key: 'processSubstitutions',\n    value: function processSubstitutions(substitutions, resultSoFar, remainingPart) {\n      var substitution = this.transformSubstitution(substitutions.shift(), resultSoFar);\n      return ''.concat(resultSoFar, substitution, remainingPart);\n    }\n\n    /**\n     * Iterate through each transformer, applying the transformer's `onString` method to the template\n     * strings before all substitutions are processed.\n     * @param {String}  str - The input string\n     * @return {String}     - The final results of processing each transformer\n     */\n\n  }, {\n    key: 'transformString',\n    value: function transformString(str) {\n      var cb = function cb(res, transform) {\n        return transform.onString ? transform.onString(res) : res;\n      };\n      return this.transformers.reduce(cb, str);\n    }\n\n    /**\n     * When a substitution is encountered, iterates through each transformer and applies the transformer's\n     * `onSubstitution` method to the substitution.\n     * @param  {*}      substitution - The current substitution\n     * @param  {String} resultSoFar  - The result up to and excluding this substitution.\n     * @return {*}                   - The final result of applying all substitution transformations.\n     */\n\n  }, {\n    key: 'transformSubstitution',\n    value: function transformSubstitution(substitution, resultSoFar) {\n      var cb = function cb(res, transform) {\n        return transform.onSubstitution ? transform.onSubstitution(res, resultSoFar) : res;\n      };\n      return this.transformers.reduce(cb, substitution);\n    }\n\n    /**\n     * Iterates through each transformer, applying the transformer's `onEndResult` method to the\n     * template literal after all substitutions have finished processing.\n     * @param  {String} endResult - The processed template, just before it is returned from the tag\n     * @return {String}           - The final results of processing each transformer\n     */\n\n  }, {\n    key: 'transformEndResult',\n    value: function transformEndResult(endResult) {\n      var cb = function cb(res, transform) {\n        return transform.onEndResult ? transform.onEndResult(res) : res;\n      };\n      return this.transformers.reduce(cb, endResult);\n    }\n  }]);\n\n  return TemplateTag;\n}();\n\nexport default TemplateTag;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","var defaults = {\n  separator: '',\n  conjunction: '',\n  serial: false\n};\n\n/**\n * Converts an array substitution to a string containing a list\n * @param  {String} [opts.separator = ''] - the character that separates each item\n * @param  {String} [opts.conjunction = '']  - replace the last separator with this\n * @param  {Boolean} [opts.serial = false] - include the separator before the conjunction? (Oxford comma use-case)\n *\n * @return {Object}                     - a TemplateTag transformer\n */\nvar inlineArrayTransformer = function inlineArrayTransformer() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaults;\n  return {\n    onSubstitution: function onSubstitution(substitution, resultSoFar) {\n      // only operate on arrays\n      if (Array.isArray(substitution)) {\n        var arrayLength = substitution.length;\n        var separator = opts.separator;\n        var conjunction = opts.conjunction;\n        var serial = opts.serial;\n        // join each item in the array into a string where each item is separated by separator\n        // be sure to maintain indentation\n        var indent = resultSoFar.match(/(\\n?[^\\S\\n]+)$/);\n        if (indent) {\n          substitution = substitution.join(separator + indent[1]);\n        } else {\n          substitution = substitution.join(separator + ' ');\n        }\n        // if conjunction is set, replace the last separator with conjunction, but only if there is more than one substitution\n        if (conjunction && arrayLength > 1) {\n          var separatorIndex = substitution.lastIndexOf(separator);\n          substitution = substitution.slice(0, separatorIndex) + (serial ? separator : '') + ' ' + conjunction + substitution.slice(separatorIndex + 1);\n        }\n      }\n      return substitution;\n    }\n  };\n};\n\nexport default inlineArrayTransformer;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9pbmxpbmVBcnJheVRyYW5zZm9ybWVyL2lubGluZUFycmF5VHJhbnNmb3JtZXIuanMiXSwibmFtZXMiOlsiZGVmYXVsdHMiLCJzZXBhcmF0b3IiLCJjb25qdW5jdGlvbiIsInNlcmlhbCIsImlubGluZUFycmF5VHJhbnNmb3JtZXIiLCJvcHRzIiwib25TdWJzdGl0dXRpb24iLCJzdWJzdGl0dXRpb24iLCJyZXN1bHRTb0ZhciIsIkFycmF5IiwiaXNBcnJheSIsImFycmF5TGVuZ3RoIiwibGVuZ3RoIiwiaW5kZW50IiwibWF0Y2giLCJqb2luIiwic2VwYXJhdG9ySW5kZXgiLCJsYXN0SW5kZXhPZiIsInNsaWNlIl0sIm1hcHBpbmdzIjoiQUFBQSxJQUFNQSxXQUFXO0FBQ2ZDLGFBQVcsRUFESTtBQUVmQyxlQUFhLEVBRkU7QUFHZkMsVUFBUTtBQUhPLENBQWpCOztBQU1BOzs7Ozs7OztBQVFBLElBQU1DLHlCQUF5QixTQUF6QkEsc0JBQXlCO0FBQUEsTUFBQ0MsSUFBRCx1RUFBUUwsUUFBUjtBQUFBLFNBQXNCO0FBQ25ETSxrQkFEbUQsMEJBQ3BDQyxZQURvQyxFQUN0QkMsV0FEc0IsRUFDVDtBQUN4QztBQUNBLFVBQUlDLE1BQU1DLE9BQU4sQ0FBY0gsWUFBZCxDQUFKLEVBQWlDO0FBQy9CLFlBQU1JLGNBQWNKLGFBQWFLLE1BQWpDO0FBQ0EsWUFBTVgsWUFBWUksS0FBS0osU0FBdkI7QUFDQSxZQUFNQyxjQUFjRyxLQUFLSCxXQUF6QjtBQUNBLFlBQU1DLFNBQVNFLEtBQUtGLE1BQXBCO0FBQ0E7QUFDQTtBQUNBLFlBQU1VLFNBQVNMLFlBQVlNLEtBQVosQ0FBa0IsZ0JBQWxCLENBQWY7QUFDQSxZQUFJRCxNQUFKLEVBQVk7QUFDVk4seUJBQWVBLGFBQWFRLElBQWIsQ0FBa0JkLFlBQVlZLE9BQU8sQ0FBUCxDQUE5QixDQUFmO0FBQ0QsU0FGRCxNQUVPO0FBQ0xOLHlCQUFlQSxhQUFhUSxJQUFiLENBQWtCZCxZQUFZLEdBQTlCLENBQWY7QUFDRDtBQUNEO0FBQ0EsWUFBSUMsZUFBZVMsY0FBYyxDQUFqQyxFQUFvQztBQUNsQyxjQUFNSyxpQkFBaUJULGFBQWFVLFdBQWIsQ0FBeUJoQixTQUF6QixDQUF2QjtBQUNBTSx5QkFDRUEsYUFBYVcsS0FBYixDQUFtQixDQUFuQixFQUFzQkYsY0FBdEIsS0FDQ2IsU0FBU0YsU0FBVCxHQUFxQixFQUR0QixJQUVBLEdBRkEsR0FHQUMsV0FIQSxHQUlBSyxhQUFhVyxLQUFiLENBQW1CRixpQkFBaUIsQ0FBcEMsQ0FMRjtBQU1EO0FBQ0Y7QUFDRCxhQUFPVCxZQUFQO0FBQ0Q7QUE1QmtELEdBQXRCO0FBQUEsQ0FBL0I7O0FBK0JBLGVBQWVILHNCQUFmIiwiZmlsZSI6ImlubGluZUFycmF5VHJhbnNmb3JtZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBkZWZhdWx0cyA9IHtcbiAgc2VwYXJhdG9yOiAnJyxcbiAgY29uanVuY3Rpb246ICcnLFxuICBzZXJpYWw6IGZhbHNlLFxufTtcblxuLyoqXG4gKiBDb252ZXJ0cyBhbiBhcnJheSBzdWJzdGl0dXRpb24gdG8gYSBzdHJpbmcgY29udGFpbmluZyBhIGxpc3RcbiAqIEBwYXJhbSAge1N0cmluZ30gW29wdHMuc2VwYXJhdG9yID0gJyddIC0gdGhlIGNoYXJhY3RlciB0aGF0IHNlcGFyYXRlcyBlYWNoIGl0ZW1cbiAqIEBwYXJhbSAge1N0cmluZ30gW29wdHMuY29uanVuY3Rpb24gPSAnJ10gIC0gcmVwbGFjZSB0aGUgbGFzdCBzZXBhcmF0b3Igd2l0aCB0aGlzXG4gKiBAcGFyYW0gIHtCb29sZWFufSBbb3B0cy5zZXJpYWwgPSBmYWxzZV0gLSBpbmNsdWRlIHRoZSBzZXBhcmF0b3IgYmVmb3JlIHRoZSBjb25qdW5jdGlvbj8gKE94Zm9yZCBjb21tYSB1c2UtY2FzZSlcbiAqXG4gKiBAcmV0dXJuIHtPYmplY3R9ICAgICAgICAgICAgICAgICAgICAgLSBhIFRlbXBsYXRlVGFnIHRyYW5zZm9ybWVyXG4gKi9cbmNvbnN0IGlubGluZUFycmF5VHJhbnNmb3JtZXIgPSAob3B0cyA9IGRlZmF1bHRzKSA9PiAoe1xuICBvblN1YnN0aXR1dGlvbihzdWJzdGl0dXRpb24sIHJlc3VsdFNvRmFyKSB7XG4gICAgLy8gb25seSBvcGVyYXRlIG9uIGFycmF5c1xuICAgIGlmIChBcnJheS5pc0FycmF5KHN1YnN0aXR1dGlvbikpIHtcbiAgICAgIGNvbnN0IGFycmF5TGVuZ3RoID0gc3Vic3RpdHV0aW9uLmxlbmd0aDtcbiAgICAgIGNvbnN0IHNlcGFyYXRvciA9IG9wdHMuc2VwYXJhdG9yO1xuICAgICAgY29uc3QgY29uanVuY3Rpb24gPSBvcHRzLmNvbmp1bmN0aW9uO1xuICAgICAgY29uc3Qgc2VyaWFsID0gb3B0cy5zZXJpYWw7XG4gICAgICAvLyBqb2luIGVhY2ggaXRlbSBpbiB0aGUgYXJyYXkgaW50byBhIHN0cmluZyB3aGVyZSBlYWNoIGl0ZW0gaXMgc2VwYXJhdGVkIGJ5IHNlcGFyYXRvclxuICAgICAgLy8gYmUgc3VyZSB0byBtYWludGFpbiBpbmRlbnRhdGlvblxuICAgICAgY29uc3QgaW5kZW50ID0gcmVzdWx0U29GYXIubWF0Y2goLyhcXG4/W15cXFNcXG5dKykkLyk7XG4gICAgICBpZiAoaW5kZW50KSB7XG4gICAgICAgIHN1YnN0aXR1dGlvbiA9IHN1YnN0aXR1dGlvbi5qb2luKHNlcGFyYXRvciArIGluZGVudFsxXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdWJzdGl0dXRpb24gPSBzdWJzdGl0dXRpb24uam9pbihzZXBhcmF0b3IgKyAnICcpO1xuICAgICAgfVxuICAgICAgLy8gaWYgY29uanVuY3Rpb24gaXMgc2V0LCByZXBsYWNlIHRoZSBsYXN0IHNlcGFyYXRvciB3aXRoIGNvbmp1bmN0aW9uLCBidXQgb25seSBpZiB0aGVyZSBpcyBtb3JlIHRoYW4gb25lIHN1YnN0aXR1dGlvblxuICAgICAgaWYgKGNvbmp1bmN0aW9uICYmIGFycmF5TGVuZ3RoID4gMSkge1xuICAgICAgICBjb25zdCBzZXBhcmF0b3JJbmRleCA9IHN1YnN0aXR1dGlvbi5sYXN0SW5kZXhPZihzZXBhcmF0b3IpO1xuICAgICAgICBzdWJzdGl0dXRpb24gPVxuICAgICAgICAgIHN1YnN0aXR1dGlvbi5zbGljZSgwLCBzZXBhcmF0b3JJbmRleCkgK1xuICAgICAgICAgIChzZXJpYWwgPyBzZXBhcmF0b3IgOiAnJykgK1xuICAgICAgICAgICcgJyArXG4gICAgICAgICAgY29uanVuY3Rpb24gK1xuICAgICAgICAgIHN1YnN0aXR1dGlvbi5zbGljZShzZXBhcmF0b3JJbmRleCArIDEpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gc3Vic3RpdHV0aW9uO1xuICB9LFxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IGlubGluZUFycmF5VHJhbnNmb3JtZXI7XG4iXX0=","function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\n/**\n * strips indentation from a template literal\n * @param  {String} type = 'initial' - whether to remove all indentation or just leading indentation. can be 'all' or 'initial'\n * @return {Object}                  - a TemplateTag transformer\n */\nvar stripIndentTransformer = function stripIndentTransformer() {\n  var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'initial';\n  return {\n    onEndResult: function onEndResult(endResult) {\n      if (type === 'initial') {\n        // remove the shortest leading indentation from each line\n        var match = endResult.match(/^[^\\S\\n]*(?=\\S)/gm);\n        var indent = match && Math.min.apply(Math, _toConsumableArray(match.map(function (el) {\n          return el.length;\n        })));\n        if (indent) {\n          var regexp = new RegExp('^.{' + indent + '}', 'gm');\n          return endResult.replace(regexp, '');\n        }\n        return endResult;\n      }\n      if (type === 'all') {\n        // remove all indentation from each line\n        return endResult.replace(/^[^\\S\\n]+/gm, '');\n      }\n      throw new Error('Unknown type: ' + type);\n    }\n  };\n};\n\nexport default stripIndentTransformer;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zdHJpcEluZGVudFRyYW5zZm9ybWVyL3N0cmlwSW5kZW50VHJhbnNmb3JtZXIuanMiXSwibmFtZXMiOlsic3RyaXBJbmRlbnRUcmFuc2Zvcm1lciIsInR5cGUiLCJvbkVuZFJlc3VsdCIsImVuZFJlc3VsdCIsIm1hdGNoIiwiaW5kZW50IiwiTWF0aCIsIm1pbiIsIm1hcCIsImVsIiwibGVuZ3RoIiwicmVnZXhwIiwiUmVnRXhwIiwicmVwbGFjZSIsIkVycm9yIl0sIm1hcHBpbmdzIjoiOztBQUFBOzs7OztBQUtBLElBQU1BLHlCQUF5QixTQUF6QkEsc0JBQXlCO0FBQUEsTUFBQ0MsSUFBRCx1RUFBUSxTQUFSO0FBQUEsU0FBdUI7QUFDcERDLGVBRG9ELHVCQUN4Q0MsU0FEd0MsRUFDN0I7QUFDckIsVUFBSUYsU0FBUyxTQUFiLEVBQXdCO0FBQ3RCO0FBQ0EsWUFBTUcsUUFBUUQsVUFBVUMsS0FBVixDQUFnQixtQkFBaEIsQ0FBZDtBQUNBLFlBQU1DLFNBQVNELFNBQVNFLEtBQUtDLEdBQUwsZ0NBQVlILE1BQU1JLEdBQU4sQ0FBVTtBQUFBLGlCQUFNQyxHQUFHQyxNQUFUO0FBQUEsU0FBVixDQUFaLEVBQXhCO0FBQ0EsWUFBSUwsTUFBSixFQUFZO0FBQ1YsY0FBTU0sU0FBUyxJQUFJQyxNQUFKLFNBQWlCUCxNQUFqQixRQUE0QixJQUE1QixDQUFmO0FBQ0EsaUJBQU9GLFVBQVVVLE9BQVYsQ0FBa0JGLE1BQWxCLEVBQTBCLEVBQTFCLENBQVA7QUFDRDtBQUNELGVBQU9SLFNBQVA7QUFDRDtBQUNELFVBQUlGLFNBQVMsS0FBYixFQUFvQjtBQUNsQjtBQUNBLGVBQU9FLFVBQVVVLE9BQVYsQ0FBa0IsYUFBbEIsRUFBaUMsRUFBakMsQ0FBUDtBQUNEO0FBQ0QsWUFBTSxJQUFJQyxLQUFKLG9CQUEyQmIsSUFBM0IsQ0FBTjtBQUNEO0FBakJtRCxHQUF2QjtBQUFBLENBQS9COztBQW9CQSxlQUFlRCxzQkFBZiIsImZpbGUiOiJzdHJpcEluZGVudFRyYW5zZm9ybWVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBzdHJpcHMgaW5kZW50YXRpb24gZnJvbSBhIHRlbXBsYXRlIGxpdGVyYWxcbiAqIEBwYXJhbSAge1N0cmluZ30gdHlwZSA9ICdpbml0aWFsJyAtIHdoZXRoZXIgdG8gcmVtb3ZlIGFsbCBpbmRlbnRhdGlvbiBvciBqdXN0IGxlYWRpbmcgaW5kZW50YXRpb24uIGNhbiBiZSAnYWxsJyBvciAnaW5pdGlhbCdcbiAqIEByZXR1cm4ge09iamVjdH0gICAgICAgICAgICAgICAgICAtIGEgVGVtcGxhdGVUYWcgdHJhbnNmb3JtZXJcbiAqL1xuY29uc3Qgc3RyaXBJbmRlbnRUcmFuc2Zvcm1lciA9ICh0eXBlID0gJ2luaXRpYWwnKSA9PiAoe1xuICBvbkVuZFJlc3VsdChlbmRSZXN1bHQpIHtcbiAgICBpZiAodHlwZSA9PT0gJ2luaXRpYWwnKSB7XG4gICAgICAvLyByZW1vdmUgdGhlIHNob3J0ZXN0IGxlYWRpbmcgaW5kZW50YXRpb24gZnJvbSBlYWNoIGxpbmVcbiAgICAgIGNvbnN0IG1hdGNoID0gZW5kUmVzdWx0Lm1hdGNoKC9eW15cXFNcXG5dKig/PVxcUykvZ20pO1xuICAgICAgY29uc3QgaW5kZW50ID0gbWF0Y2ggJiYgTWF0aC5taW4oLi4ubWF0Y2gubWFwKGVsID0+IGVsLmxlbmd0aCkpO1xuICAgICAgaWYgKGluZGVudCkge1xuICAgICAgICBjb25zdCByZWdleHAgPSBuZXcgUmVnRXhwKGBeLnske2luZGVudH19YCwgJ2dtJyk7XG4gICAgICAgIHJldHVybiBlbmRSZXN1bHQucmVwbGFjZShyZWdleHAsICcnKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBlbmRSZXN1bHQ7XG4gICAgfVxuICAgIGlmICh0eXBlID09PSAnYWxsJykge1xuICAgICAgLy8gcmVtb3ZlIGFsbCBpbmRlbnRhdGlvbiBmcm9tIGVhY2ggbGluZVxuICAgICAgcmV0dXJuIGVuZFJlc3VsdC5yZXBsYWNlKC9eW15cXFNcXG5dKy9nbSwgJycpO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoYFVua25vd24gdHlwZTogJHt0eXBlfWApO1xuICB9LFxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IHN0cmlwSW5kZW50VHJhbnNmb3JtZXI7XG4iXX0=","/**\n * TemplateTag transformer that trims whitespace on the end result of a tagged template\n * @param  {String} side = '' - The side of the string to trim. Can be 'start' or 'end' (alternatively 'left' or 'right')\n * @return {Object}           - a TemplateTag transformer\n */\nvar trimResultTransformer = function trimResultTransformer() {\n  var side = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  return {\n    onEndResult: function onEndResult(endResult) {\n      if (side === '') {\n        return endResult.trim();\n      }\n\n      side = side.toLowerCase();\n\n      if (side === 'start' || side === 'left') {\n        return endResult.replace(/^\\s*/, '');\n      }\n\n      if (side === 'end' || side === 'right') {\n        return endResult.replace(/\\s*$/, '');\n      }\n\n      throw new Error('Side not supported: ' + side);\n    }\n  };\n};\n\nexport default trimResultTransformer;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy90cmltUmVzdWx0VHJhbnNmb3JtZXIvdHJpbVJlc3VsdFRyYW5zZm9ybWVyLmpzIl0sIm5hbWVzIjpbInRyaW1SZXN1bHRUcmFuc2Zvcm1lciIsInNpZGUiLCJvbkVuZFJlc3VsdCIsImVuZFJlc3VsdCIsInRyaW0iLCJ0b0xvd2VyQ2FzZSIsInJlcGxhY2UiLCJFcnJvciJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7O0FBS0EsSUFBTUEsd0JBQXdCLFNBQXhCQSxxQkFBd0I7QUFBQSxNQUFDQyxJQUFELHVFQUFRLEVBQVI7QUFBQSxTQUFnQjtBQUM1Q0MsZUFENEMsdUJBQ2hDQyxTQURnQyxFQUNyQjtBQUNyQixVQUFJRixTQUFTLEVBQWIsRUFBaUI7QUFDZixlQUFPRSxVQUFVQyxJQUFWLEVBQVA7QUFDRDs7QUFFREgsYUFBT0EsS0FBS0ksV0FBTCxFQUFQOztBQUVBLFVBQUlKLFNBQVMsT0FBVCxJQUFvQkEsU0FBUyxNQUFqQyxFQUF5QztBQUN2QyxlQUFPRSxVQUFVRyxPQUFWLENBQWtCLE1BQWxCLEVBQTBCLEVBQTFCLENBQVA7QUFDRDs7QUFFRCxVQUFJTCxTQUFTLEtBQVQsSUFBa0JBLFNBQVMsT0FBL0IsRUFBd0M7QUFDdEMsZUFBT0UsVUFBVUcsT0FBVixDQUFrQixNQUFsQixFQUEwQixFQUExQixDQUFQO0FBQ0Q7O0FBRUQsWUFBTSxJQUFJQyxLQUFKLDBCQUFpQ04sSUFBakMsQ0FBTjtBQUNEO0FBakIyQyxHQUFoQjtBQUFBLENBQTlCOztBQW9CQSxlQUFlRCxxQkFBZiIsImZpbGUiOiJ0cmltUmVzdWx0VHJhbnNmb3JtZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFRlbXBsYXRlVGFnIHRyYW5zZm9ybWVyIHRoYXQgdHJpbXMgd2hpdGVzcGFjZSBvbiB0aGUgZW5kIHJlc3VsdCBvZiBhIHRhZ2dlZCB0ZW1wbGF0ZVxuICogQHBhcmFtICB7U3RyaW5nfSBzaWRlID0gJycgLSBUaGUgc2lkZSBvZiB0aGUgc3RyaW5nIHRvIHRyaW0uIENhbiBiZSAnc3RhcnQnIG9yICdlbmQnIChhbHRlcm5hdGl2ZWx5ICdsZWZ0JyBvciAncmlnaHQnKVxuICogQHJldHVybiB7T2JqZWN0fSAgICAgICAgICAgLSBhIFRlbXBsYXRlVGFnIHRyYW5zZm9ybWVyXG4gKi9cbmNvbnN0IHRyaW1SZXN1bHRUcmFuc2Zvcm1lciA9IChzaWRlID0gJycpID0+ICh7XG4gIG9uRW5kUmVzdWx0KGVuZFJlc3VsdCkge1xuICAgIGlmIChzaWRlID09PSAnJykge1xuICAgICAgcmV0dXJuIGVuZFJlc3VsdC50cmltKCk7XG4gICAgfVxuXG4gICAgc2lkZSA9IHNpZGUudG9Mb3dlckNhc2UoKTtcblxuICAgIGlmIChzaWRlID09PSAnc3RhcnQnIHx8IHNpZGUgPT09ICdsZWZ0Jykge1xuICAgICAgcmV0dXJuIGVuZFJlc3VsdC5yZXBsYWNlKC9eXFxzKi8sICcnKTtcbiAgICB9XG5cbiAgICBpZiAoc2lkZSA9PT0gJ2VuZCcgfHwgc2lkZSA9PT0gJ3JpZ2h0Jykge1xuICAgICAgcmV0dXJuIGVuZFJlc3VsdC5yZXBsYWNlKC9cXHMqJC8sICcnKTtcbiAgICB9XG5cbiAgICB0aHJvdyBuZXcgRXJyb3IoYFNpZGUgbm90IHN1cHBvcnRlZDogJHtzaWRlfWApO1xuICB9LFxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IHRyaW1SZXN1bHRUcmFuc2Zvcm1lcjtcbiJdfQ==","import TemplateTag from '../TemplateTag';\nimport stripIndentTransformer from '../stripIndentTransformer';\nimport inlineArrayTransformer from '../inlineArrayTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\n\nvar commaLists = new TemplateTag(inlineArrayTransformer({ separator: ',' }), stripIndentTransformer, trimResultTransformer);\n\nexport default commaLists;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb21tYUxpc3RzL2NvbW1hTGlzdHMuanMiXSwibmFtZXMiOlsiVGVtcGxhdGVUYWciLCJzdHJpcEluZGVudFRyYW5zZm9ybWVyIiwiaW5saW5lQXJyYXlUcmFuc2Zvcm1lciIsInRyaW1SZXN1bHRUcmFuc2Zvcm1lciIsImNvbW1hTGlzdHMiLCJzZXBhcmF0b3IiXSwibWFwcGluZ3MiOiJBQUFBLE9BQU9BLFdBQVAsTUFBd0IsZ0JBQXhCO0FBQ0EsT0FBT0Msc0JBQVAsTUFBbUMsMkJBQW5DO0FBQ0EsT0FBT0Msc0JBQVAsTUFBbUMsMkJBQW5DO0FBQ0EsT0FBT0MscUJBQVAsTUFBa0MsMEJBQWxDOztBQUVBLElBQU1DLGFBQWEsSUFBSUosV0FBSixDQUNqQkUsdUJBQXVCLEVBQUVHLFdBQVcsR0FBYixFQUF2QixDQURpQixFQUVqQkosc0JBRmlCLEVBR2pCRSxxQkFIaUIsQ0FBbkI7O0FBTUEsZUFBZUMsVUFBZiIsImZpbGUiOiJjb21tYUxpc3RzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFRlbXBsYXRlVGFnIGZyb20gJy4uL1RlbXBsYXRlVGFnJztcbmltcG9ydCBzdHJpcEluZGVudFRyYW5zZm9ybWVyIGZyb20gJy4uL3N0cmlwSW5kZW50VHJhbnNmb3JtZXInO1xuaW1wb3J0IGlubGluZUFycmF5VHJhbnNmb3JtZXIgZnJvbSAnLi4vaW5saW5lQXJyYXlUcmFuc2Zvcm1lcic7XG5pbXBvcnQgdHJpbVJlc3VsdFRyYW5zZm9ybWVyIGZyb20gJy4uL3RyaW1SZXN1bHRUcmFuc2Zvcm1lcic7XG5cbmNvbnN0IGNvbW1hTGlzdHMgPSBuZXcgVGVtcGxhdGVUYWcoXG4gIGlubGluZUFycmF5VHJhbnNmb3JtZXIoeyBzZXBhcmF0b3I6ICcsJyB9KSxcbiAgc3RyaXBJbmRlbnRUcmFuc2Zvcm1lcixcbiAgdHJpbVJlc3VsdFRyYW5zZm9ybWVyLFxuKTtcblxuZXhwb3J0IGRlZmF1bHQgY29tbWFMaXN0cztcbiJdfQ==","import TemplateTag from '../TemplateTag';\nimport stripIndentTransformer from '../stripIndentTransformer';\nimport inlineArrayTransformer from '../inlineArrayTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\n\nvar commaListsAnd = new TemplateTag(inlineArrayTransformer({ separator: ',', conjunction: 'and' }), stripIndentTransformer, trimResultTransformer);\n\nexport default commaListsAnd;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb21tYUxpc3RzQW5kL2NvbW1hTGlzdHNBbmQuanMiXSwibmFtZXMiOlsiVGVtcGxhdGVUYWciLCJzdHJpcEluZGVudFRyYW5zZm9ybWVyIiwiaW5saW5lQXJyYXlUcmFuc2Zvcm1lciIsInRyaW1SZXN1bHRUcmFuc2Zvcm1lciIsImNvbW1hTGlzdHNBbmQiLCJzZXBhcmF0b3IiLCJjb25qdW5jdGlvbiJdLCJtYXBwaW5ncyI6IkFBQUEsT0FBT0EsV0FBUCxNQUF3QixnQkFBeEI7QUFDQSxPQUFPQyxzQkFBUCxNQUFtQywyQkFBbkM7QUFDQSxPQUFPQyxzQkFBUCxNQUFtQywyQkFBbkM7QUFDQSxPQUFPQyxxQkFBUCxNQUFrQywwQkFBbEM7O0FBRUEsSUFBTUMsZ0JBQWdCLElBQUlKLFdBQUosQ0FDcEJFLHVCQUF1QixFQUFFRyxXQUFXLEdBQWIsRUFBa0JDLGFBQWEsS0FBL0IsRUFBdkIsQ0FEb0IsRUFFcEJMLHNCQUZvQixFQUdwQkUscUJBSG9CLENBQXRCOztBQU1BLGVBQWVDLGFBQWYiLCJmaWxlIjoiY29tbWFMaXN0c0FuZC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBUZW1wbGF0ZVRhZyBmcm9tICcuLi9UZW1wbGF0ZVRhZyc7XG5pbXBvcnQgc3RyaXBJbmRlbnRUcmFuc2Zvcm1lciBmcm9tICcuLi9zdHJpcEluZGVudFRyYW5zZm9ybWVyJztcbmltcG9ydCBpbmxpbmVBcnJheVRyYW5zZm9ybWVyIGZyb20gJy4uL2lubGluZUFycmF5VHJhbnNmb3JtZXInO1xuaW1wb3J0IHRyaW1SZXN1bHRUcmFuc2Zvcm1lciBmcm9tICcuLi90cmltUmVzdWx0VHJhbnNmb3JtZXInO1xuXG5jb25zdCBjb21tYUxpc3RzQW5kID0gbmV3IFRlbXBsYXRlVGFnKFxuICBpbmxpbmVBcnJheVRyYW5zZm9ybWVyKHsgc2VwYXJhdG9yOiAnLCcsIGNvbmp1bmN0aW9uOiAnYW5kJyB9KSxcbiAgc3RyaXBJbmRlbnRUcmFuc2Zvcm1lcixcbiAgdHJpbVJlc3VsdFRyYW5zZm9ybWVyLFxuKTtcblxuZXhwb3J0IGRlZmF1bHQgY29tbWFMaXN0c0FuZDtcbiJdfQ==","import TemplateTag from '../TemplateTag';\nimport stripIndentTransformer from '../stripIndentTransformer';\nimport inlineArrayTransformer from '../inlineArrayTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\n\nvar commaListsOr = new TemplateTag(inlineArrayTransformer({ separator: ',', conjunction: 'or' }), stripIndentTransformer, trimResultTransformer);\n\nexport default commaListsOr;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb21tYUxpc3RzT3IvY29tbWFMaXN0c09yLmpzIl0sIm5hbWVzIjpbIlRlbXBsYXRlVGFnIiwic3RyaXBJbmRlbnRUcmFuc2Zvcm1lciIsImlubGluZUFycmF5VHJhbnNmb3JtZXIiLCJ0cmltUmVzdWx0VHJhbnNmb3JtZXIiLCJjb21tYUxpc3RzT3IiLCJzZXBhcmF0b3IiLCJjb25qdW5jdGlvbiJdLCJtYXBwaW5ncyI6IkFBQUEsT0FBT0EsV0FBUCxNQUF3QixnQkFBeEI7QUFDQSxPQUFPQyxzQkFBUCxNQUFtQywyQkFBbkM7QUFDQSxPQUFPQyxzQkFBUCxNQUFtQywyQkFBbkM7QUFDQSxPQUFPQyxxQkFBUCxNQUFrQywwQkFBbEM7O0FBRUEsSUFBTUMsZUFBZSxJQUFJSixXQUFKLENBQ25CRSx1QkFBdUIsRUFBRUcsV0FBVyxHQUFiLEVBQWtCQyxhQUFhLElBQS9CLEVBQXZCLENBRG1CLEVBRW5CTCxzQkFGbUIsRUFHbkJFLHFCQUhtQixDQUFyQjs7QUFNQSxlQUFlQyxZQUFmIiwiZmlsZSI6ImNvbW1hTGlzdHNPci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBUZW1wbGF0ZVRhZyBmcm9tICcuLi9UZW1wbGF0ZVRhZyc7XG5pbXBvcnQgc3RyaXBJbmRlbnRUcmFuc2Zvcm1lciBmcm9tICcuLi9zdHJpcEluZGVudFRyYW5zZm9ybWVyJztcbmltcG9ydCBpbmxpbmVBcnJheVRyYW5zZm9ybWVyIGZyb20gJy4uL2lubGluZUFycmF5VHJhbnNmb3JtZXInO1xuaW1wb3J0IHRyaW1SZXN1bHRUcmFuc2Zvcm1lciBmcm9tICcuLi90cmltUmVzdWx0VHJhbnNmb3JtZXInO1xuXG5jb25zdCBjb21tYUxpc3RzT3IgPSBuZXcgVGVtcGxhdGVUYWcoXG4gIGlubGluZUFycmF5VHJhbnNmb3JtZXIoeyBzZXBhcmF0b3I6ICcsJywgY29uanVuY3Rpb246ICdvcicgfSksXG4gIHN0cmlwSW5kZW50VHJhbnNmb3JtZXIsXG4gIHRyaW1SZXN1bHRUcmFuc2Zvcm1lcixcbik7XG5cbmV4cG9ydCBkZWZhdWx0IGNvbW1hTGlzdHNPcjtcbiJdfQ==","var splitStringTransformer = function splitStringTransformer(splitBy) {\n  return {\n    onSubstitution: function onSubstitution(substitution, resultSoFar) {\n      if (splitBy != null && typeof splitBy === 'string') {\n        if (typeof substitution === 'string' && substitution.includes(splitBy)) {\n          substitution = substitution.split(splitBy);\n        }\n      } else {\n        throw new Error('You need to specify a string character to split by.');\n      }\n      return substitution;\n    }\n  };\n};\n\nexport default splitStringTransformer;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zcGxpdFN0cmluZ1RyYW5zZm9ybWVyL3NwbGl0U3RyaW5nVHJhbnNmb3JtZXIuanMiXSwibmFtZXMiOlsic3BsaXRTdHJpbmdUcmFuc2Zvcm1lciIsIm9uU3Vic3RpdHV0aW9uIiwic3Vic3RpdHV0aW9uIiwicmVzdWx0U29GYXIiLCJzcGxpdEJ5IiwiaW5jbHVkZXMiLCJzcGxpdCIsIkVycm9yIl0sIm1hcHBpbmdzIjoiQUFBQSxJQUFNQSx5QkFBeUIsU0FBekJBLHNCQUF5QjtBQUFBLFNBQVk7QUFDekNDLGtCQUR5QywwQkFDMUJDLFlBRDBCLEVBQ1pDLFdBRFksRUFDQztBQUN4QyxVQUFJQyxXQUFXLElBQVgsSUFBbUIsT0FBT0EsT0FBUCxLQUFtQixRQUExQyxFQUFvRDtBQUNsRCxZQUFJLE9BQU9GLFlBQVAsS0FBd0IsUUFBeEIsSUFBb0NBLGFBQWFHLFFBQWIsQ0FBc0JELE9BQXRCLENBQXhDLEVBQXdFO0FBQ3RFRix5QkFBZUEsYUFBYUksS0FBYixDQUFtQkYsT0FBbkIsQ0FBZjtBQUNEO0FBQ0YsT0FKRCxNQUlPO0FBQ0wsY0FBTSxJQUFJRyxLQUFKLENBQVUscURBQVYsQ0FBTjtBQUNEO0FBQ0QsYUFBT0wsWUFBUDtBQUNEO0FBVndDLEdBQVo7QUFBQSxDQUEvQjs7QUFhQSxlQUFlRixzQkFBZiIsImZpbGUiOiJzcGxpdFN0cmluZ1RyYW5zZm9ybWVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3Qgc3BsaXRTdHJpbmdUcmFuc2Zvcm1lciA9IHNwbGl0QnkgPT4gKHtcbiAgb25TdWJzdGl0dXRpb24oc3Vic3RpdHV0aW9uLCByZXN1bHRTb0Zhcikge1xuICAgIGlmIChzcGxpdEJ5ICE9IG51bGwgJiYgdHlwZW9mIHNwbGl0QnkgPT09ICdzdHJpbmcnKSB7XG4gICAgICBpZiAodHlwZW9mIHN1YnN0aXR1dGlvbiA9PT0gJ3N0cmluZycgJiYgc3Vic3RpdHV0aW9uLmluY2x1ZGVzKHNwbGl0QnkpKSB7XG4gICAgICAgIHN1YnN0aXR1dGlvbiA9IHN1YnN0aXR1dGlvbi5zcGxpdChzcGxpdEJ5KTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdZb3UgbmVlZCB0byBzcGVjaWZ5IGEgc3RyaW5nIGNoYXJhY3RlciB0byBzcGxpdCBieS4nKTtcbiAgICB9XG4gICAgcmV0dXJuIHN1YnN0aXR1dGlvbjtcbiAgfSxcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBzcGxpdFN0cmluZ1RyYW5zZm9ybWVyO1xuIl19","var isValidValue = function isValidValue(x) {\n  return x != null && !Number.isNaN(x) && typeof x !== 'boolean';\n};\n\nvar removeNonPrintingValuesTransformer = function removeNonPrintingValuesTransformer() {\n  return {\n    onSubstitution: function onSubstitution(substitution) {\n      if (Array.isArray(substitution)) {\n        return substitution.filter(isValidValue);\n      }\n      if (isValidValue(substitution)) {\n        return substitution;\n      }\n      return '';\n    }\n  };\n};\n\nexport default removeNonPrintingValuesTransformer;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9yZW1vdmVOb25QcmludGluZ1ZhbHVlc1RyYW5zZm9ybWVyL3JlbW92ZU5vblByaW50aW5nVmFsdWVzVHJhbnNmb3JtZXIuanMiXSwibmFtZXMiOlsiaXNWYWxpZFZhbHVlIiwieCIsIk51bWJlciIsImlzTmFOIiwicmVtb3ZlTm9uUHJpbnRpbmdWYWx1ZXNUcmFuc2Zvcm1lciIsIm9uU3Vic3RpdHV0aW9uIiwic3Vic3RpdHV0aW9uIiwiQXJyYXkiLCJpc0FycmF5IiwiZmlsdGVyIl0sIm1hcHBpbmdzIjoiQUFBQSxJQUFNQSxlQUFlLFNBQWZBLFlBQWU7QUFBQSxTQUNuQkMsS0FBSyxJQUFMLElBQWEsQ0FBQ0MsT0FBT0MsS0FBUCxDQUFhRixDQUFiLENBQWQsSUFBaUMsT0FBT0EsQ0FBUCxLQUFhLFNBRDNCO0FBQUEsQ0FBckI7O0FBR0EsSUFBTUcscUNBQXFDLFNBQXJDQSxrQ0FBcUM7QUFBQSxTQUFPO0FBQ2hEQyxrQkFEZ0QsMEJBQ2pDQyxZQURpQyxFQUNuQjtBQUMzQixVQUFJQyxNQUFNQyxPQUFOLENBQWNGLFlBQWQsQ0FBSixFQUFpQztBQUMvQixlQUFPQSxhQUFhRyxNQUFiLENBQW9CVCxZQUFwQixDQUFQO0FBQ0Q7QUFDRCxVQUFJQSxhQUFhTSxZQUFiLENBQUosRUFBZ0M7QUFDOUIsZUFBT0EsWUFBUDtBQUNEO0FBQ0QsYUFBTyxFQUFQO0FBQ0Q7QUFUK0MsR0FBUDtBQUFBLENBQTNDOztBQVlBLGVBQWVGLGtDQUFmIiwiZmlsZSI6InJlbW92ZU5vblByaW50aW5nVmFsdWVzVHJhbnNmb3JtZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBpc1ZhbGlkVmFsdWUgPSB4ID0+XG4gIHggIT0gbnVsbCAmJiAhTnVtYmVyLmlzTmFOKHgpICYmIHR5cGVvZiB4ICE9PSAnYm9vbGVhbic7XG5cbmNvbnN0IHJlbW92ZU5vblByaW50aW5nVmFsdWVzVHJhbnNmb3JtZXIgPSAoKSA9PiAoe1xuICBvblN1YnN0aXR1dGlvbihzdWJzdGl0dXRpb24pIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShzdWJzdGl0dXRpb24pKSB7XG4gICAgICByZXR1cm4gc3Vic3RpdHV0aW9uLmZpbHRlcihpc1ZhbGlkVmFsdWUpO1xuICAgIH1cbiAgICBpZiAoaXNWYWxpZFZhbHVlKHN1YnN0aXR1dGlvbikpIHtcbiAgICAgIHJldHVybiBzdWJzdGl0dXRpb247XG4gICAgfVxuICAgIHJldHVybiAnJztcbiAgfSxcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCByZW1vdmVOb25QcmludGluZ1ZhbHVlc1RyYW5zZm9ybWVyO1xuIl19","import TemplateTag from '../TemplateTag';\nimport stripIndentTransformer from '../stripIndentTransformer';\nimport inlineArrayTransformer from '../inlineArrayTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\nimport splitStringTransformer from '../splitStringTransformer';\nimport removeNonPrintingValuesTransformer from '../removeNonPrintingValuesTransformer';\n\nvar html = new TemplateTag(splitStringTransformer('\\n'), removeNonPrintingValuesTransformer, inlineArrayTransformer, stripIndentTransformer, trimResultTransformer);\n\nexport default html;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9odG1sL2h0bWwuanMiXSwibmFtZXMiOlsiVGVtcGxhdGVUYWciLCJzdHJpcEluZGVudFRyYW5zZm9ybWVyIiwiaW5saW5lQXJyYXlUcmFuc2Zvcm1lciIsInRyaW1SZXN1bHRUcmFuc2Zvcm1lciIsInNwbGl0U3RyaW5nVHJhbnNmb3JtZXIiLCJyZW1vdmVOb25QcmludGluZ1ZhbHVlc1RyYW5zZm9ybWVyIiwiaHRtbCJdLCJtYXBwaW5ncyI6IkFBQUEsT0FBT0EsV0FBUCxNQUF3QixnQkFBeEI7QUFDQSxPQUFPQyxzQkFBUCxNQUFtQywyQkFBbkM7QUFDQSxPQUFPQyxzQkFBUCxNQUFtQywyQkFBbkM7QUFDQSxPQUFPQyxxQkFBUCxNQUFrQywwQkFBbEM7QUFDQSxPQUFPQyxzQkFBUCxNQUFtQywyQkFBbkM7QUFDQSxPQUFPQyxrQ0FBUCxNQUErQyx1Q0FBL0M7O0FBRUEsSUFBTUMsT0FBTyxJQUFJTixXQUFKLENBQ1hJLHVCQUF1QixJQUF2QixDQURXLEVBRVhDLGtDQUZXLEVBR1hILHNCQUhXLEVBSVhELHNCQUpXLEVBS1hFLHFCQUxXLENBQWI7O0FBUUEsZUFBZUcsSUFBZiIsImZpbGUiOiJodG1sLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFRlbXBsYXRlVGFnIGZyb20gJy4uL1RlbXBsYXRlVGFnJztcbmltcG9ydCBzdHJpcEluZGVudFRyYW5zZm9ybWVyIGZyb20gJy4uL3N0cmlwSW5kZW50VHJhbnNmb3JtZXInO1xuaW1wb3J0IGlubGluZUFycmF5VHJhbnNmb3JtZXIgZnJvbSAnLi4vaW5saW5lQXJyYXlUcmFuc2Zvcm1lcic7XG5pbXBvcnQgdHJpbVJlc3VsdFRyYW5zZm9ybWVyIGZyb20gJy4uL3RyaW1SZXN1bHRUcmFuc2Zvcm1lcic7XG5pbXBvcnQgc3BsaXRTdHJpbmdUcmFuc2Zvcm1lciBmcm9tICcuLi9zcGxpdFN0cmluZ1RyYW5zZm9ybWVyJztcbmltcG9ydCByZW1vdmVOb25QcmludGluZ1ZhbHVlc1RyYW5zZm9ybWVyIGZyb20gJy4uL3JlbW92ZU5vblByaW50aW5nVmFsdWVzVHJhbnNmb3JtZXInO1xuXG5jb25zdCBodG1sID0gbmV3IFRlbXBsYXRlVGFnKFxuICBzcGxpdFN0cmluZ1RyYW5zZm9ybWVyKCdcXG4nKSxcbiAgcmVtb3ZlTm9uUHJpbnRpbmdWYWx1ZXNUcmFuc2Zvcm1lcixcbiAgaW5saW5lQXJyYXlUcmFuc2Zvcm1lcixcbiAgc3RyaXBJbmRlbnRUcmFuc2Zvcm1lcixcbiAgdHJpbVJlc3VsdFRyYW5zZm9ybWVyLFxuKTtcblxuZXhwb3J0IGRlZmF1bHQgaHRtbDtcbiJdfQ==","var replaceSubstitutionTransformer = function replaceSubstitutionTransformer(replaceWhat, replaceWith) {\n  return {\n    onSubstitution: function onSubstitution(substitution, resultSoFar) {\n      if (replaceWhat == null || replaceWith == null) {\n        throw new Error('replaceSubstitutionTransformer requires at least 2 arguments.');\n      }\n\n      // Do not touch if null or undefined\n      if (substitution == null) {\n        return substitution;\n      } else {\n        return substitution.toString().replace(replaceWhat, replaceWith);\n      }\n    }\n  };\n};\n\nexport default replaceSubstitutionTransformer;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9yZXBsYWNlU3Vic3RpdHV0aW9uVHJhbnNmb3JtZXIvcmVwbGFjZVN1YnN0aXR1dGlvblRyYW5zZm9ybWVyLmpzIl0sIm5hbWVzIjpbInJlcGxhY2VTdWJzdGl0dXRpb25UcmFuc2Zvcm1lciIsInJlcGxhY2VXaGF0IiwicmVwbGFjZVdpdGgiLCJvblN1YnN0aXR1dGlvbiIsInN1YnN0aXR1dGlvbiIsInJlc3VsdFNvRmFyIiwiRXJyb3IiLCJ0b1N0cmluZyIsInJlcGxhY2UiXSwibWFwcGluZ3MiOiJBQUFBLElBQU1BLGlDQUFpQyxTQUFqQ0EsOEJBQWlDLENBQUNDLFdBQUQsRUFBY0MsV0FBZDtBQUFBLFNBQStCO0FBQ3BFQyxrQkFEb0UsMEJBQ3JEQyxZQURxRCxFQUN2Q0MsV0FEdUMsRUFDMUI7QUFDeEMsVUFBSUosZUFBZSxJQUFmLElBQXVCQyxlQUFlLElBQTFDLEVBQWdEO0FBQzlDLGNBQU0sSUFBSUksS0FBSixDQUNKLCtEQURJLENBQU47QUFHRDs7QUFFRDtBQUNBLFVBQUlGLGdCQUFnQixJQUFwQixFQUEwQjtBQUN4QixlQUFPQSxZQUFQO0FBQ0QsT0FGRCxNQUVPO0FBQ0wsZUFBT0EsYUFBYUcsUUFBYixHQUF3QkMsT0FBeEIsQ0FBZ0NQLFdBQWhDLEVBQTZDQyxXQUE3QyxDQUFQO0FBQ0Q7QUFDRjtBQWRtRSxHQUEvQjtBQUFBLENBQXZDOztBQWlCQSxlQUFlRiw4QkFBZiIsImZpbGUiOiJyZXBsYWNlU3Vic3RpdHV0aW9uVHJhbnNmb3JtZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCByZXBsYWNlU3Vic3RpdHV0aW9uVHJhbnNmb3JtZXIgPSAocmVwbGFjZVdoYXQsIHJlcGxhY2VXaXRoKSA9PiAoe1xuICBvblN1YnN0aXR1dGlvbihzdWJzdGl0dXRpb24sIHJlc3VsdFNvRmFyKSB7XG4gICAgaWYgKHJlcGxhY2VXaGF0ID09IG51bGwgfHwgcmVwbGFjZVdpdGggPT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAncmVwbGFjZVN1YnN0aXR1dGlvblRyYW5zZm9ybWVyIHJlcXVpcmVzIGF0IGxlYXN0IDIgYXJndW1lbnRzLicsXG4gICAgICApO1xuICAgIH1cblxuICAgIC8vIERvIG5vdCB0b3VjaCBpZiBudWxsIG9yIHVuZGVmaW5lZFxuICAgIGlmIChzdWJzdGl0dXRpb24gPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIHN1YnN0aXR1dGlvbjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHN1YnN0aXR1dGlvbi50b1N0cmluZygpLnJlcGxhY2UocmVwbGFjZVdoYXQsIHJlcGxhY2VXaXRoKTtcbiAgICB9XG4gIH0sXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgcmVwbGFjZVN1YnN0aXR1dGlvblRyYW5zZm9ybWVyO1xuIl19","import TemplateTag from '../TemplateTag';\nimport stripIndentTransformer from '../stripIndentTransformer';\nimport inlineArrayTransformer from '../inlineArrayTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\nimport splitStringTransformer from '../splitStringTransformer';\nimport replaceSubstitutionTransformer from '../replaceSubstitutionTransformer';\n\nvar safeHtml = new TemplateTag(splitStringTransformer('\\n'), inlineArrayTransformer, stripIndentTransformer, trimResultTransformer, replaceSubstitutionTransformer(/&/g, '&amp;'), replaceSubstitutionTransformer(/</g, '&lt;'), replaceSubstitutionTransformer(/>/g, '&gt;'), replaceSubstitutionTransformer(/\"/g, '&quot;'), replaceSubstitutionTransformer(/'/g, '&#x27;'), replaceSubstitutionTransformer(/`/g, '&#x60;'));\n\nexport default safeHtml;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zYWZlSHRtbC9zYWZlSHRtbC5qcyJdLCJuYW1lcyI6WyJUZW1wbGF0ZVRhZyIsInN0cmlwSW5kZW50VHJhbnNmb3JtZXIiLCJpbmxpbmVBcnJheVRyYW5zZm9ybWVyIiwidHJpbVJlc3VsdFRyYW5zZm9ybWVyIiwic3BsaXRTdHJpbmdUcmFuc2Zvcm1lciIsInJlcGxhY2VTdWJzdGl0dXRpb25UcmFuc2Zvcm1lciIsInNhZmVIdG1sIl0sIm1hcHBpbmdzIjoiQUFBQSxPQUFPQSxXQUFQLE1BQXdCLGdCQUF4QjtBQUNBLE9BQU9DLHNCQUFQLE1BQW1DLDJCQUFuQztBQUNBLE9BQU9DLHNCQUFQLE1BQW1DLDJCQUFuQztBQUNBLE9BQU9DLHFCQUFQLE1BQWtDLDBCQUFsQztBQUNBLE9BQU9DLHNCQUFQLE1BQW1DLDJCQUFuQztBQUNBLE9BQU9DLDhCQUFQLE1BQTJDLG1DQUEzQzs7QUFFQSxJQUFNQyxXQUFXLElBQUlOLFdBQUosQ0FDZkksdUJBQXVCLElBQXZCLENBRGUsRUFFZkYsc0JBRmUsRUFHZkQsc0JBSGUsRUFJZkUscUJBSmUsRUFLZkUsK0JBQStCLElBQS9CLEVBQXFDLE9BQXJDLENBTGUsRUFNZkEsK0JBQStCLElBQS9CLEVBQXFDLE1BQXJDLENBTmUsRUFPZkEsK0JBQStCLElBQS9CLEVBQXFDLE1BQXJDLENBUGUsRUFRZkEsK0JBQStCLElBQS9CLEVBQXFDLFFBQXJDLENBUmUsRUFTZkEsK0JBQStCLElBQS9CLEVBQXFDLFFBQXJDLENBVGUsRUFVZkEsK0JBQStCLElBQS9CLEVBQXFDLFFBQXJDLENBVmUsQ0FBakI7O0FBYUEsZUFBZUMsUUFBZiIsImZpbGUiOiJzYWZlSHRtbC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBUZW1wbGF0ZVRhZyBmcm9tICcuLi9UZW1wbGF0ZVRhZyc7XG5pbXBvcnQgc3RyaXBJbmRlbnRUcmFuc2Zvcm1lciBmcm9tICcuLi9zdHJpcEluZGVudFRyYW5zZm9ybWVyJztcbmltcG9ydCBpbmxpbmVBcnJheVRyYW5zZm9ybWVyIGZyb20gJy4uL2lubGluZUFycmF5VHJhbnNmb3JtZXInO1xuaW1wb3J0IHRyaW1SZXN1bHRUcmFuc2Zvcm1lciBmcm9tICcuLi90cmltUmVzdWx0VHJhbnNmb3JtZXInO1xuaW1wb3J0IHNwbGl0U3RyaW5nVHJhbnNmb3JtZXIgZnJvbSAnLi4vc3BsaXRTdHJpbmdUcmFuc2Zvcm1lcic7XG5pbXBvcnQgcmVwbGFjZVN1YnN0aXR1dGlvblRyYW5zZm9ybWVyIGZyb20gJy4uL3JlcGxhY2VTdWJzdGl0dXRpb25UcmFuc2Zvcm1lcic7XG5cbmNvbnN0IHNhZmVIdG1sID0gbmV3IFRlbXBsYXRlVGFnKFxuICBzcGxpdFN0cmluZ1RyYW5zZm9ybWVyKCdcXG4nKSxcbiAgaW5saW5lQXJyYXlUcmFuc2Zvcm1lcixcbiAgc3RyaXBJbmRlbnRUcmFuc2Zvcm1lcixcbiAgdHJpbVJlc3VsdFRyYW5zZm9ybWVyLFxuICByZXBsYWNlU3Vic3RpdHV0aW9uVHJhbnNmb3JtZXIoLyYvZywgJyZhbXA7JyksXG4gIHJlcGxhY2VTdWJzdGl0dXRpb25UcmFuc2Zvcm1lcigvPC9nLCAnJmx0OycpLFxuICByZXBsYWNlU3Vic3RpdHV0aW9uVHJhbnNmb3JtZXIoLz4vZywgJyZndDsnKSxcbiAgcmVwbGFjZVN1YnN0aXR1dGlvblRyYW5zZm9ybWVyKC9cIi9nLCAnJnF1b3Q7JyksXG4gIHJlcGxhY2VTdWJzdGl0dXRpb25UcmFuc2Zvcm1lcigvJy9nLCAnJiN4Mjc7JyksXG4gIHJlcGxhY2VTdWJzdGl0dXRpb25UcmFuc2Zvcm1lcigvYC9nLCAnJiN4NjA7JyksXG4pO1xuXG5leHBvcnQgZGVmYXVsdCBzYWZlSHRtbDtcbiJdfQ==","/**\n * Replaces tabs, newlines and spaces with the chosen value when they occur in sequences\n * @param  {(String|RegExp)} replaceWhat - the value or pattern that should be replaced\n * @param  {*}               replaceWith - the replacement value\n * @return {Object}                      - a TemplateTag transformer\n */\nvar replaceResultTransformer = function replaceResultTransformer(replaceWhat, replaceWith) {\n  return {\n    onEndResult: function onEndResult(endResult) {\n      if (replaceWhat == null || replaceWith == null) {\n        throw new Error('replaceResultTransformer requires at least 2 arguments.');\n      }\n      return endResult.replace(replaceWhat, replaceWith);\n    }\n  };\n};\n\nexport default replaceResultTransformer;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9yZXBsYWNlUmVzdWx0VHJhbnNmb3JtZXIvcmVwbGFjZVJlc3VsdFRyYW5zZm9ybWVyLmpzIl0sIm5hbWVzIjpbInJlcGxhY2VSZXN1bHRUcmFuc2Zvcm1lciIsInJlcGxhY2VXaGF0IiwicmVwbGFjZVdpdGgiLCJvbkVuZFJlc3VsdCIsImVuZFJlc3VsdCIsIkVycm9yIiwicmVwbGFjZSJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztBQU1BLElBQU1BLDJCQUEyQixTQUEzQkEsd0JBQTJCLENBQUNDLFdBQUQsRUFBY0MsV0FBZDtBQUFBLFNBQStCO0FBQzlEQyxlQUQ4RCx1QkFDbERDLFNBRGtELEVBQ3ZDO0FBQ3JCLFVBQUlILGVBQWUsSUFBZixJQUF1QkMsZUFBZSxJQUExQyxFQUFnRDtBQUM5QyxjQUFNLElBQUlHLEtBQUosQ0FDSix5REFESSxDQUFOO0FBR0Q7QUFDRCxhQUFPRCxVQUFVRSxPQUFWLENBQWtCTCxXQUFsQixFQUErQkMsV0FBL0IsQ0FBUDtBQUNEO0FBUjZELEdBQS9CO0FBQUEsQ0FBakM7O0FBV0EsZUFBZUYsd0JBQWYiLCJmaWxlIjoicmVwbGFjZVJlc3VsdFRyYW5zZm9ybWVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBSZXBsYWNlcyB0YWJzLCBuZXdsaW5lcyBhbmQgc3BhY2VzIHdpdGggdGhlIGNob3NlbiB2YWx1ZSB3aGVuIHRoZXkgb2NjdXIgaW4gc2VxdWVuY2VzXG4gKiBAcGFyYW0gIHsoU3RyaW5nfFJlZ0V4cCl9IHJlcGxhY2VXaGF0IC0gdGhlIHZhbHVlIG9yIHBhdHRlcm4gdGhhdCBzaG91bGQgYmUgcmVwbGFjZWRcbiAqIEBwYXJhbSAgeyp9ICAgICAgICAgICAgICAgcmVwbGFjZVdpdGggLSB0aGUgcmVwbGFjZW1lbnQgdmFsdWVcbiAqIEByZXR1cm4ge09iamVjdH0gICAgICAgICAgICAgICAgICAgICAgLSBhIFRlbXBsYXRlVGFnIHRyYW5zZm9ybWVyXG4gKi9cbmNvbnN0IHJlcGxhY2VSZXN1bHRUcmFuc2Zvcm1lciA9IChyZXBsYWNlV2hhdCwgcmVwbGFjZVdpdGgpID0+ICh7XG4gIG9uRW5kUmVzdWx0KGVuZFJlc3VsdCkge1xuICAgIGlmIChyZXBsYWNlV2hhdCA9PSBudWxsIHx8IHJlcGxhY2VXaXRoID09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ3JlcGxhY2VSZXN1bHRUcmFuc2Zvcm1lciByZXF1aXJlcyBhdCBsZWFzdCAyIGFyZ3VtZW50cy4nLFxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIGVuZFJlc3VsdC5yZXBsYWNlKHJlcGxhY2VXaGF0LCByZXBsYWNlV2l0aCk7XG4gIH0sXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgcmVwbGFjZVJlc3VsdFRyYW5zZm9ybWVyO1xuIl19","import TemplateTag from '../TemplateTag';\nimport trimResultTransformer from '../trimResultTransformer';\nimport replaceResultTransformer from '../replaceResultTransformer';\n\nvar oneLine = new TemplateTag(replaceResultTransformer(/(?:\\n(?:\\s*))+/g, ' '), trimResultTransformer);\n\nexport default oneLine;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9vbmVMaW5lL29uZUxpbmUuanMiXSwibmFtZXMiOlsiVGVtcGxhdGVUYWciLCJ0cmltUmVzdWx0VHJhbnNmb3JtZXIiLCJyZXBsYWNlUmVzdWx0VHJhbnNmb3JtZXIiLCJvbmVMaW5lIl0sIm1hcHBpbmdzIjoiQUFBQSxPQUFPQSxXQUFQLE1BQXdCLGdCQUF4QjtBQUNBLE9BQU9DLHFCQUFQLE1BQWtDLDBCQUFsQztBQUNBLE9BQU9DLHdCQUFQLE1BQXFDLDZCQUFyQzs7QUFFQSxJQUFNQyxVQUFVLElBQUlILFdBQUosQ0FDZEUseUJBQXlCLGlCQUF6QixFQUE0QyxHQUE1QyxDQURjLEVBRWRELHFCQUZjLENBQWhCOztBQUtBLGVBQWVFLE9BQWYiLCJmaWxlIjoib25lTGluZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBUZW1wbGF0ZVRhZyBmcm9tICcuLi9UZW1wbGF0ZVRhZyc7XG5pbXBvcnQgdHJpbVJlc3VsdFRyYW5zZm9ybWVyIGZyb20gJy4uL3RyaW1SZXN1bHRUcmFuc2Zvcm1lcic7XG5pbXBvcnQgcmVwbGFjZVJlc3VsdFRyYW5zZm9ybWVyIGZyb20gJy4uL3JlcGxhY2VSZXN1bHRUcmFuc2Zvcm1lcic7XG5cbmNvbnN0IG9uZUxpbmUgPSBuZXcgVGVtcGxhdGVUYWcoXG4gIHJlcGxhY2VSZXN1bHRUcmFuc2Zvcm1lcigvKD86XFxuKD86XFxzKikpKy9nLCAnICcpLFxuICB0cmltUmVzdWx0VHJhbnNmb3JtZXIsXG4pO1xuXG5leHBvcnQgZGVmYXVsdCBvbmVMaW5lO1xuIl19","import TemplateTag from '../TemplateTag';\nimport trimResultTransformer from '../trimResultTransformer';\nimport replaceResultTransformer from '../replaceResultTransformer';\n\nvar oneLineTrim = new TemplateTag(replaceResultTransformer(/(?:\\n\\s*)/g, ''), trimResultTransformer);\n\nexport default oneLineTrim;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9vbmVMaW5lVHJpbS9vbmVMaW5lVHJpbS5qcyJdLCJuYW1lcyI6WyJUZW1wbGF0ZVRhZyIsInRyaW1SZXN1bHRUcmFuc2Zvcm1lciIsInJlcGxhY2VSZXN1bHRUcmFuc2Zvcm1lciIsIm9uZUxpbmVUcmltIl0sIm1hcHBpbmdzIjoiQUFBQSxPQUFPQSxXQUFQLE1BQXdCLGdCQUF4QjtBQUNBLE9BQU9DLHFCQUFQLE1BQWtDLDBCQUFsQztBQUNBLE9BQU9DLHdCQUFQLE1BQXFDLDZCQUFyQzs7QUFFQSxJQUFNQyxjQUFjLElBQUlILFdBQUosQ0FDbEJFLHlCQUF5QixZQUF6QixFQUF1QyxFQUF2QyxDQURrQixFQUVsQkQscUJBRmtCLENBQXBCOztBQUtBLGVBQWVFLFdBQWYiLCJmaWxlIjoib25lTGluZVRyaW0uanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgVGVtcGxhdGVUYWcgZnJvbSAnLi4vVGVtcGxhdGVUYWcnO1xuaW1wb3J0IHRyaW1SZXN1bHRUcmFuc2Zvcm1lciBmcm9tICcuLi90cmltUmVzdWx0VHJhbnNmb3JtZXInO1xuaW1wb3J0IHJlcGxhY2VSZXN1bHRUcmFuc2Zvcm1lciBmcm9tICcuLi9yZXBsYWNlUmVzdWx0VHJhbnNmb3JtZXInO1xuXG5jb25zdCBvbmVMaW5lVHJpbSA9IG5ldyBUZW1wbGF0ZVRhZyhcbiAgcmVwbGFjZVJlc3VsdFRyYW5zZm9ybWVyKC8oPzpcXG5cXHMqKS9nLCAnJyksXG4gIHRyaW1SZXN1bHRUcmFuc2Zvcm1lcixcbik7XG5cbmV4cG9ydCBkZWZhdWx0IG9uZUxpbmVUcmltO1xuIl19","import TemplateTag from '../TemplateTag';\nimport inlineArrayTransformer from '../inlineArrayTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\nimport replaceResultTransformer from '../replaceResultTransformer';\n\nvar oneLineCommaLists = new TemplateTag(inlineArrayTransformer({ separator: ',' }), replaceResultTransformer(/(?:\\s+)/g, ' '), trimResultTransformer);\n\nexport default oneLineCommaLists;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9vbmVMaW5lQ29tbWFMaXN0cy9vbmVMaW5lQ29tbWFMaXN0cy5qcyJdLCJuYW1lcyI6WyJUZW1wbGF0ZVRhZyIsImlubGluZUFycmF5VHJhbnNmb3JtZXIiLCJ0cmltUmVzdWx0VHJhbnNmb3JtZXIiLCJyZXBsYWNlUmVzdWx0VHJhbnNmb3JtZXIiLCJvbmVMaW5lQ29tbWFMaXN0cyIsInNlcGFyYXRvciJdLCJtYXBwaW5ncyI6IkFBQUEsT0FBT0EsV0FBUCxNQUF3QixnQkFBeEI7QUFDQSxPQUFPQyxzQkFBUCxNQUFtQywyQkFBbkM7QUFDQSxPQUFPQyxxQkFBUCxNQUFrQywwQkFBbEM7QUFDQSxPQUFPQyx3QkFBUCxNQUFxQyw2QkFBckM7O0FBRUEsSUFBTUMsb0JBQW9CLElBQUlKLFdBQUosQ0FDeEJDLHVCQUF1QixFQUFFSSxXQUFXLEdBQWIsRUFBdkIsQ0FEd0IsRUFFeEJGLHlCQUF5QixVQUF6QixFQUFxQyxHQUFyQyxDQUZ3QixFQUd4QkQscUJBSHdCLENBQTFCOztBQU1BLGVBQWVFLGlCQUFmIiwiZmlsZSI6Im9uZUxpbmVDb21tYUxpc3RzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFRlbXBsYXRlVGFnIGZyb20gJy4uL1RlbXBsYXRlVGFnJztcbmltcG9ydCBpbmxpbmVBcnJheVRyYW5zZm9ybWVyIGZyb20gJy4uL2lubGluZUFycmF5VHJhbnNmb3JtZXInO1xuaW1wb3J0IHRyaW1SZXN1bHRUcmFuc2Zvcm1lciBmcm9tICcuLi90cmltUmVzdWx0VHJhbnNmb3JtZXInO1xuaW1wb3J0IHJlcGxhY2VSZXN1bHRUcmFuc2Zvcm1lciBmcm9tICcuLi9yZXBsYWNlUmVzdWx0VHJhbnNmb3JtZXInO1xuXG5jb25zdCBvbmVMaW5lQ29tbWFMaXN0cyA9IG5ldyBUZW1wbGF0ZVRhZyhcbiAgaW5saW5lQXJyYXlUcmFuc2Zvcm1lcih7IHNlcGFyYXRvcjogJywnIH0pLFxuICByZXBsYWNlUmVzdWx0VHJhbnNmb3JtZXIoLyg/OlxccyspL2csICcgJyksXG4gIHRyaW1SZXN1bHRUcmFuc2Zvcm1lcixcbik7XG5cbmV4cG9ydCBkZWZhdWx0IG9uZUxpbmVDb21tYUxpc3RzO1xuIl19","import TemplateTag from '../TemplateTag';\nimport inlineArrayTransformer from '../inlineArrayTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\nimport replaceResultTransformer from '../replaceResultTransformer';\n\nvar oneLineCommaListsOr = new TemplateTag(inlineArrayTransformer({ separator: ',', conjunction: 'or' }), replaceResultTransformer(/(?:\\s+)/g, ' '), trimResultTransformer);\n\nexport default oneLineCommaListsOr;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9vbmVMaW5lQ29tbWFMaXN0c09yL29uZUxpbmVDb21tYUxpc3RzT3IuanMiXSwibmFtZXMiOlsiVGVtcGxhdGVUYWciLCJpbmxpbmVBcnJheVRyYW5zZm9ybWVyIiwidHJpbVJlc3VsdFRyYW5zZm9ybWVyIiwicmVwbGFjZVJlc3VsdFRyYW5zZm9ybWVyIiwib25lTGluZUNvbW1hTGlzdHNPciIsInNlcGFyYXRvciIsImNvbmp1bmN0aW9uIl0sIm1hcHBpbmdzIjoiQUFBQSxPQUFPQSxXQUFQLE1BQXdCLGdCQUF4QjtBQUNBLE9BQU9DLHNCQUFQLE1BQW1DLDJCQUFuQztBQUNBLE9BQU9DLHFCQUFQLE1BQWtDLDBCQUFsQztBQUNBLE9BQU9DLHdCQUFQLE1BQXFDLDZCQUFyQzs7QUFFQSxJQUFNQyxzQkFBc0IsSUFBSUosV0FBSixDQUMxQkMsdUJBQXVCLEVBQUVJLFdBQVcsR0FBYixFQUFrQkMsYUFBYSxJQUEvQixFQUF2QixDQUQwQixFQUUxQkgseUJBQXlCLFVBQXpCLEVBQXFDLEdBQXJDLENBRjBCLEVBRzFCRCxxQkFIMEIsQ0FBNUI7O0FBTUEsZUFBZUUsbUJBQWYiLCJmaWxlIjoib25lTGluZUNvbW1hTGlzdHNPci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBUZW1wbGF0ZVRhZyBmcm9tICcuLi9UZW1wbGF0ZVRhZyc7XG5pbXBvcnQgaW5saW5lQXJyYXlUcmFuc2Zvcm1lciBmcm9tICcuLi9pbmxpbmVBcnJheVRyYW5zZm9ybWVyJztcbmltcG9ydCB0cmltUmVzdWx0VHJhbnNmb3JtZXIgZnJvbSAnLi4vdHJpbVJlc3VsdFRyYW5zZm9ybWVyJztcbmltcG9ydCByZXBsYWNlUmVzdWx0VHJhbnNmb3JtZXIgZnJvbSAnLi4vcmVwbGFjZVJlc3VsdFRyYW5zZm9ybWVyJztcblxuY29uc3Qgb25lTGluZUNvbW1hTGlzdHNPciA9IG5ldyBUZW1wbGF0ZVRhZyhcbiAgaW5saW5lQXJyYXlUcmFuc2Zvcm1lcih7IHNlcGFyYXRvcjogJywnLCBjb25qdW5jdGlvbjogJ29yJyB9KSxcbiAgcmVwbGFjZVJlc3VsdFRyYW5zZm9ybWVyKC8oPzpcXHMrKS9nLCAnICcpLFxuICB0cmltUmVzdWx0VHJhbnNmb3JtZXIsXG4pO1xuXG5leHBvcnQgZGVmYXVsdCBvbmVMaW5lQ29tbWFMaXN0c09yO1xuIl19","import TemplateTag from '../TemplateTag';\nimport inlineArrayTransformer from '../inlineArrayTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\nimport replaceResultTransformer from '../replaceResultTransformer';\n\nvar oneLineCommaListsAnd = new TemplateTag(inlineArrayTransformer({ separator: ',', conjunction: 'and' }), replaceResultTransformer(/(?:\\s+)/g, ' '), trimResultTransformer);\n\nexport default oneLineCommaListsAnd;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9vbmVMaW5lQ29tbWFMaXN0c0FuZC9vbmVMaW5lQ29tbWFMaXN0c0FuZC5qcyJdLCJuYW1lcyI6WyJUZW1wbGF0ZVRhZyIsImlubGluZUFycmF5VHJhbnNmb3JtZXIiLCJ0cmltUmVzdWx0VHJhbnNmb3JtZXIiLCJyZXBsYWNlUmVzdWx0VHJhbnNmb3JtZXIiLCJvbmVMaW5lQ29tbWFMaXN0c0FuZCIsInNlcGFyYXRvciIsImNvbmp1bmN0aW9uIl0sIm1hcHBpbmdzIjoiQUFBQSxPQUFPQSxXQUFQLE1BQXdCLGdCQUF4QjtBQUNBLE9BQU9DLHNCQUFQLE1BQW1DLDJCQUFuQztBQUNBLE9BQU9DLHFCQUFQLE1BQWtDLDBCQUFsQztBQUNBLE9BQU9DLHdCQUFQLE1BQXFDLDZCQUFyQzs7QUFFQSxJQUFNQyx1QkFBdUIsSUFBSUosV0FBSixDQUMzQkMsdUJBQXVCLEVBQUVJLFdBQVcsR0FBYixFQUFrQkMsYUFBYSxLQUEvQixFQUF2QixDQUQyQixFQUUzQkgseUJBQXlCLFVBQXpCLEVBQXFDLEdBQXJDLENBRjJCLEVBRzNCRCxxQkFIMkIsQ0FBN0I7O0FBTUEsZUFBZUUsb0JBQWYiLCJmaWxlIjoib25lTGluZUNvbW1hTGlzdHNBbmQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgVGVtcGxhdGVUYWcgZnJvbSAnLi4vVGVtcGxhdGVUYWcnO1xuaW1wb3J0IGlubGluZUFycmF5VHJhbnNmb3JtZXIgZnJvbSAnLi4vaW5saW5lQXJyYXlUcmFuc2Zvcm1lcic7XG5pbXBvcnQgdHJpbVJlc3VsdFRyYW5zZm9ybWVyIGZyb20gJy4uL3RyaW1SZXN1bHRUcmFuc2Zvcm1lcic7XG5pbXBvcnQgcmVwbGFjZVJlc3VsdFRyYW5zZm9ybWVyIGZyb20gJy4uL3JlcGxhY2VSZXN1bHRUcmFuc2Zvcm1lcic7XG5cbmNvbnN0IG9uZUxpbmVDb21tYUxpc3RzQW5kID0gbmV3IFRlbXBsYXRlVGFnKFxuICBpbmxpbmVBcnJheVRyYW5zZm9ybWVyKHsgc2VwYXJhdG9yOiAnLCcsIGNvbmp1bmN0aW9uOiAnYW5kJyB9KSxcbiAgcmVwbGFjZVJlc3VsdFRyYW5zZm9ybWVyKC8oPzpcXHMrKS9nLCAnICcpLFxuICB0cmltUmVzdWx0VHJhbnNmb3JtZXIsXG4pO1xuXG5leHBvcnQgZGVmYXVsdCBvbmVMaW5lQ29tbWFMaXN0c0FuZDtcbiJdfQ==","import TemplateTag from '../TemplateTag';\nimport stripIndentTransformer from '../stripIndentTransformer';\nimport inlineArrayTransformer from '../inlineArrayTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\n\nvar inlineLists = new TemplateTag(inlineArrayTransformer, stripIndentTransformer, trimResultTransformer);\n\nexport default inlineLists;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9pbmxpbmVMaXN0cy9pbmxpbmVMaXN0cy5qcyJdLCJuYW1lcyI6WyJUZW1wbGF0ZVRhZyIsInN0cmlwSW5kZW50VHJhbnNmb3JtZXIiLCJpbmxpbmVBcnJheVRyYW5zZm9ybWVyIiwidHJpbVJlc3VsdFRyYW5zZm9ybWVyIiwiaW5saW5lTGlzdHMiXSwibWFwcGluZ3MiOiJBQUFBLE9BQU9BLFdBQVAsTUFBd0IsZ0JBQXhCO0FBQ0EsT0FBT0Msc0JBQVAsTUFBbUMsMkJBQW5DO0FBQ0EsT0FBT0Msc0JBQVAsTUFBbUMsMkJBQW5DO0FBQ0EsT0FBT0MscUJBQVAsTUFBa0MsMEJBQWxDOztBQUVBLElBQU1DLGNBQWMsSUFBSUosV0FBSixDQUNsQkUsc0JBRGtCLEVBRWxCRCxzQkFGa0IsRUFHbEJFLHFCQUhrQixDQUFwQjs7QUFNQSxlQUFlQyxXQUFmIiwiZmlsZSI6ImlubGluZUxpc3RzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFRlbXBsYXRlVGFnIGZyb20gJy4uL1RlbXBsYXRlVGFnJztcbmltcG9ydCBzdHJpcEluZGVudFRyYW5zZm9ybWVyIGZyb20gJy4uL3N0cmlwSW5kZW50VHJhbnNmb3JtZXInO1xuaW1wb3J0IGlubGluZUFycmF5VHJhbnNmb3JtZXIgZnJvbSAnLi4vaW5saW5lQXJyYXlUcmFuc2Zvcm1lcic7XG5pbXBvcnQgdHJpbVJlc3VsdFRyYW5zZm9ybWVyIGZyb20gJy4uL3RyaW1SZXN1bHRUcmFuc2Zvcm1lcic7XG5cbmNvbnN0IGlubGluZUxpc3RzID0gbmV3IFRlbXBsYXRlVGFnKFxuICBpbmxpbmVBcnJheVRyYW5zZm9ybWVyLFxuICBzdHJpcEluZGVudFRyYW5zZm9ybWVyLFxuICB0cmltUmVzdWx0VHJhbnNmb3JtZXIsXG4pO1xuXG5leHBvcnQgZGVmYXVsdCBpbmxpbmVMaXN0cztcbiJdfQ==","import TemplateTag from '../TemplateTag';\nimport inlineArrayTransformer from '../inlineArrayTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\nimport replaceResultTransformer from '../replaceResultTransformer';\n\nvar oneLineInlineLists = new TemplateTag(inlineArrayTransformer, replaceResultTransformer(/(?:\\s+)/g, ' '), trimResultTransformer);\n\nexport default oneLineInlineLists;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9vbmVMaW5lSW5saW5lTGlzdHMvb25lTGluZUlubGluZUxpc3RzLmpzIl0sIm5hbWVzIjpbIlRlbXBsYXRlVGFnIiwiaW5saW5lQXJyYXlUcmFuc2Zvcm1lciIsInRyaW1SZXN1bHRUcmFuc2Zvcm1lciIsInJlcGxhY2VSZXN1bHRUcmFuc2Zvcm1lciIsIm9uZUxpbmVJbmxpbmVMaXN0cyJdLCJtYXBwaW5ncyI6IkFBQUEsT0FBT0EsV0FBUCxNQUF3QixnQkFBeEI7QUFDQSxPQUFPQyxzQkFBUCxNQUFtQywyQkFBbkM7QUFDQSxPQUFPQyxxQkFBUCxNQUFrQywwQkFBbEM7QUFDQSxPQUFPQyx3QkFBUCxNQUFxQyw2QkFBckM7O0FBRUEsSUFBTUMscUJBQXFCLElBQUlKLFdBQUosQ0FDekJDLHNCQUR5QixFQUV6QkUseUJBQXlCLFVBQXpCLEVBQXFDLEdBQXJDLENBRnlCLEVBR3pCRCxxQkFIeUIsQ0FBM0I7O0FBTUEsZUFBZUUsa0JBQWYiLCJmaWxlIjoib25lTGluZUlubGluZUxpc3RzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFRlbXBsYXRlVGFnIGZyb20gJy4uL1RlbXBsYXRlVGFnJztcbmltcG9ydCBpbmxpbmVBcnJheVRyYW5zZm9ybWVyIGZyb20gJy4uL2lubGluZUFycmF5VHJhbnNmb3JtZXInO1xuaW1wb3J0IHRyaW1SZXN1bHRUcmFuc2Zvcm1lciBmcm9tICcuLi90cmltUmVzdWx0VHJhbnNmb3JtZXInO1xuaW1wb3J0IHJlcGxhY2VSZXN1bHRUcmFuc2Zvcm1lciBmcm9tICcuLi9yZXBsYWNlUmVzdWx0VHJhbnNmb3JtZXInO1xuXG5jb25zdCBvbmVMaW5lSW5saW5lTGlzdHMgPSBuZXcgVGVtcGxhdGVUYWcoXG4gIGlubGluZUFycmF5VHJhbnNmb3JtZXIsXG4gIHJlcGxhY2VSZXN1bHRUcmFuc2Zvcm1lcigvKD86XFxzKykvZywgJyAnKSxcbiAgdHJpbVJlc3VsdFRyYW5zZm9ybWVyLFxuKTtcblxuZXhwb3J0IGRlZmF1bHQgb25lTGluZUlubGluZUxpc3RzO1xuIl19","import TemplateTag from '../TemplateTag';\nimport stripIndentTransformer from '../stripIndentTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\n\nvar stripIndent = new TemplateTag(stripIndentTransformer, trimResultTransformer);\n\nexport default stripIndent;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zdHJpcEluZGVudC9zdHJpcEluZGVudC5qcyJdLCJuYW1lcyI6WyJUZW1wbGF0ZVRhZyIsInN0cmlwSW5kZW50VHJhbnNmb3JtZXIiLCJ0cmltUmVzdWx0VHJhbnNmb3JtZXIiLCJzdHJpcEluZGVudCJdLCJtYXBwaW5ncyI6IkFBQUEsT0FBT0EsV0FBUCxNQUF3QixnQkFBeEI7QUFDQSxPQUFPQyxzQkFBUCxNQUFtQywyQkFBbkM7QUFDQSxPQUFPQyxxQkFBUCxNQUFrQywwQkFBbEM7O0FBRUEsSUFBTUMsY0FBYyxJQUFJSCxXQUFKLENBQ2xCQyxzQkFEa0IsRUFFbEJDLHFCQUZrQixDQUFwQjs7QUFLQSxlQUFlQyxXQUFmIiwiZmlsZSI6InN0cmlwSW5kZW50LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFRlbXBsYXRlVGFnIGZyb20gJy4uL1RlbXBsYXRlVGFnJztcbmltcG9ydCBzdHJpcEluZGVudFRyYW5zZm9ybWVyIGZyb20gJy4uL3N0cmlwSW5kZW50VHJhbnNmb3JtZXInO1xuaW1wb3J0IHRyaW1SZXN1bHRUcmFuc2Zvcm1lciBmcm9tICcuLi90cmltUmVzdWx0VHJhbnNmb3JtZXInO1xuXG5jb25zdCBzdHJpcEluZGVudCA9IG5ldyBUZW1wbGF0ZVRhZyhcbiAgc3RyaXBJbmRlbnRUcmFuc2Zvcm1lcixcbiAgdHJpbVJlc3VsdFRyYW5zZm9ybWVyLFxuKTtcblxuZXhwb3J0IGRlZmF1bHQgc3RyaXBJbmRlbnQ7XG4iXX0=","import TemplateTag from '../TemplateTag';\nimport stripIndentTransformer from '../stripIndentTransformer';\nimport trimResultTransformer from '../trimResultTransformer';\n\nvar stripIndents = new TemplateTag(stripIndentTransformer('all'), trimResultTransformer);\n\nexport default stripIndents;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zdHJpcEluZGVudHMvc3RyaXBJbmRlbnRzLmpzIl0sIm5hbWVzIjpbIlRlbXBsYXRlVGFnIiwic3RyaXBJbmRlbnRUcmFuc2Zvcm1lciIsInRyaW1SZXN1bHRUcmFuc2Zvcm1lciIsInN0cmlwSW5kZW50cyJdLCJtYXBwaW5ncyI6IkFBQUEsT0FBT0EsV0FBUCxNQUF3QixnQkFBeEI7QUFDQSxPQUFPQyxzQkFBUCxNQUFtQywyQkFBbkM7QUFDQSxPQUFPQyxxQkFBUCxNQUFrQywwQkFBbEM7O0FBRUEsSUFBTUMsZUFBZSxJQUFJSCxXQUFKLENBQ25CQyx1QkFBdUIsS0FBdkIsQ0FEbUIsRUFFbkJDLHFCQUZtQixDQUFyQjs7QUFLQSxlQUFlQyxZQUFmIiwiZmlsZSI6InN0cmlwSW5kZW50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBUZW1wbGF0ZVRhZyBmcm9tICcuLi9UZW1wbGF0ZVRhZyc7XG5pbXBvcnQgc3RyaXBJbmRlbnRUcmFuc2Zvcm1lciBmcm9tICcuLi9zdHJpcEluZGVudFRyYW5zZm9ybWVyJztcbmltcG9ydCB0cmltUmVzdWx0VHJhbnNmb3JtZXIgZnJvbSAnLi4vdHJpbVJlc3VsdFRyYW5zZm9ybWVyJztcblxuY29uc3Qgc3RyaXBJbmRlbnRzID0gbmV3IFRlbXBsYXRlVGFnKFxuICBzdHJpcEluZGVudFRyYW5zZm9ybWVyKCdhbGwnKSxcbiAgdHJpbVJlc3VsdFRyYW5zZm9ybWVyLFxuKTtcblxuZXhwb3J0IGRlZmF1bHQgc3RyaXBJbmRlbnRzO1xuIl19","import { css, cx } from '@emotion/css';\nimport { stripIndent, stripIndents } from 'common-tags';\nimport Prism from 'prismjs';\nimport React, { PureComponent } from 'react';\n\nimport { QueryEditorHelpProps } from '@grafana/data';\nimport { flattenTokens } from '@grafana/ui/src/slate-plugins/slate-prism';\n\nimport tokenizer from '../syntax';\nimport { CloudWatchQuery } from '../types';\n\ninterface QueryExample {\n  category: string;\n  examples: Array<{\n    title: string;\n    expr: string;\n  }>;\n}\n\nconst CLIQ_EXAMPLES: QueryExample[] = [\n  {\n    category: 'Lambda',\n    examples: [\n      {\n        title: 'View latency statistics for 5-minute intervals',\n        expr: stripIndents`filter @type = \"REPORT\" |\n                           stats avg(@duration), max(@duration), min(@duration) by bin(5m)`,\n      },\n      {\n        title: 'Determine the amount of overprovisioned memory',\n        expr: stripIndent`\n        filter @type = \"REPORT\" |\n        stats max(@memorySize / 1024 / 1024) as provisonedMemoryMB,\n              min(@maxMemoryUsed / 1024 / 1024) as smallestMemoryRequestMB,\n              avg(@maxMemoryUsed / 1024 / 1024) as avgMemoryUsedMB,\n              max(@maxMemoryUsed / 1024 / 1024) as maxMemoryUsedMB,\n              provisonedMemoryMB - maxMemoryUsedMB as overProvisionedMB`,\n      },\n      {\n        title: 'Find the most expensive requests',\n        expr: stripIndents`filter @type = \"REPORT\" |\n                           fields @requestId, @billedDuration |\n                           sort by @billedDuration desc`,\n      },\n    ],\n  },\n\n  {\n    category: 'VPC Flow Logs',\n    examples: [\n      {\n        title: 'Average, min, and max byte transfers by source and destination IP addresses',\n        expr: `stats avg(bytes), min(bytes), max(bytes) by srcAddr, dstAddr`,\n      },\n      {\n        title: 'IP addresses using UDP transfer protocol',\n        expr: 'filter protocol=17 | stats count(*) by srcAddr',\n      },\n      {\n        title: 'Top 10 byte transfers by source and destination IP addresses',\n        expr: stripIndents`stats sum(bytes) as bytesTransferred by srcAddr, dstAddr |\n                           sort bytesTransferred desc |\n                           limit 10`,\n      },\n      {\n        title: 'Top 20 source IP addresses with highest number of rejected requests',\n        expr: stripIndents`filter action=\"REJECT\" |\n                           stats count(*) as numRejections by srcAddr |\n                           sort numRejections desc |\n                           limit 20`,\n      },\n    ],\n  },\n  {\n    category: 'CloudTrail',\n    examples: [\n      {\n        title: 'Number of log entries by service, event type, and region',\n        expr: 'stats count(*) by eventSource, eventName, awsRegion',\n      },\n\n      {\n        title: 'Number of log entries by region and EC2 event type',\n        expr: stripIndents`filter eventSource=\"ec2.amazonaws.com\" |\n                           stats count(*) as eventCount by eventName, awsRegion |\n                           sort eventCount desc`,\n      },\n\n      {\n        title: 'Regions, usernames, and ARNs of newly created IAM users',\n        expr: stripIndents`filter eventName=\"CreateUser\" |\n                           fields awsRegion, requestParameters.userName, responseElements.user.arn`,\n      },\n    ],\n  },\n  {\n    category: 'Common Queries',\n    examples: [\n      {\n        title: '25 most recently added log events',\n        expr: stripIndents`fields @timestamp, @message |\n                           sort @timestamp desc |\n                           limit 25`,\n      },\n      {\n        title: 'Number of exceptions logged every 5 minutes',\n        expr: stripIndents`filter @message like /Exception/ |\n                           stats count(*) as exceptionCount by bin(5m) |\n                           sort exceptionCount desc`,\n      },\n      {\n        title: 'List of log events that are not exceptions',\n        expr: 'fields @message | filter @message not like /Exception/',\n      },\n    ],\n  },\n  {\n    category: 'Route 53',\n    examples: [\n      {\n        title: 'Number of requests received every 10  minutes by edge location',\n        expr: 'stats count(*) by queryType, bin(10m)',\n      },\n      {\n        title: 'Number of unsuccessful requests by domain',\n        expr: 'filter responseCode=\"SERVFAIL\" | stats count(*) by queryName',\n      },\n      {\n        title: 'Number of requests received every 10  minutes by edge location',\n        expr: 'stats count(*) as numRequests by resolverIp | sort numRequests desc | limit 10',\n      },\n    ],\n  },\n  {\n    category: 'AWS AppSync',\n    examples: [\n      {\n        title: 'Number of unique HTTP status codes',\n        expr: stripIndents`fields ispresent(graphQLAPIId) as isApi |\n                           filter isApi |\n                           filter logType = \"RequestSummary\" |\n                           stats count() as statusCount by statusCode |\n                           sort statusCount desc`,\n      },\n      {\n        title: 'Top 10 resolvers with maximum latency',\n        expr: stripIndents`fields resolverArn, duration |\n                           filter logType = \"Tracing\" |\n                           sort duration desc |\n                           limit 10`,\n      },\n      {\n        title: 'Most frequently invoked resolvers',\n        expr: stripIndents`fields ispresent(resolverArn) as isRes |\n                           stats count() as invocationCount by resolverArn |\n                           filter isRes |\n                           filter logType = \"Tracing\" |\n                           sort invocationCount desc |\n                           limit 10`,\n      },\n      {\n        title: 'Resolvers with most errors in mapping templates',\n        expr: stripIndents`fields ispresent(resolverArn) as isRes |\n                           stats count() as errorCount by resolverArn, logType |\n                           filter isRes and (logType = \"RequestMapping\" or logType = \"ResponseMapping\") and fieldInError |\n                           sort errorCount desc |\n                           limit 10`,\n      },\n      {\n        title: 'Field latency statistics',\n        expr: stripIndents`fields requestId, latency |\n                           filter logType = \"RequestSummary\" |\n                           sort latency desc |\n                           limit 10`,\n      },\n      {\n        title: 'Resolver latency statistics',\n        expr: stripIndents`fields ispresent(resolverArn) as isRes |\n                           filter isRes |\n                           filter logType = \"Tracing\" |\n                           stats min(duration), max(duration), avg(duration) as avgDur by resolverArn |\n                           sort avgDur desc |\n                           limit 10`,\n      },\n      {\n        title: 'Top 10 requests with maximum latency',\n        expr: stripIndents`fields requestId, latency |\n                           filter logType = \"RequestSummary\" |\n                           sort latency desc |\n                           limit 10`,\n      },\n    ],\n  },\n];\n\nfunction renderHighlightedMarkup(code: string, keyPrefix: string) {\n  const grammar = tokenizer;\n  const tokens = flattenTokens(Prism.tokenize(code, grammar));\n  const spans = tokens\n    .filter((token) => typeof token !== 'string')\n    .map((token, i) => {\n      return (\n        <span\n          className={`prism-token token ${token.types.join(' ')} ${token.aliases.join(' ')}`}\n          key={`${keyPrefix}-token-${i}`}\n        >\n          {token.content}\n        </span>\n      );\n    });\n\n  return <div className=\"slate-query-field\">{spans}</div>;\n}\n\nconst exampleCategory = css`\n  margin-top: 5px;\n`;\n\nexport default class LogsCheatSheet extends PureComponent<\n  QueryEditorHelpProps<CloudWatchQuery>,\n  { userExamples: string[] }\n> {\n  onClickExample(query: CloudWatchQuery) {\n    this.props.onClickExample(query);\n  }\n\n  renderExpression(expr: string, keyPrefix: string) {\n    return (\n      <div\n        className=\"cheat-sheet-item__example\"\n        key={expr}\n        onClick={() =>\n          this.onClickExample({\n            refId: this.props.query.refId ?? 'A',\n            expression: expr,\n            queryMode: 'Logs',\n            region: this.props.query.region,\n            id: this.props.query.refId ?? 'A',\n            logGroupNames: 'logGroupNames' in this.props.query ? this.props.query.logGroupNames : [],\n          })\n        }\n      >\n        <pre>{renderHighlightedMarkup(expr, keyPrefix)}</pre>\n      </div>\n    );\n  }\n\n  renderLogsCheatSheet() {\n    return (\n      <div>\n        <h2>CloudWatch Logs Cheat Sheet</h2>\n        {CLIQ_EXAMPLES.map((cat, i) => (\n          <div key={`${cat.category}-${i}`}>\n            <div className={`cheat-sheet-item__title ${cx(exampleCategory)}`}>{cat.category}</div>\n            {cat.examples.map((item, j) => (\n              <div className=\"cheat-sheet-item\" key={`item-${j}`}>\n                <h4>{item.title}</h4>\n                {this.renderExpression(item.expr, `item-${j}`)}\n              </div>\n            ))}\n          </div>\n        ))}\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        <h3>CloudWatch Logs cheat sheet</h3>\n        {CLIQ_EXAMPLES.map((cat, i) => (\n          <div key={`cat-${i}`}>\n            <div className={`cheat-sheet-item__title ${cx(exampleCategory)}`}>{cat.category}</div>\n            {cat.examples.map((item, j) => (\n              <div className=\"cheat-sheet-item\" key={`item-${j}`}>\n                <h4>{item.title}</h4>\n                {this.renderExpression(item.expr, `item-${j}`)}\n              </div>\n            ))}\n          </div>\n        ))}\n      </div>\n    );\n  }\n}\n","import { monacoTypes } from '@grafana/ui';\n\nimport { TokenTypes } from './types';\n\nexport class LinkedToken {\n  constructor(\n    public type: string,\n    public value: string,\n    public range: monacoTypes.IRange,\n    public previous: LinkedToken | null,\n    public next: LinkedToken | null,\n    public tokenTypes: TokenTypes\n  ) {}\n\n  isKeyword(): boolean {\n    return this.type === this.tokenTypes.Keyword;\n  }\n\n  isWhiteSpace(): boolean {\n    return this.type === this.tokenTypes.Whitespace;\n  }\n\n  isParenthesis(): boolean {\n    return this.type === this.tokenTypes.Parenthesis;\n  }\n\n  isIdentifier(): boolean {\n    return this.type === this.tokenTypes.Identifier;\n  }\n\n  isString(): boolean {\n    return this.type === this.tokenTypes.String;\n  }\n\n  isDoubleQuotedString(): boolean {\n    return this.type === this.tokenTypes.Type;\n  }\n\n  isVariable(): boolean {\n    return this.type === this.tokenTypes.Variable;\n  }\n\n  isFunction(): boolean {\n    return this.type === this.tokenTypes.Function;\n  }\n\n  isNumber(): boolean {\n    return this.type === this.tokenTypes.Number;\n  }\n\n  is(type: string, value?: string | number | boolean): boolean {\n    const isType = this.type === type;\n    return value !== undefined ? isType && this.value === value : isType;\n  }\n\n  endsWith(value: string | number | boolean): boolean {\n    return this.value === value || this.value[this.value.length - 1] === value;\n  }\n\n  getPreviousNonWhiteSpaceToken(): LinkedToken | null {\n    let curr = this.previous;\n    while (curr != null) {\n      if (!curr.isWhiteSpace()) {\n        return curr;\n      }\n      curr = curr.previous;\n    }\n    return null;\n  }\n\n  getPreviousOfType(type: string, value?: string): LinkedToken | null {\n    let curr = this.previous;\n    while (curr != null) {\n      const isType = curr.type === type;\n      if (value !== undefined ? isType && curr.value === value : isType) {\n        return curr;\n      }\n      curr = curr.previous;\n    }\n    return null;\n  }\n\n  getPreviousUntil(type: string, ignoreTypes: string[], value?: string): LinkedToken[] | null {\n    let tokens: LinkedToken[] = [];\n    let curr = this.previous;\n    while (curr != null) {\n      if (ignoreTypes.some((t) => t === curr?.type)) {\n        curr = curr.previous;\n        continue;\n      }\n\n      const isType = curr.type === type;\n      if (value !== undefined ? isType && curr.value === value : isType) {\n        return tokens;\n      }\n      if (!curr.isWhiteSpace()) {\n        tokens.push(curr);\n      }\n      curr = curr.previous;\n    }\n\n    return tokens;\n  }\n\n  getNextUntil(type: string, ignoreTypes: string[], value?: string): LinkedToken[] | null {\n    let tokens: LinkedToken[] = [];\n    let curr = this.next;\n    while (curr != null) {\n      if (ignoreTypes.some((t) => t === curr?.type)) {\n        curr = curr.next;\n        continue;\n      }\n\n      const isType = curr.type === type;\n      if (value !== undefined ? isType && curr.value === value : isType) {\n        return tokens;\n      }\n      if (!curr.isWhiteSpace()) {\n        tokens.push(curr);\n      }\n      curr = curr.next;\n    }\n\n    return tokens;\n  }\n\n  getPreviousKeyword(): LinkedToken | null {\n    let curr = this.previous;\n    while (curr != null) {\n      if (curr.isKeyword()) {\n        return curr;\n      }\n      curr = curr.previous;\n    }\n    return null;\n  }\n\n  getNextNonWhiteSpaceToken(): LinkedToken | null {\n    let curr = this.next;\n    while (curr != null) {\n      if (!curr.isWhiteSpace()) {\n        return curr;\n      }\n      curr = curr.next;\n    }\n    return null;\n  }\n\n  getNextOfType(type: string, value?: string): LinkedToken | null {\n    let curr = this.next;\n    while (curr != null) {\n      const isType = curr.type === type;\n      if (value !== undefined ? isType && curr.value === value : isType) {\n        return curr;\n      }\n      curr = curr.next;\n    }\n    return null;\n  }\n}\n","import { monacoTypes } from '@grafana/ui';\n\nexport interface TokenTypes {\n  Parenthesis: string;\n  Whitespace: string;\n  Keyword: string;\n  Delimiter: string;\n  Operator: string;\n  Identifier: string;\n  Type: string;\n  Function: string;\n  Number: string;\n  String: string;\n  Variable: string;\n}\n\nexport enum StatementPosition {\n  Unknown,\n  // sql\n  SelectKeyword,\n  AfterSelectKeyword,\n  AfterSelectFuncFirstArgument,\n  AfterFromKeyword,\n  SchemaFuncFirstArgument,\n  SchemaFuncExtraArgument,\n  FromKeyword,\n  AfterFrom,\n  WhereKey,\n  WhereComparisonOperator,\n  WhereValue,\n  AfterWhereValue,\n  AfterGroupByKeywords,\n  AfterGroupBy,\n  AfterOrderByKeywords,\n  AfterOrderByFunction,\n  AfterOrderByDirection,\n  // metric math\n  PredefinedFunction,\n  SearchFuncSecondArg,\n  SearchFuncThirdArg,\n  PredefinedFuncSecondArg,\n  AfterFunction,\n  WithinString,\n}\n\nexport enum SuggestionKind {\n  SelectKeyword,\n  FunctionsWithArguments,\n  Metrics,\n  FromKeyword,\n  SchemaKeyword,\n  Namespaces,\n  LabelKeys,\n  WhereKeyword,\n  GroupByKeywords,\n  OrderByKeywords,\n  FunctionsWithoutArguments,\n  LimitKeyword,\n  SortOrderDirectionKeyword,\n  ComparisonOperators,\n  LabelValues,\n  LogicalOperators,\n\n  // metricmath,\n  KeywordArguments,\n  Operators,\n  Statistic,\n  Period,\n}\n\nexport enum CompletionItemPriority {\n  High = 'a',\n  MediumHigh = 'd',\n  Medium = 'g',\n  MediumLow = 'k',\n  Low = 'q',\n}\n\nexport interface Editor {\n  tokenize: (value: string, languageId: string) => monacoTypes.Token[][];\n}\n\nexport interface Range {\n  containsPosition: (range: monacoTypes.IRange, position: monacoTypes.IPosition) => boolean;\n  fromPositions: (start: monacoTypes.IPosition, end?: monacoTypes.IPosition) => monacoTypes.Range;\n}\n\nexport interface Languages {\n  CompletionItemInsertTextRule: {\n    InsertAsSnippet: 4;\n  };\n  CompletionItemKind: {\n    Function: 1;\n  };\n}\nexport interface Monaco {\n  editor: Editor;\n  Range: Range;\n  languages: Languages;\n}\n","import { getTemplateSrv, TemplateSrv } from '@grafana/runtime';\nimport type { Monaco, monacoTypes } from '@grafana/ui';\n\nimport { CloudWatchDatasource } from '../datasource';\n\nimport { LinkedToken } from './LinkedToken';\nimport { linkedTokenBuilder } from './linkedTokenBuilder';\nimport { LanguageDefinition } from './register';\nimport { StatementPosition, SuggestionKind, TokenTypes } from './types';\n\ntype CompletionItem = monacoTypes.languages.CompletionItem;\n\n/*\nCompletionItemProvider is an extendable class which needs to implement :\n- tokenTypes\n- getStatementPosition\n- getSuggestionKinds\n- getSuggestions\n*/\nexport class CompletionItemProvider {\n  templateVariables: string[];\n  datasource: CloudWatchDatasource;\n  templateSrv: TemplateSrv;\n  tokenTypes: TokenTypes;\n\n  constructor(datasource: CloudWatchDatasource, templateSrv: TemplateSrv = getTemplateSrv()) {\n    this.datasource = datasource;\n    this.templateSrv = templateSrv;\n    this.templateVariables = this.datasource.getVariables();\n    this.templateSrv = templateSrv;\n\n    // implement with more specific tokens when extending this class\n    this.tokenTypes = {\n      Parenthesis: 'delimiter.parenthesis',\n      Whitespace: 'white',\n      Keyword: 'keyword',\n      Delimiter: 'delimiter',\n      Operator: 'operator',\n      Identifier: 'identifier',\n      Type: 'type',\n      Function: 'predefined',\n      Number: 'number',\n      String: 'string',\n      Variable: 'variable',\n    };\n  }\n\n  // implemented by subclasses, given a token, returns a lexical position in a query\n  getStatementPosition(currentToken: LinkedToken | null): StatementPosition {\n    return StatementPosition.Unknown;\n  }\n\n  // implemented by subclasses, given a lexical statement position, returns potential kinds of suggestions\n  getSuggestionKinds(position: StatementPosition): SuggestionKind[] {\n    return [];\n  }\n\n  // implemented by subclasses, given potential suggestions kinds, returns suggestion objects for monaco aka \"CompletionItem\"\n  getSuggestions(\n    monaco: Monaco,\n    currentToken: LinkedToken | null,\n    suggestionKinds: SuggestionKind[],\n    statementPosition: StatementPosition,\n    position: monacoTypes.IPosition\n  ): Promise<CompletionItem[]> {\n    return Promise.reject([]);\n  }\n\n  // called by registerLanguage and passed to monaco with registerCompletionItemProvider\n  // returns an object that implements https://microsoft.github.io/monaco-editor/api/interfaces/monaco.languages.CompletionItemProvider.html\n  getCompletionProvider(monaco: Monaco, languageDefinition: LanguageDefinition) {\n    return {\n      triggerCharacters: [' ', '$', ',', '(', \"'\"], // one of these characters indicates that it is time to look for a suggestion\n      provideCompletionItems: async (model: monacoTypes.editor.ITextModel, position: monacoTypes.IPosition) => {\n        const currentToken = linkedTokenBuilder(monaco, languageDefinition, model, position, this.tokenTypes);\n        const statementPosition = this.getStatementPosition(currentToken);\n        const suggestionKinds = this.getSuggestionKinds(statementPosition);\n        const suggestions = await this.getSuggestions(\n          monaco,\n          currentToken,\n          suggestionKinds,\n          statementPosition,\n          position\n        );\n\n        return {\n          suggestions,\n        };\n      },\n    };\n  }\n}\n","import type { monacoTypes } from '@grafana/ui';\n\nimport { LinkedToken } from './LinkedToken';\nimport { LanguageDefinition } from './register';\nimport { Monaco, TokenTypes } from './types';\n\nexport function linkedTokenBuilder(\n  monaco: Monaco,\n  language: LanguageDefinition,\n  model: monacoTypes.editor.ITextModel,\n  position: monacoTypes.IPosition,\n  tokenTypes: TokenTypes\n) {\n  let current: LinkedToken | null = null;\n  let previous: LinkedToken | null = null;\n  const tokensPerLine = monaco.editor.tokenize(model.getValue() ?? '', language.id);\n\n  for (let lineIndex = 0; lineIndex < tokensPerLine.length; lineIndex++) {\n    const tokens = tokensPerLine[lineIndex];\n    // In case position is first column in new line, add empty whitespace token so that links are not broken\n    if (!tokens.length && previous) {\n      const token: monacoTypes.Token = {\n        offset: 0,\n        type: tokenTypes.Whitespace,\n        language: language.id,\n        _tokenBrand: undefined,\n      };\n      tokens.push(token);\n    }\n\n    for (let columnIndex = 0; columnIndex < tokens.length; columnIndex++) {\n      const token = tokens[columnIndex];\n      let endColumn =\n        tokens.length > columnIndex + 1 ? tokens[columnIndex + 1].offset + 1 : model.getLineLength(lineIndex + 1) + 1;\n\n      const range: monacoTypes.IRange = {\n        startLineNumber: lineIndex + 1,\n        startColumn: token.offset === 0 ? 0 : token.offset + 1,\n        endLineNumber: lineIndex + 1,\n        endColumn,\n      };\n\n      const value = model.getValueInRange(range);\n      const newToken: LinkedToken = new LinkedToken(token.type, value, range, previous, null, tokenTypes);\n\n      if (monaco.Range.containsPosition(range, position)) {\n        current = newToken;\n      }\n\n      if (previous) {\n        previous.next = newToken;\n      }\n      previous = newToken;\n    }\n  }\n\n  return current;\n}\n","import { TokenTypes } from '../../monarch/types';\n\nexport const SQLTokenTypes: TokenTypes = {\n  Parenthesis: 'delimiter.parenthesis.sql',\n  Whitespace: 'white.sql',\n  Keyword: 'keyword.sql',\n  Delimiter: 'delimiter.sql',\n  Operator: 'operator.sql',\n  Identifier: 'identifier.sql',\n  Type: 'type.sql',\n  Function: 'predefined.sql',\n  Number: 'number.sql',\n  String: 'string.sql',\n  Variable: 'variable.sql',\n};\n","import { LinkedToken } from '../../monarch/LinkedToken';\nimport { StatementPosition } from '../../monarch/types';\nimport { AND, ASC, BY, DESC, EQUALS, FROM, GROUP, NOT_EQUALS, ORDER, SCHEMA, SELECT, WHERE } from '../language';\n\nimport { SQLTokenTypes } from './types';\n\nexport function getStatementPosition(currentToken: LinkedToken | null): StatementPosition {\n  const previousNonWhiteSpace = currentToken?.getPreviousNonWhiteSpaceToken();\n  const previousKeyword = currentToken?.getPreviousKeyword();\n\n  const previousIsSlash = currentToken?.getPreviousNonWhiteSpaceToken()?.is(SQLTokenTypes.Operator, '/');\n  if (\n    currentToken === null ||\n    (currentToken.isWhiteSpace() && currentToken.previous === null) ||\n    (currentToken.is(SQLTokenTypes.Keyword, SELECT) && currentToken.previous === null) ||\n    previousIsSlash ||\n    (currentToken.isIdentifier() && (previousIsSlash || currentToken?.previous === null))\n  ) {\n    return StatementPosition.SelectKeyword;\n  }\n\n  if (previousNonWhiteSpace?.value === SELECT) {\n    return StatementPosition.AfterSelectKeyword;\n  }\n\n  if (\n    (previousNonWhiteSpace?.is(SQLTokenTypes.Parenthesis, '(') || currentToken?.is(SQLTokenTypes.Parenthesis, '()')) &&\n    previousKeyword?.value === SELECT\n  ) {\n    return StatementPosition.AfterSelectFuncFirstArgument;\n  }\n\n  if (previousKeyword?.value === SELECT && previousNonWhiteSpace?.isParenthesis()) {\n    return StatementPosition.FromKeyword;\n  }\n\n  if (previousNonWhiteSpace?.value === FROM) {\n    return StatementPosition.AfterFromKeyword;\n  }\n\n  if (\n    (previousNonWhiteSpace?.is(SQLTokenTypes.Parenthesis, '(') || currentToken?.is(SQLTokenTypes.Parenthesis, '()')) &&\n    previousKeyword?.value === SCHEMA\n  ) {\n    return StatementPosition.SchemaFuncFirstArgument;\n  }\n\n  if (previousKeyword?.value === SCHEMA && previousNonWhiteSpace?.is(SQLTokenTypes.Delimiter, ',')) {\n    return StatementPosition.SchemaFuncExtraArgument;\n  }\n\n  if (\n    (previousKeyword?.value === FROM && previousNonWhiteSpace?.isDoubleQuotedString()) ||\n    (previousKeyword?.value === FROM && previousNonWhiteSpace?.isVariable()) ||\n    (previousKeyword?.value === SCHEMA && previousNonWhiteSpace?.is(SQLTokenTypes.Parenthesis, ')'))\n  ) {\n    return StatementPosition.AfterFrom;\n  }\n\n  if (\n    previousKeyword?.value === WHERE &&\n    (previousNonWhiteSpace?.isKeyword() ||\n      previousNonWhiteSpace?.is(SQLTokenTypes.Parenthesis, '(') ||\n      previousNonWhiteSpace?.is(SQLTokenTypes.Operator, AND))\n  ) {\n    return StatementPosition.WhereKey;\n  }\n\n  if (\n    previousKeyword?.value === WHERE &&\n    (previousNonWhiteSpace?.isIdentifier() || previousNonWhiteSpace?.isDoubleQuotedString())\n  ) {\n    return StatementPosition.WhereComparisonOperator;\n  }\n\n  if (\n    previousKeyword?.value === WHERE &&\n    (previousNonWhiteSpace?.is(SQLTokenTypes.Operator, EQUALS) ||\n      previousNonWhiteSpace?.is(SQLTokenTypes.Operator, NOT_EQUALS))\n  ) {\n    return StatementPosition.WhereValue;\n  }\n\n  if (\n    previousKeyword?.value === WHERE &&\n    (previousNonWhiteSpace?.isString() || previousNonWhiteSpace?.is(SQLTokenTypes.Parenthesis, ')'))\n  ) {\n    return StatementPosition.AfterWhereValue;\n  }\n\n  if (\n    previousKeyword?.is(SQLTokenTypes.Keyword, BY) &&\n    previousKeyword?.getPreviousKeyword()?.is(SQLTokenTypes.Keyword, GROUP) &&\n    (previousNonWhiteSpace?.is(SQLTokenTypes.Keyword, BY) || previousNonWhiteSpace?.is(SQLTokenTypes.Delimiter, ','))\n  ) {\n    return StatementPosition.AfterGroupByKeywords;\n  }\n\n  if (\n    previousKeyword?.is(SQLTokenTypes.Keyword, BY) &&\n    previousKeyword?.getPreviousKeyword()?.is(SQLTokenTypes.Keyword, GROUP) &&\n    (previousNonWhiteSpace?.isIdentifier() || previousNonWhiteSpace?.isDoubleQuotedString())\n  ) {\n    return StatementPosition.AfterGroupBy;\n  }\n\n  if (\n    previousNonWhiteSpace?.is(SQLTokenTypes.Keyword, BY) &&\n    previousNonWhiteSpace?.getPreviousKeyword()?.is(SQLTokenTypes.Keyword, ORDER)\n  ) {\n    return StatementPosition.AfterOrderByKeywords;\n  }\n\n  if (\n    previousKeyword?.is(SQLTokenTypes.Keyword, BY) &&\n    previousKeyword?.getPreviousKeyword()?.is(SQLTokenTypes.Keyword, ORDER) &&\n    previousNonWhiteSpace?.is(SQLTokenTypes.Parenthesis) &&\n    previousNonWhiteSpace?.getPreviousNonWhiteSpaceToken()?.is(SQLTokenTypes.Function)\n  ) {\n    return StatementPosition.AfterOrderByFunction;\n  }\n\n  if (previousKeyword?.is(SQLTokenTypes.Keyword, DESC) || previousKeyword?.is(SQLTokenTypes.Keyword, ASC)) {\n    return StatementPosition.AfterOrderByDirection;\n  }\n\n  return StatementPosition.Unknown;\n}\n","import { StatementPosition, SuggestionKind } from '../../monarch/types';\n\nexport function getSuggestionKinds(statementPosition: StatementPosition): SuggestionKind[] {\n  switch (statementPosition) {\n    case StatementPosition.SelectKeyword:\n      return [SuggestionKind.SelectKeyword];\n    case StatementPosition.AfterSelectKeyword:\n      return [SuggestionKind.FunctionsWithArguments];\n    case StatementPosition.AfterSelectFuncFirstArgument:\n      return [SuggestionKind.Metrics];\n    case StatementPosition.AfterFromKeyword:\n      return [SuggestionKind.Namespaces, SuggestionKind.SchemaKeyword];\n    case StatementPosition.SchemaFuncFirstArgument:\n      return [SuggestionKind.Namespaces];\n    case StatementPosition.SchemaFuncExtraArgument:\n      return [SuggestionKind.LabelKeys];\n    case StatementPosition.FromKeyword:\n      return [SuggestionKind.FromKeyword];\n    case StatementPosition.AfterFrom:\n      return [\n        SuggestionKind.WhereKeyword,\n        SuggestionKind.GroupByKeywords,\n        SuggestionKind.OrderByKeywords,\n        SuggestionKind.LimitKeyword,\n      ];\n    case StatementPosition.WhereKey:\n      return [SuggestionKind.LabelKeys];\n    case StatementPosition.WhereComparisonOperator:\n      return [SuggestionKind.ComparisonOperators];\n    case StatementPosition.WhereValue:\n      return [SuggestionKind.LabelValues];\n    case StatementPosition.AfterWhereValue:\n      return [\n        SuggestionKind.LogicalOperators,\n        SuggestionKind.GroupByKeywords,\n        SuggestionKind.OrderByKeywords,\n        SuggestionKind.LimitKeyword,\n      ];\n    case StatementPosition.AfterGroupByKeywords:\n      return [SuggestionKind.LabelKeys];\n    case StatementPosition.AfterGroupBy:\n      return [SuggestionKind.OrderByKeywords, SuggestionKind.LimitKeyword];\n    case StatementPosition.AfterOrderByKeywords:\n      return [SuggestionKind.FunctionsWithoutArguments];\n    case StatementPosition.AfterOrderByFunction:\n      return [SuggestionKind.SortOrderDirectionKeyword, SuggestionKind.LimitKeyword];\n    case StatementPosition.AfterOrderByDirection:\n      return [SuggestionKind.LimitKeyword];\n  }\n\n  return [];\n}\n","import { LinkedToken } from '../../monarch/LinkedToken';\nimport { FROM, SCHEMA, SELECT } from '../language';\n\nimport { SQLTokenTypes } from './types';\n\nexport const getSelectToken = (currentToken: LinkedToken | null) =>\n  currentToken?.getPreviousOfType(SQLTokenTypes.Keyword, SELECT) ?? null;\n\nexport const getSelectStatisticToken = (currentToken: LinkedToken | null) => {\n  const assumedStatisticToken = getSelectToken(currentToken)?.getNextNonWhiteSpaceToken();\n  return assumedStatisticToken?.isVariable() || assumedStatisticToken?.isFunction() ? assumedStatisticToken : null;\n};\n\nexport const getMetricNameToken = (currentToken: LinkedToken | null) => {\n  // statistic function is followed by `(` and then an argument\n  const assumedMetricNameToken = getSelectStatisticToken(currentToken)?.next?.next;\n  return assumedMetricNameToken?.isVariable() || assumedMetricNameToken?.isIdentifier() ? assumedMetricNameToken : null;\n};\n\nexport const getFromKeywordToken = (currentToken: LinkedToken | null) => {\n  const selectToken = getSelectToken(currentToken);\n  return selectToken?.getNextOfType(SQLTokenTypes.Keyword, FROM);\n};\n\nexport const getNamespaceToken = (currentToken: LinkedToken | null) => {\n  const fromToken = getFromKeywordToken(currentToken);\n  const nextNonWhiteSpace = fromToken?.getNextNonWhiteSpaceToken();\n  if (\n    nextNonWhiteSpace?.isDoubleQuotedString() ||\n    (nextNonWhiteSpace?.isVariable() && nextNonWhiteSpace?.value.toUpperCase() !== SCHEMA)\n  ) {\n    // schema is not used\n    return nextNonWhiteSpace;\n  } else if (nextNonWhiteSpace?.isKeyword() && nextNonWhiteSpace.next?.is(SQLTokenTypes.Parenthesis, '(')) {\n    // schema is specified\n    const assumedNamespaceToken = nextNonWhiteSpace.next?.next;\n    if (assumedNamespaceToken?.isDoubleQuotedString() || assumedNamespaceToken?.isVariable()) {\n      return assumedNamespaceToken;\n    }\n  }\n  return null;\n};\n","import { uniq } from 'lodash';\n\nimport { getTemplateSrv, TemplateSrv } from '@grafana/runtime';\nimport type { Monaco, monacoTypes } from '@grafana/ui';\n\nimport { CloudWatchDatasource } from '../../datasource';\nimport { CompletionItemProvider } from '../../monarch/CompletionItemProvider';\nimport { LinkedToken } from '../../monarch/LinkedToken';\nimport { TRIGGER_SUGGEST } from '../../monarch/commands';\nimport { SuggestionKind, CompletionItemPriority, StatementPosition } from '../../monarch/types';\nimport {\n  BY,\n  FROM,\n  GROUP,\n  LIMIT,\n  ORDER,\n  SCHEMA,\n  SELECT,\n  ASC,\n  DESC,\n  WHERE,\n  COMPARISON_OPERATORS,\n  LOGICAL_OPERATORS,\n  STATISTICS,\n} from '../language';\n\nimport { getStatementPosition } from './statementPosition';\nimport { getSuggestionKinds } from './suggestionKind';\nimport { getMetricNameToken, getNamespaceToken } from './tokenUtils';\nimport { SQLTokenTypes } from './types';\n\ntype CompletionItem = monacoTypes.languages.CompletionItem;\n\nexport class SQLCompletionItemProvider extends CompletionItemProvider {\n  region: string;\n\n  constructor(datasource: CloudWatchDatasource, templateSrv: TemplateSrv = getTemplateSrv()) {\n    super(datasource, templateSrv);\n    this.region = datasource.getActualRegion();\n    this.getStatementPosition = getStatementPosition;\n    this.getSuggestionKinds = getSuggestionKinds;\n    this.tokenTypes = SQLTokenTypes;\n  }\n\n  setRegion(region: string) {\n    this.region = region;\n  }\n\n  async getSuggestions(\n    monaco: Monaco,\n    currentToken: LinkedToken | null,\n    suggestionKinds: SuggestionKind[],\n    statementPosition: StatementPosition,\n    position: monacoTypes.IPosition\n  ): Promise<CompletionItem[]> {\n    let suggestions: CompletionItem[] = [];\n    const invalidRangeToken = currentToken?.isWhiteSpace() || currentToken?.isParenthesis();\n    const range =\n      invalidRangeToken || !currentToken?.range ? monaco.Range.fromPositions(position) : currentToken?.range;\n\n    const toCompletionItem = (value: string, rest: Partial<CompletionItem> = {}) => {\n      const item: CompletionItem = {\n        label: value,\n        insertText: value,\n        kind: monaco.languages.CompletionItemKind.Field,\n        range,\n        sortText: CompletionItemPriority.Medium,\n        ...rest,\n      };\n      return item;\n    };\n\n    function addSuggestion(value: string, rest: Partial<CompletionItem> = {}) {\n      suggestions = [...suggestions, toCompletionItem(value, rest)];\n    }\n\n    for (const suggestion of suggestionKinds) {\n      switch (suggestion) {\n        case SuggestionKind.SelectKeyword:\n          addSuggestion(SELECT, {\n            insertText: `${SELECT} $0`,\n            insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,\n            kind: monaco.languages.CompletionItemKind.Keyword,\n            command: TRIGGER_SUGGEST,\n          });\n          break;\n\n        case SuggestionKind.FunctionsWithArguments:\n          STATISTICS.map((s) =>\n            addSuggestion(s, {\n              insertText: `${s}($0)`,\n              insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,\n              command: TRIGGER_SUGGEST,\n              kind: monaco.languages.CompletionItemKind.Function,\n            })\n          );\n          break;\n\n        case SuggestionKind.FunctionsWithoutArguments:\n          STATISTICS.map((s) =>\n            addSuggestion(s, {\n              insertText: `${s}() `,\n              insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,\n              command: TRIGGER_SUGGEST,\n              kind: monaco.languages.CompletionItemKind.Function,\n            })\n          );\n          break;\n\n        case SuggestionKind.Metrics:\n          {\n            const namespaceToken = getNamespaceToken(currentToken);\n            if (namespaceToken?.value) {\n              // if a namespace is specified, only suggest metrics for the namespace\n              const metrics = await this.datasource.getMetrics(\n                this.templateSrv.replace(namespaceToken?.value.replace(/\\\"/g, '')),\n                this.templateSrv.replace(this.region)\n              );\n              metrics.map((m) => addSuggestion(m.value));\n            } else {\n              // If no namespace is specified in the query, just list all metrics\n              const metrics = await this.datasource.getAllMetrics(this.templateSrv.replace(this.region));\n              uniq(metrics.map((m) => m.metricName)).map((m) => addSuggestion(m, { insertText: m }));\n            }\n          }\n          break;\n\n        case SuggestionKind.FromKeyword:\n          addSuggestion(FROM, {\n            insertText: `${FROM} `,\n            command: TRIGGER_SUGGEST,\n          });\n          break;\n\n        case SuggestionKind.SchemaKeyword:\n          addSuggestion(SCHEMA, {\n            sortText: CompletionItemPriority.High,\n            insertText: `${SCHEMA}($0)`,\n            insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,\n            command: TRIGGER_SUGGEST,\n            kind: monaco.languages.CompletionItemKind.Function,\n          });\n          break;\n\n        case SuggestionKind.Namespaces:\n          const metricNameToken = getMetricNameToken(currentToken);\n          let namespaces = [];\n          if (metricNameToken?.value) {\n            // if a metric is specified, only suggest namespaces that actually have that metric\n            const metrics = await this.datasource.getAllMetrics(this.region);\n            const metricName = this.templateSrv.replace(metricNameToken.value);\n            namespaces = metrics.filter((m) => m.metricName === metricName).map((m) => m.namespace);\n          } else {\n            // if no metric is specified, just suggest all namespaces\n            const ns = await this.datasource.getNamespaces();\n            namespaces = ns.map((n) => n.value);\n          }\n          namespaces.map((n) => addSuggestion(`\"${n}\"`, { insertText: `\"${n}\"` }));\n          break;\n\n        case SuggestionKind.LabelKeys:\n          {\n            const metricNameToken = getMetricNameToken(currentToken);\n            const namespaceToken = getNamespaceToken(currentToken);\n            if (namespaceToken?.value) {\n              let dimensionFilter = {};\n              let labelKeyTokens;\n              if (statementPosition === StatementPosition.SchemaFuncExtraArgument) {\n                labelKeyTokens = namespaceToken?.getNextUntil(this.tokenTypes.Parenthesis, [\n                  this.tokenTypes.Delimiter,\n                  this.tokenTypes.Whitespace,\n                ]);\n              } else if (statementPosition === StatementPosition.AfterGroupByKeywords) {\n                labelKeyTokens = currentToken?.getPreviousUntil(this.tokenTypes.Keyword, [\n                  this.tokenTypes.Delimiter,\n                  this.tokenTypes.Whitespace,\n                ]);\n              }\n              dimensionFilter = (labelKeyTokens || []).reduce((acc, curr) => {\n                return { ...acc, [curr.value]: null };\n              }, {});\n              const keys = await this.datasource.getDimensionKeys(\n                this.templateSrv.replace(namespaceToken.value.replace(/\\\"/g, '')),\n                this.templateSrv.replace(this.region),\n                dimensionFilter,\n                metricNameToken?.value ?? ''\n              );\n              keys.map((m) => {\n                const key = /[\\s\\.-]/.test(m.value) ? `\"${m.value}\"` : m.value;\n                addSuggestion(key);\n              });\n            }\n          }\n          break;\n\n        case SuggestionKind.LabelValues:\n          {\n            const namespaceToken = getNamespaceToken(currentToken);\n            const metricNameToken = getMetricNameToken(currentToken);\n            const labelKey = currentToken?.getPreviousNonWhiteSpaceToken()?.getPreviousNonWhiteSpaceToken();\n            if (namespaceToken?.value && labelKey?.value && metricNameToken?.value) {\n              const values = await this.datasource.getDimensionValues(\n                this.templateSrv.replace(this.region),\n                this.templateSrv.replace(namespaceToken.value.replace(/\\\"/g, '')),\n                this.templateSrv.replace(metricNameToken.value),\n                this.templateSrv.replace(labelKey.value),\n                {}\n              );\n              values.map((o) =>\n                addSuggestion(`'${o.value}'`, { insertText: `'${o.value}' `, command: TRIGGER_SUGGEST })\n              );\n            }\n          }\n          break;\n\n        case SuggestionKind.LogicalOperators:\n          LOGICAL_OPERATORS.map((o) =>\n            addSuggestion(`${o}`, {\n              insertText: `${o} `,\n              command: TRIGGER_SUGGEST,\n              sortText: CompletionItemPriority.MediumHigh,\n            })\n          );\n          break;\n\n        case SuggestionKind.WhereKeyword:\n          addSuggestion(`${WHERE}`, {\n            insertText: `${WHERE} `,\n            command: TRIGGER_SUGGEST,\n            sortText: CompletionItemPriority.High,\n          });\n          break;\n\n        case SuggestionKind.ComparisonOperators:\n          COMPARISON_OPERATORS.map((o) => addSuggestion(`${o}`, { insertText: `${o} `, command: TRIGGER_SUGGEST }));\n          break;\n\n        case SuggestionKind.GroupByKeywords:\n          addSuggestion(`${GROUP} ${BY}`, {\n            insertText: `${GROUP} ${BY} `,\n            command: TRIGGER_SUGGEST,\n            sortText: CompletionItemPriority.MediumHigh,\n          });\n          break;\n\n        case SuggestionKind.OrderByKeywords:\n          addSuggestion(`${ORDER} ${BY}`, {\n            insertText: `${ORDER} ${BY} `,\n            command: TRIGGER_SUGGEST,\n            sortText: CompletionItemPriority.Medium,\n          });\n          break;\n\n        case SuggestionKind.LimitKeyword:\n          addSuggestion(LIMIT, { insertText: `${LIMIT} `, sortText: CompletionItemPriority.MediumLow });\n          break;\n\n        case SuggestionKind.SortOrderDirectionKeyword:\n          [ASC, DESC].map((s) =>\n            addSuggestion(s, {\n              insertText: `${s} `,\n              command: TRIGGER_SUGGEST,\n            })\n          );\n          break;\n      }\n    }\n\n    // always suggest template variables\n    this.templateVariables.map((v) => {\n      addSuggestion(v, {\n        range,\n        label: v,\n        insertText: v,\n        kind: monaco.languages.CompletionItemKind.Variable,\n        sortText: CompletionItemPriority.Low,\n      });\n    });\n\n    return suggestions;\n  }\n}\n","import React, { FunctionComponent } from 'react';\n\nexport interface Props {\n  region: string;\n}\n\nexport const ThrottlingErrorMessage: FunctionComponent<Props> = ({ region }) => (\n  <p>\n    Please visit the&nbsp;\n    <a\n      target=\"_blank\"\n      rel=\"noreferrer\"\n      className=\"text-link\"\n      href={`https://${region}.console.aws.amazon.com/servicequotas/home?region=${region}#!/services/monitoring/quotas/L-5E141212`}\n    >\n      AWS Service Quotas console\n    </a>\n    &nbsp;to request a quota increase or see our&nbsp;\n    <a\n      target=\"_blank\"\n      rel=\"noreferrer\"\n      className=\"text-link\"\n      href=\"https://grafana.com/docs/grafana/latest/datasources/cloudwatch/#service-quotas\"\n    >\n      documentation\n    </a>\n    &nbsp;to learn more.\n  </p>\n);\n","import { sortedUniq } from 'lodash';\nimport Prism, { Grammar } from 'prismjs';\nimport { lastValueFrom } from 'rxjs';\n\nimport { AbsoluteTimeRange, HistoryItem, LanguageProvider } from '@grafana/data';\nimport { CompletionItemGroup, SearchFunctionType, Token, TypeaheadInput, TypeaheadOutput } from '@grafana/ui';\n\nimport { CloudWatchDatasource } from './datasource';\nimport syntax, {\n  AGGREGATION_FUNCTIONS_STATS,\n  BOOLEAN_FUNCTIONS,\n  DATETIME_FUNCTIONS,\n  FIELD_AND_FILTER_FUNCTIONS,\n  IP_FUNCTIONS,\n  NUMERIC_OPERATORS,\n  QUERY_COMMANDS,\n  STRING_FUNCTIONS,\n} from './syntax';\nimport { CloudWatchQuery, TSDBResponse } from './types';\n\nexport type CloudWatchHistoryItem = HistoryItem<CloudWatchQuery>;\n\ntype TypeaheadContext = {\n  history?: CloudWatchHistoryItem[];\n  absoluteRange?: AbsoluteTimeRange;\n  logGroupNames?: string[];\n  region: string;\n};\n\nexport class CloudWatchLanguageProvider extends LanguageProvider {\n  started = false;\n  declare initialRange: AbsoluteTimeRange;\n  datasource: CloudWatchDatasource;\n\n  constructor(datasource: CloudWatchDatasource, initialValues?: any) {\n    super();\n\n    this.datasource = datasource;\n\n    Object.assign(this, initialValues);\n  }\n\n  // Strip syntax chars\n  cleanText = (s: string) => s.replace(/[()]/g, '').trim();\n\n  getSyntax(): Grammar {\n    return syntax;\n  }\n\n  request = (url: string, params?: any): Promise<TSDBResponse> => {\n    return lastValueFrom(this.datasource.awsRequest(url, params));\n  };\n\n  start = () => {\n    if (!this.startTask) {\n      this.startTask = Promise.resolve().then(() => {\n        this.started = true;\n        return [];\n      });\n    }\n\n    return this.startTask;\n  };\n\n  isStatsQuery(query: string): boolean {\n    const grammar = this.getSyntax();\n    const tokens = Prism.tokenize(query, grammar) ?? [];\n\n    return !!tokens.find(\n      (token) =>\n        typeof token !== 'string' &&\n        token.content.toString().toLowerCase() === 'stats' &&\n        token.type === 'query-command'\n    );\n  }\n\n  /**\n   * Return suggestions based on input that can be then plugged into a typeahead dropdown.\n   * Keep this DOM-free for testing\n   * @param input\n   * @param context Is optional in types but is required in case we are doing getLabelCompletionItems\n   * @param context.absoluteRange Required in case we are doing getLabelCompletionItems\n   * @param context.history Optional used only in getEmptyCompletionItems\n   */\n  async provideCompletionItems(input: TypeaheadInput, context?: TypeaheadContext): Promise<TypeaheadOutput> {\n    const { value } = input;\n\n    // Get tokens\n    const tokens = value?.data.get('tokens');\n\n    if (!tokens || !tokens.length) {\n      return { suggestions: [] };\n    }\n\n    const curToken: Token = tokens.filter(\n      (token: any) =>\n        token.offsets.start <= value!.selection?.start?.offset && token.offsets.end >= value!.selection?.start?.offset\n    )[0];\n\n    const isFirstToken = !curToken.prev;\n    const prevToken = prevNonWhitespaceToken(curToken);\n\n    const isCommandStart = isFirstToken || (!isFirstToken && prevToken?.types.includes('command-separator'));\n    if (isCommandStart) {\n      return this.getCommandCompletionItems();\n    }\n\n    if (isInsideFunctionParenthesis(curToken)) {\n      return await this.getFieldCompletionItems(context?.logGroupNames ?? [], context?.region || 'default');\n    }\n\n    if (isAfterKeyword('by', curToken)) {\n      return this.handleKeyword(context);\n    }\n\n    if (prevToken?.types.includes('comparison-operator')) {\n      return this.handleComparison(context);\n    }\n\n    const commandToken = previousCommandToken(curToken);\n    if (commandToken) {\n      return await this.handleCommand(commandToken, curToken, context);\n    }\n\n    return {\n      suggestions: [],\n    };\n  }\n\n  private fetchedFieldsCache:\n    | {\n        time: number;\n        logGroups: string[];\n        fields: string[];\n      }\n    | undefined;\n\n  private fetchFields = async (logGroups: string[], region: string): Promise<string[]> => {\n    if (\n      this.fetchedFieldsCache &&\n      Date.now() - this.fetchedFieldsCache.time < 30 * 1000 &&\n      sortedUniq(this.fetchedFieldsCache.logGroups).join('|') === sortedUniq(logGroups).join('|')\n    ) {\n      return this.fetchedFieldsCache.fields;\n    }\n\n    const results = await Promise.all(\n      logGroups.map((logGroup) => this.datasource.getLogGroupFields({ logGroupName: logGroup, region }))\n    );\n\n    const fields = [\n      ...new Set<string>(\n        results.reduce((acc: string[], cur) => acc.concat(cur.logGroupFields?.map((f) => f.name) as string[]), [])\n      ).values(),\n    ];\n\n    this.fetchedFieldsCache = {\n      time: Date.now(),\n      logGroups,\n      fields,\n    };\n\n    return fields;\n  };\n\n  private handleKeyword = async (context?: TypeaheadContext): Promise<TypeaheadOutput> => {\n    const suggs = await this.getFieldCompletionItems(context?.logGroupNames ?? [], context?.region || 'default');\n    const functionSuggestions: CompletionItemGroup[] = [\n      {\n        searchFunctionType: SearchFunctionType.Prefix,\n        label: 'Functions',\n        items: STRING_FUNCTIONS.concat(DATETIME_FUNCTIONS, IP_FUNCTIONS),\n      },\n    ];\n    suggs.suggestions.push(...functionSuggestions);\n\n    return suggs;\n  };\n\n  private handleCommand = async (\n    commandToken: Token,\n    curToken: Token,\n    context?: TypeaheadContext\n  ): Promise<TypeaheadOutput> => {\n    const queryCommand = commandToken.content.toLowerCase();\n    const prevToken = prevNonWhitespaceToken(curToken);\n    const currentTokenIsFirstArg = prevToken === commandToken;\n\n    if (queryCommand === 'sort') {\n      return this.handleSortCommand(currentTokenIsFirstArg, curToken, context);\n    }\n\n    if (queryCommand === 'parse') {\n      if (currentTokenIsFirstArg) {\n        return await this.getFieldCompletionItems(context?.logGroupNames ?? [], context?.region || 'default');\n      }\n    }\n\n    const currentTokenIsAfterCommandAndEmpty = isTokenType(commandToken.next, 'whitespace') && !commandToken.next?.next;\n    const currentTokenIsAfterCommand =\n      currentTokenIsAfterCommandAndEmpty || nextNonWhitespaceToken(commandToken) === curToken;\n\n    const currentTokenIsComma = isTokenType(curToken, 'punctuation', ',');\n    const currentTokenIsCommaOrAfterComma = currentTokenIsComma || isTokenType(prevToken, 'punctuation', ',');\n\n    // We only show suggestions if we are after a command or after a comma which is a field separator\n    if (!(currentTokenIsAfterCommand || currentTokenIsCommaOrAfterComma)) {\n      return { suggestions: [] };\n    }\n\n    if (['display', 'fields'].includes(queryCommand)) {\n      const typeaheadOutput = await this.getFieldCompletionItems(\n        context?.logGroupNames ?? [],\n        context?.region || 'default'\n      );\n      typeaheadOutput.suggestions.push(...this.getFieldAndFilterFunctionCompletionItems().suggestions);\n\n      return typeaheadOutput;\n    }\n\n    if (queryCommand === 'stats') {\n      const typeaheadOutput = this.getStatsAggCompletionItems();\n      if (currentTokenIsComma || currentTokenIsAfterCommandAndEmpty) {\n        typeaheadOutput?.suggestions.forEach((group) => {\n          group.skipFilter = true;\n        });\n      }\n      return typeaheadOutput;\n    }\n\n    if (queryCommand === 'filter' && currentTokenIsFirstArg) {\n      const sugg = await this.getFieldCompletionItems(context?.logGroupNames ?? [], context?.region || 'default');\n      const boolFuncs = this.getBoolFuncCompletionItems();\n      sugg.suggestions.push(...boolFuncs.suggestions);\n      return sugg;\n    }\n    return { suggestions: [] };\n  };\n\n  private async handleSortCommand(\n    isFirstArgument: boolean,\n    curToken: Token,\n    context?: TypeaheadContext\n  ): Promise<TypeaheadOutput> {\n    if (isFirstArgument) {\n      return await this.getFieldCompletionItems(context?.logGroupNames ?? [], context?.region || 'default');\n    } else if (isTokenType(prevNonWhitespaceToken(curToken), 'field-name')) {\n      // suggest sort options\n      return {\n        suggestions: [\n          {\n            searchFunctionType: SearchFunctionType.Prefix,\n            label: 'Sort Order',\n            items: [\n              {\n                label: 'asc',\n              },\n              { label: 'desc' },\n            ],\n          },\n        ],\n      };\n    }\n\n    return { suggestions: [] };\n  }\n\n  private handleComparison = async (context?: TypeaheadContext) => {\n    const fieldsSuggestions = await this.getFieldCompletionItems(\n      context?.logGroupNames ?? [],\n      context?.region || 'default'\n    );\n    const comparisonSuggestions = this.getComparisonCompletionItems();\n    fieldsSuggestions.suggestions.push(...comparisonSuggestions.suggestions);\n    return fieldsSuggestions;\n  };\n\n  private getCommandCompletionItems = (): TypeaheadOutput => {\n    return {\n      suggestions: [{ searchFunctionType: SearchFunctionType.Prefix, label: 'Commands', items: QUERY_COMMANDS }],\n    };\n  };\n\n  private getFieldAndFilterFunctionCompletionItems = (): TypeaheadOutput => {\n    return {\n      suggestions: [\n        { searchFunctionType: SearchFunctionType.Prefix, label: 'Functions', items: FIELD_AND_FILTER_FUNCTIONS },\n      ],\n    };\n  };\n\n  private getStatsAggCompletionItems = (): TypeaheadOutput => {\n    return {\n      suggestions: [\n        { searchFunctionType: SearchFunctionType.Prefix, label: 'Functions', items: AGGREGATION_FUNCTIONS_STATS },\n      ],\n    };\n  };\n\n  private getBoolFuncCompletionItems = (): TypeaheadOutput => {\n    return {\n      suggestions: [\n        {\n          searchFunctionType: SearchFunctionType.Prefix,\n          label: 'Functions',\n          items: BOOLEAN_FUNCTIONS,\n        },\n      ],\n    };\n  };\n\n  private getComparisonCompletionItems = (): TypeaheadOutput => {\n    return {\n      suggestions: [\n        {\n          searchFunctionType: SearchFunctionType.Prefix,\n          label: 'Functions',\n          items: NUMERIC_OPERATORS.concat(BOOLEAN_FUNCTIONS),\n        },\n      ],\n    };\n  };\n\n  private getFieldCompletionItems = async (logGroups: string[], region: string): Promise<TypeaheadOutput> => {\n    const fields = await this.fetchFields(logGroups, region);\n\n    return {\n      suggestions: [\n        {\n          label: 'Fields',\n          items: fields.map((field) => ({\n            label: field,\n            insertText: field.match(/@?[_a-zA-Z]+[_.0-9a-zA-Z]*/) ? undefined : `\\`${field}\\``,\n          })),\n        },\n      ],\n    };\n  };\n}\n\nfunction nextNonWhitespaceToken(token: Token): Token | null {\n  let curToken = token;\n\n  while (curToken.next) {\n    if (curToken.next.types.includes('whitespace')) {\n      curToken = curToken.next;\n    } else {\n      return curToken.next;\n    }\n  }\n\n  return null;\n}\n\nfunction prevNonWhitespaceToken(token: Token): Token | null {\n  let curToken = token;\n\n  while (curToken.prev) {\n    if (isTokenType(curToken.prev, 'whitespace')) {\n      curToken = curToken.prev;\n    } else {\n      return curToken.prev;\n    }\n  }\n\n  return null;\n}\n\nfunction previousCommandToken(startToken: Token): Token | null {\n  let thisToken = startToken;\n  while (!!thisToken.prev) {\n    thisToken = thisToken.prev;\n    if (\n      thisToken.types.includes('query-command') &&\n      (!thisToken.prev || isTokenType(prevNonWhitespaceToken(thisToken), 'command-separator'))\n    ) {\n      return thisToken;\n    }\n  }\n  return null;\n}\n\nconst funcsWithFieldArgs = [\n  'avg',\n  'count',\n  'count_distinct',\n  'earliest',\n  'latest',\n  'sortsFirst',\n  'sortsLast',\n  'max',\n  'min',\n  'pct',\n  'stddev',\n  'ispresent',\n  'fromMillis',\n  'toMillis',\n  'isempty',\n  'isblank',\n  'isValidIp',\n  'isValidIpV4',\n  'isValidIpV6',\n  'isIpInSubnet',\n  'isIpv4InSubnet',\n  'isIpv6InSubnet',\n].map((funcName) => funcName.toLowerCase());\n\n/**\n * Returns true if cursor is currently inside a function parenthesis for example `count(|)` or `count(@mess|)` should\n * return true.\n */\nfunction isInsideFunctionParenthesis(curToken: Token): boolean {\n  const prevToken = prevNonWhitespaceToken(curToken);\n\n  if (!prevToken) {\n    return false;\n  }\n\n  const parenthesisToken = curToken.content === '(' ? curToken : prevToken.content === '(' ? prevToken : undefined;\n  if (parenthesisToken) {\n    const maybeFunctionToken = prevNonWhitespaceToken(parenthesisToken);\n    if (maybeFunctionToken) {\n      return (\n        funcsWithFieldArgs.includes(maybeFunctionToken.content.toLowerCase()) &&\n        maybeFunctionToken.types.includes('function')\n      );\n    }\n  }\n  return false;\n}\n\nfunction isAfterKeyword(keyword: string, token: Token): boolean {\n  const maybeKeyword = getPreviousTokenExcluding(token, [\n    'whitespace',\n    'function',\n    'punctuation',\n    'field-name',\n    'number',\n  ]);\n  if (isTokenType(maybeKeyword, 'keyword', 'by')) {\n    const prev = getPreviousTokenExcluding(token, ['whitespace']);\n    if (prev === maybeKeyword || isTokenType(prev, 'punctuation', ',')) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction isTokenType(token: Token | undefined | null, type: string, content?: string): boolean {\n  if (!token?.types.includes(type)) {\n    return false;\n  }\n  if (content) {\n    if (token?.content.toLowerCase() !== content) {\n      return false;\n    }\n  }\n  return true;\n}\n\ntype TokenDef = string | { type: string; value: string };\nfunction getPreviousTokenExcluding(token: Token, exclude: TokenDef[]): Token | undefined | null {\n  let curToken = token.prev;\n  main: while (curToken) {\n    for (const item of exclude) {\n      if (typeof item === 'string') {\n        if (curToken.types.includes(item)) {\n          curToken = curToken.prev;\n          continue main;\n        }\n      } else {\n        if (curToken.types.includes(item.type) && curToken.content.toLowerCase() === item.value) {\n          curToken = curToken.prev;\n          continue main;\n        }\n      }\n    }\n    break;\n  }\n  return curToken;\n}\n","import { debounce, memoize } from 'lodash';\n\nexport default (func: (...args: any[]) => void, wait = 7000) => {\n  const mem = memoize(\n    (...args) =>\n      debounce(func, wait, {\n        leading: true,\n      }),\n    (...args) => JSON.stringify(args)\n  );\n\n  return (...args: any[]) => mem(...args)(...args);\n};\n","import { TokenTypes } from '../../monarch/types';\n\nexport const MetricMathTokenTypes: TokenTypes = {\n  Parenthesis: 'delimiter.parenthesis.cloudwatch-MetricMath',\n  Whitespace: 'white.cloudwatch-MetricMath',\n  Keyword: 'keyword.cloudwatch-MetricMath',\n  Delimiter: 'delimiter.cloudwatch-MetricMath',\n  Operator: 'operator.cloudwatch-MetricMath',\n  Identifier: 'identifier.cloudwatch-MetricMath',\n  Type: 'type.cloudwatch-MetricMath',\n  Function: 'predefined.cloudwatch-MetricMath',\n  Number: 'number.cloudwatch-MetricMath',\n  String: 'string.cloudwatch-MetricMath',\n  Variable: 'variable.cloudwatch-MetricMath',\n};\n","import { LinkedToken } from '../../monarch/LinkedToken';\nimport { StatementPosition } from '../../monarch/types';\n\nimport { MetricMathTokenTypes } from './types';\n\nexport function getStatementPosition(currentToken: LinkedToken | null): StatementPosition {\n  const previousNonWhiteSpace = currentToken?.getPreviousNonWhiteSpaceToken();\n\n  if (currentToken && currentToken.isString()) {\n    return StatementPosition.WithinString;\n  }\n\n  if (currentToken && previousNonWhiteSpace) {\n    const currentFunction = currentToken.getPreviousOfType(MetricMathTokenTypes.Function);\n    const isAfterComma = previousNonWhiteSpace.is(MetricMathTokenTypes.Delimiter, ',');\n    const isWithinSearch = currentFunction && currentFunction.value === 'SEARCH';\n    const allTokensAfterStartOfSearch =\n      currentToken.getPreviousUntil(MetricMathTokenTypes.Function, [], 'SEARCH') || [];\n\n    if (isWithinSearch) {\n      // if there's only one ' then we're still within the first arg\n      if (allTokensAfterStartOfSearch.filter(({ value }) => value === \"'\").length === 1) {\n        return StatementPosition.WithinString;\n      }\n\n      // if there was a , before the last , and it happened after the start of SEARCH\n      const lastComma = previousNonWhiteSpace.getPreviousOfType(MetricMathTokenTypes.Delimiter, ',');\n      if (lastComma) {\n        const lastCommaIsAfterSearch =\n          lastComma.range.startColumn > currentFunction.range.startColumn &&\n          lastComma.range.startLineNumber >= currentFunction.range.startLineNumber;\n        if (lastCommaIsAfterSearch) {\n          return StatementPosition.SearchFuncThirdArg;\n        }\n      }\n\n      // otherwise assume it's the second arg\n      return StatementPosition.SearchFuncSecondArg;\n    }\n\n    if (!isWithinSearch && isAfterComma) {\n      return StatementPosition.PredefinedFuncSecondArg;\n    }\n  }\n\n  if (previousNonWhiteSpace?.endsWith(')')) {\n    return StatementPosition.AfterFunction;\n  }\n\n  if (!currentToken || !currentToken.isString()) {\n    return StatementPosition.PredefinedFunction;\n  }\n\n  return StatementPosition.Unknown;\n}\n","import { StatementPosition, SuggestionKind } from '../../monarch/types';\n\nexport function getSuggestionKinds(statementPosition: StatementPosition): SuggestionKind[] {\n  switch (statementPosition) {\n    case StatementPosition.PredefinedFunction:\n      return [SuggestionKind.FunctionsWithArguments];\n    case StatementPosition.PredefinedFuncSecondArg:\n      return [SuggestionKind.FunctionsWithArguments, SuggestionKind.KeywordArguments];\n    case StatementPosition.AfterFunction:\n      return [SuggestionKind.Operators];\n    case StatementPosition.SearchFuncSecondArg:\n      return [SuggestionKind.Statistic];\n    case StatementPosition.SearchFuncThirdArg:\n      return [SuggestionKind.Period];\n  }\n\n  return [];\n}\n","import { getTemplateSrv, TemplateSrv } from '@grafana/runtime';\nimport type { Monaco, monacoTypes } from '@grafana/ui';\n\nimport { CloudWatchDatasource } from '../../datasource';\nimport { CompletionItemProvider } from '../../monarch/CompletionItemProvider';\nimport { LinkedToken } from '../../monarch/LinkedToken';\nimport { TRIGGER_SUGGEST } from '../../monarch/commands';\nimport { SuggestionKind, CompletionItemPriority, StatementPosition } from '../../monarch/types';\nimport {\n  METRIC_MATH_FNS,\n  METRIC_MATH_KEYWORDS,\n  METRIC_MATH_OPERATORS,\n  METRIC_MATH_PERIODS,\n  METRIC_MATH_STATISTIC_KEYWORD_STRINGS,\n} from '../language';\n\nimport { getStatementPosition } from './statementPosition';\nimport { getSuggestionKinds } from './suggestionKind';\nimport { MetricMathTokenTypes } from './types';\n\ntype CompletionItem = monacoTypes.languages.CompletionItem;\n\nexport class MetricMathCompletionItemProvider extends CompletionItemProvider {\n  constructor(datasource: CloudWatchDatasource, templateSrv: TemplateSrv = getTemplateSrv()) {\n    super(datasource, templateSrv);\n    this.getStatementPosition = getStatementPosition;\n    this.getSuggestionKinds = getSuggestionKinds;\n    this.tokenTypes = MetricMathTokenTypes;\n  }\n\n  async getSuggestions(\n    monaco: Monaco,\n    currentToken: LinkedToken | null,\n    suggestionKinds: SuggestionKind[],\n    statementPosition: StatementPosition,\n    position: monacoTypes.IPosition\n  ): Promise<CompletionItem[]> {\n    let suggestions: CompletionItem[] = [];\n    const invalidRangeToken = currentToken?.isWhiteSpace() || currentToken?.isParenthesis();\n    const range =\n      invalidRangeToken || !currentToken?.range ? monaco.Range.fromPositions(position) : currentToken?.range;\n\n    const toCompletionItem = (value: string, rest: Partial<CompletionItem> = {}) => {\n      const item: CompletionItem = {\n        label: value,\n        insertText: value,\n        kind: monaco.languages.CompletionItemKind.Field,\n        range,\n        sortText: CompletionItemPriority.Medium,\n        ...rest,\n      };\n      return item;\n    };\n\n    function addSuggestion(value: string, rest: Partial<CompletionItem> = {}) {\n      suggestions = [...suggestions, toCompletionItem(value, rest)];\n    }\n\n    for (const suggestion of suggestionKinds) {\n      switch (suggestion) {\n        case SuggestionKind.FunctionsWithArguments:\n          METRIC_MATH_FNS.map((f) =>\n            addSuggestion(f, {\n              insertText: f === 'SEARCH' ? `${f}('$0')` : `${f}($0)`,\n              insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,\n              command: TRIGGER_SUGGEST,\n              kind: monaco.languages.CompletionItemKind.Function,\n            })\n          );\n          break;\n\n        case SuggestionKind.KeywordArguments:\n          METRIC_MATH_KEYWORDS.map((s) =>\n            addSuggestion(s, {\n              insertText: s,\n              command: TRIGGER_SUGGEST,\n              kind: monaco.languages.CompletionItemKind.Keyword,\n              sortText: CompletionItemPriority.MediumHigh,\n            })\n          );\n          break;\n\n        case SuggestionKind.Statistic:\n          METRIC_MATH_STATISTIC_KEYWORD_STRINGS.map((s) =>\n            addSuggestion(s, {\n              insertText: `'${s}', `,\n              command: TRIGGER_SUGGEST,\n            })\n          );\n          break;\n\n        case SuggestionKind.Operators:\n          METRIC_MATH_OPERATORS.map((s) =>\n            addSuggestion(s, {\n              insertText: `${s} `,\n              command: TRIGGER_SUGGEST,\n            })\n          );\n          break;\n\n        case SuggestionKind.Period:\n          METRIC_MATH_PERIODS.map((s, idx) =>\n            addSuggestion(s.toString(), {\n              kind: monaco.languages.CompletionItemKind.Value,\n              sortText: String.fromCharCode(97 + idx), // converts index 0, 1 to \"a\", \"b\", etc needed to show the time periods in numerical order\n            })\n          );\n          break;\n      }\n    }\n\n    // always suggest template variables\n    this.templateVariables.map((v) => {\n      addSuggestion(v, {\n        range,\n        label: v,\n        insertText: v,\n        kind: monaco.languages.CompletionItemKind.Variable,\n        sortText: CompletionItemPriority.Low,\n      });\n    });\n\n    return suggestions;\n  }\n}\n","import { DataFrame, DataLink, DataQueryRequest, DataQueryResponse, ScopedVars, TimeRange } from '@grafana/data';\nimport { getDataSourceSrv } from '@grafana/runtime';\n\nimport { AwsUrl, encodeUrl } from '../aws_url';\nimport { CloudWatchLogsQuery, CloudWatchQuery } from '../types';\n\ntype ReplaceFn = (\n  target?: string,\n  scopedVars?: ScopedVars,\n  displayErrorIfIsMultiTemplateVariable?: boolean,\n  fieldName?: string\n) => string;\n\nexport async function addDataLinksToLogsResponse(\n  response: DataQueryResponse,\n  request: DataQueryRequest<CloudWatchQuery>,\n  range: TimeRange,\n  replaceFn: ReplaceFn,\n  getRegion: (region: string) => string,\n  tracingDatasourceUid?: string\n): Promise<void> {\n  const replace = (target: string, fieldName?: string) => replaceFn(target, request.scopedVars, true, fieldName);\n\n  for (const dataFrame of response.data as DataFrame[]) {\n    const curTarget = request.targets.find((target) => target.refId === dataFrame.refId) as CloudWatchLogsQuery;\n    const interpolatedRegion = getRegion(replace(curTarget.region ?? '', 'region'));\n\n    for (const field of dataFrame.fields) {\n      if (field.name === '@xrayTraceId' && tracingDatasourceUid) {\n        getRegion(replace(curTarget.region ?? '', 'region'));\n        const xrayLink = await createInternalXrayLink(tracingDatasourceUid, interpolatedRegion);\n        if (xrayLink) {\n          field.config.links = [xrayLink];\n        }\n      } else {\n        // Right now we add generic link to open the query in xray console to every field so it shows in the logs row\n        // details. Unfortunately this also creates link for all values inside table which look weird.\n        field.config.links = [createAwsConsoleLink(curTarget, range, interpolatedRegion, replace)];\n      }\n    }\n  }\n}\n\nasync function createInternalXrayLink(datasourceUid: string, region: string) {\n  let ds;\n  try {\n    ds = await getDataSourceSrv().get(datasourceUid);\n  } catch (e) {\n    console.error('Could not load linked xray data source, it was probably deleted after it was linked', e);\n    return undefined;\n  }\n\n  return {\n    title: ds.name,\n    url: '',\n    internal: {\n      query: { query: '${__value.raw}', queryType: 'getTrace', region: region },\n      datasourceUid: datasourceUid,\n      datasourceName: ds.name,\n    },\n  } as DataLink;\n}\n\nfunction createAwsConsoleLink(\n  target: CloudWatchLogsQuery,\n  range: TimeRange,\n  region: string,\n  replace: (target: string, fieldName?: string) => string\n) {\n  const interpolatedExpression = target.expression ? replace(target.expression) : '';\n  const interpolatedGroups = target.logGroupNames?.map((logGroup: string) => replace(logGroup, 'log groups')) ?? [];\n\n  const urlProps: AwsUrl = {\n    end: range.to.toISOString(),\n    start: range.from.toISOString(),\n    timeType: 'ABSOLUTE',\n    tz: 'UTC',\n    editorString: interpolatedExpression,\n    isLiveTail: false,\n    source: interpolatedGroups,\n  };\n\n  const encodedUrl = encodeUrl(urlProps, region);\n  return {\n    url: encodedUrl,\n    title: 'View in CloudWatch console',\n    targetBlank: true,\n  };\n}\n","import { Observable, Subscription } from 'rxjs';\n\nimport { DataFrame, DataFrameJSON, DataQueryError } from '@grafana/data';\nimport { FetchError, toDataQueryResponse } from '@grafana/runtime';\n\nimport { StartQueryRequest } from '../types';\n\ntype Result = { frames: DataFrameJSON[]; error?: string };\n\n/**\n * A retry strategy specifically for cloud watch logs query. Cloud watch logs queries need first starting the query\n * and the polling for the results. The start query can fail because of the concurrent queries rate limit,\n * and so we have to retry the start query call if there is already lot of queries running.\n *\n * As we send multiple queries in a single request some can fail and some can succeed and we have to also handle those\n * cases by only retrying the failed queries. We retry the failed queries until we hit the time limit or all queries\n * succeed and only then we pass the data forward. This means we wait longer but makes the code a bit simpler as we\n * can treat starting the query and polling as steps in a pipeline.\n * @param queryFun\n * @param targets\n * @param options\n */\nexport function runWithRetry(\n  queryFun: (targets: StartQueryRequest[]) => Observable<DataFrame[]>,\n  targets: StartQueryRequest[],\n  timeoutFunc: (retry: number, startTime: number) => boolean\n): Observable<{ frames: DataFrame[]; error?: DataQueryError }> {\n  const startTime = new Date();\n  let retries = 0;\n  let timerID: any;\n  let subscription: Subscription;\n  let collected = {};\n\n  const retryWaitFunction = (retry: number) => {\n    return Math.pow(2, retry) * 1000 + Math.random() * 100;\n  };\n\n  return new Observable((observer) => {\n    // Run function is where the logic takes place. We have it in a function so we can call it recursively.\n    function run(currentQueryParams: StartQueryRequest[]) {\n      subscription = queryFun(currentQueryParams).subscribe({\n        next(frames) {\n          // In case we successfully finished, merge the current response with whatever we already collected.\n          const collectedPreviously = toDataQueryResponse({ data: { results: collected } }).data || [];\n          observer.next({ frames: [...collectedPreviously, ...frames] });\n          observer.complete();\n        },\n        error(error: FetchError<{ results?: Record<string, Result> }> | string) {\n          // In case of error we first try to figure out what kind of error it is\n\n          // This means it was a generic 500 error probably so we just pass it on\n          if (typeof error === 'string') {\n            observer.error(error);\n            return;\n          }\n\n          // In case of multiple queries this some can error while some may be ok\n          const errorData = splitErrorData(error);\n\n          if (!errorData) {\n            // Not sure what happened but the error structure wasn't what we expected\n            observer.error(error);\n            return;\n          }\n\n          if (!errorData!.errors.length) {\n            // So there is no limit error but some other errors so nothing to retry so we just pass it as it would be\n            // otherwise.\n            observer.error(error);\n            return;\n          }\n\n          if (timeoutFunc(retries, startTime.valueOf())) {\n            // We timed out but we could have started some queries\n            if (Object.keys(collected).length || Object.keys(errorData.good).length) {\n              const dataResponse = toDataQueryResponse({\n                data: {\n                  results: {\n                    ...(errorData.good ?? {}),\n                    ...(collected ?? {}),\n                  },\n                },\n              });\n              dataResponse.error = {\n                ...(dataResponse.error ?? {}),\n                message: `Some queries timed out: ${errorData.errorMessage}`,\n              };\n              // So we consider this a partial success and pass the data forward but also with error to be shown to\n              // the user.\n              observer.next({\n                error: dataResponse.error,\n                frames: dataResponse.data,\n              });\n              observer.complete();\n            } else {\n              // So we timed out and there was no data to pass forward so we just pass the error\n              const dataResponse = toDataQueryResponse({ data: { results: error.data?.results ?? {} } });\n              observer.error(dataResponse.error);\n            }\n            return;\n          }\n\n          collected = {\n            ...collected,\n            ...errorData!.good,\n          };\n\n          timerID = setTimeout(\n            () => {\n              retries++;\n              run(errorData!.errors);\n            },\n            // We want to know how long to wait for the next retry. First time this will be 0.\n            retryWaitFunction(retries + 1)\n          );\n        },\n      });\n    }\n    run(targets);\n    return () => {\n      // We clear only the latest timer and subscription but the observable should complete after one response so\n      // there should not be more things running at the same time.\n      clearTimeout(timerID);\n      subscription.unsubscribe();\n    };\n  });\n}\n\nfunction splitErrorData(error: FetchError<{ results?: Record<string, Result> }>) {\n  const results = error.data?.results;\n  if (!results) {\n    return undefined;\n  }\n  return Object.keys(results).reduce<{\n    errors: StartQueryRequest[];\n    good: Record<string, Result>;\n    errorMessage: string;\n  }>(\n    (acc, refId) => {\n      if (results[refId].error?.startsWith('LimitExceededException')) {\n        acc.errorMessage = results[refId].error!;\n        acc.errors.push(error.config.data.queries.find((q: any) => q.refId === refId));\n      } else {\n        acc.good[refId] = results[refId];\n      }\n      return acc;\n    },\n    { errors: [], good: {}, errorMessage: '' }\n  );\n}\n","import { SchedulerLike, Observable, SchedulerAction, Subscriber, asyncScheduler } from 'rxjs';\n\n/**\n * Creates an Observable that emits sequential numbers after increasing intervals of time\n * starting with `startPeriod`, ending with `endPeriod` and incrementing by `step`.\n */\nexport const increasingInterval = (\n  { startPeriod = 0, endPeriod = 5000, step = 1000 },\n  scheduler: SchedulerLike = asyncScheduler\n): Observable<number> => {\n  return new Observable<number>((subscriber) => {\n    const state: IntervalState = {\n      subscriber,\n      counter: 0,\n      period: startPeriod,\n      step,\n      endPeriod,\n    };\n\n    subscriber.add(scheduler.schedule(dispatch, startPeriod, state));\n    return subscriber;\n  });\n};\n\nfunction dispatch(this: SchedulerAction<IntervalState>, state?: IntervalState) {\n  if (!state) {\n    return;\n  }\n  const { subscriber, counter, period, step, endPeriod } = state;\n  subscriber.next(counter);\n  const newPeriod = Math.min(period + step, endPeriod);\n  this.schedule({ subscriber, counter: counter + 1, period: newPeriod, step, endPeriod }, newPeriod);\n}\n\ninterface IntervalState {\n  subscriber: Subscriber<number>;\n  counter: number;\n  period: number;\n  endPeriod: number;\n  step: number;\n}\n","import React from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { InlineField, Select } from '@grafana/ui';\n\nimport { VariableQueryType } from '../../types';\n\nconst LABEL_WIDTH = 20;\n\ninterface VariableQueryFieldProps<T> {\n  onChange: (value: T) => void;\n  options: SelectableValue[];\n  value: T | null;\n  label: string;\n  allowCustomValue?: boolean;\n  isLoading?: boolean;\n  inputId?: string;\n}\n\nexport const VariableQueryField = <T extends string | VariableQueryType>({\n  label,\n  onChange,\n  value,\n  options,\n  allowCustomValue = false,\n  isLoading = false,\n}: VariableQueryFieldProps<T>) => {\n  return (\n    <InlineField label={label} labelWidth={LABEL_WIDTH} htmlFor={'inline-field'}>\n      <Select\n        menuShouldPortal\n        aria-label={label}\n        width={25}\n        allowCustomValue={allowCustomValue}\n        value={value}\n        onChange={({ value }) => onChange(value!)}\n        options={options}\n        isLoading={isLoading}\n        inputId=\"inline-field\"\n      />\n    </InlineField>\n  );\n};\n","import React, { FC, useState } from 'react';\n\nimport { InlineField, Input } from '@grafana/ui';\n\nconst LABEL_WIDTH = 20;\nconst TEXT_WIDTH = 100;\n\ninterface VariableTextFieldProps {\n  onBlur: (value: string) => void;\n  placeholder: string;\n  value: string;\n  label: string;\n  tooltip?: string;\n}\n\nexport const VariableTextField: FC<VariableTextFieldProps> = ({ label, onBlur, placeholder, value, tooltip }) => {\n  const [localValue, setLocalValue] = useState(value);\n  return (\n    <InlineField label={label} labelWidth={LABEL_WIDTH} tooltip={tooltip}>\n      <Input\n        aria-label={label}\n        placeholder={placeholder}\n        value={localValue}\n        onChange={(e) => setLocalValue(e.currentTarget.value)}\n        onBlur={() => onBlur(localValue)}\n        width={TEXT_WIDTH}\n      />\n    </InlineField>\n  );\n};\n","import React from 'react';\n\nimport { QueryEditorProps, SelectableValue } from '@grafana/data';\n\nimport { CloudWatchDatasource } from '../../datasource';\nimport { useDimensionKeys, useMetrics, useNamespaces, useRegions } from '../../hooks';\nimport { migrateVariableQuery } from '../../migrations';\nimport { CloudWatchJsonData, CloudWatchQuery, VariableQuery, VariableQueryType } from '../../types';\n\nimport { VariableQueryField } from './VariableQueryField';\nimport { VariableTextField } from './VariableTextField';\n\nexport type Props = QueryEditorProps<CloudWatchDatasource, CloudWatchQuery, CloudWatchJsonData, VariableQuery>;\n\nconst queryTypes: Array<{ value: string; label: string }> = [\n  { value: VariableQueryType.Regions, label: 'Regions' },\n  { value: VariableQueryType.Namespaces, label: 'Namespaces' },\n  { value: VariableQueryType.Metrics, label: 'Metrics' },\n  { value: VariableQueryType.DimensionKeys, label: 'Dimension Keys' },\n  { value: VariableQueryType.DimensionValues, label: 'Dimension Values' },\n  { value: VariableQueryType.EBSVolumeIDs, label: 'EBS Volume IDs' },\n  { value: VariableQueryType.EC2InstanceAttributes, label: 'EC2 Instance Attributes' },\n  { value: VariableQueryType.ResourceArns, label: 'Resource ARNs' },\n  { value: VariableQueryType.Statistics, label: 'Statistics' },\n];\n\nexport const VariableQueryEditor = ({ query, datasource, onChange }: Props) => {\n  const parsedQuery = migrateVariableQuery(query);\n\n  const { region, namespace, metricName, dimensionKey } = parsedQuery;\n  const [regions, regionIsLoading] = useRegions(datasource);\n  const namespaces = useNamespaces(datasource);\n  const metrics = useMetrics(datasource, region, namespace);\n  const dimensionKeys = useDimensionKeys(datasource, region, namespace, metricName);\n\n  const onRegionChange = async (region: string) => {\n    const validatedQuery = await sanitizeQuery({\n      ...parsedQuery,\n      region,\n    });\n    onQueryChange(validatedQuery);\n  };\n\n  const onNamespaceChange = async (namespace: string) => {\n    const validatedQuery = await sanitizeQuery({\n      ...parsedQuery,\n      namespace,\n    });\n    onQueryChange(validatedQuery);\n  };\n\n  const onQueryChange = (newQuery: VariableQuery) => {\n    onChange({ ...newQuery, refId: 'CloudWatchVariableQueryEditor-VariableQuery' });\n  };\n\n  // Reset dimensionValue parameters if namespace or region change\n  const sanitizeQuery = async (query: VariableQuery) => {\n    let { metricName, dimensionKey, dimensionFilters, namespace, region } = query;\n    if (metricName) {\n      await datasource.getMetrics(namespace, region).then((result: Array<SelectableValue<string>>) => {\n        if (!result.find((metric) => metric.value === metricName)) {\n          metricName = '';\n          dimensionFilters = '';\n        }\n      });\n    }\n    if (dimensionKey) {\n      await datasource.getDimensionKeys(namespace, region).then((result: Array<SelectableValue<string>>) => {\n        if (!result.find((key) => key.value === dimensionKey)) {\n          dimensionKey = '';\n          dimensionFilters = '';\n        }\n      });\n    }\n    return { ...query, metricName, dimensionKey, dimensionFilters };\n  };\n\n  const hasRegionField = [\n    VariableQueryType.Metrics,\n    VariableQueryType.DimensionKeys,\n    VariableQueryType.DimensionValues,\n    VariableQueryType.EBSVolumeIDs,\n    VariableQueryType.EC2InstanceAttributes,\n    VariableQueryType.ResourceArns,\n  ].includes(parsedQuery.queryType);\n  const hasNamespaceField = [\n    VariableQueryType.Metrics,\n    VariableQueryType.DimensionKeys,\n    VariableQueryType.DimensionValues,\n  ].includes(parsedQuery.queryType);\n\n  return (\n    <>\n      <VariableQueryField\n        value={parsedQuery.queryType}\n        options={queryTypes}\n        onChange={(value: VariableQueryType) => onQueryChange({ ...parsedQuery, queryType: value })}\n        label=\"Query Type\"\n      />\n      {hasRegionField && (\n        <VariableQueryField\n          value={region}\n          options={regions}\n          onChange={(value: string) => onRegionChange(value)}\n          label=\"Region\"\n          isLoading={regionIsLoading}\n        />\n      )}\n      {hasNamespaceField && (\n        <VariableQueryField\n          value={namespace}\n          options={namespaces}\n          onChange={(value: string) => onNamespaceChange(value)}\n          label=\"Namespace\"\n        />\n      )}\n      {parsedQuery.queryType === VariableQueryType.DimensionValues && (\n        <>\n          <VariableQueryField\n            value={metricName || null}\n            options={metrics}\n            onChange={(value: string) => onQueryChange({ ...parsedQuery, metricName: value })}\n            label=\"Metric\"\n          />\n          <VariableQueryField\n            value={dimensionKey || null}\n            options={dimensionKeys}\n            onChange={(value: string) => onQueryChange({ ...parsedQuery, dimensionKey: value })}\n            label=\"Dimension Key\"\n          />\n          <VariableTextField\n            value={query.dimensionFilters}\n            tooltip='A JSON object representing dimensions and the values to filter on. Ex. { \"filter_name1\": [ \"filter_value1\" ], \"filter_name2\": [ \"*\" ] }'\n            placeholder='{\"key\":[\"value\"]}'\n            onBlur={(value: string) => onQueryChange({ ...parsedQuery, dimensionFilters: value })}\n            label=\"Filters\"\n          />\n        </>\n      )}\n      {parsedQuery.queryType === VariableQueryType.EBSVolumeIDs && (\n        <VariableTextField\n          value={query.instanceID}\n          placeholder=\"i-XXXXXXXXXXXXXXXXX\"\n          onBlur={(value: string) => onQueryChange({ ...parsedQuery, instanceID: value })}\n          label=\"Instance ID\"\n        />\n      )}\n      {parsedQuery.queryType === VariableQueryType.EC2InstanceAttributes && (\n        <>\n          <VariableTextField\n            value={parsedQuery.attributeName}\n            placeholder=\"attribute name\"\n            onBlur={(value: string) => onQueryChange({ ...parsedQuery, attributeName: value })}\n            label=\"Attribute Name\"\n          />\n          <VariableTextField\n            value={parsedQuery.ec2Filters}\n            tooltip='A JSON object representing dimensions/tags and the values to filter on. Ex. { \"filter_name\": [ \"filter_value\" ], \"tag:name\": [ \"*\" ] }'\n            placeholder='{\"key\":[\"value\"]}'\n            onBlur={(value: string) => onQueryChange({ ...parsedQuery, ec2Filters: value })}\n            label=\"Filters\"\n          />\n        </>\n      )}\n      {parsedQuery.queryType === VariableQueryType.ResourceArns && (\n        <>\n          <VariableTextField\n            value={parsedQuery.resourceType}\n            placeholder=\"resource type\"\n            onBlur={(value: string) => onQueryChange({ ...parsedQuery, resourceType: value })}\n            label=\"Resource Type\"\n          />\n          <VariableTextField\n            value={parsedQuery.tags}\n            placeholder='{\"tag\":[\"value\"]}'\n            onBlur={(value: string) => onQueryChange({ ...parsedQuery, tags: value })}\n            label=\"Tags\"\n          />\n        </>\n      )}\n    </>\n  );\n};\n","import { from, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { CustomVariableSupport, DataQueryRequest, DataQueryResponse } from '@grafana/data';\nimport { getTemplateSrv, TemplateSrv } from '@grafana/runtime';\n\nimport { VariableQueryEditor } from './components/VariableQueryEditor/VariableQueryEditor';\nimport { CloudWatchDatasource } from './datasource';\nimport { migrateVariableQuery } from './migrations';\nimport { VariableQuery, VariableQueryType } from './types';\n\nexport class CloudWatchVariableSupport extends CustomVariableSupport<CloudWatchDatasource, VariableQuery> {\n  private readonly datasource: CloudWatchDatasource;\n  private readonly templateSrv: TemplateSrv;\n\n  constructor(datasource: CloudWatchDatasource, templateSrv: TemplateSrv = getTemplateSrv()) {\n    super();\n    this.datasource = datasource;\n    this.templateSrv = templateSrv;\n    this.query = this.query.bind(this);\n  }\n\n  editor = VariableQueryEditor;\n\n  query(request: DataQueryRequest<VariableQuery>): Observable<DataQueryResponse> {\n    const queryObj = migrateVariableQuery(request.targets[0]);\n    return from(this.execute(queryObj)).pipe(map((data) => ({ data })));\n  }\n\n  async execute(query: VariableQuery) {\n    try {\n      switch (query.queryType) {\n        case VariableQueryType.Regions:\n          return this.handleRegionsQuery();\n        case VariableQueryType.Namespaces:\n          return this.handleNamespacesQuery();\n        case VariableQueryType.Metrics:\n          return this.handleMetricsQuery(query);\n        case VariableQueryType.DimensionKeys:\n          return this.handleDimensionKeysQuery(query);\n        case VariableQueryType.DimensionValues:\n          return this.handleDimensionValuesQuery(query);\n        case VariableQueryType.EBSVolumeIDs:\n          return this.handleEbsVolumeIdsQuery(query);\n        case VariableQueryType.EC2InstanceAttributes:\n          return this.handleEc2InstanceAttributeQuery(query);\n        case VariableQueryType.ResourceArns:\n          return this.handleResourceARNsQuery(query);\n        case VariableQueryType.Statistics:\n          return this.handleStatisticsQuery();\n      }\n    } catch (error) {\n      console.error(`Could not run CloudWatchMetricFindQuery ${query}`, error);\n      return [];\n    }\n  }\n\n  async handleRegionsQuery() {\n    const regions = await this.datasource.getRegions();\n    return regions.map((s: { label: string; value: string }) => ({\n      text: s.label,\n      value: s.value,\n      expandable: true,\n    }));\n  }\n\n  async handleNamespacesQuery() {\n    const namespaces = await this.datasource.getNamespaces();\n    return namespaces.map((s: { label: string; value: string }) => ({\n      text: s.label,\n      value: s.value,\n      expandable: true,\n    }));\n  }\n\n  async handleMetricsQuery({ namespace, region }: VariableQuery) {\n    const metrics = await this.datasource.getMetrics(namespace, region);\n    return metrics.map((s: { label: string; value: string }) => ({\n      text: s.label,\n      value: s.value,\n      expandable: true,\n    }));\n  }\n\n  async handleDimensionKeysQuery({ namespace, region }: VariableQuery) {\n    const keys = await this.datasource.getDimensionKeys(namespace, region);\n    return keys.map((s: { label: string; value: string }) => ({\n      text: s.label,\n      value: s.value,\n      expandable: true,\n    }));\n  }\n\n  async handleDimensionValuesQuery({ namespace, region, dimensionKey, metricName, dimensionFilters }: VariableQuery) {\n    if (!dimensionKey || !metricName) {\n      return [];\n    }\n    var filterJson = {};\n    if (dimensionFilters) {\n      filterJson = JSON.parse(dimensionFilters);\n    }\n    const keys = await this.datasource.getDimensionValues(region, namespace, metricName, dimensionKey, filterJson);\n    return keys.map((s: { label: string; value: string }) => ({\n      text: s.label,\n      value: s.value,\n      expandable: true,\n    }));\n  }\n\n  async handleEbsVolumeIdsQuery({ region, instanceID }: VariableQuery) {\n    if (!instanceID) {\n      return [];\n    }\n    const ids = await this.datasource.getEbsVolumeIds(region, instanceID);\n    return ids.map((s: { label: string; value: string }) => ({\n      text: s.label,\n      value: s.value,\n      expandable: true,\n    }));\n  }\n\n  async handleEc2InstanceAttributeQuery({ region, attributeName, ec2Filters }: VariableQuery) {\n    if (!attributeName) {\n      return [];\n    }\n    var filterJson = {};\n    if (ec2Filters) {\n      filterJson = JSON.parse(this.templateSrv.replace(ec2Filters));\n    }\n    const values = await this.datasource.getEc2InstanceAttribute(region, attributeName, filterJson);\n    return values.map((s: { label: string; value: string }) => ({\n      text: s.label,\n      value: s.value,\n      expandable: true,\n    }));\n  }\n\n  async handleResourceARNsQuery({ region, resourceType, tags }: VariableQuery) {\n    if (!resourceType) {\n      return [];\n    }\n    var tagJson = {};\n    if (tags) {\n      tagJson = JSON.parse(this.templateSrv.replace(tags));\n    }\n    const keys = await this.datasource.getResourceARNs(region, resourceType, tagJson);\n    return keys.map((s: { label: string; value: string }) => ({\n      text: s.label,\n      value: s.value,\n      expandable: true,\n    }));\n  }\n\n  async handleStatisticsQuery() {\n    return this.datasource.standardStatistics.map((s: string) => ({\n      text: s,\n      value: s,\n      expandable: true,\n    }));\n  }\n}\n","import { cloneDeep, find, findLast, isEmpty, isString, set } from 'lodash';\nimport React from 'react';\nimport { from, lastValueFrom, merge, Observable, of, throwError, zip } from 'rxjs';\nimport { catchError, concatMap, finalize, map, mergeMap, repeat, scan, share, takeWhile, tap } from 'rxjs/operators';\n\nimport {\n  DataFrame,\n  DataQueryError,\n  DataQueryErrorType,\n  DataQueryRequest,\n  DataQueryResponse,\n  DataSourceInstanceSettings,\n  DataSourceWithLogsContextSupport,\n  dateMath,\n  FieldType,\n  LoadingState,\n  LogRowModel,\n  rangeUtil,\n  ScopedVars,\n  TableData,\n  TimeRange,\n  toLegacyResponseData,\n} from '@grafana/data';\nimport { DataSourceWithBackend, FetchError, getBackendSrv, toDataQueryResponse } from '@grafana/runtime';\nimport { RowContextOptions } from '@grafana/ui/src/components/Logs/LogRowContextProvider';\nimport { notifyApp } from 'app/core/actions';\nimport { createErrorNotification } from 'app/core/copy/appNotification';\nimport { getTimeSrv, TimeSrv } from 'app/features/dashboard/services/TimeSrv';\nimport { getTemplateSrv, TemplateSrv } from 'app/features/templating/template_srv';\nimport { VariableWithMultiSupport } from 'app/features/variables/types';\nimport { store } from 'app/store/store';\nimport { AppNotificationTimeout } from 'app/types';\n\nimport { SQLCompletionItemProvider } from './cloudwatch-sql/completion/CompletionItemProvider';\nimport { ThrottlingErrorMessage } from './components/ThrottlingErrorMessage';\nimport { CloudWatchLanguageProvider } from './language_provider';\nimport memoizedDebounce from './memoizedDebounce';\nimport { MetricMathCompletionItemProvider } from './metric-math/completion/CompletionItemProvider';\nimport {\n  CloudWatchJsonData,\n  CloudWatchLogsQuery,\n  CloudWatchLogsQueryStatus,\n  CloudWatchLogsRequest,\n  CloudWatchMetricsQuery,\n  CloudWatchQuery,\n  DescribeLogGroupsRequest,\n  Dimensions,\n  GetLogEventsRequest,\n  GetLogGroupFieldsRequest,\n  GetLogGroupFieldsResponse,\n  isCloudWatchLogsQuery,\n  LogAction,\n  MetricEditorMode,\n  MetricQuery,\n  MetricQueryType,\n  MetricRequest,\n  StartQueryRequest,\n  TSDBResponse,\n} from './types';\nimport { addDataLinksToLogsResponse } from './utils/datalinks';\nimport { runWithRetry } from './utils/logsRetry';\nimport { increasingInterval } from './utils/rxjs/increasingInterval';\nimport { CloudWatchVariableSupport } from './variables';\n\nconst DS_QUERY_ENDPOINT = '/api/ds/query';\n\n// Constants also defined in tsdb/cloudwatch/cloudwatch.go\nconst LOG_IDENTIFIER_INTERNAL = '__log__grafana_internal__';\nconst LOGSTREAM_IDENTIFIER_INTERNAL = '__logstream__grafana_internal__';\n\nconst displayAlert = (datasourceName: string, region: string) =>\n  store.dispatch(\n    notifyApp(\n      createErrorNotification(\n        `CloudWatch request limit reached in ${region} for data source ${datasourceName}`,\n        '',\n        undefined,\n        React.createElement(ThrottlingErrorMessage, { region }, null)\n      )\n    )\n  );\n\nconst displayCustomError = (title: string, message: string) =>\n  store.dispatch(notifyApp(createErrorNotification(title, message)));\n\nexport class CloudWatchDatasource\n  extends DataSourceWithBackend<CloudWatchQuery, CloudWatchJsonData>\n  implements DataSourceWithLogsContextSupport\n{\n  proxyUrl: any;\n  defaultRegion: any;\n  datasourceName: string;\n  languageProvider: CloudWatchLanguageProvider;\n  sqlCompletionItemProvider: SQLCompletionItemProvider;\n\n  metricMathCompletionItemProvider: MetricMathCompletionItemProvider;\n\n  tracingDataSourceUid?: string;\n  logsTimeout: string;\n\n  type = 'cloudwatch';\n  standardStatistics = ['Average', 'Maximum', 'Minimum', 'Sum', 'SampleCount'];\n\n  debouncedAlert: (datasourceName: string, region: string) => void = memoizedDebounce(\n    displayAlert,\n    AppNotificationTimeout.Error\n  );\n  debouncedCustomAlert: (title: string, message: string) => void = memoizedDebounce(\n    displayCustomError,\n    AppNotificationTimeout.Error\n  );\n  logQueries: Record<string, { id: string; region: string; statsQuery: boolean }> = {};\n\n  constructor(\n    instanceSettings: DataSourceInstanceSettings<CloudWatchJsonData>,\n    private readonly templateSrv: TemplateSrv = getTemplateSrv(),\n    private readonly timeSrv: TimeSrv = getTimeSrv()\n  ) {\n    super(instanceSettings);\n    this.proxyUrl = instanceSettings.url;\n    this.defaultRegion = instanceSettings.jsonData.defaultRegion;\n    this.datasourceName = instanceSettings.name;\n    this.languageProvider = new CloudWatchLanguageProvider(this);\n    this.tracingDataSourceUid = instanceSettings.jsonData.tracingDatasourceUid;\n    this.logsTimeout = instanceSettings.jsonData.logsTimeout || '15m';\n    this.sqlCompletionItemProvider = new SQLCompletionItemProvider(this, this.templateSrv);\n    this.metricMathCompletionItemProvider = new MetricMathCompletionItemProvider(this, this.templateSrv);\n    this.variables = new CloudWatchVariableSupport(this, this.templateSrv);\n  }\n\n  query(options: DataQueryRequest<CloudWatchQuery>): Observable<DataQueryResponse> {\n    options = cloneDeep(options);\n\n    let queries = options.targets.filter((item) => item.id !== '' || item.hide !== true);\n    const { logQueries, metricsQueries } = this.getTargetsByQueryMode(queries);\n\n    const dataQueryResponses: Array<Observable<DataQueryResponse>> = [];\n    if (logQueries.length > 0) {\n      dataQueryResponses.push(this.handleLogQueries(logQueries, options));\n    }\n\n    if (metricsQueries.length > 0) {\n      dataQueryResponses.push(this.handleMetricQueries(metricsQueries, options));\n    }\n\n    // No valid targets, return the empty result to save a round trip.\n    if (isEmpty(dataQueryResponses)) {\n      return of({\n        data: [],\n        state: LoadingState.Done,\n      });\n    }\n\n    return merge(...dataQueryResponses);\n  }\n\n  /**\n   * Handle log query. The log query works by starting the query on the CloudWatch and then periodically polling for\n   * results.\n   * @param logQueries\n   * @param options\n   */\n  handleLogQueries = (\n    logQueries: CloudWatchLogsQuery[],\n    options: DataQueryRequest<CloudWatchQuery>\n  ): Observable<DataQueryResponse> => {\n    const validLogQueries = logQueries.filter((item) => item.logGroupNames?.length);\n    if (logQueries.length > validLogQueries.length) {\n      return of({ data: [], error: { message: 'Log group is required' } });\n    }\n\n    // No valid targets, return the empty result to save a round trip.\n    if (isEmpty(validLogQueries)) {\n      return of({ data: [], state: LoadingState.Done });\n    }\n\n    const queryParams = logQueries.map((target: CloudWatchLogsQuery) => ({\n      queryString: target.expression || '',\n      refId: target.refId,\n      logGroupNames: target.logGroupNames,\n      region: this.replace(this.getActualRegion(target.region), options.scopedVars, true, 'region'),\n    }));\n\n    const startTime = new Date();\n    const timeoutFunc = () => {\n      return Date.now() >= startTime.valueOf() + rangeUtil.intervalToMs(this.logsTimeout);\n    };\n\n    return runWithRetry(\n      (targets: StartQueryRequest[]) => {\n        return this.makeLogActionRequest('StartQuery', targets, {\n          makeReplacements: true,\n          scopedVars: options.scopedVars,\n          skipCache: true,\n        });\n      },\n      queryParams,\n      timeoutFunc\n    ).pipe(\n      mergeMap(({ frames, error }: { frames: DataFrame[]; error?: DataQueryError }) =>\n        // This queries for the results\n        this.logsQuery(\n          frames.map((dataFrame) => ({\n            queryId: dataFrame.fields[0].values.get(0),\n            region: dataFrame.meta?.custom?.['Region'] ?? 'default',\n            refId: dataFrame.refId!,\n            statsGroups: (logQueries.find((target) => target.refId === dataFrame.refId)! as CloudWatchLogsQuery)\n              .statsGroups,\n          })),\n          timeoutFunc\n        ).pipe(\n          map((response: DataQueryResponse) => {\n            if (!response.error && error) {\n              response.error = error;\n            }\n            return response;\n          })\n        )\n      ),\n      mergeMap((dataQueryResponse) => {\n        return from(\n          (async () => {\n            await addDataLinksToLogsResponse(\n              dataQueryResponse,\n              options,\n              this.timeSrv.timeRange(),\n              this.replace.bind(this),\n              this.getActualRegion.bind(this),\n              this.tracingDataSourceUid\n            );\n\n            return dataQueryResponse;\n          })()\n        );\n      })\n    );\n  };\n\n  filterQuery(query: CloudWatchQuery): boolean {\n    if (query.queryMode === 'Logs') {\n      return !!query.logGroupNames?.length;\n    }\n    const { region, metricQueryType, metricEditorMode, expression, metricName, namespace, sqlExpression, statistic } =\n      query;\n    if (!region) {\n      return false;\n    }\n    if (metricQueryType === MetricQueryType.Search && metricEditorMode === MetricEditorMode.Builder) {\n      return !!namespace && !!metricName && !!statistic;\n    } else if (metricQueryType === MetricQueryType.Search && metricEditorMode === MetricEditorMode.Code) {\n      return !!expression;\n    } else if (metricQueryType === MetricQueryType.Query) {\n      // still TBD how to validate the visual query builder for SQL\n      return !!sqlExpression;\n    }\n\n    throw new Error('invalid metric editor mode');\n  }\n\n  handleMetricQueries = (\n    metricQueries: CloudWatchMetricsQuery[],\n    options: DataQueryRequest<CloudWatchQuery>\n  ): Observable<DataQueryResponse> => {\n    const validMetricsQueries = metricQueries\n      .filter(this.filterQuery)\n      .map((item: CloudWatchMetricsQuery): MetricQuery => {\n        item.region = this.templateSrv.replace(this.getActualRegion(item.region), options.scopedVars);\n        item.namespace = this.replace(item.namespace, options.scopedVars, true, 'namespace');\n        item.metricName = this.replace(item.metricName, options.scopedVars, true, 'metric name');\n        item.dimensions = this.convertDimensionFormat(item.dimensions ?? {}, options.scopedVars);\n        item.statistic = this.templateSrv.replace(item.statistic, options.scopedVars);\n        item.period = String(this.getPeriod(item, options)); // use string format for period in graph query, and alerting\n        item.id = this.templateSrv.replace(item.id, options.scopedVars);\n        item.expression = this.templateSrv.replace(item.expression, options.scopedVars);\n        item.sqlExpression = this.templateSrv.replace(item.sqlExpression, options.scopedVars, 'raw');\n\n        return {\n          intervalMs: options.intervalMs,\n          maxDataPoints: options.maxDataPoints,\n          ...item,\n          type: 'timeSeriesQuery',\n          datasource: this.getRef(),\n        };\n      });\n\n    // No valid targets, return the empty result to save a round trip.\n    if (isEmpty(validMetricsQueries)) {\n      return of({ data: [] });\n    }\n\n    const request = {\n      from: options?.range?.from.valueOf().toString(),\n      to: options?.range?.to.valueOf().toString(),\n      queries: validMetricsQueries,\n    };\n\n    return this.performTimeSeriesQuery(request, options.range);\n  };\n\n  /**\n   * Checks progress and polls data of a started logs query with some retry logic.\n   * @param queryParams\n   */\n  logsQuery(\n    queryParams: Array<{\n      queryId: string;\n      refId: string;\n      limit?: number;\n      region: string;\n      statsGroups?: string[];\n    }>,\n    timeoutFunc: () => boolean\n  ): Observable<DataQueryResponse> {\n    this.logQueries = {};\n    queryParams.forEach((param) => {\n      this.logQueries[param.refId] = {\n        id: param.queryId,\n        region: param.region,\n        statsQuery: (param.statsGroups?.length ?? 0) > 0 ?? false,\n      };\n    });\n\n    const dataFrames = increasingInterval({ startPeriod: 100, endPeriod: 1000, step: 300 }).pipe(\n      concatMap((_) => this.makeLogActionRequest('GetQueryResults', queryParams, { skipCache: true })),\n      repeat(),\n      share()\n    );\n\n    const consecutiveFailedAttempts = dataFrames.pipe(\n      scan(\n        ({ failures, prevRecordsMatched }, frames) => {\n          failures++;\n          for (const frame of frames) {\n            const recordsMatched = frame.meta?.stats?.find((stat) => stat.displayName === 'Records scanned')?.value!;\n            if (recordsMatched > (prevRecordsMatched[frame.refId!] ?? 0)) {\n              failures = 0;\n            }\n            prevRecordsMatched[frame.refId!] = recordsMatched;\n          }\n\n          return { failures, prevRecordsMatched };\n        },\n        { failures: 0, prevRecordsMatched: {} as Record<string, number> }\n      ),\n      map(({ failures }) => failures),\n      share()\n    );\n\n    const queryResponse: Observable<DataQueryResponse> = zip(dataFrames, consecutiveFailedAttempts).pipe(\n      tap(([dataFrames]) => {\n        for (const frame of dataFrames) {\n          if (\n            [\n              CloudWatchLogsQueryStatus.Complete,\n              CloudWatchLogsQueryStatus.Cancelled,\n              CloudWatchLogsQueryStatus.Failed,\n            ].includes(frame.meta?.custom?.['Status']) &&\n            this.logQueries.hasOwnProperty(frame.refId!)\n          ) {\n            delete this.logQueries[frame.refId!];\n          }\n        }\n      }),\n      map(([dataFrames, failedAttempts]) => {\n        if (timeoutFunc()) {\n          for (const frame of dataFrames) {\n            set(frame, 'meta.custom.Status', CloudWatchLogsQueryStatus.Cancelled);\n          }\n        }\n\n        return {\n          data: dataFrames,\n          key: 'test-key',\n          state: dataFrames.every((dataFrame) =>\n            [\n              CloudWatchLogsQueryStatus.Complete,\n              CloudWatchLogsQueryStatus.Cancelled,\n              CloudWatchLogsQueryStatus.Failed,\n            ].includes(dataFrame.meta?.custom?.['Status'])\n          )\n            ? LoadingState.Done\n            : LoadingState.Loading,\n          error: timeoutFunc()\n            ? {\n                message: `error: query timed out after ${failedAttempts} attempts`,\n                type: DataQueryErrorType.Timeout,\n              }\n            : undefined,\n        };\n      }),\n      takeWhile(({ state }) => state !== LoadingState.Error && state !== LoadingState.Done, true)\n    );\n\n    return withTeardown(queryResponse, () => this.stopQueries());\n  }\n\n  stopQueries() {\n    if (Object.keys(this.logQueries).length > 0) {\n      this.makeLogActionRequest(\n        'StopQuery',\n        Object.values(this.logQueries).map((logQuery) => ({ queryId: logQuery.id, region: logQuery.region })),\n        {\n          makeReplacements: false,\n          skipCache: true,\n        }\n      ).pipe(\n        finalize(() => {\n          this.logQueries = {};\n        })\n      );\n    }\n  }\n\n  async describeLogGroups(params: DescribeLogGroupsRequest): Promise<string[]> {\n    const dataFrames = await lastValueFrom(this.makeLogActionRequest('DescribeLogGroups', [params]));\n\n    const logGroupNames = dataFrames[0]?.fields[0]?.values.toArray() ?? [];\n    return logGroupNames;\n  }\n\n  async getLogGroupFields(params: GetLogGroupFieldsRequest): Promise<GetLogGroupFieldsResponse> {\n    const dataFrames = await lastValueFrom(this.makeLogActionRequest('GetLogGroupFields', [params]));\n\n    const fieldNames = dataFrames[0].fields[0].values.toArray();\n    const fieldPercentages = dataFrames[0].fields[1].values.toArray();\n    const getLogGroupFieldsResponse = {\n      logGroupFields: fieldNames.map((val, i) => ({ name: val, percent: fieldPercentages[i] })) ?? [],\n    };\n\n    return getLogGroupFieldsResponse;\n  }\n\n  getLogRowContext = async (\n    row: LogRowModel,\n    { limit = 10, direction = 'BACKWARD' }: RowContextOptions = {}\n  ): Promise<{ data: DataFrame[] }> => {\n    let logStreamField = null;\n    let logField = null;\n\n    for (const field of row.dataFrame.fields) {\n      if (field.name === LOGSTREAM_IDENTIFIER_INTERNAL) {\n        logStreamField = field;\n        if (logField !== null) {\n          break;\n        }\n      } else if (field.name === LOG_IDENTIFIER_INTERNAL) {\n        logField = field;\n        if (logStreamField !== null) {\n          break;\n        }\n      }\n    }\n\n    const requestParams: GetLogEventsRequest = {\n      limit,\n      startFromHead: direction !== 'BACKWARD',\n      logGroupName: parseLogGroupName(logField!.values.get(row.rowIndex)),\n      logStreamName: logStreamField!.values.get(row.rowIndex),\n    };\n\n    if (direction === 'BACKWARD') {\n      requestParams.endTime = row.timeEpochMs;\n    } else {\n      requestParams.startTime = row.timeEpochMs;\n    }\n\n    const dataFrames = await lastValueFrom(this.makeLogActionRequest('GetLogEvents', [requestParams]));\n\n    return {\n      data: dataFrames,\n    };\n  };\n\n  getVariables() {\n    return this.templateSrv.getVariables().map((v) => `$${v.name}`);\n  }\n\n  getPeriod(target: CloudWatchMetricsQuery, options: any) {\n    let period = this.templateSrv.replace(target.period, options.scopedVars) as any;\n    if (period && period.toLowerCase() !== 'auto') {\n      if (/^\\d+$/.test(period)) {\n        period = parseInt(period, 10);\n      } else {\n        period = rangeUtil.intervalToSeconds(period);\n      }\n\n      if (period < 1) {\n        period = 1;\n      }\n    }\n\n    return period || '';\n  }\n\n  performTimeSeriesQuery(request: MetricRequest, { from, to }: TimeRange): Observable<any> {\n    return this.awsRequest(DS_QUERY_ENDPOINT, request).pipe(\n      map((res) => {\n        const dataframes: DataFrame[] = toDataQueryResponse({ data: res }).data;\n        if (!dataframes || dataframes.length <= 0) {\n          return { data: [] };\n        }\n\n        const lastError = findLast(res.results, (v) => !!v.error);\n\n        dataframes.forEach((frame) => {\n          frame.fields.forEach((field) => {\n            if (field.type === FieldType.time) {\n              // field.config.interval is populated in order for Grafana to fill in null values at frame intervals\n              field.config.interval = frame.meta?.custom?.period * 1000;\n            }\n          });\n        });\n\n        return {\n          data: dataframes,\n          error: lastError ? { message: lastError.error } : null,\n        };\n      }),\n      catchError((err) => {\n        const isFrameError = err.data.results;\n\n        // Error is not frame specific\n        if (!isFrameError && err.data && err.data.message === 'Metric request error' && err.data.error) {\n          err.message = err.data.error;\n          return throwError(() => err);\n        }\n\n        // The error is either for a specific frame or for all the frames\n        const results: Array<{ error?: string }> = Object.values(err.data.results);\n        const firstErrorResult = results.find((r) => r.error);\n        if (firstErrorResult) {\n          err.message = firstErrorResult.error;\n        }\n\n        if (results.some((r) => r.error && /^Throttling:.*/.test(r.error))) {\n          const failedRedIds = Object.keys(err.data.results);\n          const regionsAffected = Object.values(request.queries).reduce(\n            (res: string[], { refId, region }) =>\n              (refId && !failedRedIds.includes(refId)) || res.includes(region) ? res : [...res, region],\n            []\n          ) as string[];\n          regionsAffected.forEach((region) => {\n            const actualRegion = this.getActualRegion(region);\n            if (actualRegion) {\n              this.debouncedAlert(this.datasourceName, actualRegion);\n            }\n          });\n        }\n\n        return throwError(() => err);\n      })\n    );\n  }\n\n  doMetricResourceRequest(subtype: string, parameters?: any): Promise<Array<{ text: any; label: any; value: any }>> {\n    return this.getResource(subtype, parameters);\n  }\n\n  makeLogActionRequest(\n    subtype: LogAction,\n    queryParams: CloudWatchLogsRequest[],\n    options: {\n      scopedVars?: ScopedVars;\n      makeReplacements?: boolean;\n      skipCache?: boolean;\n    } = {\n      makeReplacements: true,\n      skipCache: false,\n    }\n  ): Observable<DataFrame[]> {\n    const range = this.timeSrv.timeRange();\n\n    const requestParams = {\n      from: range.from.valueOf().toString(),\n      to: range.to.valueOf().toString(),\n      queries: queryParams.map((param: CloudWatchLogsRequest) => ({\n        refId: (param as StartQueryRequest).refId || 'A',\n        intervalMs: 1, // dummy\n        maxDataPoints: 1, // dummy\n        datasource: this.getRef(),\n        type: 'logAction',\n        subtype: subtype,\n        ...param,\n      })),\n    };\n\n    if (options.makeReplacements) {\n      requestParams.queries.forEach((query: CloudWatchLogsRequest) => {\n        const fieldsToReplace: Array<\n          keyof (GetLogEventsRequest & StartQueryRequest & DescribeLogGroupsRequest & GetLogGroupFieldsRequest)\n        > = ['queryString', 'logGroupNames', 'logGroupName', 'logGroupNamePrefix'];\n\n        const anyQuery: any = query;\n        for (const fieldName of fieldsToReplace) {\n          if (query.hasOwnProperty(fieldName)) {\n            if (Array.isArray(anyQuery[fieldName])) {\n              anyQuery[fieldName] = anyQuery[fieldName].map((val: string) =>\n                this.replace(val, options.scopedVars, true, fieldName)\n              );\n            } else {\n              anyQuery[fieldName] = this.replace(anyQuery[fieldName], options.scopedVars, true, fieldName);\n            }\n          }\n        }\n        // TODO: seems to be some sort of bug that we don't really send region with all queries. This means\n        //  if you select different than default region in editor you will get results for autocomplete from wrong\n        //  region.\n        if (anyQuery.region) {\n          anyQuery.region = this.replace(anyQuery.region, options.scopedVars, true, 'region');\n          anyQuery.region = this.getActualRegion(anyQuery.region);\n        }\n      });\n    }\n\n    const resultsToDataFrames = (val: any): DataFrame[] => toDataQueryResponse(val).data || [];\n    let headers = {};\n    if (options.skipCache) {\n      headers = {\n        'X-Cache-Skip': true,\n      };\n    }\n\n    return this.awsRequest(DS_QUERY_ENDPOINT, requestParams, headers).pipe(\n      map((response) => resultsToDataFrames({ data: response })),\n      catchError((err: FetchError) => {\n        if (err.status === 400) {\n          throw err;\n        }\n\n        if (err.data?.error) {\n          throw err.data.error;\n        } else if (err.data?.message) {\n          // In PROD we do not supply .error\n          throw err.data.message;\n        }\n\n        throw err;\n      })\n    );\n  }\n\n  getRegions(): Promise<Array<{ label: string; value: string; text: string }>> {\n    return this.doMetricResourceRequest('regions').then((regions: any) => [\n      { label: 'default', value: 'default', text: 'default' },\n      ...regions,\n    ]);\n  }\n\n  getNamespaces() {\n    return this.doMetricResourceRequest('namespaces');\n  }\n\n  async getMetrics(namespace: string | undefined, region?: string) {\n    if (!namespace) {\n      return [];\n    }\n\n    return this.doMetricResourceRequest('metrics', {\n      region: this.templateSrv.replace(this.getActualRegion(region)),\n      namespace: this.templateSrv.replace(namespace),\n    });\n  }\n\n  async getAllMetrics(region: string): Promise<Array<{ metricName: string; namespace: string }>> {\n    const values = await this.doMetricResourceRequest('all-metrics', {\n      region: this.templateSrv.replace(this.getActualRegion(region)),\n    });\n\n    return values.map((v) => ({ metricName: v.value, namespace: v.text }));\n  }\n\n  async getDimensionKeys(\n    namespace: string | undefined,\n    region: string,\n    dimensionFilters: Dimensions = {},\n    metricName = ''\n  ) {\n    if (!namespace) {\n      return [];\n    }\n\n    return this.doMetricResourceRequest('dimension-keys', {\n      region: this.templateSrv.replace(this.getActualRegion(region)),\n      namespace: this.templateSrv.replace(namespace),\n      dimensionFilters: JSON.stringify(this.convertDimensionFormat(dimensionFilters, {})),\n      metricName,\n    });\n  }\n\n  async getDimensionValues(\n    region: string,\n    namespace: string | undefined,\n    metricName: string | undefined,\n    dimensionKey: string,\n    filterDimensions: {}\n  ) {\n    if (!namespace || !metricName) {\n      return [];\n    }\n\n    const values = await this.doMetricResourceRequest('dimension-values', {\n      region: this.templateSrv.replace(this.getActualRegion(region)),\n      namespace: this.templateSrv.replace(namespace),\n      metricName: this.templateSrv.replace(metricName.trim()),\n      dimensionKey: this.templateSrv.replace(dimensionKey),\n      dimensions: JSON.stringify(this.convertDimensionFormat(filterDimensions, {})),\n    });\n\n    return values;\n  }\n\n  getEbsVolumeIds(region: string, instanceId: string) {\n    return this.doMetricResourceRequest('ebs-volume-ids', {\n      region: this.templateSrv.replace(this.getActualRegion(region)),\n      instanceId: this.templateSrv.replace(instanceId),\n    });\n  }\n\n  getEc2InstanceAttribute(region: string, attributeName: string, filters: any) {\n    return this.doMetricResourceRequest('ec2-instance-attribute', {\n      region: this.templateSrv.replace(this.getActualRegion(region)),\n      attributeName: this.templateSrv.replace(attributeName),\n      filters: JSON.stringify(filters),\n    });\n  }\n\n  getResourceARNs(region: string, resourceType: string, tags: any) {\n    return this.doMetricResourceRequest('resource-arns', {\n      region: this.templateSrv.replace(this.getActualRegion(region)),\n      resourceType: this.templateSrv.replace(resourceType),\n      tags: JSON.stringify(tags),\n    });\n  }\n\n  annotationQuery(options: any) {\n    const annotation = options.annotation;\n    const statistic = this.templateSrv.replace(annotation.statistic);\n    const defaultPeriod = annotation.prefixMatching ? '' : '300';\n    let period = annotation.period || defaultPeriod;\n    period = parseInt(period, 10);\n    const parameters = {\n      prefixMatching: annotation.prefixMatching,\n      region: this.templateSrv.replace(this.getActualRegion(annotation.region)),\n      namespace: this.templateSrv.replace(annotation.namespace),\n      metricName: this.templateSrv.replace(annotation.metricName),\n      dimensions: this.convertDimensionFormat(annotation.dimensions, {}),\n      statistic: statistic,\n      period: period,\n      actionPrefix: annotation.actionPrefix || '',\n      alarmNamePrefix: annotation.alarmNamePrefix || '',\n    };\n\n    return lastValueFrom(\n      this.awsRequest(DS_QUERY_ENDPOINT, {\n        from: options.range.from.valueOf().toString(),\n        to: options.range.to.valueOf().toString(),\n        queries: [\n          {\n            refId: 'annotationQuery',\n            datasource: this.getRef(),\n            type: 'annotationQuery',\n            ...parameters,\n          },\n        ],\n      }).pipe(\n        map((r) => {\n          const frames = toDataQueryResponse({ data: r }).data as DataFrame[];\n          const table = toLegacyResponseData(frames[0]) as TableData;\n          return table.rows.map((v) => ({\n            annotation: annotation,\n            time: Date.parse(v[0]),\n            title: v[1],\n            tags: [v[2]],\n            text: v[3],\n          }));\n        })\n      )\n    );\n  }\n\n  targetContainsTemplate(target: any) {\n    return (\n      this.templateSrv.containsTemplate(target.region) ||\n      this.templateSrv.containsTemplate(target.namespace) ||\n      this.templateSrv.containsTemplate(target.metricName) ||\n      this.templateSrv.containsTemplate(target.expression!) ||\n      target.logGroupNames?.some((logGroup: string) => this.templateSrv.containsTemplate(logGroup)) ||\n      find(target.dimensions, (v, k) => this.templateSrv.containsTemplate(k) || this.templateSrv.containsTemplate(v))\n    );\n  }\n\n  awsRequest(url: string, data: MetricRequest, headers: Record<string, any> = {}): Observable<TSDBResponse> {\n    const options = {\n      method: 'POST',\n      url,\n      data,\n      headers,\n    };\n\n    return getBackendSrv()\n      .fetch<TSDBResponse>(options)\n      .pipe(map((result) => result.data));\n  }\n\n  getDefaultRegion() {\n    return this.defaultRegion;\n  }\n\n  getActualRegion(region?: string) {\n    if (region === 'default' || region === undefined || region === '') {\n      return this.getDefaultRegion();\n    }\n    return region;\n  }\n\n  showContextToggle() {\n    return true;\n  }\n\n  convertToCloudWatchTime(date: any, roundUp: any) {\n    if (isString(date)) {\n      date = dateMath.parse(date, roundUp);\n    }\n    return Math.round(date.valueOf() / 1000);\n  }\n\n  convertDimensionFormat(dimensions: Dimensions, scopedVars: ScopedVars) {\n    return Object.entries(dimensions).reduce((result, [key, value]) => {\n      key = this.replace(key, scopedVars, true, 'dimension keys');\n\n      if (Array.isArray(value)) {\n        return { ...result, [key]: value };\n      }\n\n      if (!value) {\n        return { ...result, [key]: null };\n      }\n\n      const valueVar = this.templateSrv\n        .getVariables()\n        .find(({ name }) => name === this.templateSrv.getVariableName(value));\n      if (valueVar) {\n        if ((valueVar as unknown as VariableWithMultiSupport).multi) {\n          const values = this.templateSrv.replace(value, scopedVars, 'pipe').split('|');\n          return { ...result, [key]: values };\n        }\n        return { ...result, [key]: [this.templateSrv.replace(value, scopedVars)] };\n      }\n\n      return { ...result, [key]: [value] };\n    }, {});\n  }\n\n  replace(\n    target?: string,\n    scopedVars?: ScopedVars,\n    displayErrorIfIsMultiTemplateVariable?: boolean,\n    fieldName?: string\n  ) {\n    if (displayErrorIfIsMultiTemplateVariable && !!target) {\n      const variable = this.templateSrv\n        .getVariables()\n        .find(({ name }) => name === this.templateSrv.getVariableName(target));\n      if (variable && (variable as unknown as VariableWithMultiSupport).multi) {\n        this.debouncedCustomAlert(\n          'CloudWatch templating error',\n          `Multi template variables are not supported for ${fieldName || target}`\n        );\n      }\n    }\n\n    return this.templateSrv.replace(target, scopedVars);\n  }\n\n  getQueryDisplayText(query: CloudWatchQuery) {\n    if (query.queryMode === 'Logs') {\n      return query.expression ?? '';\n    } else {\n      return JSON.stringify(query);\n    }\n  }\n\n  getTargetsByQueryMode = (targets: CloudWatchQuery[]) => {\n    const logQueries: CloudWatchLogsQuery[] = [];\n    const metricsQueries: CloudWatchMetricsQuery[] = [];\n\n    targets.forEach((query) => {\n      const mode = query.queryMode ?? 'Metrics';\n      if (mode === 'Logs') {\n        logQueries.push(query as CloudWatchLogsQuery);\n      } else {\n        metricsQueries.push(query as CloudWatchMetricsQuery);\n      }\n    });\n\n    return {\n      logQueries,\n      metricsQueries,\n    };\n  };\n\n  interpolateVariablesInQueries(queries: CloudWatchQuery[], scopedVars: ScopedVars): CloudWatchQuery[] {\n    if (!queries.length) {\n      return queries;\n    }\n\n    return queries.map((query) => ({\n      ...query,\n      region: this.getActualRegion(this.replace(query.region, scopedVars)),\n      expression: this.replace(query.expression, scopedVars),\n\n      ...(!isCloudWatchLogsQuery(query) && this.interpolateMetricsQueryVariables(query, scopedVars)),\n    }));\n  }\n\n  interpolateMetricsQueryVariables(\n    query: CloudWatchMetricsQuery,\n    scopedVars: ScopedVars\n  ): Pick<CloudWatchMetricsQuery, 'alias' | 'metricName' | 'namespace' | 'period' | 'dimensions' | 'sqlExpression'> {\n    return {\n      alias: this.replace(query.alias, scopedVars),\n      metricName: this.replace(query.metricName, scopedVars),\n      namespace: this.replace(query.namespace, scopedVars),\n      period: this.replace(query.period, scopedVars),\n      sqlExpression: this.replace(query.sqlExpression, scopedVars),\n      dimensions: Object.entries(query.dimensions ?? {}).reduce((prev, [key, value]) => {\n        if (Array.isArray(value)) {\n          return { ...prev, [key]: value };\n        }\n\n        return { ...prev, [this.replace(key, scopedVars)]: this.replace(value, scopedVars) };\n      }, {}),\n    };\n  }\n}\n\nfunction withTeardown<T = any>(observable: Observable<T>, onUnsubscribe: () => void): Observable<T> {\n  return new Observable<T>((subscriber) => {\n    const innerSub = observable.subscribe({\n      next: (val) => subscriber.next(val),\n      error: (err) => subscriber.next(err),\n      complete: () => subscriber.complete(),\n    });\n\n    return () => {\n      innerSub.unsubscribe();\n      onUnsubscribe();\n    };\n  });\n}\n\nfunction parseLogGroupName(logIdentifier: string): string {\n  const colonIndex = logIdentifier.lastIndexOf(':');\n  return logIdentifier.slice(colonIndex + 1);\n}\n","import { DataSourcePlugin } from '@grafana/data';\n\nimport { CloudWatchAnnotationsQueryCtrl } from './annotations_query_ctrl';\nimport { ConfigEditor } from './components/ConfigEditor';\nimport LogsCheatSheet from './components/LogsCheatSheet';\nimport { CloudWatchLogsQueryEditor } from './components/LogsQueryEditor';\nimport { MetaInspector } from './components/MetaInspector';\nimport { PanelQueryEditor } from './components/PanelQueryEditor';\nimport { CloudWatchDatasource } from './datasource';\nimport { CloudWatchJsonData, CloudWatchQuery } from './types';\n\nexport const plugin = new DataSourcePlugin<CloudWatchDatasource, CloudWatchQuery, CloudWatchJsonData>(\n  CloudWatchDatasource\n)\n  .setQueryEditorHelp(LogsCheatSheet)\n  .setConfigEditor(ConfigEditor)\n  .setQueryEditor(PanelQueryEditor)\n  .setMetadataInspector(MetaInspector)\n  .setExploreMetricsQueryField(PanelQueryEditor)\n  .setExploreLogsQueryField(CloudWatchLogsQueryEditor)\n  .setAnnotationQueryCtrl(CloudWatchAnnotationsQueryCtrl);\n","import React, { FC, useEffect, useState } from 'react';\nimport { useDebounce } from 'react-use';\n\nimport { ConnectionConfig } from '@grafana/aws-sdk';\nimport {\n  rangeUtil,\n  DataSourcePluginOptionsEditorProps,\n  onUpdateDatasourceJsonDataOption,\n  updateDatasourcePluginJsonDataOption,\n} from '@grafana/data';\nimport { Input, InlineField } from '@grafana/ui';\nimport { notifyApp } from 'app/core/actions';\nimport { createWarningNotification } from 'app/core/copy/appNotification';\nimport { getDatasourceSrv } from 'app/features/plugins/datasource_srv';\nimport { store } from 'app/store/store';\n\nimport { CloudWatchDatasource } from '../datasource';\nimport { CloudWatchJsonData, CloudWatchSecureJsonData } from '../types';\n\nimport { XrayLinkConfig } from './XrayLinkConfig';\n\nexport type Props = DataSourcePluginOptionsEditorProps<CloudWatchJsonData, CloudWatchSecureJsonData>;\n\nexport const ConfigEditor: FC<Props> = (props: Props) => {\n  const { options } = props;\n\n  const datasource = useDatasource(options.name);\n  useAuthenticationWarning(options.jsonData);\n  const logsTimeoutError = useTimoutValidation(props.options.jsonData.logsTimeout);\n\n  return (\n    <>\n      <ConnectionConfig\n        {...props}\n        loadRegions={\n          datasource &&\n          (() => datasource!.getRegions().then((r) => r.filter((r) => r.value !== 'default').map((v) => v.value)))\n        }\n      >\n        <InlineField label=\"Namespaces of Custom Metrics\" labelWidth={28} tooltip=\"Namespaces of Custom Metrics.\">\n          <Input\n            width={60}\n            placeholder=\"Namespace1,Namespace2\"\n            value={options.jsonData.customMetricsNamespaces || ''}\n            onChange={onUpdateDatasourceJsonDataOption(props, 'customMetricsNamespaces')}\n          />\n        </InlineField>\n      </ConnectionConfig>\n\n      <h3 className=\"page-heading\">CloudWatch Logs</h3>\n      <div className=\"gf-form-group\">\n        <InlineField\n          label=\"Timeout\"\n          labelWidth={28}\n          tooltip='Custom timout for CloudWatch Logs insights queries which have max concurrency limits. Default is 15 minutes. Must be a valid duration string, such as \"15m\" \"30s\" \"2000ms\" etc.'\n          invalid={Boolean(logsTimeoutError)}\n        >\n          <Input\n            width={60}\n            placeholder=\"15m\"\n            value={options.jsonData.logsTimeout || ''}\n            onChange={onUpdateDatasourceJsonDataOption(props, 'logsTimeout')}\n            title={'The timeout must be a valid duration string, such as \"15m\" \"30s\" \"2000ms\" etc.'}\n          />\n        </InlineField>\n      </div>\n\n      <XrayLinkConfig\n        onChange={(uid) => updateDatasourcePluginJsonDataOption(props, 'tracingDatasourceUid', uid)}\n        datasourceUid={options.jsonData.tracingDatasourceUid}\n      />\n    </>\n  );\n};\n\nfunction useAuthenticationWarning(jsonData: CloudWatchJsonData) {\n  const addWarning = (message: string) => {\n    store.dispatch(notifyApp(createWarningNotification('CloudWatch Authentication', message)));\n  };\n\n  useEffect(() => {\n    if (jsonData.authType === 'arn') {\n      addWarning('Since grafana 7.3 authentication type \"arn\" is deprecated, falling back to default SDK provider');\n    } else if (jsonData.authType === 'credentials' && !jsonData.profile && !jsonData.database) {\n      addWarning(\n        'As of grafana 7.3 authentication type \"credentials\" should be used only for shared file credentials. \\\n             If you don\\'t have a credentials file, switch to the default SDK provider for extracting credentials \\\n             from environment variables or IAM roles'\n      );\n    }\n  }, [jsonData.authType, jsonData.database, jsonData.profile]);\n}\n\nfunction useDatasource(datasourceName: string) {\n  const [datasource, setDatasource] = useState<CloudWatchDatasource>();\n\n  useEffect(() => {\n    getDatasourceSrv()\n      .loadDatasource(datasourceName)\n      .then((datasource) => {\n        // It's really difficult to type .loadDatasource() because it's inherently untyped as it involves two JSON.parse()'s\n        // So a \"as\" type assertion here is a necessary evil.\n        setDatasource(datasource as CloudWatchDatasource);\n      });\n  }, [datasourceName]);\n\n  return datasource;\n}\n\nfunction useTimoutValidation(value: string | undefined) {\n  const [err, setErr] = useState<undefined | string>(undefined);\n  useDebounce(\n    () => {\n      if (value) {\n        try {\n          rangeUtil.describeInterval(value);\n          setErr(undefined);\n        } catch (e) {\n          setErr(e.toString());\n        }\n      } else {\n        setErr(undefined);\n      }\n    },\n    350,\n    [value]\n  );\n  return err;\n}\n","import { groupBy } from 'lodash';\nimport React, { useMemo } from 'react';\n\nimport { MetadataInspectorProps } from '@grafana/data';\n\nimport { CloudWatchDatasource } from '../datasource';\nimport { CloudWatchQuery, CloudWatchJsonData } from '../types';\n\nexport type Props = MetadataInspectorProps<CloudWatchDatasource, CloudWatchQuery, CloudWatchJsonData>;\n\nexport function MetaInspector({ data = [] }: Props) {\n  const rows = useMemo(() => groupBy(data, 'refId'), [data]);\n\n  return (\n    <>\n      <table className=\"filter-table form-inline\">\n        <thead>\n          <tr>\n            <th>RefId</th>\n            <th>Metric Data Query ID</th>\n            <th>Metric Data Query Expression</th>\n            <th>Period</th>\n            <th />\n          </tr>\n        </thead>\n        {Object.entries(rows).map(([refId, frames], idx) => {\n          if (!frames.length) {\n            return null;\n          }\n\n          const frame = frames[0];\n          const custom = frame.meta?.custom;\n          if (!custom) {\n            return null;\n          }\n\n          return (\n            <tbody key={idx}>\n              <tr>\n                <td>{refId}</td>\n                <td>{custom.id}</td>\n                <td>{frame.meta?.executedQueryString}</td>\n                <td>{custom.period}</td>\n              </tr>\n            </tbody>\n          );\n        })}\n      </table>\n    </>\n  );\n}\n"],"names":["METRIC_MATH_FNS","METRIC_MATH_STATISTIC_KEYWORD_STRINGS","METRIC_MATH_KEYWORDS","METRIC_MATH_OPERATORS","METRIC_MATH_PERIODS","language","id","ignoreCase","brackets","open","close","token","tokenizer","root","include","nonNestableStates","keywords","map","escapeRegExp","join","operators","builtInFunctions","variables","whitespace","assignment","numbers","strings","next","string","string_double","nestedCurly","nestedParens","conf","autoClosingPairs","surroundingPairs","replace","CloudWatchAnnotationsQueryCtrl","constructor","$scope","this","annotation","ctrl","defaultsDeep","namespace","metricName","expression","dimensions","region","alias","statistic","matchExact","prefixMatching","actionPrefix","alarmNamePrefix","onChange","bind","query","Object","assign","getStyles","theme","infoText","css","spacing","colors","text","secondary","xRayDsId","XrayLinkConfig","datasourceUid","hasXrayDatasource","Boolean","getDatasourceSrv","getList","pluginId","length","styles","useStyles2","className","Alert","title","severity","InlineField","htmlFor","label","labelWidth","tooltip","DataSourcePicker","ds","uid","current","noDefault","raw","_createClass","defineProperties","target","props","i","descriptor","enumerable","configurable","writable","defineProperty","key","Constructor","protoProps","staticProps","prototype","_templateObject","freeze","value","_classCallCheck","instance","TypeError","TemplateTag","_this","_len","arguments","transformers","Array","_key","tag","_len2","expressions","_key2","interimTag","transformEndResult","transformString","reduce","processSubstitutions","isArray","transformer","previousTag","template","_len3","substitutions","_key3","apply","undefined","concat","resultSoFar","remainingPart","substitution","transformSubstitution","shift","str","res","transform","onString","onSubstitution","endResult","onEndResult","defaults","separator","conjunction","serial","opts","arrayLength","indent","match","separatorIndex","lastIndexOf","slice","_toConsumableArray","arr","arr2","from","type","Math","min","el","regexp","RegExp","Error","side","trim","toLowerCase","splitBy","includes","split","isValidValue","x","Number","isNaN","filter","replaceWhat","replaceWith","toString","CLIQ_EXAMPLES","category","examples","expr","stripIndents","stripIndent","renderHighlightedMarkup","code","keyPrefix","grammar","spans","flattenTokens","Prism","types","aliases","content","exampleCategory","LogsCheatSheet","PureComponent","onClickExample","renderExpression","onClick","refId","queryMode","logGroupNames","renderLogsCheatSheet","cat","cx","item","j","render","LinkedToken","range","previous","tokenTypes","isKeyword","Keyword","isWhiteSpace","Whitespace","isParenthesis","Parenthesis","isIdentifier","Identifier","isString","String","isDoubleQuotedString","Type","isVariable","Variable","isFunction","Function","isNumber","is","isType","endsWith","getPreviousNonWhiteSpaceToken","curr","getPreviousOfType","getPreviousUntil","ignoreTypes","tokens","some","t","push","getNextUntil","getPreviousKeyword","getNextNonWhiteSpaceToken","getNextOfType","StatementPosition","SuggestionKind","CompletionItemPriority","CompletionItemProvider","datasource","templateSrv","getTemplateSrv","templateVariables","getVariables","Delimiter","Operator","getStatementPosition","currentToken","Unknown","getSuggestionKinds","position","getSuggestions","monaco","suggestionKinds","statementPosition","Promise","reject","getCompletionProvider","languageDefinition","triggerCharacters","provideCompletionItems","async","model","tokensPerLine","editor","tokenize","getValue","lineIndex","offset","_tokenBrand","columnIndex","endColumn","getLineLength","startLineNumber","startColumn","endLineNumber","getValueInRange","newToken","Range","containsPosition","linkedTokenBuilder","suggestions","SQLTokenTypes","previousNonWhiteSpace","previousKeyword","previousIsSlash","SELECT","SelectKeyword","AfterSelectKeyword","AfterSelectFuncFirstArgument","FromKeyword","FROM","AfterFromKeyword","SCHEMA","SchemaFuncFirstArgument","SchemaFuncExtraArgument","AfterFrom","WHERE","AND","WhereKey","WhereComparisonOperator","EQUALS","NOT_EQUALS","WhereValue","AfterWhereValue","BY","GROUP","AfterGroupByKeywords","AfterGroupBy","ORDER","AfterOrderByKeywords","AfterOrderByFunction","DESC","ASC","AfterOrderByDirection","FunctionsWithArguments","Metrics","Namespaces","SchemaKeyword","LabelKeys","WhereKeyword","GroupByKeywords","OrderByKeywords","LimitKeyword","ComparisonOperators","LabelValues","LogicalOperators","FunctionsWithoutArguments","SortOrderDirectionKeyword","getSelectToken","getMetricNameToken","assumedMetricNameToken","assumedStatisticToken","getSelectStatisticToken","getNamespaceToken","fromToken","selectToken","getFromKeywordToken","nextNonWhiteSpace","toUpperCase","assumedNamespaceToken","SQLCompletionItemProvider","super","getActualRegion","setRegion","fromPositions","toCompletionItem","rest","insertText","kind","languages","CompletionItemKind","Field","sortText","Medium","addSuggestion","suggestion","insertTextRules","CompletionItemInsertTextRule","InsertAsSnippet","command","TRIGGER_SUGGEST","STATISTICS","s","namespaceToken","getMetrics","m","metrics","getAllMetrics","uniq","High","metricNameToken","namespaces","getNamespaces","n","labelKeyTokens","dimensionFilter","acc","getDimensionKeys","test","labelKey","getDimensionValues","o","LOGICAL_OPERATORS","MediumHigh","COMPARISON_OPERATORS","LIMIT","MediumLow","v","Low","ThrottlingErrorMessage","rel","href","CloudWatchLanguageProvider","LanguageProvider","initialValues","url","params","lastValueFrom","awsRequest","startTask","resolve","then","started","logGroups","fetchedFieldsCache","Date","now","time","sortedUniq","fields","results","all","logGroup","getLogGroupFields","logGroupName","Set","cur","logGroupFields","f","name","values","suggs","getFieldCompletionItems","context","functionSuggestions","searchFunctionType","SearchFunctionType","items","STRING_FUNCTIONS","DATETIME_FUNCTIONS","IP_FUNCTIONS","commandToken","curToken","queryCommand","prevToken","prevNonWhitespaceToken","currentTokenIsFirstArg","handleSortCommand","currentTokenIsAfterCommandAndEmpty","isTokenType","currentTokenIsAfterCommand","nextNonWhitespaceToken","currentTokenIsComma","currentTokenIsCommaOrAfterComma","typeaheadOutput","getFieldAndFilterFunctionCompletionItems","getStatsAggCompletionItems","forEach","group","skipFilter","sugg","boolFuncs","getBoolFuncCompletionItems","fieldsSuggestions","comparisonSuggestions","getComparisonCompletionItems","QUERY_COMMANDS","FIELD_AND_FILTER_FUNCTIONS","AGGREGATION_FUNCTIONS_STATS","BOOLEAN_FUNCTIONS","NUMERIC_OPERATORS","fetchFields","field","getSyntax","syntax","isStatsQuery","find","input","data","get","offsets","start","selection","end","isFirstToken","prev","getCommandCompletionItems","parenthesisToken","maybeFunctionToken","funcsWithFieldArgs","isInsideFunctionParenthesis","keyword","maybeKeyword","getPreviousTokenExcluding","isAfterKeyword","handleKeyword","handleComparison","startToken","thisToken","previousCommandToken","handleCommand","isFirstArgument","funcName","exclude","main","func","wait","mem","memoize","debounce","leading","args","JSON","stringify","MetricMathTokenTypes","WithinString","currentFunction","isAfterComma","isWithinSearch","allTokensAfterStartOfSearch","lastComma","SearchFuncThirdArg","SearchFuncSecondArg","PredefinedFuncSecondArg","AfterFunction","PredefinedFunction","KeywordArguments","Operators","Statistic","Period","MetricMathCompletionItemProvider","idx","Value","fromCharCode","createInternalXrayLink","getDataSourceSrv","e","console","error","internal","queryType","datasourceName","createAwsConsoleLink","interpolatedExpression","interpolatedGroups","urlProps","to","toISOString","timeType","tz","editorString","isLiveTail","source","encodeUrl","targetBlank","runWithRetry","queryFun","targets","timeoutFunc","startTime","timerID","subscription","retries","collected","Observable","observer","run","currentQueryParams","subscribe","frames","collectedPreviously","toDataQueryResponse","complete","errorData","keys","startsWith","errorMessage","errors","config","queries","q","good","splitErrorData","retry","valueOf","dataResponse","message","setTimeout","pow","random","clearTimeout","unsubscribe","dispatch","state","subscriber","counter","period","step","endPeriod","newPeriod","schedule","VariableQueryField","options","allowCustomValue","isLoading","Select","menuShouldPortal","width","inputId","VariableTextField","onBlur","placeholder","localValue","setLocalValue","useState","Input","currentTarget","queryTypes","VariableQueryType","VariableQueryEditor","parsedQuery","migrateVariableQuery","dimensionKey","regions","regionIsLoading","useRegions","useNamespaces","useMetrics","dimensionKeys","useDimensionKeys","onQueryChange","newQuery","sanitizeQuery","dimensionFilters","result","metric","hasRegionField","hasNamespaceField","validatedQuery","onRegionChange","onNamespaceChange","instanceID","attributeName","ec2Filters","resourceType","tags","CloudWatchVariableSupport","CustomVariableSupport","request","queryObj","execute","pipe","handleRegionsQuery","handleNamespacesQuery","handleMetricsQuery","handleDimensionKeysQuery","handleDimensionValuesQuery","handleEbsVolumeIdsQuery","handleEc2InstanceAttributeQuery","handleResourceARNsQuery","handleStatisticsQuery","getRegions","expandable","filterJson","parse","getEbsVolumeIds","getEc2InstanceAttribute","tagJson","getResourceARNs","standardStatistics","DS_QUERY_ENDPOINT","LOG_IDENTIFIER_INTERNAL","LOGSTREAM_IDENTIFIER_INTERNAL","displayAlert","store","notifyApp","createErrorNotification","React","displayCustomError","CloudWatchDatasource","DataSourceWithBackend","instanceSettings","timeSrv","getTimeSrv","memoizedDebounce","AppNotificationTimeout","logQueries","validLogQueries","of","isEmpty","LoadingState","queryParams","queryString","scopedVars","rangeUtil","logsTimeout","makeLogActionRequest","makeReplacements","skipCache","mergeMap","logsQuery","dataFrame","queryId","meta","custom","statsGroups","response","dataQueryResponse","replaceFn","getRegion","tracingDatasourceUid","fieldName","curTarget","interpolatedRegion","xrayLink","links","addDataLinksToLogsResponse","timeRange","tracingDataSourceUid","metricQueries","validMetricsQueries","filterQuery","convertDimensionFormat","getPeriod","sqlExpression","intervalMs","maxDataPoints","getRef","performTimeSeriesQuery","row","limit","direction","logStreamField","logField","requestParams","startFromHead","parseLogGroupName","rowIndex","logStreamName","endTime","timeEpochMs","dataFrames","metricsQueries","proxyUrl","defaultRegion","jsonData","languageProvider","sqlCompletionItemProvider","metricMathCompletionItemProvider","cloneDeep","hide","getTargetsByQueryMode","dataQueryResponses","handleLogQueries","handleMetricQueries","merge","metricQueryType","metricEditorMode","MetricQueryType","MetricEditorMode","param","statsQuery","startPeriod","scheduler","asyncScheduler","add","increasingInterval","concatMap","_","repeat","share","consecutiveFailedAttempts","scan","failures","prevRecordsMatched","frame","recordsMatched","stats","stat","displayName","queryResponse","zip","tap","CloudWatchLogsQueryStatus","hasOwnProperty","failedAttempts","set","every","DataQueryErrorType","takeWhile","observable","onUnsubscribe","stopQueries","innerSub","val","err","logQuery","finalize","toArray","fieldNames","fieldPercentages","percent","parseInt","dataframes","lastError","findLast","FieldType","interval","catchError","throwError","firstErrorResult","r","failedRedIds","actualRegion","debouncedAlert","doMetricResourceRequest","subtype","parameters","getResource","fieldsToReplace","anyQuery","headers","resultsToDataFrames","status","filterDimensions","instanceId","filters","annotationQuery","defaultPeriod","toLegacyResponseData","rows","targetContainsTemplate","containsTemplate","k","method","getBackendSrv","fetch","getDefaultRegion","showContextToggle","convertToCloudWatchTime","date","roundUp","dateMath","round","entries","valueVar","getVariableName","multi","displayErrorIfIsMultiTemplateVariable","variable","debouncedCustomAlert","getQueryDisplayText","interpolateVariablesInQueries","isCloudWatchLogsQuery","interpolateMetricsQueryVariables","logIdentifier","colonIndex","plugin","DataSourcePlugin","setQueryEditorHelp","setConfigEditor","setDatasource","useEffect","loadDatasource","useDatasource","addWarning","createWarningNotification","authType","profile","database","useAuthenticationWarning","logsTimeoutError","setErr","useDebounce","useTimoutValidation","ConnectionConfig","loadRegions","customMetricsNamespaces","onUpdateDatasourceJsonDataOption","invalid","updateDatasourcePluginJsonDataOption","setQueryEditor","PanelQueryEditor","setMetadataInspector","useMemo","groupBy","executedQueryString","setExploreMetricsQueryField","setExploreLogsQueryField","CloudWatchLogsQueryEditor","setAnnotationQueryCtrl"],"sourceRoot":""}