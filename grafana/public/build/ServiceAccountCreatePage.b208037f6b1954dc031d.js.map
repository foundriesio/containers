{"version":3,"file":"ServiceAccountCreatePage.b208037f6b1954dc031d.js","mappings":"66BAmBA,MA2CA,GAAeA,EAAAA,EAAAA,UAJUC,IAAD,CACtBC,UAAUC,EAAAA,EAAAA,GAAYF,EAAMG,SAAU,sBAGxC,EAzC0E,IAAkB,IAAjB,SAAEF,GAAe,EAC1F,MAAMG,GAAUC,EAAAA,EAAAA,MAEVC,GAAWC,EAAAA,EAAAA,cACfC,MAAAA,SANyBA,OAAAA,IAAiCC,EAAAA,EAAAA,iBAAgBC,KAAK,wBAAyBC,GAOhGC,CAAqBC,GAC3BT,EAAQU,KAAK,2BAEf,CAACV,IAGH,OACE,SAAC,IAAD,CAAMH,SAAUA,EAAhB,UACE,UAAC,aAAD,kBACE,qDACA,SAAC,EAAAc,KAAD,CAAMT,SAAUA,EAAUU,WAAW,SAArC,SACG,IAA0B,IAAzB,SAAEC,EAAF,OAAYC,GAAa,EACzB,OACE,iCACE,SAAC,EAAAC,MAAD,CACEC,MAAM,eACNC,UAAQ,EACRC,UAAWJ,EAAOK,KAClBC,MAAON,EAAOK,KAAO,gCAA6BE,EAJpD,UAME,SAAC,EAAAC,MAAD,eAAOC,GAAG,sBAAyBV,EAAS,OAAQ,CAAEI,UAAU,QAPpE,OASE,SAAC,EAAAO,OAAD,CAAQC,KAAK,SAAb","sources":["webpack://grafana/./public/app/features/serviceaccounts/ServiceAccountCreatePage.tsx"],"sourcesContent":["import React, { useCallback } from 'react';\nimport { connect } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\n\nimport { NavModel } from '@grafana/data';\nimport { getBackendSrv } from '@grafana/runtime';\nimport { Form, Button, Input, Field } from '@grafana/ui';\nimport Page from 'app/core/components/Page/Page';\n\nimport { getNavModel } from '../../core/selectors/navModel';\nimport { StoreState } from '../../types';\n\ninterface ServiceAccountCreatePageProps {\n  navModel: NavModel;\n}\ninterface ServiceAccountDTO {\n  name: string;\n}\n\nconst createServiceAccount = async (sa: ServiceAccountDTO) => getBackendSrv().post('/api/serviceaccounts/', sa);\n\nconst ServiceAccountCreatePage: React.FC<ServiceAccountCreatePageProps> = ({ navModel }) => {\n  const history = useHistory();\n\n  const onSubmit = useCallback(\n    async (data: ServiceAccountDTO) => {\n      await createServiceAccount(data);\n      history.push('/org/serviceaccounts/');\n    },\n    [history]\n  );\n\n  return (\n    <Page navModel={navModel}>\n      <Page.Contents>\n        <h1>Create service account</h1>\n        <Form onSubmit={onSubmit} validateOn=\"onBlur\">\n          {({ register, errors }) => {\n            return (\n              <>\n                <Field\n                  label=\"Display name\"\n                  required\n                  invalid={!!errors.name}\n                  error={errors.name ? 'Display name is required' : undefined}\n                >\n                  <Input id=\"display-name-input\" {...register('name', { required: true })} />\n                </Field>\n                <Button type=\"submit\">Create</Button>\n              </>\n            );\n          }}\n        </Form>\n      </Page.Contents>\n    </Page>\n  );\n};\n\nconst mapStateToProps = (state: StoreState) => ({\n  navModel: getNavModel(state.navIndex, 'serviceaccounts'),\n});\n\nexport default connect(mapStateToProps)(ServiceAccountCreatePage);\n"],"names":["connect","state","navModel","getNavModel","navIndex","history","useHistory","onSubmit","useCallback","async","getBackendSrv","post","sa","createServiceAccount","data","push","Form","validateOn","register","errors","Field","label","required","invalid","name","error","undefined","Input","id","Button","type"],"sourceRoot":""}