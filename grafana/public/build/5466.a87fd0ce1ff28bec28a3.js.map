{"version":3,"file":"5466.a87fd0ce1ff28bec28a3.js","mappings":"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","sources":["webpack://grafana/./public/app/core/components/NodeGraphSettings.tsx","webpack://grafana/./public/app/core/components/TraceToLogs/KeyValueInput.tsx","webpack://grafana/./public/app/core/components/TraceToLogs/TraceToLogsSettings.tsx","webpack://grafana/./public/app/plugins/datasource/jaeger/util.ts","webpack://grafana/./public/app/plugins/datasource/jaeger/components/AdvancedOptions.tsx","webpack://grafana/./public/app/plugins/datasource/jaeger/components/SearchForm.tsx","webpack://grafana/./public/app/plugins/datasource/jaeger/graphTransform.ts","webpack://grafana/./public/app/plugins/datasource/jaeger/datasource.ts","webpack://grafana/./public/app/plugins/datasource/jaeger/module.ts","webpack://grafana/./public/app/plugins/datasource/jaeger/components/ConfigEditor.tsx","webpack://grafana/./public/app/plugins/datasource/jaeger/components/QueryEditor.tsx","webpack://grafana/./.yarn/cache/logfmt-npm-1.3.2-37fabee436-639d327c1e.zip/node_modules/logfmt/lib/body_parser.js","webpack://grafana/./.yarn/cache/logfmt-npm-1.3.2-37fabee436-639d327c1e.zip/node_modules/logfmt/lib/body_parser_stream.js","webpack://grafana/./.yarn/cache/logfmt-npm-1.3.2-37fabee436-639d327c1e.zip/node_modules/logfmt/lib/logfmt_parser.js","webpack://grafana/./.yarn/cache/logfmt-npm-1.3.2-37fabee436-639d327c1e.zip/node_modules/logfmt/lib/logger.js","webpack://grafana/./.yarn/cache/logfmt-npm-1.3.2-37fabee436-639d327c1e.zip/node_modules/logfmt/lib/request_logger.js","webpack://grafana/./.yarn/cache/logfmt-npm-1.3.2-37fabee436-639d327c1e.zip/node_modules/logfmt/lib/streaming.js","webpack://grafana/./.yarn/cache/logfmt-npm-1.3.2-37fabee436-639d327c1e.zip/node_modules/logfmt/lib/stringify.js","webpack://grafana/./.yarn/cache/logfmt-npm-1.3.2-37fabee436-639d327c1e.zip/node_modules/logfmt/logfmt.js","webpack://grafana/./.yarn/cache/split-npm-0.2.10-a950dc8c82-9eb1195608.zip/node_modules/split/index.js","webpack://grafana/./.yarn/cache/through-npm-2.3.8-df5f72a16e-a38c3e0598.zip/node_modules/through/index.js"],"sourcesContent":["import { css } from '@emotion/css';\nimport React from 'react';\n\nimport {\n  DataSourceJsonData,\n  DataSourcePluginOptionsEditorProps,\n  GrafanaTheme,\n  updateDatasourcePluginJsonDataOption,\n} from '@grafana/data';\nimport { InlineField, InlineFieldRow, InlineSwitch, useStyles } from '@grafana/ui';\n\nexport interface NodeGraphOptions {\n  enabled?: boolean;\n}\n\nexport interface NodeGraphData extends DataSourceJsonData {\n  nodeGraph?: NodeGraphOptions;\n}\n\ninterface Props extends DataSourcePluginOptionsEditorProps<NodeGraphData> {}\n\nexport function NodeGraphSettings({ options, onOptionsChange }: Props) {\n  const styles = useStyles(getStyles);\n\n  return (\n    <div className={styles.container}>\n      <h3 className=\"page-heading\">Node Graph</h3>\n      <InlineFieldRow className={styles.row}>\n        <InlineField\n          tooltip=\"Enables the Node Graph visualization in the trace viewer.\"\n          label=\"Enable Node Graph\"\n          labelWidth={26}\n        >\n          <InlineSwitch\n            id=\"enableNodeGraph\"\n            value={options.jsonData.nodeGraph?.enabled}\n            onChange={(event: React.SyntheticEvent<HTMLInputElement>) =>\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'nodeGraph', {\n                ...options.jsonData.nodeGraph,\n                enabled: event.currentTarget.checked,\n              })\n            }\n          />\n        </InlineField>\n      </InlineFieldRow>\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme) => ({\n  container: css`\n    label: container;\n    width: 100%;\n  `,\n  row: css`\n    label: row;\n    align-items: baseline;\n  `,\n});\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme, KeyValue } from '@grafana/data';\nimport { SegmentInput, useStyles, InlineLabel, Icon } from '@grafana/ui';\n\nconst EQ_WIDTH = 3; // = 24px in inline label\n\ninterface Props {\n  values: Array<KeyValue<string>>;\n  onChange: (values: Array<KeyValue<string>>) => void;\n  id?: string;\n  keyPlaceholder?: string;\n  valuePlaceholder?: string;\n}\n\nconst KeyValueInput = ({\n  values,\n  onChange,\n  id,\n  keyPlaceholder = 'Key',\n  valuePlaceholder = 'Value (optional)',\n}: Props) => {\n  const styles = useStyles(getStyles);\n\n  return (\n    <div className={styles.wrapper}>\n      {values.length ? (\n        values.map((value, idx) => (\n          <div className={styles.pair} key={idx}>\n            <SegmentInput\n              id={`${id}-key-${idx}`}\n              placeholder={keyPlaceholder}\n              value={value.key}\n              onChange={(e) => {\n                onChange(\n                  values.map((v, i) => {\n                    if (i === idx) {\n                      v.key = String(e);\n                    }\n                    return v;\n                  })\n                );\n              }}\n            />\n            <InlineLabel aria-label=\"equals\" className={styles.operator} width={EQ_WIDTH}>\n              =\n            </InlineLabel>\n            <SegmentInput\n              id={`${id}-value-${idx}`}\n              placeholder={valuePlaceholder}\n              value={value.value}\n              onChange={(e) => {\n                onChange(\n                  values.map((v, i) => {\n                    if (i === idx) {\n                      v.value = String(e);\n                    }\n                    return v;\n                  })\n                );\n              }}\n            />\n            <button\n              onClick={() => onChange([...values.slice(0, idx), ...values.slice(idx + 1)])}\n              className=\"gf-form-label query-part\"\n              aria-label=\"Remove tag\"\n            >\n              <Icon name=\"times\" />\n            </button>\n            {idx === values.length - 1 ? (\n              <button\n                onClick={() => onChange([...values, { key: '', value: '' }])}\n                className=\"gf-form-label query-part\"\n                aria-label=\"Add tag\"\n              >\n                <Icon name=\"plus\" />\n              </button>\n            ) : null}\n          </div>\n        ))\n      ) : (\n        <button\n          onClick={() => onChange([...values, { key: '', value: '' }])}\n          className=\"gf-form-label query-part\"\n          aria-label=\"Add tag\"\n        >\n          <Icon name=\"plus\" />\n        </button>\n      )}\n    </div>\n  );\n};\n\nexport default KeyValueInput;\n\nconst getStyles = (theme: GrafanaTheme) => ({\n  wrapper: css`\n    display: flex;\n    flex-direction: column;\n    gap: ${theme.spacing.xs} 0;\n  `,\n  pair: css`\n    display: flex;\n    justify-content: start;\n    align-items: center;\n  `,\n  operator: css`\n    color: ${theme.palette.orange};\n  `,\n});\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport {\n  DataSourceJsonData,\n  DataSourceInstanceSettings,\n  DataSourcePluginOptionsEditorProps,\n  GrafanaTheme,\n  KeyValue,\n  updateDatasourcePluginJsonDataOption,\n} from '@grafana/data';\nimport { DataSourcePicker } from '@grafana/runtime';\nimport { InlineField, InlineFieldRow, Input, TagsInput, useStyles, InlineSwitch } from '@grafana/ui';\n\nimport KeyValueInput from './KeyValueInput';\n\nexport interface TraceToLogsOptions {\n  datasourceUid?: string;\n  tags?: string[];\n  mappedTags?: Array<KeyValue<string>>;\n  mapTagNamesEnabled?: boolean;\n  spanStartTimeShift?: string;\n  spanEndTimeShift?: string;\n  filterByTraceID?: boolean;\n  filterBySpanID?: boolean;\n  lokiSearch?: boolean; // legacy\n}\n\nexport interface TraceToLogsData extends DataSourceJsonData {\n  tracesToLogs?: TraceToLogsOptions;\n}\n\ninterface Props extends DataSourcePluginOptionsEditorProps<TraceToLogsData> {}\n\nexport function TraceToLogsSettings({ options, onOptionsChange }: Props) {\n  const styles = useStyles(getStyles);\n\n  return (\n    <div className={css({ width: '100%' })}>\n      <h3 className=\"page-heading\">Trace to logs</h3>\n\n      <div className={styles.infoText}>\n        Trace to logs lets you navigate from a trace span to the selected data source&apos;s log.\n      </div>\n\n      <InlineFieldRow>\n        <InlineField tooltip=\"The data source the trace is going to navigate to\" label=\"Data source\" labelWidth={26}>\n          <DataSourcePicker\n            inputId=\"trace-to-logs-data-source-picker\"\n            logs\n            current={options.jsonData.tracesToLogs?.datasourceUid}\n            noDefault={true}\n            width={40}\n            onChange={(ds: DataSourceInstanceSettings) =>\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToLogs', {\n                ...options.jsonData.tracesToLogs,\n                datasourceUid: ds.uid,\n                tags: options.jsonData.tracesToLogs?.tags,\n              })\n            }\n          />\n        </InlineField>\n      </InlineFieldRow>\n\n      {options.jsonData.tracesToLogs?.mapTagNamesEnabled ? (\n        <InlineFieldRow>\n          <InlineField\n            tooltip=\"Tags that will be used in the Loki query. Default tags: 'cluster', 'hostname', 'namespace', 'pod'\"\n            label=\"Tags\"\n            labelWidth={26}\n          >\n            <KeyValueInput\n              keyPlaceholder=\"Tag\"\n              values={\n                options.jsonData.tracesToLogs?.mappedTags ??\n                options.jsonData.tracesToLogs?.tags?.map((tag) => ({ key: tag })) ??\n                []\n              }\n              onChange={(v) =>\n                updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToLogs', {\n                  ...options.jsonData.tracesToLogs,\n                  mappedTags: v,\n                })\n              }\n            />\n          </InlineField>\n        </InlineFieldRow>\n      ) : (\n        <InlineFieldRow>\n          <InlineField\n            tooltip=\"Tags that will be used in the Loki query. Default tags: 'cluster', 'hostname', 'namespace', 'pod'\"\n            label=\"Tags\"\n            labelWidth={26}\n          >\n            <TagsInput\n              tags={options.jsonData.tracesToLogs?.tags}\n              width={40}\n              onChange={(tags) =>\n                updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToLogs', {\n                  ...options.jsonData.tracesToLogs,\n                  tags: tags,\n                })\n              }\n            />\n          </InlineField>\n        </InlineFieldRow>\n      )}\n\n      <InlineFieldRow>\n        <InlineField\n          label=\"Map tag names\"\n          labelWidth={26}\n          grow\n          tooltip=\"Map trace tag names to log label names. Ex: k8s.pod.name -> pod\"\n        >\n          <InlineSwitch\n            id=\"mapTagNames\"\n            value={options.jsonData.tracesToLogs?.mapTagNamesEnabled ?? false}\n            onChange={(event: React.SyntheticEvent<HTMLInputElement>) =>\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToLogs', {\n                ...options.jsonData.tracesToLogs,\n                mapTagNamesEnabled: event.currentTarget.checked,\n              })\n            }\n          />\n        </InlineField>\n      </InlineFieldRow>\n\n      <InlineFieldRow>\n        <InlineField\n          label=\"Span start time shift\"\n          labelWidth={26}\n          grow\n          tooltip=\"Shifts the start time of the span. Default 0 (Time units can be used here, for example: 5s, 1m, 3h)\"\n        >\n          <Input\n            type=\"text\"\n            placeholder=\"1h\"\n            width={40}\n            onChange={(v) =>\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToLogs', {\n                ...options.jsonData.tracesToLogs,\n                spanStartTimeShift: v.currentTarget.value,\n              })\n            }\n            value={options.jsonData.tracesToLogs?.spanStartTimeShift || ''}\n          />\n        </InlineField>\n      </InlineFieldRow>\n\n      <InlineFieldRow>\n        <InlineField\n          label=\"Span end time shift\"\n          labelWidth={26}\n          grow\n          tooltip=\"Shifts the end time of the span. Default 0 Time units can be used here, for example: 5s, 1m, 3h\"\n        >\n          <Input\n            type=\"text\"\n            placeholder=\"1h\"\n            width={40}\n            onChange={(v) =>\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToLogs', {\n                ...options.jsonData.tracesToLogs,\n                spanEndTimeShift: v.currentTarget.value,\n              })\n            }\n            value={options.jsonData.tracesToLogs?.spanEndTimeShift || ''}\n          />\n        </InlineField>\n      </InlineFieldRow>\n\n      <InlineFieldRow>\n        <InlineField\n          label=\"Filter by Trace ID\"\n          labelWidth={26}\n          grow\n          tooltip=\"Filters logs by Trace ID. Appends '|=<trace id>' to the query.\"\n        >\n          <InlineSwitch\n            id=\"filterByTraceID\"\n            value={options.jsonData.tracesToLogs?.filterByTraceID}\n            onChange={(event: React.SyntheticEvent<HTMLInputElement>) =>\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToLogs', {\n                ...options.jsonData.tracesToLogs,\n                filterByTraceID: event.currentTarget.checked,\n              })\n            }\n          />\n        </InlineField>\n      </InlineFieldRow>\n\n      <InlineFieldRow>\n        <InlineField\n          label=\"Filter by Span ID\"\n          labelWidth={26}\n          grow\n          tooltip=\"Filters logs by Span ID. Appends '|=<span id>' to the query.\"\n        >\n          <InlineSwitch\n            id=\"filterBySpanID\"\n            value={options.jsonData.tracesToLogs?.filterBySpanID}\n            onChange={(event: React.SyntheticEvent<HTMLInputElement>) =>\n              updateDatasourcePluginJsonDataOption({ onOptionsChange, options }, 'tracesToLogs', {\n                ...options.jsonData.tracesToLogs,\n                filterBySpanID: event.currentTarget.checked,\n              })\n            }\n          />\n        </InlineField>\n      </InlineFieldRow>\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme) => ({\n  infoText: css`\n    padding-bottom: ${theme.spacing.md};\n    color: ${theme.colors.textSemiWeak};\n  `,\n});\n","import logfmt from 'logfmt';\n\nexport function convertTagsLogfmt(tags: string | undefined) {\n  if (!tags) {\n    return '';\n  }\n  const data: any = logfmt.parse(tags);\n  Object.keys(data).forEach((key) => {\n    const value = data[key];\n    if (typeof value !== 'string') {\n      data[key] = String(value);\n    }\n  });\n  return JSON.stringify(data);\n}\n\nexport function transformToLogfmt(tags: string | undefined) {\n  if (!tags) {\n    return '';\n  }\n  try {\n    return logfmt.stringify(JSON.parse(tags));\n  } catch {\n    return tags;\n  }\n}\n","import { css } from '@emotion/css';\nimport React, { useState } from 'react';\nimport { CSSTransition } from 'react-transition-group';\n\nimport { GrafanaTheme } from '@grafana/data';\nimport { Icon, InlineField, InlineFieldRow, InlineLabel, Input, useStyles } from '@grafana/ui';\n\nimport { JaegerQuery } from '../types';\n\nconst durationPlaceholder = 'e.g. 1.2s, 100ms, 500us';\n\ntype Props = {\n  query: JaegerQuery;\n  onChange: (value: JaegerQuery) => void;\n};\n\nexport function AdvancedOptions({ query, onChange }: Props) {\n  const [showAdvancedOptions, setShowAdvancedOptions] = useState(false);\n  const styles = useStyles(getStyles);\n\n  return (\n    <div>\n      <InlineFieldRow>\n        <div className={styles.advancedOptionsContainer} onClick={() => setShowAdvancedOptions(!showAdvancedOptions)}>\n          <InlineLabel as=\"div\">\n            Advanced options{' '}\n            <Icon className={showAdvancedOptions ? styles.angleUp : styles.angleDown} name=\"angle-down\" />\n          </InlineLabel>\n        </div>\n      </InlineFieldRow>\n      <CSSTransition\n        in={showAdvancedOptions}\n        mountOnEnter={true}\n        unmountOnExit={true}\n        timeout={300}\n        classNames={styles}\n      >\n        <div>\n          <InlineFieldRow>\n            <InlineField label=\"Min Duration\" labelWidth={21} grow>\n              <Input\n                id=\"minDuration\"\n                name=\"minDuration\"\n                value={query.minDuration || ''}\n                placeholder={durationPlaceholder}\n                onChange={(v) =>\n                  onChange({\n                    ...query,\n                    minDuration: v.currentTarget.value,\n                  })\n                }\n              />\n            </InlineField>\n          </InlineFieldRow>\n          <InlineFieldRow>\n            <InlineField label=\"Max Duration\" labelWidth={21} grow>\n              <Input\n                id=\"maxDuration\"\n                name=\"maxDuration\"\n                value={query.maxDuration || ''}\n                placeholder={durationPlaceholder}\n                onChange={(v) =>\n                  onChange({\n                    ...query,\n                    maxDuration: v.currentTarget.value,\n                  })\n                }\n              />\n            </InlineField>\n          </InlineFieldRow>\n          <InlineFieldRow>\n            <InlineField label=\"Limit\" labelWidth={21} grow tooltip=\"Maximum numbers of returned results\">\n              <Input\n                id=\"limit\"\n                name=\"limit\"\n                value={query.limit || ''}\n                type=\"number\"\n                onChange={(v) =>\n                  onChange({\n                    ...query,\n                    limit: v.currentTarget.value ? parseInt(v.currentTarget.value, 10) : undefined,\n                  })\n                }\n              />\n            </InlineField>\n          </InlineFieldRow>\n        </div>\n      </CSSTransition>\n    </div>\n  );\n}\n\nfunction getStyles(theme: GrafanaTheme) {\n  return {\n    advancedOptionsContainer: css`\n      margin: 0 ${theme.spacing.xs} ${theme.spacing.xs} 0;\n      width: 100%;\n      cursor: pointer;\n    `,\n    enter: css`\n      label: enter;\n      height: 0;\n      opacity: 0;\n    `,\n    enterActive: css`\n      label: enterActive;\n      height: 108px;\n      opacity: 1;\n      transition: height 300ms ease, opacity 300ms ease;\n    `,\n    exit: css`\n      label: exit;\n      height: 108px;\n      opacity: 1;\n    `,\n    exitActive: css`\n      label: exitActive;\n      height: 0;\n      opacity: 0;\n      transition: height 300ms ease, opacity 300ms ease;\n    `,\n    angleUp: css`\n      transform: rotate(-180deg);\n      transition: transform 300ms;\n    `,\n    angleDown: css`\n      transform: rotate(0deg);\n      transition: transform 300ms;\n    `,\n  };\n}\n","import { css } from '@emotion/css';\nimport React, { useCallback, useEffect, useState } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { AsyncSelect, InlineField, InlineFieldRow, Input } from '@grafana/ui';\nimport { notifyApp } from 'app/core/actions';\nimport { createErrorNotification } from 'app/core/copy/appNotification';\nimport { dispatch } from 'app/store/store';\n\nimport { JaegerDatasource } from '../datasource';\nimport { JaegerQuery } from '../types';\nimport { transformToLogfmt } from '../util';\n\nimport { AdvancedOptions } from './AdvancedOptions';\n\ntype Props = {\n  datasource: JaegerDatasource;\n  query: JaegerQuery;\n  onChange: (value: JaegerQuery) => void;\n};\n\nexport const ALL_OPERATIONS_KEY = 'All';\nconst allOperationsOption: SelectableValue<string> = {\n  label: ALL_OPERATIONS_KEY,\n  value: undefined,\n};\n\nexport function SearchForm({ datasource, query, onChange }: Props) {\n  const [serviceOptions, setServiceOptions] = useState<Array<SelectableValue<string>>>();\n  const [operationOptions, setOperationOptions] = useState<Array<SelectableValue<string>>>();\n  const [isLoading, setIsLoading] = useState<{\n    services: boolean;\n    operations: boolean;\n  }>({\n    services: false,\n    operations: false,\n  });\n\n  const loadServices = useCallback(\n    async (url: string, loaderOfType: string): Promise<Array<SelectableValue<string>>> => {\n      setIsLoading((prevValue) => ({ ...prevValue, [loaderOfType]: true }));\n\n      try {\n        const values: string[] | null = await datasource.metadataRequest(url);\n        if (!values) {\n          return [{ label: `No ${loaderOfType} found`, value: `No ${loaderOfType} found` }];\n        }\n\n        const serviceOptions: SelectableValue[] = values.sort().map((service) => ({\n          label: service,\n          value: service,\n        }));\n        return serviceOptions;\n      } catch (error) {\n        dispatch(notifyApp(createErrorNotification('Error', error)));\n        return [];\n      } finally {\n        setIsLoading((prevValue) => ({ ...prevValue, [loaderOfType]: false }));\n      }\n    },\n    [datasource]\n  );\n\n  useEffect(() => {\n    const getServices = async () => {\n      const services = await loadServices('/api/services', 'services');\n      setServiceOptions(services);\n    };\n    getServices();\n  }, [datasource, loadServices]);\n\n  useEffect(() => {\n    const getOperations = async () => {\n      const operations = await loadServices(\n        `/api/services/${encodeURIComponent(query.service!)}/operations`,\n        'operations'\n      );\n      setOperationOptions([allOperationsOption, ...operations]);\n    };\n    if (query.service) {\n      getOperations();\n    }\n  }, [datasource, query.service, loadServices]);\n\n  return (\n    <div className={css({ maxWidth: '500px' })}>\n      <InlineFieldRow>\n        <InlineField label=\"Service\" labelWidth={14} grow>\n          <AsyncSelect\n            inputId=\"service\"\n            menuShouldPortal\n            cacheOptions={false}\n            loadOptions={() => loadServices('/api/services', 'services')}\n            onOpenMenu={() => loadServices('/api/services', 'services')}\n            isLoading={isLoading.services}\n            value={serviceOptions?.find((v) => v?.value === query.service) || undefined}\n            onChange={(v) =>\n              onChange({\n                ...query,\n                service: v?.value!,\n                operation: query.service !== v?.value ? undefined : query.operation,\n              })\n            }\n            menuPlacement=\"bottom\"\n            isClearable\n            defaultOptions\n            aria-label={'select-service-name'}\n          />\n        </InlineField>\n      </InlineFieldRow>\n      <InlineFieldRow>\n        <InlineField label=\"Operation\" labelWidth={14} grow disabled={!query.service}>\n          <AsyncSelect\n            inputId=\"operation\"\n            menuShouldPortal\n            cacheOptions={false}\n            loadOptions={() =>\n              loadServices(`/api/services/${encodeURIComponent(query.service!)}/operations`, 'operations')\n            }\n            onOpenMenu={() =>\n              loadServices(`/api/services/${encodeURIComponent(query.service!)}/operations`, 'operations')\n            }\n            isLoading={isLoading.operations}\n            value={operationOptions?.find((v) => v.value === query.operation) || null}\n            onChange={(v) =>\n              onChange({\n                ...query,\n                operation: v?.value! || undefined,\n              })\n            }\n            menuPlacement=\"bottom\"\n            isClearable\n            defaultOptions\n            aria-label={'select-operation-name'}\n          />\n        </InlineField>\n      </InlineFieldRow>\n      <InlineFieldRow>\n        <InlineField label=\"Tags\" labelWidth={14} grow>\n          <Input\n            id=\"tags\"\n            value={transformToLogfmt(query.tags)}\n            placeholder=\"http.status_code=200 error=true\"\n            onChange={(v) =>\n              onChange({\n                ...query,\n                tags: v.currentTarget.value,\n              })\n            }\n          />\n        </InlineField>\n      </InlineFieldRow>\n      <AdvancedOptions query={query} onChange={onChange} />\n    </div>\n  );\n}\n\nexport default SearchForm;\n","import { DataFrame, NodeGraphDataFrameFieldNames as Fields } from '@grafana/data';\n\nimport { getNonOverlappingDuration, getStats, makeFrames, makeSpanMap } from '../../../core/utils/tracing';\n\nimport { Span, TraceResponse } from './types';\n\ninterface Node {\n  [Fields.id]: string;\n  [Fields.title]: string;\n  [Fields.subTitle]: string;\n  [Fields.mainStat]: string;\n  [Fields.secondaryStat]: string;\n  [Fields.color]: number;\n}\n\ninterface Edge {\n  [Fields.id]: string;\n  [Fields.target]: string;\n  [Fields.source]: string;\n}\n\nexport function createGraphFrames(data: TraceResponse): DataFrame[] {\n  const { nodes, edges } = convertTraceToGraph(data);\n  const [nodesFrame, edgesFrame] = makeFrames();\n\n  for (const node of nodes) {\n    nodesFrame.add(node);\n  }\n\n  for (const edge of edges) {\n    edgesFrame.add(edge);\n  }\n\n  return [nodesFrame, edgesFrame];\n}\n\nfunction convertTraceToGraph(data: TraceResponse): { nodes: Node[]; edges: Edge[] } {\n  const nodes: Node[] = [];\n  const edges: Edge[] = [];\n\n  const traceDuration = findTraceDuration(data.spans);\n\n  const spanMap = makeSpanMap((index) => {\n    if (index >= data.spans.length) {\n      return undefined;\n    }\n    const span = data.spans[index];\n    return {\n      span,\n      id: span.spanID,\n      parentIds: span.references?.filter((r) => r.refType === 'CHILD_OF').map((r) => r.spanID) || [],\n    };\n  });\n\n  for (const span of data.spans) {\n    const process = data.processes[span.processID];\n\n    const ranges: Array<[number, number]> = spanMap[span.spanID].children.map((c) => {\n      const span = spanMap[c].span;\n      return [span.startTime, span.startTime + span.duration];\n    });\n    const childrenDuration = getNonOverlappingDuration(ranges);\n    const selfDuration = span.duration - childrenDuration;\n    const stats = getStats(span.duration / 1000, traceDuration / 1000, selfDuration / 1000);\n\n    nodes.push({\n      [Fields.id]: span.spanID,\n      [Fields.title]: process?.serviceName ?? '',\n      [Fields.subTitle]: span.operationName,\n      [Fields.mainStat]: stats.main,\n      [Fields.secondaryStat]: stats.secondary,\n      [Fields.color]: selfDuration / traceDuration,\n    });\n\n    const parentSpanID = span.references?.find((r) => r.refType === 'CHILD_OF')?.spanID;\n    // Sometimes some span can be missing. Don't add edges for those.\n    if (parentSpanID && spanMap[parentSpanID].span) {\n      edges.push({\n        [Fields.id]: parentSpanID + '--' + span.spanID,\n        [Fields.target]: span.spanID,\n        [Fields.source]: parentSpanID,\n      });\n    }\n  }\n\n  return { nodes, edges };\n}\n\n/**\n * Get the duration of the whole trace as it isn't a part of the response data.\n * Note: Seems like this should be the same as just longest span, but this is probably safer.\n */\nfunction findTraceDuration(spans: Span[]): number {\n  let traceEndTime = 0;\n  let traceStartTime = Infinity;\n\n  for (const span of spans) {\n    if (span.startTime < traceStartTime) {\n      traceStartTime = span.startTime;\n    }\n\n    if (span.startTime + span.duration > traceEndTime) {\n      traceEndTime = span.startTime + span.duration;\n    }\n  }\n\n  return traceEndTime - traceStartTime;\n}\n","import { identity, omit, pick, pickBy } from 'lodash';\nimport { lastValueFrom, Observable, of } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\n\nimport {\n  DataQueryRequest,\n  DataQueryResponse,\n  DataSourceApi,\n  DataSourceInstanceSettings,\n  DataSourceJsonData,\n  dateMath,\n  DateTime,\n  FieldType,\n  MutableDataFrame,\n} from '@grafana/data';\nimport { BackendSrvRequest, getBackendSrv, getTemplateSrv } from '@grafana/runtime';\nimport { NodeGraphOptions } from 'app/core/components/NodeGraphSettings';\nimport { serializeParams } from 'app/core/utils/fetch';\nimport { getTimeSrv, TimeSrv } from 'app/features/dashboard/services/TimeSrv';\n\nimport { ALL_OPERATIONS_KEY } from './components/SearchForm';\nimport { createGraphFrames } from './graphTransform';\nimport { createTableFrame, createTraceFrame } from './responseTransform';\nimport { JaegerQuery } from './types';\nimport { convertTagsLogfmt } from './util';\n\nexport interface JaegerJsonData extends DataSourceJsonData {\n  nodeGraph?: NodeGraphOptions;\n}\n\nexport class JaegerDatasource extends DataSourceApi<JaegerQuery, JaegerJsonData> {\n  uploadedJson: string | ArrayBuffer | null = null;\n  nodeGraph?: NodeGraphOptions;\n  constructor(\n    private instanceSettings: DataSourceInstanceSettings<JaegerJsonData>,\n    private readonly timeSrv: TimeSrv = getTimeSrv()\n  ) {\n    super(instanceSettings);\n    this.nodeGraph = instanceSettings.jsonData.nodeGraph;\n  }\n\n  async metadataRequest(url: string, params?: Record<string, any>): Promise<any> {\n    const res = await lastValueFrom(this._request(url, params, { hideFromInspector: true }));\n    return res.data.data;\n  }\n\n  query(options: DataQueryRequest<JaegerQuery>): Observable<DataQueryResponse> {\n    // At this moment we expect only one target. In case we somehow change the UI to be able to show multiple\n    // traces at one we need to change this.\n    const target: JaegerQuery = options.targets[0];\n    if (!target) {\n      return of({ data: [emptyTraceDataFrame] });\n    }\n\n    if (target.queryType !== 'search' && target.query) {\n      return this._request(\n        `/api/traces/${encodeURIComponent(getTemplateSrv().replace(target.query, options.scopedVars))}`\n      ).pipe(\n        map((response) => {\n          const traceData = response?.data?.data?.[0];\n          if (!traceData) {\n            return { data: [emptyTraceDataFrame] };\n          }\n          let data = [createTraceFrame(traceData)];\n          if (this.nodeGraph?.enabled) {\n            data.push(...createGraphFrames(traceData));\n          }\n          return {\n            data,\n          };\n        })\n      );\n    }\n\n    if (target.queryType === 'upload') {\n      if (!this.uploadedJson) {\n        return of({ data: [] });\n      }\n\n      try {\n        const traceData = JSON.parse(this.uploadedJson as string).data[0];\n        let data = [createTraceFrame(traceData)];\n        if (this.nodeGraph?.enabled) {\n          data.push(...createGraphFrames(traceData));\n        }\n        return of({ data });\n      } catch (error) {\n        return of({ error: { message: 'JSON is not valid Jaeger format' }, data: [] });\n      }\n    }\n\n    let jaegerQuery = pick(target, ['operation', 'service', 'tags', 'minDuration', 'maxDuration', 'limit']);\n    // remove empty properties\n    jaegerQuery = pickBy(jaegerQuery, identity);\n    if (jaegerQuery.tags) {\n      jaegerQuery = {\n        ...jaegerQuery,\n        tags: convertTagsLogfmt(getTemplateSrv().replace(jaegerQuery.tags, options.scopedVars)),\n      };\n    }\n\n    if (jaegerQuery.operation === ALL_OPERATIONS_KEY) {\n      jaegerQuery = omit(jaegerQuery, 'operation');\n    }\n\n    // TODO: this api is internal, used in jaeger ui. Officially they have gRPC api that should be used.\n    return this._request(`/api/traces`, {\n      ...jaegerQuery,\n      ...this.getTimeRange(),\n      lookback: 'custom',\n    }).pipe(\n      map((response) => {\n        return {\n          data: [createTableFrame(response.data.data, this.instanceSettings)],\n        };\n      })\n    );\n  }\n\n  async testDatasource(): Promise<any> {\n    return lastValueFrom(\n      this._request('/api/services').pipe(\n        map((res) => {\n          const values: any[] = res?.data?.data || [];\n          const testResult =\n            values.length > 0\n              ? { status: 'success', message: 'Data source connected and services found.' }\n              : {\n                  status: 'error',\n                  message:\n                    'Data source connected, but no services received. Verify that Jaeger is configured properly.',\n                };\n          return testResult;\n        }),\n        catchError((err: any) => {\n          let message = 'Jaeger: ';\n          if (err.statusText) {\n            message += err.statusText;\n          } else {\n            message += 'Cannot connect to Jaeger';\n          }\n\n          if (err.status) {\n            message += `. ${err.status}`;\n          }\n\n          if (err.data && err.data.message) {\n            message += `. ${err.data.message}`;\n          } else if (err.data) {\n            message += `. ${JSON.stringify(err.data)}`;\n          }\n          return of({ status: 'error', message: message });\n        })\n      )\n    );\n  }\n\n  getTimeRange(): { start: number; end: number } {\n    const range = this.timeSrv.timeRange();\n    return {\n      start: getTime(range.from, false),\n      end: getTime(range.to, true),\n    };\n  }\n\n  getQueryDisplayText(query: JaegerQuery) {\n    return query.query || '';\n  }\n\n  private _request(apiUrl: string, data?: any, options?: Partial<BackendSrvRequest>): Observable<Record<string, any>> {\n    const params = data ? serializeParams(data) : '';\n    const url = `${this.instanceSettings.url}${apiUrl}${params.length ? `?${params}` : ''}`;\n    const req = {\n      ...options,\n      url,\n    };\n\n    return getBackendSrv().fetch(req);\n  }\n}\n\nfunction getTime(date: string | DateTime, roundUp: boolean) {\n  if (typeof date === 'string') {\n    date = dateMath.parse(date, roundUp)!;\n  }\n  return date.valueOf() * 1000;\n}\n\nconst emptyTraceDataFrame = new MutableDataFrame({\n  fields: [\n    {\n      name: 'trace',\n      type: FieldType.trace,\n      values: [],\n    },\n  ],\n  meta: {\n    preferredVisualisationType: 'trace',\n    custom: {\n      traceFormat: 'jaeger',\n    },\n  },\n});\n","import { DataSourcePlugin } from '@grafana/data';\n\nimport { ConfigEditor } from './components/ConfigEditor';\nimport { QueryEditor } from './components/QueryEditor';\nimport { JaegerDatasource } from './datasource';\n\nexport const plugin = new DataSourcePlugin(JaegerDatasource).setConfigEditor(ConfigEditor).setQueryEditor(QueryEditor);\n","import React from 'react';\n\nimport { DataSourcePluginOptionsEditorProps } from '@grafana/data';\nimport { DataSourceHttpSettings } from '@grafana/ui';\nimport { NodeGraphSettings } from 'app/core/components/NodeGraphSettings';\nimport { TraceToLogsSettings } from 'app/core/components/TraceToLogs/TraceToLogsSettings';\n\nexport type Props = DataSourcePluginOptionsEditorProps;\n\nexport const ConfigEditor: React.FC<Props> = ({ options, onOptionsChange }) => {\n  return (\n    <>\n      <DataSourceHttpSettings\n        defaultUrl=\"http://localhost:16686\"\n        dataSourceConfig={options}\n        showAccessOptions={false}\n        onChange={onOptionsChange}\n      />\n\n      <div className=\"gf-form-group\">\n        <TraceToLogsSettings options={options} onOptionsChange={onOptionsChange} />\n      </div>\n      <div className=\"gf-form-group\">\n        <NodeGraphSettings options={options} onOptionsChange={onOptionsChange} />\n      </div>\n    </>\n  );\n};\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { QueryEditorProps } from '@grafana/data';\nimport { FileDropzone, InlineField, InlineFieldRow, QueryField, RadioButtonGroup, useTheme2 } from '@grafana/ui';\n\nimport { JaegerDatasource } from '../datasource';\nimport { JaegerQuery, JaegerQueryType } from '../types';\n\nimport { SearchForm } from './SearchForm';\n\ntype Props = QueryEditorProps<JaegerDatasource, JaegerQuery>;\n\nexport function QueryEditor({ datasource, query, onChange, onRunQuery }: Props) {\n  const theme = useTheme2();\n\n  const onChangeQuery = (value: string) => {\n    const nextQuery: JaegerQuery = { ...query, query: value };\n    onChange(nextQuery);\n  };\n\n  const renderEditorBody = () => {\n    switch (query.queryType) {\n      case 'search':\n        return <SearchForm datasource={datasource} query={query} onChange={onChange} />;\n      case 'upload':\n        return (\n          <div className={css({ padding: theme.spacing(2) })}>\n            <FileDropzone\n              options={{ multiple: false }}\n              onLoad={(result) => {\n                datasource.uploadedJson = result;\n                onRunQuery();\n              }}\n            />\n          </div>\n        );\n      default:\n        return (\n          <InlineFieldRow>\n            <InlineField label=\"Trace ID\" labelWidth={14} grow>\n              <QueryField\n                query={query.query}\n                onChange={onChangeQuery}\n                onRunQuery={onRunQuery}\n                onBlur={() => {}}\n                placeholder={'Enter a Trace ID (run with Shift+Enter)'}\n                portalOrigin=\"jaeger\"\n              />\n            </InlineField>\n          </InlineFieldRow>\n        );\n    }\n  };\n\n  return (\n    <>\n      <div className={css({ width: '100%' })}>\n        <InlineFieldRow>\n          <InlineField label=\"Query type\">\n            <RadioButtonGroup<JaegerQueryType>\n              options={[\n                { value: 'search', label: 'Search' },\n                { value: undefined, label: 'TraceID' },\n                { value: 'upload', label: 'JSON file' },\n              ]}\n              value={query.queryType}\n              onChange={(v) =>\n                onChange({\n                  ...query,\n                  queryType: v,\n                })\n              }\n              size=\"md\"\n            />\n          </InlineField>\n        </InlineFieldRow>\n        {renderEditorBody()}\n      </div>\n    </>\n  );\n}\n","\n/*\nModule dependencies.\n*/\n\n/*\nJSON:\n\nParse logplex request bodies, providing the\nparsed object as `req.body`.\n\nOptions: none\n\n@param content_type {String} use when Content-Type matches this string\n@param parser {Function} parsing function takes String body and returns new body\n@return {Function}\n@api public\n*/\n\nexports = module.exports = function(options) {\n  var limit;\n  if (options == null) options = {};\n\n  return function(req, res, next) {\n    if (req._body) return next();\n    var is_mime = req.header('content-type') === options.contentType;\n    if (!is_mime) return next();\n    req._body = true;\n    req.body = req.body || {};\n    var buf;\n    buf = \"\";\n    req.setEncoding(\"utf8\");\n    req.on(\"data\", function(chunk) {\n      return buf += chunk;\n    });\n    req.on(\"end\", function() {\n      try {\n        var lines = []\n        buf.trim().split(\"\\n\").forEach(function(line){\n          lines.push(options.parser(line))\n        })\n        req.body = lines;\n      } catch (err) {\n        err.body = buf;\n        err.status = 400;\n        return next(err);\n      }\n      return next();\n    });\n  };\n};\n","var split = require('split');\nvar through = require('through');\nvar Readable = require('stream').Readable;\nvar PassThrough = require('stream').PassThrough;\nvar logfmt   = require('../logfmt');\n\nexports = module.exports = function(options){\n  if(options == null) options = {};\n  var mime = options.contentType || \"application/logplex-1\";\n\n  return function(req, res, next) {\n\n    //honor already parsed bodies\n    if (req._body) return next();\n\n    //mime-type check\n    var is_mime = req.header('content-type') === mime;\n    if (!is_mime) return next();\n    req._body = true;\n    req.body = new PassThrough({objectMode: true});\n    req.pipe(logfmt.streamParser()).pipe(req.body);\n\n    return next();\n  }\n}\n\n","exports.debug = false;\n\nexports.parse = function(line) {\n  var key = '';\n  var value = '';\n  var is_number = true;\n  var in_key    = false;\n  var in_value  = false;\n  var in_quote  = false;\n  var had_quote = false;\n  var object    = {};\n  var debug     = exports.debug;\n\n  if(line[line.length - 1] == '\\n'){\n    line = line.slice(0,line.length - 1)\n  }\n\n  for(var i=0; i <= line.length; i++){\n\n    if((line[i] == ' ' && !in_quote) || i == line.length){\n      if(in_key && key.length > 0){\n        object[key] = true;\n      }else if(in_value){\n        if(value == 'true') value = true;\n        else if(value == 'false') value = false;\n        else if(value === '' && !had_quote) value = null;\n        object[key] = value;\n        value = '';\n      }\n\n      if(i == line.length) break;\n      else {\n        in_key   = false;\n        in_value = false;\n        in_quote = false;\n        had_quote = false;\n      }\n    }\n\n    if(line[i] == '=' && !in_quote){\n      if(debug) console.log('split')\n      //split\n      in_key = false;\n      in_value = true;\n    }\n    else if(line[i] == '\\\\'){\n      i ++ ;\n      value += line[i];\n      if(debug) console.log('escape: ' + line[i])\n    }\n    else if(line[i] == '\"'){\n      had_quote = true;\n      in_quote = !in_quote;\n      if(debug) console.log('in quote: ' + in_quote)\n    }\n    else if(line[i] != ' ' && !in_value && !in_key){\n      if(debug) console.log('start key with: ' + line[i])\n      in_key = true;\n      key = line[i];\n    }\n    else if(in_key){\n      if(debug) console.log('add to key: ' + line[i])\n      key += line[i]\n    }\n    else if(in_value){\n      if(debug) console.log('add to value: ' + line[i])\n      value += line[i];\n    }\n  }\n\n  return object;\n}\n","exports.log = function(data, stream) {\n  this.stream = this.stream || process.stdout;\n  if(stream == undefined) stream = this.stream;\n\n  var logData = Object.assign({}, this.defaultData, data);\n\n  if(this.timers){\n    for(var key in this.timers){\n      var now = (new Date()).getTime()\n      logData[key] = (now - this.timers[key]).toString() + 'ms' ;\n    }\n  }\n\n  stream.write(this.stringify(logData) + \"\\n\");\n}\n\nexports.time = function(label) {\n  var logfmt = require('../logfmt');\n  var startTime = (new Date()).getTime();\n  var label  = label || 'elapsed';\n  var timer  = new logfmt();\n  timer.stream = this.stream;\n  timer.defaultData = this.defaultData;\n  timer.timers = Object.assign({}, this.timers)\n  timer.timers[label] = startTime;\n  return timer;\n}\n\nexports.namespace = function(object) {\n  var logfmt = require('../logfmt');\n  var namespaced = new logfmt()\n  var namespace  = Object.assign({}, this.defaultData, object);\n  namespaced.stream = this.stream;\n  namespaced.defaultData = namespace\n  namespaced.timers = this.timers;\n  return namespaced;\n}\n\nexports.error = function(err, id) {\n  this.maxErrorLines = this.maxErrorLines || 10;\n  if (id === undefined) {\n    id = Math.random().toString().slice(2, 12);\n  }\n  var errorLogger = this.namespace({\n    error: true,\n    id:id,\n    now: (new Date()).toISOString()\n  })\n  errorLogger.log({ message:err.message });\n  if (err.stack) {\n    var stack = err.stack.split('\\n');\n    for (var line in stack) {\n      if (line >= this.maxErrorLines) break;\n      errorLogger.log({ line:line, trace:stack[line] });\n    }\n  }\n}\n","var commonFormatter = function(req, res){\n  if((typeof req.path) == 'function'){\n    //in restify path is a function\n    var path = req.path();\n  }\n  else{\n    //in express it is an attribute\n    var path = req.originalUrl || req.path || req.url;\n  }\n\n  var httpHeader = req.header && req.header('x-forwarded-for')\n  var requestID  = req.header && req.header('x-request-id')\n\n  var ip = req.ip || httpHeader\n                  || req.connection.remoteAddress;\n\n  var requestData =  {\n    ip: ip,\n    time: (new Date()).toISOString(),\n    method: req.method,\n    path: path,\n    \"status\": res.statusCode,\n  }\n\n  if (requestID) {\n    requestData.request_id = requestID;\n  }\n\n  if(res.get){\n    requestData.content_length = res.get('content-length');\n    requestData.content_type = res.get('content-type');\n  }\n  return requestData;\n}\n\nvar immediateLogger = function(logger, options, formatter){\n  return function(req, res, next){\n    var data = formatter(req, res);\n    logger.log(data);\n    next();\n  }\n}\n\nvar timingLogger = function(logger, options, formatter){\n  return function(req, res, next){\n    var elapsed = options.elapsed || 'elapsed';\n    var timer   = logger.time(elapsed);\n    var end = res.end;\n    res.end = function(chunk, encoding) {\n      var data = formatter(req, res);\n      res.end = end;\n      res.end(chunk, encoding);\n      timer.log(data);\n    };\n    next();\n  }\n}\n\nexports.init = function(logger, options, formatter) {\n  this.logger = logger;\n\n  if(!formatter && !options){\n    formatter = commonFormatter;\n    options = {};\n  }\n  else if(!formatter){\n    if(typeof options == 'function'){\n      formatter = options;\n      options = {};\n    }else{\n      formatter = commonFormatter;\n    }\n  }\n  options = options || {};\n\n  if(options.immediate){\n    return immediateLogger(logger, options, formatter);\n  }else{\n    return timingLogger(logger, options, formatter);\n  }\n}\n\nexports.commonFormatter = commonFormatter;\n","var split       = require('split')\nvar through     = require('through');\nvar PassThrough = require('stream').PassThrough;\n\n//returns a stream that splits and parses logfmt into objects\nexports.streamParser = function(options){\n  var options = options || {};\n\n  var streamParser = new PassThrough();\n  var self = this;\n\n  var logfmtStream = through(function(line){\n    if(line !== '') this.queue(self.parse(line))\n  })\n\n  // When a source stream is piped to us, undo that pipe, and save\n  // off the source stream piped into our internally managed streams.\n  streamParser.on('pipe', function(source) {\n    if(source.unpipe) source.unpipe(this);\n    this.transformStream = source.pipe(split()).pipe(logfmtStream);\n  });\n\n  // When we're piped to another stream, instead pipe our internal\n  // transform stream to that destination.\n  streamParser.pipe = function(destination, options) {\n    return this.transformStream.pipe(destination, options);\n  };\n\n  return streamParser;\n}\n\n// returns a stream that stringifies objects\nexports.streamStringify = function(options){\n  var self = this;\n  var options = options || {};\n  if(options.hasOwnProperty('delimiter')){\n    var delim = options.delimiter;\n  }else{\n    var delim = \"\\n\";\n  }\n\n  return through(function(data){\n    this.queue(self.stringify(data) + delim)\n  }, function(){\n    this.queue(null)\n  })\n}\n","exports.stringify = function(data){\n  var line = '';\n\n  for(var key in data) {\n    var value = data[key];\n    var is_null = false;\n    if(value == null) {\n      is_null = true;\n      value = '';\n    }\n    else value = value.toString();\n\n    var needs_quoting  = value.indexOf(' ') > -1 || value.indexOf('=') > -1;\n    var needs_escaping = value.indexOf('\"') > -1 || value.indexOf(\"\\\\\") > -1;\n\n    if(needs_escaping) value = value.replace(/[\"\\\\]/g, '\\\\$&');\n    if(needs_quoting) value = '\"' + value + '\"';\n    if(value === '' && !is_null) value = '\"\"';\n\n    line += key + '=' + value + ' ';\n  }\n\n  //trim traling space\n  return line.substring(0,line.length-1);\n}\n\n","//constructor\nfunction logfmt() {\n}\nmodule.exports = logfmt;\n\nvar streaming        = require('./lib/streaming');\nvar bodyParser       = require('./lib/body_parser');\nvar bodyParserStream = require('./lib/body_parser_stream');\nvar logfmtParser     = require('./lib/logfmt_parser');\nvar logger           = require('./lib/logger');\nvar requestLogger    = require('./lib/request_logger');\nvar serializer       = require('./lib/stringify');\n\n//Build up logfmt prototype\nObject.assign(logfmt.prototype, logger);\nObject.assign(logfmt.prototype, streaming);\n\nlogfmt.prototype.stringify = serializer.stringify;\nlogfmt.prototype.parse = logfmtParser.parse;\n\n// Synchronous body parser\nlogfmt.prototype.bodyParser = function(options) {\n  options || (options = {});\n  var mime = options.contentType || \"application/logplex-1\";\n  return bodyParser({ contentType: mime, parser: this.parse });\n};\n\n// Stream parser\nlogfmt.prototype.bodyParserStream = function(options) {\n  options || (options = {});\n  var mime = options.contentType || \"application/logplex-1\";\n  return bodyParserStream({ contentType: mime });\n};\n\nlogfmt.prototype.requestLogger = function(options, formatter) {\n  return requestLogger.init(this, options, formatter);\n};\n\nlogfmt.prototype.requestLogger.commonFormatter = requestLogger.commonFormatter;\n\nObject.assign(logfmt, logfmt.prototype);\n","//filter will reemit the data if cb(err,pass) pass is truthy\n\n// reduce is more tricky\n// maybe we want to group the reductions or emit progress updates occasionally\n// the most basic reduce just emits one 'data' event after it has recieved 'end'\n\n\nvar through = require('through')\nvar Decoder = require('string_decoder').StringDecoder\n\nmodule.exports = split\n\n//TODO pass in a function to map across the lines.\n\nfunction split (matcher, mapper) {\n  var decoder = new Decoder()\n  var soFar = ''\n  if('function' === typeof matcher)\n    mapper = matcher, matcher = null\n  if (!matcher)\n    matcher = /\\r?\\n/\n\n  function emit(stream, piece) {\n    if(mapper) {\n      try {\n        piece = mapper(piece)\n      }\n      catch (err) {\n        return stream.emit('error', err)\n      }\n      if('undefined' !== typeof piece)\n        stream.queue(piece)\n    }\n    else\n      stream.queue(piece)\n  }\n\n  function next (stream, buffer) { \n    var pieces = (soFar + buffer).split(matcher)\n    soFar = pieces.pop()\n\n    for (var i = 0; i < pieces.length; i++) {\n      var piece = pieces[i]\n      emit(stream, piece)\n    }\n  }\n\n  return through(function (b) {\n    next(this, decoder.write(b))\n  },\n  function () {\n    if(decoder.end) \n      next(this, decoder.end())\n    if(soFar != null)\n      emit(this, soFar)\n    this.queue(null)\n  })\n}\n\n","var Stream = require('stream')\n\n// through\n//\n// a stream that does nothing but re-emit the input.\n// useful for aggregating a series of changing but not ending streams into one stream)\n\nexports = module.exports = through\nthrough.through = through\n\n//create a readable writable stream.\n\nfunction through (write, end, opts) {\n  write = write || function (data) { this.queue(data) }\n  end = end || function () { this.queue(null) }\n\n  var ended = false, destroyed = false, buffer = [], _ended = false\n  var stream = new Stream()\n  stream.readable = stream.writable = true\n  stream.paused = false\n\n//  stream.autoPause   = !(opts && opts.autoPause   === false)\n  stream.autoDestroy = !(opts && opts.autoDestroy === false)\n\n  stream.write = function (data) {\n    write.call(this, data)\n    return !stream.paused\n  }\n\n  function drain() {\n    while(buffer.length && !stream.paused) {\n      var data = buffer.shift()\n      if(null === data)\n        return stream.emit('end')\n      else\n        stream.emit('data', data)\n    }\n  }\n\n  stream.queue = stream.push = function (data) {\n//    console.error(ended)\n    if(_ended) return stream\n    if(data === null) _ended = true\n    buffer.push(data)\n    drain()\n    return stream\n  }\n\n  //this will be registered as the first 'end' listener\n  //must call destroy next tick, to make sure we're after any\n  //stream piped from here.\n  //this is only a problem if end is not emitted synchronously.\n  //a nicer way to do this is to make sure this is the last listener for 'end'\n\n  stream.on('end', function () {\n    stream.readable = false\n    if(!stream.writable && stream.autoDestroy)\n      process.nextTick(function () {\n        stream.destroy()\n      })\n  })\n\n  function _end () {\n    stream.writable = false\n    end.call(stream)\n    if(!stream.readable && stream.autoDestroy)\n      stream.destroy()\n  }\n\n  stream.end = function (data) {\n    if(ended) return\n    ended = true\n    if(arguments.length) stream.write(data)\n    _end() // will emit or queue\n    return stream\n  }\n\n  stream.destroy = function () {\n    if(destroyed) return\n    destroyed = true\n    ended = true\n    buffer.length = 0\n    stream.writable = stream.readable = false\n    stream.emit('close')\n    return stream\n  }\n\n  stream.pause = function () {\n    if(stream.paused) return\n    stream.paused = true\n    return stream\n  }\n\n  stream.resume = function () {\n    if(stream.paused) {\n      stream.paused = false\n      stream.emit('resume')\n    }\n    drain()\n    //may have become paused again,\n    //as drain emits 'data'.\n    if(!stream.paused)\n      stream.emit('drain')\n    return stream\n  }\n  return stream\n}\n\n"],"names":["NodeGraphSettings","options","onOptionsChange","styles","useStyles","getStyles","className","container","InlineFieldRow","row","InlineField","tooltip","label","labelWidth","InlineSwitch","id","value","jsonData","nodeGraph","enabled","onChange","event","updateDatasourcePluginJsonDataOption","currentTarget","checked","theme","css","values","keyPlaceholder","valuePlaceholder","wrapper","length","map","idx","pair","SegmentInput","placeholder","key","e","v","i","String","InlineLabel","operator","width","onClick","slice","Icon","name","spacing","xs","palette","orange","TraceToLogsSettings","infoText","DataSourcePicker","inputId","logs","current","tracesToLogs","datasourceUid","noDefault","ds","uid","tags","mapTagNamesEnabled","mappedTags","tag","TagsInput","grow","Input","type","spanStartTimeShift","spanEndTimeShift","filterByTraceID","filterBySpanID","md","colors","textSemiWeak","convertTagsLogfmt","data","logfmt","Object","keys","forEach","JSON","stringify","transformToLogfmt","parse","durationPlaceholder","AdvancedOptions","query","showAdvancedOptions","setShowAdvancedOptions","useState","advancedOptionsContainer","as","angleUp","angleDown","CSSTransition","in","mountOnEnter","unmountOnExit","timeout","classNames","minDuration","maxDuration","limit","parseInt","undefined","enter","enterActive","exit","exitActive","allOperationsOption","SearchForm","datasource","serviceOptions","setServiceOptions","operationOptions","setOperationOptions","isLoading","setIsLoading","services","operations","loadServices","useCallback","async","url","loaderOfType","prevValue","metadataRequest","sort","service","error","dispatch","notifyApp","createErrorNotification","useEffect","getServices","encodeURIComponent","getOperations","maxWidth","AsyncSelect","menuShouldPortal","cacheOptions","loadOptions","onOpenMenu","find","operation","menuPlacement","isClearable","defaultOptions","disabled","createGraphFrames","nodes","edges","traceDuration","spans","traceEndTime","traceStartTime","Infinity","span","startTime","duration","findTraceDuration","spanMap","makeSpanMap","index","spanID","parentIds","references","filter","r","refType","process","processes","processID","ranges","children","c","childrenDuration","getNonOverlappingDuration","selfDuration","stats","getStats","push","Fields","serviceName","operationName","main","secondary","parentSpanID","convertTraceToGraph","nodesFrame","edgesFrame","makeFrames","node","add","edge","JaegerDatasource","DataSourceApi","constructor","instanceSettings","timeSrv","getTimeSrv","super","this","params","lastValueFrom","_request","hideFromInspector","target","targets","of","emptyTraceDataFrame","queryType","getTemplateSrv","replace","scopedVars","pipe","response","traceData","createTraceFrame","uploadedJson","message","jaegerQuery","pick","pickBy","identity","omit","getTimeRange","lookback","createTableFrame","res","status","catchError","err","statusText","range","timeRange","start","getTime","from","end","to","getQueryDisplayText","apiUrl","serializeParams","req","getBackendSrv","fetch","date","roundUp","dateMath","valueOf","MutableDataFrame","fields","FieldType","meta","preferredVisualisationType","custom","traceFormat","plugin","DataSourcePlugin","setConfigEditor","DataSourceHttpSettings","defaultUrl","dataSourceConfig","showAccessOptions","setQueryEditor","onRunQuery","useTheme2","onChangeQuery","nextQuery","RadioButtonGroup","size","padding","FileDropzone","multiple","onLoad","result","QueryField","onBlur","portalOrigin","renderEditorBody","module","exports","next","_body","header","contentType","body","buf","setEncoding","on","chunk","lines","trim","split","line","parser","PassThrough","mime","objectMode","streamParser","debug","in_key","in_value","in_quote","had_quote","object","console","log","stream","stdout","logData","assign","defaultData","timers","now","Date","toString","write","time","timer","namespace","namespaced","maxErrorLines","Math","random","errorLogger","toISOString","stack","trace","commonFormatter","path","originalUrl","httpHeader","requestID","requestData","ip","connection","remoteAddress","method","statusCode","request_id","get","content_length","content_type","init","logger","formatter","immediate","immediateLogger","elapsed","encoding","timingLogger","through","self","logfmtStream","queue","source","unpipe","transformStream","destination","streamStringify","hasOwnProperty","delim","delimiter","is_null","needs_quoting","indexOf","substring","streaming","bodyParser","bodyParserStream","logfmtParser","requestLogger","serializer","prototype","Decoder","matcher","mapper","decoder","soFar","emit","piece","buffer","pieces","pop","b","Stream","opts","ended","destroyed","_ended","drain","paused","shift","_end","writable","call","readable","autoDestroy","destroy","nextTick","arguments","pause","resume"],"sourceRoot":""}