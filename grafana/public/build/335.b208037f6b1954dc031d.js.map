{"version":3,"file":"335.b208037f6b1954dc031d.js","mappings":"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","sources":["webpack://grafana/./public/app/plugins/datasource/cloudwatch/metric-math/language.ts"],"sourcesContent":["import type * as monacoType from 'monaco-editor/esm/vs/editor/editor.api';\n\n// Metric Math: https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/using-metric-math.html\nexport const METRIC_MATH_FNS = [\n  'ABS',\n  'ANOMALY_DETECTION_BAND',\n  'AVG',\n  'CEIL',\n  'DATAPOINT_COUNT',\n  'DIFF',\n  'DIFF_TIME',\n  'FILL',\n  'FIRST',\n  'LAST',\n  'FLOOR',\n  'IF',\n  'INSIGHT_RULE_METRIC',\n  'LOG',\n  'LOG10',\n  'MAX',\n  'METRIC_COUNT',\n  'METRICS',\n  'MIN',\n  'MINUTE',\n  'HOUR',\n  'DAY',\n  'DATE',\n  'MONTH',\n  'YEAR',\n  'EPOCH',\n  'PERIOD',\n  'RATE',\n  'REMOVE_EMPTY',\n  'RUNNING_SUM',\n  'SEARCH',\n  'SERVICE_QUOTA',\n  'SLICE',\n  'SORT',\n  'STDDEV',\n  'SUM',\n  'TIME_SERIES',\n];\n\nexport const METRIC_MATH_STATISTIC_KEYWORD_STRINGS = ['Average', 'Maximum', 'Minimum', 'Sum', 'SampleCount']; // second arguments to SEARCH function\n\nexport const METRIC_MATH_KEYWORDS = ['REPEAT', 'LINEAR', 'ASC', 'DSC']; // standalone magic arguments to functions\n\nexport const METRIC_MATH_OPERATORS = [\n  '+',\n  '-',\n  '*',\n  '/',\n  '^',\n  '==',\n  '!=',\n  '<=',\n  '>=',\n  '<',\n  '>',\n  'AND',\n  '&&',\n  'OR',\n  '||',\n];\n\nexport const METRIC_MATH_PERIODS = [10, 60, 300, 900, 3000, 21600, 86400];\n\nexport const language: monacoType.languages.IMonarchLanguage = {\n  id: 'metricMath',\n  ignoreCase: false,\n  brackets: [\n    { open: '[', close: ']', token: 'delimiter.square' },\n    { open: '(', close: ')', token: 'delimiter.parenthesis' },\n    { open: '{', close: '}', token: 'delimiter.curly' },\n  ],\n  tokenizer: {\n    root: [{ include: '@nonNestableStates' }, { include: '@strings' }],\n    nonNestableStates: [\n      { include: '@variables' },\n      { include: '@whitespace' },\n      { include: '@numbers' },\n      { include: '@assignment' },\n      { include: '@keywords' },\n      { include: '@operators' },\n      { include: '@builtInFunctions' },\n      [/[;,.]/, 'delimiter'],\n      [/[(){}\\[\\]]/, '@brackets'], // [], (), {} are all brackets\n    ],\n    keywords: [[METRIC_MATH_KEYWORDS.map(escapeRegExp).join('|'), 'keyword']],\n    operators: [[METRIC_MATH_OPERATORS.map(escapeRegExp).join('|'), 'operator']],\n    builtInFunctions: [[METRIC_MATH_FNS.map(escapeRegExp).join('|'), 'predefined']],\n    variables: [\n      [/\\$[a-zA-Z0-9-_]+/, 'variable'], // $ followed by any letter/number we assume could be grafana template variable\n    ],\n    whitespace: [[/\\s+/, 'white']],\n    assignment: [[/=/, 'tag']],\n    numbers: [\n      [/0[xX][0-9a-fA-F]*/, 'number'],\n      [/[$][+-]*\\d*(\\.\\d*)?/, 'number'],\n      [/((\\d+(\\.\\d*)?)|(\\.\\d+))([eE][\\-+]?\\d+)?/, 'number'],\n    ],\n    // states that start other states (aka nested states):\n    strings: [\n      [/'/, { token: 'string', next: '@string' }],\n      [/\"/, { token: 'type', next: '@string_double' }],\n    ],\n    string: [\n      [/{/, { token: 'delimiter.curly', next: '@nestedCurly' }], // escape out of string and into nestedCurly\n      [/\\(/, { token: 'delimiter.parenthesis', next: '@nestedParens' }], // escape out of string and into nestedCurly\n      [/\"/, { token: 'type', next: '@string_double' }], // jump into double string\n      [/'/, { token: 'string', next: '@pop' }], // stop being a string\n      { include: '@nonNestableStates' },\n      [/[^']/, 'string'], // anything that is not a quote, is marked as string\n    ],\n    string_double: [\n      [/[^\"]/, 'type'], // mark anything not a quote as a \"type\" (different type of string for visual difference)\n      [/\"/, { token: 'type', next: '@pop' }], // mark also as a type and stop being in the double string state\n    ],\n    nestedCurly: [\n      [/}/, { token: 'delimiter.curly', next: '@pop' }], // escape out of string and into braces\n      [/'/, { token: 'string', next: '@string' }], // go to string if see start of string\n      [/\"/, { token: 'type', next: '@string_double' }], // go to string_double if see start of double string\n    ],\n    nestedParens: [\n      [/\\)/, { token: 'delimiter.parenthesis', next: '@pop' }], // escape out of string and into braces\n      [/'/, { token: 'string', next: '@string' }], // go to string if see start of string\n      [/\"/, { token: 'type', next: '@string_double' }], // go to string_double if see start of double string\n    ],\n  },\n};\n\nexport const conf: monacoType.languages.LanguageConfiguration = {\n  brackets: [\n    ['{', '}'],\n    ['[', ']'],\n    ['(', ')'],\n  ],\n  autoClosingPairs: [\n    { open: '{', close: '}' },\n    { open: '[', close: ']' },\n    { open: '(', close: ')' },\n    { open: '\"', close: '\"' },\n    { open: \"'\", close: \"'\" },\n  ],\n  surroundingPairs: [\n    { open: '{', close: '}' },\n    { open: '[', close: ']' },\n    { open: '(', close: ')' },\n    { open: '\"', close: '\"' },\n    { open: \"'\", close: \"'\" },\n  ],\n};\n\nfunction escapeRegExp(string: string) {\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& means the whole matched string\n}\n"],"names":["METRIC_MATH_FNS","METRIC_MATH_STATISTIC_KEYWORD_STRINGS","METRIC_MATH_KEYWORDS","METRIC_MATH_OPERATORS","METRIC_MATH_PERIODS","language","id","ignoreCase","brackets","open","close","token","tokenizer","root","include","nonNestableStates","keywords","map","escapeRegExp","join","operators","builtInFunctions","variables","whitespace","assignment","numbers","strings","next","string","string_double","nestedCurly","nestedParens","conf","autoClosingPairs","surroundingPairs","replace"],"sourceRoot":""}