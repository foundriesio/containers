{"version":3,"file":"OrgDetailsPage.b208037f6b1954dc031d.js","mappings":"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","sources":["webpack://grafana/./public/app/core/components/SharedPreferences/SharedPreferences.tsx","webpack://grafana/./public/app/features/org/OrgProfile.tsx","webpack://grafana/./public/app/features/org/OrgDetailsPage.tsx","webpack://grafana/./public/app/features/org/state/actions.ts"],"sourcesContent":["import { css } from '@emotion/css';\nimport { t, Trans } from '@lingui/macro';\nimport React, { PureComponent } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport {\n  Button,\n  Field,\n  FieldSet,\n  Form,\n  Icon,\n  Label,\n  RadioButtonGroup,\n  Select,\n  stylesFactory,\n  TimeZonePicker,\n  Tooltip,\n  WeekStartPicker,\n} from '@grafana/ui';\nimport { PreferencesService } from 'app/core/services/PreferencesService';\nimport { backendSrv } from 'app/core/services/backend_srv';\nimport { DashboardSearchHit, DashboardSearchItemType } from 'app/features/search/types';\n\nexport interface Props {\n  resourceUri: string;\n  disabled?: boolean;\n}\n\nexport interface State {\n  homeDashboardId: number;\n  theme: string;\n  timezone: string;\n  weekStart: string;\n  dashboards: DashboardSearchHit[];\n}\n\nconst themes: SelectableValue[] = [\n  { value: '', label: t({ id: 'shared-preferences.theme.default-label', message: 'Default' }) },\n  { value: 'dark', label: t({ id: 'shared-preferences.theme.dark-label', message: 'Dark' }) },\n  { value: 'light', label: t({ id: 'shared-preferences.theme.light-label', message: 'Light' }) },\n];\n\nexport class SharedPreferences extends PureComponent<Props, State> {\n  service: PreferencesService;\n\n  constructor(props: Props) {\n    super(props);\n\n    this.service = new PreferencesService(props.resourceUri);\n    this.state = {\n      homeDashboardId: 0,\n      theme: '',\n      timezone: '',\n      weekStart: '',\n      dashboards: [],\n    };\n  }\n\n  async componentDidMount() {\n    const prefs = await this.service.load();\n    const dashboards = await backendSrv.search({ starred: true });\n    const defaultDashboardHit: DashboardSearchHit = {\n      id: 0,\n      title: 'Default',\n      tags: [],\n      type: '' as DashboardSearchItemType,\n      uid: '',\n      uri: '',\n      url: '',\n      folderId: 0,\n      folderTitle: '',\n      folderUid: '',\n      folderUrl: '',\n      isStarred: false,\n      slug: '',\n      items: [],\n    };\n\n    if (prefs.homeDashboardId > 0 && !dashboards.find((d) => d.id === prefs.homeDashboardId)) {\n      const missing = await backendSrv.search({ dashboardIds: [prefs.homeDashboardId] });\n      if (missing && missing.length > 0) {\n        dashboards.push(missing[0]);\n      }\n    }\n\n    this.setState({\n      homeDashboardId: prefs.homeDashboardId,\n      theme: prefs.theme,\n      timezone: prefs.timezone,\n      weekStart: prefs.weekStart,\n      dashboards: [defaultDashboardHit, ...dashboards],\n    });\n  }\n\n  onSubmitForm = async () => {\n    const { homeDashboardId, theme, timezone, weekStart } = this.state;\n    await this.service.update({ homeDashboardId, theme, timezone, weekStart });\n    window.location.reload();\n  };\n\n  onThemeChanged = (value: string) => {\n    this.setState({ theme: value });\n  };\n\n  onTimeZoneChanged = (timezone?: string) => {\n    if (!timezone) {\n      return;\n    }\n    this.setState({ timezone: timezone });\n  };\n\n  onWeekStartChanged = (weekStart: string) => {\n    this.setState({ weekStart: weekStart });\n  };\n\n  onHomeDashboardChanged = (dashboardId: number) => {\n    this.setState({ homeDashboardId: dashboardId });\n  };\n\n  getFullDashName = (dashboard: SelectableValue<DashboardSearchHit>) => {\n    if (typeof dashboard.folderTitle === 'undefined' || dashboard.folderTitle === '') {\n      return dashboard.title;\n    }\n    return dashboard.folderTitle + ' / ' + dashboard.title;\n  };\n\n  render() {\n    const { theme, timezone, weekStart, homeDashboardId, dashboards } = this.state;\n    const { disabled } = this.props;\n    const styles = getStyles();\n\n    const homeDashboardTooltip = (\n      <Tooltip\n        content={\n          <Trans id=\"shared-preferences.fields.home-dashboard-tooltip\">\n            Not finding the dashboard you want? Star it first, then it should appear in this select box.\n          </Trans>\n        }\n      >\n        <Icon name=\"info-circle\" />\n      </Tooltip>\n    );\n\n    return (\n      <Form onSubmit={this.onSubmitForm}>\n        {() => {\n          return (\n            <FieldSet label={<Trans id=\"shared-preferences.title\">Preferences</Trans>} disabled={disabled}>\n              <Field label={t({ id: 'shared-preferences.fields.theme-label', message: 'UI Theme' })}>\n                <RadioButtonGroup\n                  options={themes}\n                  value={themes.find((item) => item.value === theme)?.value}\n                  onChange={this.onThemeChanged}\n                />\n              </Field>\n\n              <Field\n                label={\n                  <Label htmlFor=\"home-dashboard-select\">\n                    <span className={styles.labelText}>\n                      <Trans id=\"shared-preferences.fields.home-dashboard-label\">Home Dashboard</Trans>\n                    </span>\n\n                    {homeDashboardTooltip}\n                  </Label>\n                }\n                data-testid=\"User preferences home dashboard drop down\"\n              >\n                <Select\n                  menuShouldPortal\n                  value={dashboards.find((dashboard) => dashboard.id === homeDashboardId)}\n                  getOptionValue={(i) => i.id}\n                  getOptionLabel={this.getFullDashName}\n                  onChange={(dashboard: SelectableValue<DashboardSearchHit>) =>\n                    this.onHomeDashboardChanged(dashboard.id)\n                  }\n                  options={dashboards}\n                  placeholder={t({\n                    id: 'shared-preferences.fields.home-dashboard-placeholder',\n                    message: 'Choose default dashboard',\n                  })}\n                  inputId=\"home-dashboard-select\"\n                />\n              </Field>\n\n              <Field\n                label={t({ id: 'shared-dashboard.fields.timezone-label', message: 'Timezone' })}\n                data-testid={selectors.components.TimeZonePicker.containerV2}\n              >\n                <TimeZonePicker\n                  includeInternal={true}\n                  value={timezone}\n                  onChange={this.onTimeZoneChanged}\n                  inputId=\"shared-preferences-timezone-picker\"\n                />\n              </Field>\n\n              <Field\n                label={t({ id: 'shared-preferences.fields.week-start-label', message: 'Week start' })}\n                data-testid={selectors.components.WeekStartPicker.containerV2}\n              >\n                <WeekStartPicker\n                  value={weekStart}\n                  onChange={this.onWeekStartChanged}\n                  inputId={'shared-preferences-week-start-picker'}\n                />\n              </Field>\n\n              <div className=\"gf-form-button-row\">\n                <Button variant=\"primary\" data-testid={selectors.components.UserProfile.preferencesSaveButton}>\n                  <Trans id=\"common.save\">Save</Trans>\n                </Button>\n              </div>\n            </FieldSet>\n          );\n        }}\n      </Form>\n    );\n  }\n}\n\nexport default SharedPreferences;\n\nconst getStyles = stylesFactory(() => {\n  return {\n    labelText: css`\n      margin-right: 6px;\n    `,\n  };\n});\n","import React, { FC } from 'react';\n\nimport { Input, Field, FieldSet, Button, Form } from '@grafana/ui';\nimport { contextSrv } from 'app/core/core';\nimport { AccessControlAction } from 'app/types';\n\nexport interface Props {\n  orgName: string;\n  onSubmit: (orgName: string) => void;\n}\n\ninterface FormDTO {\n  orgName: string;\n}\n\nconst OrgProfile: FC<Props> = ({ onSubmit, orgName }) => {\n  const canWriteOrg = contextSrv.hasPermission(AccessControlAction.OrgsWrite);\n\n  return (\n    <Form defaultValues={{ orgName }} onSubmit={({ orgName }: FormDTO) => onSubmit(orgName)}>\n      {({ register }) => (\n        <FieldSet label=\"Organization profile\" disabled={!canWriteOrg}>\n          <Field label=\"Organization name\">\n            <Input id=\"org-name-input\" type=\"text\" {...register('orgName', { required: true })} />\n          </Field>\n\n          <Button type=\"submit\">Update organization name</Button>\n        </FieldSet>\n      )}\n    </Form>\n  );\n};\n\nexport default OrgProfile;\n","import React, { PureComponent } from 'react';\nimport { connect } from 'react-redux';\n\nimport { NavModel } from '@grafana/data';\nimport { VerticalGroup } from '@grafana/ui';\nimport Page from 'app/core/components/Page/Page';\nimport SharedPreferences from 'app/core/components/SharedPreferences/SharedPreferences';\nimport { contextSrv } from 'app/core/core';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { AccessControlAction, Organization, StoreState } from 'app/types';\n\nimport OrgProfile from './OrgProfile';\nimport { loadOrganization, updateOrganization } from './state/actions';\nimport { setOrganizationName } from './state/reducers';\n\nexport interface Props {\n  navModel: NavModel;\n  organization: Organization;\n  loadOrganization: typeof loadOrganization;\n  setOrganizationName: typeof setOrganizationName;\n  updateOrganization: typeof updateOrganization;\n}\n\nexport class OrgDetailsPage extends PureComponent<Props> {\n  async componentDidMount() {\n    await this.props.loadOrganization();\n  }\n\n  onUpdateOrganization = (orgName: string) => {\n    this.props.setOrganizationName(orgName);\n    this.props.updateOrganization();\n  };\n\n  render() {\n    const { navModel, organization } = this.props;\n    const isLoading = Object.keys(organization).length === 0;\n    const canReadOrg = contextSrv.hasPermission(AccessControlAction.OrgsRead);\n    const canReadPreferences = contextSrv.hasPermission(AccessControlAction.OrgsPreferencesRead);\n    const canWritePreferences = contextSrv.hasPermission(AccessControlAction.OrgsPreferencesWrite);\n\n    return (\n      <Page navModel={navModel}>\n        <Page.Contents isLoading={isLoading}>\n          {!isLoading && (\n            <VerticalGroup spacing=\"lg\">\n              {canReadOrg && <OrgProfile onSubmit={this.onUpdateOrganization} orgName={organization.name} />}\n              {canReadPreferences && <SharedPreferences resourceUri=\"org\" disabled={!canWritePreferences} />}\n            </VerticalGroup>\n          )}\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nfunction mapStateToProps(state: StoreState) {\n  return {\n    navModel: getNavModel(state.navIndex, 'org-settings'),\n    organization: state.organization.organization,\n  };\n}\n\nconst mapDispatchToProps = {\n  loadOrganization,\n  setOrganizationName,\n  updateOrganization,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(OrgDetailsPage);\n","import { getBackendSrv } from '@grafana/runtime';\nimport { updateConfigurationSubtitle } from 'app/core/actions';\nimport { ThunkResult } from 'app/types';\n\nimport { organizationLoaded, userOrganizationsLoaded } from './reducers';\n\ntype OrganizationDependencies = { getBackendSrv: typeof getBackendSrv };\n\nexport function loadOrganization(\n  dependencies: OrganizationDependencies = { getBackendSrv: getBackendSrv }\n): ThunkResult<any> {\n  return async (dispatch) => {\n    const organizationResponse = await dependencies.getBackendSrv().get('/api/org');\n    dispatch(organizationLoaded(organizationResponse));\n\n    return organizationResponse;\n  };\n}\n\nexport function updateOrganization(\n  dependencies: OrganizationDependencies = { getBackendSrv: getBackendSrv }\n): ThunkResult<any> {\n  return async (dispatch, getStore) => {\n    const organization = getStore().organization.organization;\n\n    await dependencies.getBackendSrv().put('/api/org', { name: organization.name });\n\n    dispatch(updateConfigurationSubtitle(organization.name));\n    dispatch(loadOrganization(dependencies));\n  };\n}\n\nexport function setUserOrganization(\n  orgId: number,\n  dependencies: OrganizationDependencies = { getBackendSrv: getBackendSrv }\n): ThunkResult<any> {\n  return async (dispatch) => {\n    const organizationResponse = await dependencies.getBackendSrv().post('/api/user/using/' + orgId);\n\n    dispatch(updateConfigurationSubtitle(organizationResponse.name));\n  };\n}\n\nexport function createOrganization(\n  newOrg: { name: string },\n  dependencies: OrganizationDependencies = { getBackendSrv: getBackendSrv }\n): ThunkResult<any> {\n  return async (dispatch) => {\n    const result = await dependencies.getBackendSrv().post('/api/orgs/', newOrg);\n\n    dispatch(setUserOrganization(result.orgId));\n  };\n}\n\nexport function getUserOrganizations(\n  dependencies: OrganizationDependencies = { getBackendSrv: getBackendSrv }\n): ThunkResult<any> {\n  return async (dispatch) => {\n    const result = await dependencies.getBackendSrv().get('/api/user/orgs');\n    dispatch(userOrganizationsLoaded(result));\n\n    return result;\n  };\n}\n"],"names":["themes","value","label","id","SharedPreferences","PureComponent","constructor","props","super","async","homeDashboardId","theme","timezone","weekStart","this","state","service","update","window","location","reload","setState","dashboardId","dashboard","folderTitle","title","PreferencesService","resourceUri","dashboards","prefs","load","backendSrv","starred","find","d","missing","dashboardIds","length","push","tags","type","uid","uri","url","folderId","folderUid","folderUrl","isStarred","slug","items","render","disabled","styles","getStyles","homeDashboardTooltip","Tooltip","content","Icon","name","Form","onSubmit","onSubmitForm","FieldSet","Field","RadioButtonGroup","options","item","onChange","onThemeChanged","Label","htmlFor","className","labelText","Select","menuShouldPortal","getOptionValue","i","getOptionLabel","getFullDashName","onHomeDashboardChanged","placeholder","inputId","selectors","TimeZonePicker","includeInternal","onTimeZoneChanged","WeekStartPicker","onWeekStartChanged","Button","variant","stylesFactory","css","orgName","canWriteOrg","contextSrv","AccessControlAction","defaultValues","register","Input","required","OrgDetailsPage","setOrganizationName","updateOrganization","loadOrganization","navModel","organization","isLoading","Object","keys","canReadOrg","canReadPreferences","canWritePreferences","Page","VerticalGroup","spacing","onUpdateOrganization","mapDispatchToProps","connect","getNavModel","navIndex","dependencies","getBackendSrv","organizationResponse","get","dispatch","organizationLoaded","getStore","put","updateConfigurationSubtitle","setUserOrganization","orgId","post","createOrganization","newOrg","getUserOrganizations","result","userOrganizationsLoaded"],"sourceRoot":""}