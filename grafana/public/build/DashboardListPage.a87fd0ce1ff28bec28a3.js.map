{"version":3,"file":"DashboardListPage.a87fd0ce1ff28bec28a3.js","mappings":"8iCAyBO,MAAMA,GAA+BC,EAAAA,EAAAA,OAAK,IAAmC,UAAlC,SAAEC,EAAF,MAAYC,EAAZ,SAAmBC,GAAe,EAClF,MAAM,QAAEC,EAAF,MAAWC,IAAUC,EAAAA,EAAAA,IAAwE,KACjG,MAAMC,EAAML,EAAMM,OAAOD,IACnBE,EAAMN,EAASO,SACrB,OAAKH,GAAQE,EAAIE,WAAW,eCzBDJ,CAAAA,GACtBK,EAAAA,GAAAA,eAA0BL,GAAKM,MAAMC,IAC1C,MAAMb,GAAWc,EAAAA,EAAAA,GAAcD,GAG/B,OAFAb,EAASe,SAAU,GAAGC,QAAS,EAExB,CAAEH,OAAAA,EAAQI,UAAWjB,MDwBrBkB,CAAeZ,GAAMM,MAAK,IAA2B,IAA1B,OAAEC,EAAF,UAAUI,GAAgB,EAC1D,MAAME,EAAOC,EAAAA,aAAAA,iBAA8BP,EAAOL,KAMlD,OAJIW,IAASjB,EAASO,UACpBY,EAAAA,gBAAAA,KAAqBF,GAGhB,CAAEN,OAAAA,EAAQS,aAAc,OAAF,UAAOtB,EAAP,CAAiBuB,KAAMN,QAV7CO,QAAQC,QAAQ,CAAEH,aAActB,MAYxC,CAACC,EAAMM,OAAOD,MAEjB,OACE,SAACoB,EAAA,EAAD,CAAM1B,SAAQ,UAAEI,MAAAA,OAAF,EAAEA,EAAOkB,oBAAT,QAAyBtB,EAAvC,UACE,SAAC0B,EAAA,WAAD,CAAeC,UAAWxB,EAA1B,UACE,SAACyB,EAAA,EAAD,CAAkBf,OAAQT,MAAAA,OAAF,EAAEA,EAAOS,gBAMzCf,EAAkB+B,YAAc,oBAEhC,MAMA,GAAeC,EAAAA,EAAAA,UAN4EC,IAClF,CACL/B,UAAUgC,EAAAA,EAAAA,GAAYD,EAAME,SAAU,wBAI1C,CAAwCnC","sources":["webpack://grafana/./public/app/features/search/components/DashboardListPage.tsx","webpack://grafana/./public/app/features/search/loaders.ts"],"sourcesContent":["import React, { FC, memo } from 'react';\nimport { connect, MapStateToProps } from 'react-redux';\nimport { useAsync } from 'react-use';\n\nimport { NavModel, locationUtil } from '@grafana/data';\nimport { locationService } from '@grafana/runtime';\nimport Page from 'app/core/components/Page/Page';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { FolderDTO, StoreState } from 'app/types';\n\nimport { GrafanaRouteComponentProps } from '../../../core/navigation/types';\nimport { loadFolderPage } from '../loaders';\n\nimport ManageDashboards from './ManageDashboards';\n\nexport interface DashboardListPageRouteParams {\n  uid?: string;\n  slug?: string;\n}\n\ninterface DashboardListPageConnectedProps {\n  navModel: NavModel;\n}\ninterface Props extends GrafanaRouteComponentProps<DashboardListPageRouteParams>, DashboardListPageConnectedProps {}\n\nexport const DashboardListPage: FC<Props> = memo(({ navModel, match, location }) => {\n  const { loading, value } = useAsync<() => Promise<{ folder?: FolderDTO; pageNavModel: NavModel }>>(() => {\n    const uid = match.params.uid;\n    const url = location.pathname;\n    if (!uid || !url.startsWith('/dashboards')) {\n      return Promise.resolve({ pageNavModel: navModel });\n    }\n\n    return loadFolderPage(uid!).then(({ folder, folderNav }) => {\n      const path = locationUtil.stripBaseFromUrl(folder.url);\n\n      if (path !== location.pathname) {\n        locationService.push(path);\n      }\n\n      return { folder, pageNavModel: { ...navModel, main: folderNav } };\n    });\n  }, [match.params.uid]);\n\n  return (\n    <Page navModel={value?.pageNavModel ?? navModel}>\n      <Page.Contents isLoading={loading}>\n        <ManageDashboards folder={value?.folder} />\n      </Page.Contents>\n    </Page>\n  );\n});\n\nDashboardListPage.displayName = 'DashboardListPage';\n\nconst mapStateToProps: MapStateToProps<DashboardListPageConnectedProps, {}, StoreState> = (state) => {\n  return {\n    navModel: getNavModel(state.navIndex, 'manage-dashboards'),\n  };\n};\n\nexport default connect(mapStateToProps)(DashboardListPage);\n","import { backendSrv } from 'app/core/services/backend_srv';\n\nimport { buildNavModel } from '../folders/state/navModel';\n\nexport const loadFolderPage = (uid: string) => {\n  return backendSrv.getFolderByUid(uid).then((folder) => {\n    const navModel = buildNavModel(folder);\n    navModel.children![0].active = true;\n\n    return { folder, folderNav: navModel };\n  });\n};\n"],"names":["DashboardListPage","memo","navModel","match","location","loading","value","useAsync","uid","params","url","pathname","startsWith","backendSrv","then","folder","buildNavModel","children","active","folderNav","loadFolderPage","path","locationUtil","locationService","pageNavModel","main","Promise","resolve","Page","isLoading","ManageDashboards","displayName","connect","state","getNavModel","navIndex"],"sourceRoot":""}