{"version":3,"file":"AlertAmRoutes.b208037f6b1954dc031d.js","mappings":"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","sources":["webpack://grafana/./public/app/core/hooks/useCleanup.ts","webpack://grafana/./public/app/features/alerting/unified/utils/amroutes.ts","webpack://grafana/./public/app/features/alerting/unified/components/amroutes/formStyles.ts","webpack://grafana/./public/app/features/alerting/unified/components/amroutes/AmRootRouteForm.tsx","webpack://grafana/./public/app/features/alerting/unified/components/amroutes/gridStyles.ts","webpack://grafana/./public/app/features/alerting/unified/components/amroutes/AmRootRouteRead.tsx","webpack://grafana/./public/app/features/alerting/unified/components/amroutes/AmRootRoute.tsx","webpack://grafana/./public/app/features/alerting/unified/components/EmptyArea.tsx","webpack://grafana/./public/app/features/alerting/unified/components/EmptyAreaWithCTA.tsx","webpack://grafana/./public/app/features/alerting/unified/components/amroutes/AmRoutesExpandedForm.tsx","webpack://grafana/./public/app/features/alerting/unified/hooks/useMuteTimingOptions.ts","webpack://grafana/./public/app/features/alerting/unified/components/amroutes/MuteTimingsTable.tsx","webpack://grafana/./public/app/features/alerting/unified/components/amroutes/AmRoutesExpandedRead.tsx","webpack://grafana/./public/app/features/alerting/unified/components/amroutes/AmRoutesTable.tsx","webpack://grafana/./public/app/features/alerting/unified/utils/dynamicTable.ts","webpack://grafana/./public/app/features/alerting/unified/components/amroutes/AmSpecificRouting.tsx","webpack://grafana/./public/app/features/alerting/unified/AmRoutes.tsx","webpack://grafana/./public/app/features/alerting/unified/components/AlertingPageWrapper.tsx","webpack://grafana/./public/app/features/alerting/unified/components/Authorize.tsx","webpack://grafana/./public/app/features/alerting/unified/components/alert-groups/MatcherFilter.tsx","webpack://grafana/./public/app/features/alerting/unified/components/silences/Matchers.tsx","webpack://grafana/./public/app/features/alerting/unified/hooks/useAlertManagerSourceName.ts","webpack://grafana/./public/app/features/alerting/unified/hooks/useURLSearchParams.ts"],"sourcesContent":["import { useEffect, useRef } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { cleanUpAction, StateSelector } from '../actions/cleanUp';\n\nexport function useCleanup<T>(stateSelector: StateSelector<T>) {\n  const dispatch = useDispatch();\n  //bit of a hack to unburden user from having to wrap stateSelcetor in a useCallback. Otherwise cleanup would happen on every render\n  const selectorRef = useRef(stateSelector);\n  selectorRef.current = stateSelector;\n  useEffect(() => {\n    return () => {\n      dispatch(cleanUpAction({ stateSelector: selectorRef.current }));\n    };\n  }, [dispatch]);\n}\n","import { isUndefined, omitBy } from 'lodash';\nimport { Validate } from 'react-hook-form';\n\nimport { SelectableValue } from '@grafana/data';\nimport { MatcherOperator, Route } from 'app/plugins/datasource/alertmanager/types';\n\nimport { FormAmRoute } from '../types/amroutes';\nimport { MatcherFieldValue } from '../types/silence-form';\n\nimport { matcherToMatcherField, parseMatcher } from './alertmanager';\nimport { GRAFANA_RULES_SOURCE_NAME } from './datasource';\nimport { parseInterval, timeOptions } from './time';\n\nconst defaultValueAndType: [string, string] = ['', timeOptions[0].value];\n\nconst matchersToArrayFieldMatchers = (\n  matchers: Record<string, string> | undefined,\n  isRegex: boolean\n): MatcherFieldValue[] =>\n  Object.entries(matchers ?? {}).reduce<MatcherFieldValue[]>(\n    (acc, [name, value]) => [\n      ...acc,\n      {\n        name,\n        value,\n        operator: isRegex ? MatcherOperator.regex : MatcherOperator.equal,\n      },\n    ],\n    [] as MatcherFieldValue[]\n  );\n\nconst intervalToValueAndType = (strValue: string | undefined): [string, string] => {\n  if (!strValue) {\n    return defaultValueAndType;\n  }\n\n  const [value, valueType] = strValue ? parseInterval(strValue) : [undefined, undefined];\n\n  const timeOption = timeOptions.find((opt) => opt.value === valueType);\n\n  if (!value || !timeOption) {\n    return defaultValueAndType;\n  }\n\n  return [String(value), timeOption.value];\n};\n\nconst selectableValueToString = (selectableValue: SelectableValue<string>): string => selectableValue.value!;\n\nconst selectableValuesToStrings = (arr: Array<SelectableValue<string>> | undefined): string[] =>\n  (arr ?? []).map(selectableValueToString);\n\nexport const emptyArrayFieldMatcher: MatcherFieldValue = {\n  name: '',\n  value: '',\n  operator: MatcherOperator.equal,\n};\n\nexport const emptyRoute: FormAmRoute = {\n  id: '',\n  groupBy: [],\n  object_matchers: [],\n  routes: [],\n  continue: false,\n  receiver: '',\n  groupWaitValue: '',\n  groupWaitValueType: timeOptions[0].value,\n  groupIntervalValue: '',\n  groupIntervalValueType: timeOptions[0].value,\n  repeatIntervalValue: '',\n  repeatIntervalValueType: timeOptions[0].value,\n  muteTimeIntervals: [],\n};\n\n//returns route, and a record mapping id to existing route route\nexport const amRouteToFormAmRoute = (route: Route | undefined): [FormAmRoute, Record<string, Route>] => {\n  if (!route || Object.keys(route).length === 0) {\n    return [emptyRoute, {}];\n  }\n\n  const [groupWaitValue, groupWaitValueType] = intervalToValueAndType(route.group_wait);\n  const [groupIntervalValue, groupIntervalValueType] = intervalToValueAndType(route.group_interval);\n  const [repeatIntervalValue, repeatIntervalValueType] = intervalToValueAndType(route.repeat_interval);\n\n  const id = String(Math.random());\n  const id2route = {\n    [id]: route,\n  };\n  const formRoutes: FormAmRoute[] = [];\n  route.routes?.forEach((subRoute) => {\n    const [subFormRoute, subId2Route] = amRouteToFormAmRoute(subRoute);\n    formRoutes.push(subFormRoute);\n    Object.assign(id2route, subId2Route);\n  });\n\n  // Frontend migration to use object_matchers instead of matchers\n  const matchers = route.matchers\n    ? route.matchers?.map((matcher) => matcherToMatcherField(parseMatcher(matcher))) ?? []\n    : route.object_matchers?.map(\n        (matcher) => ({ name: matcher[0], operator: matcher[1], value: matcher[2] } as MatcherFieldValue)\n      ) ?? [];\n\n  return [\n    {\n      id,\n      object_matchers: [\n        ...matchers,\n        ...matchersToArrayFieldMatchers(route.match, false),\n        ...matchersToArrayFieldMatchers(route.match_re, true),\n      ],\n      continue: route.continue ?? false,\n      receiver: route.receiver ?? '',\n      groupBy: route.group_by ?? [],\n      groupWaitValue,\n      groupWaitValueType,\n      groupIntervalValue,\n      groupIntervalValueType,\n      repeatIntervalValue,\n      repeatIntervalValueType,\n      routes: formRoutes,\n      muteTimeIntervals: route.mute_time_intervals ?? [],\n    },\n    id2route,\n  ];\n};\n\nexport const formAmRouteToAmRoute = (\n  alertManagerSourceName: string | undefined,\n  formAmRoute: FormAmRoute,\n  id2ExistingRoute: Record<string, Route>\n): Route => {\n  const existing: Route | undefined = id2ExistingRoute[formAmRoute.id];\n  const amRoute: Route = {\n    ...(existing ?? {}),\n    continue: formAmRoute.continue,\n    group_by: formAmRoute.groupBy,\n    object_matchers: formAmRoute.object_matchers.length\n      ? formAmRoute.object_matchers.map((matcher) => [matcher.name, matcher.operator, matcher.value])\n      : undefined,\n    match: undefined,\n    match_re: undefined,\n    group_wait: formAmRoute.groupWaitValue\n      ? `${formAmRoute.groupWaitValue}${formAmRoute.groupWaitValueType}`\n      : undefined,\n    group_interval: formAmRoute.groupIntervalValue\n      ? `${formAmRoute.groupIntervalValue}${formAmRoute.groupIntervalValueType}`\n      : undefined,\n    repeat_interval: formAmRoute.repeatIntervalValue\n      ? `${formAmRoute.repeatIntervalValue}${formAmRoute.repeatIntervalValueType}`\n      : undefined,\n    routes: formAmRoute.routes.map((subRoute) =>\n      formAmRouteToAmRoute(alertManagerSourceName, subRoute, id2ExistingRoute)\n    ),\n    mute_time_intervals: formAmRoute.muteTimeIntervals,\n  };\n\n  if (alertManagerSourceName !== GRAFANA_RULES_SOURCE_NAME) {\n    amRoute.matchers = formAmRoute.object_matchers.map(({ name, operator, value }) => `${name}${operator}${value}`);\n    amRoute.object_matchers = undefined;\n  } else {\n    amRoute.matchers = undefined;\n  }\n\n  if (formAmRoute.receiver) {\n    amRoute.receiver = formAmRoute.receiver;\n  }\n\n  return omitBy(amRoute, isUndefined);\n};\n\nexport const stringToSelectableValue = (str: string): SelectableValue<string> => ({\n  label: str,\n  value: str,\n});\n\nexport const stringsToSelectableValues = (arr: string[] | undefined): Array<SelectableValue<string>> =>\n  (arr ?? []).map(stringToSelectableValue);\n\nexport const mapSelectValueToString = (selectableValue: SelectableValue<string>): string => {\n  if (!selectableValue) {\n    return '';\n  }\n\n  return selectableValueToString(selectableValue) ?? '';\n};\n\nexport const mapMultiSelectValueToStrings = (\n  selectableValues: Array<SelectableValue<string>> | undefined\n): string[] => {\n  if (!selectableValues) {\n    return [];\n  }\n\n  return selectableValuesToStrings(selectableValues);\n};\n\nexport const optionalPositiveInteger: Validate<string> = (value) => {\n  if (!value) {\n    return undefined;\n  }\n\n  return !/^\\d+$/.test(value) ? 'Must be a positive integer.' : undefined;\n};\n","import { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\n\nexport const getFormStyles = (theme: GrafanaTheme2) => {\n  return {\n    container: css`\n      align-items: center;\n      display: flex;\n      flex-flow: row nowrap;\n\n      & > * + * {\n        margin-left: ${theme.spacing(1)};\n      }\n    `,\n    input: css`\n      flex: 1;\n    `,\n    timingContainer: css`\n      max-width: ${theme.spacing(33)};\n    `,\n    smallInput: css`\n      width: ${theme.spacing(6.5)};\n    `,\n    linkText: css`\n      text-decoration: underline;\n    `,\n    collapse: css`\n      border: none;\n      background: none;\n      color: ${theme.colors.text.primary};\n    `,\n  };\n};\n","import { cx } from '@emotion/css';\nimport React, { FC, useState } from 'react';\n\nimport { Button, Collapse, Field, Form, Input, InputControl, Link, MultiSelect, Select, useStyles2 } from '@grafana/ui';\n\nimport { AmRouteReceiver, FormAmRoute } from '../../types/amroutes';\nimport {\n  mapMultiSelectValueToStrings,\n  mapSelectValueToString,\n  optionalPositiveInteger,\n  stringToSelectableValue,\n  stringsToSelectableValues,\n} from '../../utils/amroutes';\nimport { makeAMLink } from '../../utils/misc';\nimport { timeOptions } from '../../utils/time';\n\nimport { getFormStyles } from './formStyles';\n\nexport interface AmRootRouteFormProps {\n  alertManagerSourceName: string;\n  onCancel: () => void;\n  onSave: (data: FormAmRoute) => void;\n  receivers: AmRouteReceiver[];\n  routes: FormAmRoute;\n}\n\nexport const AmRootRouteForm: FC<AmRootRouteFormProps> = ({\n  alertManagerSourceName,\n  onCancel,\n  onSave,\n  receivers,\n  routes,\n}) => {\n  const styles = useStyles2(getFormStyles);\n  const [isTimingOptionsExpanded, setIsTimingOptionsExpanded] = useState(false);\n  const [groupByOptions, setGroupByOptions] = useState(stringsToSelectableValues(routes.groupBy));\n\n  return (\n    <Form defaultValues={routes} onSubmit={onSave}>\n      {({ control, errors, setValue }) => (\n        <>\n          <Field label=\"Default contact point\" invalid={!!errors.receiver} error={errors.receiver?.message}>\n            <>\n              <div className={styles.container} data-testid=\"am-receiver-select\">\n                <InputControl\n                  render={({ field: { onChange, ref, ...field } }) => (\n                    <Select\n                      aria-label=\"Default contact point\"\n                      {...field}\n                      className={styles.input}\n                      onChange={(value) => onChange(mapSelectValueToString(value))}\n                      options={receivers}\n                      menuShouldPortal\n                    />\n                  )}\n                  control={control}\n                  name=\"receiver\"\n                  rules={{ required: { value: true, message: 'Required.' } }}\n                />\n                <span>or</span>\n                <Link\n                  className={styles.linkText}\n                  href={makeAMLink('/alerting/notifications/receivers/new', alertManagerSourceName)}\n                >\n                  Create a contact point\n                </Link>\n              </div>\n            </>\n          </Field>\n          <Field\n            label=\"Group by\"\n            description=\"Group alerts when you receive a notification based on labels.\"\n            data-testid=\"am-group-select\"\n          >\n            {/* @ts-ignore-check: react-hook-form made me do this */}\n            <InputControl\n              render={({ field: { onChange, ref, ...field } }) => (\n                <MultiSelect\n                  aria-label=\"Group by\"\n                  menuShouldPortal\n                  {...field}\n                  allowCustomValue\n                  className={styles.input}\n                  onCreateOption={(opt: string) => {\n                    setGroupByOptions((opts) => [...opts, stringToSelectableValue(opt)]);\n\n                    // @ts-ignore-check: react-hook-form made me do this\n                    setValue('groupBy', [...field.value, opt]);\n                  }}\n                  onChange={(value) => onChange(mapMultiSelectValueToStrings(value))}\n                  options={groupByOptions}\n                />\n              )}\n              control={control}\n              name=\"groupBy\"\n            />\n          </Field>\n          <Collapse\n            collapsible\n            className={styles.collapse}\n            isOpen={isTimingOptionsExpanded}\n            label=\"Timing options\"\n            onToggle={setIsTimingOptionsExpanded}\n          >\n            <Field\n              label=\"Group wait\"\n              description=\"The waiting time until the initial notification is sent for a new group created by an incoming alert. Default 30 seconds.\"\n              invalid={!!errors.groupWaitValue}\n              error={errors.groupWaitValue?.message}\n              data-testid=\"am-group-wait\"\n            >\n              <>\n                <div className={cx(styles.container, styles.timingContainer)}>\n                  <InputControl\n                    render={({ field, fieldState: { invalid } }) => (\n                      <Input\n                        {...field}\n                        className={styles.smallInput}\n                        invalid={invalid}\n                        placeholder={'Default 30 seconds'}\n                      />\n                    )}\n                    control={control}\n                    name=\"groupWaitValue\"\n                    rules={{\n                      validate: optionalPositiveInteger,\n                    }}\n                  />\n                  <InputControl\n                    render={({ field: { onChange, ref, ...field } }) => (\n                      <Select\n                        menuShouldPortal\n                        {...field}\n                        className={styles.input}\n                        onChange={(value) => onChange(mapSelectValueToString(value))}\n                        options={timeOptions}\n                        aria-label=\"Group wait type\"\n                      />\n                    )}\n                    control={control}\n                    name=\"groupWaitValueType\"\n                  />\n                </div>\n              </>\n            </Field>\n            <Field\n              label=\"Group interval\"\n              description=\"The waiting time to send a batch of new alerts for that group after the first notification was sent. Default 5 minutes.\"\n              invalid={!!errors.groupIntervalValue}\n              error={errors.groupIntervalValue?.message}\n              data-testid=\"am-group-interval\"\n            >\n              <>\n                <div className={cx(styles.container, styles.timingContainer)}>\n                  <InputControl\n                    render={({ field, fieldState: { invalid } }) => (\n                      <Input\n                        {...field}\n                        className={styles.smallInput}\n                        invalid={invalid}\n                        placeholder={'Default 5 minutes'}\n                      />\n                    )}\n                    control={control}\n                    name=\"groupIntervalValue\"\n                    rules={{\n                      validate: optionalPositiveInteger,\n                    }}\n                  />\n                  <InputControl\n                    render={({ field: { onChange, ref, ...field } }) => (\n                      <Select\n                        menuShouldPortal\n                        {...field}\n                        className={styles.input}\n                        onChange={(value) => onChange(mapSelectValueToString(value))}\n                        options={timeOptions}\n                        aria-label=\"Group interval type\"\n                      />\n                    )}\n                    control={control}\n                    name=\"groupIntervalValueType\"\n                  />\n                </div>\n              </>\n            </Field>\n            <Field\n              label=\"Repeat interval\"\n              description=\"The waiting time to resend an alert after they have successfully been sent. Default 4 hours.\"\n              invalid={!!errors.repeatIntervalValue}\n              error={errors.repeatIntervalValue?.message}\n              data-testid=\"am-repeat-interval\"\n            >\n              <>\n                <div className={cx(styles.container, styles.timingContainer)}>\n                  <InputControl\n                    render={({ field, fieldState: { invalid } }) => (\n                      <Input {...field} className={styles.smallInput} invalid={invalid} placeholder=\"Default 4 hours\" />\n                    )}\n                    control={control}\n                    name=\"repeatIntervalValue\"\n                    rules={{\n                      validate: optionalPositiveInteger,\n                    }}\n                  />\n                  <InputControl\n                    render={({ field: { onChange, ref, ...field } }) => (\n                      <Select\n                        menuShouldPortal\n                        {...field}\n                        className={styles.input}\n                        menuPlacement=\"top\"\n                        onChange={(value) => onChange(mapSelectValueToString(value))}\n                        options={timeOptions}\n                        aria-label=\"Repeat interval type\"\n                      />\n                    )}\n                    control={control}\n                    name=\"repeatIntervalValueType\"\n                  />\n                </div>\n              </>\n            </Field>\n          </Collapse>\n          <div className={styles.container}>\n            <Button type=\"submit\">Save</Button>\n            <Button onClick={onCancel} type=\"reset\" variant=\"secondary\" fill=\"outline\">\n              Cancel\n            </Button>\n          </div>\n        </>\n      )}\n    </Form>\n  );\n};\n","import { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\n\nexport const getGridStyles = (theme: GrafanaTheme2) => {\n  return {\n    container: css`\n      display: grid;\n      font-style: ${theme.typography.fontSize};\n      grid-template-columns: ${theme.spacing(15.5)} auto;\n\n      ${theme.breakpoints.down('md')} {\n        grid-template-columns: 100%;\n      }\n    `,\n    titleCell: css`\n      color: ${theme.colors.text.primary};\n    `,\n    valueCell: css`\n      color: ${theme.colors.text.secondary};\n      margin-bottom: ${theme.spacing(1)};\n    `,\n  };\n};\n","import React, { FC } from 'react';\n\nimport { useStyles2 } from '@grafana/ui';\n\nimport { FormAmRoute } from '../../types/amroutes';\n\nimport { getGridStyles } from './gridStyles';\n\nexport interface AmRootRouteReadProps {\n  routes: FormAmRoute;\n}\n\nexport const AmRootRouteRead: FC<AmRootRouteReadProps> = ({ routes }) => {\n  const styles = useStyles2(getGridStyles);\n\n  const receiver = routes.receiver || '-';\n  const groupBy = routes.groupBy.join(', ') || '-';\n  const groupWait = routes.groupWaitValue ? `${routes.groupWaitValue}${routes.groupWaitValueType}` : '-';\n  const groupInterval = routes.groupIntervalValue\n    ? `${routes.groupIntervalValue}${routes.groupIntervalValueType}`\n    : '-';\n  const repeatInterval = routes.repeatIntervalValue\n    ? `${routes.repeatIntervalValue}${routes.repeatIntervalValueType}`\n    : '-';\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.titleCell}>Contact point</div>\n      <div className={styles.valueCell} data-testid=\"am-routes-root-receiver\">\n        {receiver}\n      </div>\n      <div className={styles.titleCell}>Group by</div>\n      <div className={styles.valueCell} data-testid=\"am-routes-root-group-by\">\n        {groupBy}\n      </div>\n      <div className={styles.titleCell}>Timings</div>\n      <div className={styles.valueCell} data-testid=\"am-routes-root-timings\">\n        Group wait: {groupWait} | Group interval: {groupInterval} | Repeat interval: {repeatInterval}\n      </div>\n    </div>\n  );\n};\n","import { css } from '@emotion/css';\nimport React, { FC } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, useStyles2 } from '@grafana/ui';\n\nimport { Authorize } from '../../components/Authorize';\nimport { AmRouteReceiver, FormAmRoute } from '../../types/amroutes';\nimport { getNotificationsPermissions } from '../../utils/access-control';\nimport { isVanillaPrometheusAlertManagerDataSource } from '../../utils/datasource';\n\nimport { AmRootRouteForm } from './AmRootRouteForm';\nimport { AmRootRouteRead } from './AmRootRouteRead';\n\nexport interface AmRootRouteProps {\n  isEditMode: boolean;\n  onEnterEditMode: () => void;\n  onExitEditMode: () => void;\n  onSave: (data: Partial<FormAmRoute>) => void;\n  receivers: AmRouteReceiver[];\n  routes: FormAmRoute;\n  alertManagerSourceName: string;\n}\n\nexport const AmRootRoute: FC<AmRootRouteProps> = ({\n  isEditMode,\n  onSave,\n  onEnterEditMode,\n  onExitEditMode,\n  receivers,\n  routes,\n  alertManagerSourceName,\n}) => {\n  const styles = useStyles2(getStyles);\n\n  const permissions = getNotificationsPermissions(alertManagerSourceName);\n  const isReadOnly = isVanillaPrometheusAlertManagerDataSource(alertManagerSourceName);\n\n  return (\n    <div className={styles.container} data-testid=\"am-root-route-container\">\n      <div className={styles.titleContainer}>\n        <h5 className={styles.title}>\n          Root policy - <i>default for all alerts</i>\n        </h5>\n        {!isEditMode && !isReadOnly && (\n          <Authorize actions={[permissions.update]}>\n            <Button icon=\"pen\" onClick={onEnterEditMode} size=\"sm\" type=\"button\" variant=\"secondary\">\n              Edit\n            </Button>\n          </Authorize>\n        )}\n      </div>\n      <p>\n        All alerts will go to the default contact point, unless you set additional matchers in the specific routing\n        area.\n      </p>\n      {isEditMode ? (\n        <AmRootRouteForm\n          alertManagerSourceName={alertManagerSourceName}\n          onCancel={onExitEditMode}\n          onSave={onSave}\n          receivers={receivers}\n          routes={routes}\n        />\n      ) : (\n        <AmRootRouteRead routes={routes} />\n      )}\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    container: css`\n      background-color: ${theme.colors.background.secondary};\n      color: ${theme.colors.text.secondary};\n      padding: ${theme.spacing(2)};\n    `,\n    titleContainer: css`\n      color: ${theme.colors.text.primary};\n      display: flex;\n      flex-flow: row nowrap;\n    `,\n    title: css`\n      flex: 100%;\n    `,\n  };\n};\n","import { css } from '@emotion/css';\nimport React, { FC } from 'react';\n\nimport { GrafanaTheme } from '@grafana/data';\nimport { useStyles } from '@grafana/ui';\n\nexport const EmptyArea: FC = ({ children }) => {\n  const styles = useStyles(getStyles);\n\n  return <div className={styles.container}>{children}</div>;\n};\n\nconst getStyles = (theme: GrafanaTheme) => {\n  return {\n    container: css`\n      background-color: ${theme.colors.bg2};\n      color: ${theme.colors.textSemiWeak};\n      padding: ${theme.spacing.xl};\n      text-align: center;\n    `,\n  };\n};\n","import { css } from '@emotion/css';\nimport React, { ButtonHTMLAttributes, FC } from 'react';\n\nimport { GrafanaTheme } from '@grafana/data';\nimport { Button, ButtonVariant, IconName, LinkButton, useStyles } from '@grafana/ui';\n\nimport { EmptyArea } from './EmptyArea';\n\nexport interface EmptyAreaWithCTAProps {\n  buttonLabel: string;\n  href?: string;\n  onButtonClick?: ButtonHTMLAttributes<HTMLButtonElement>['onClick'];\n  text: string;\n\n  buttonIcon?: IconName;\n  buttonSize?: 'xs' | 'sm' | 'md' | 'lg';\n  buttonVariant?: ButtonVariant;\n  showButton?: boolean;\n}\n\nexport const EmptyAreaWithCTA: FC<EmptyAreaWithCTAProps> = ({\n  buttonIcon,\n  buttonLabel,\n  buttonSize = 'lg',\n  buttonVariant = 'primary',\n  onButtonClick,\n  text,\n  href,\n  showButton = true,\n}) => {\n  const styles = useStyles(getStyles);\n\n  const commonProps = {\n    className: styles.button,\n    icon: buttonIcon,\n    size: buttonSize,\n    variant: buttonVariant,\n  };\n\n  return (\n    <EmptyArea>\n      <>\n        <p className={styles.text}>{text}</p>\n        {showButton &&\n          (href ? (\n            <LinkButton href={href} type=\"button\" {...commonProps}>\n              {buttonLabel}\n            </LinkButton>\n          ) : (\n            <Button onClick={onButtonClick} type=\"button\" {...commonProps}>\n              {buttonLabel}\n            </Button>\n          ))}\n      </>\n    </EmptyArea>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme) => {\n  return {\n    container: css`\n      background-color: ${theme.colors.bg2};\n      color: ${theme.colors.textSemiWeak};\n      padding: ${theme.spacing.xl};\n      text-align: center;\n    `,\n    text: css`\n      margin-bottom: ${theme.spacing.md};\n    `,\n    button: css`\n      margin: ${theme.spacing.md} 0 ${theme.spacing.sm};\n    `,\n  };\n};\n","import { css, cx } from '@emotion/css';\nimport React, { FC, useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport {\n  Button,\n  Field,\n  FieldArray,\n  Form,\n  HorizontalGroup,\n  IconButton,\n  Input,\n  InputControl,\n  MultiSelect,\n  Select,\n  Switch,\n  useStyles2,\n  Badge,\n  VerticalGroup,\n} from '@grafana/ui';\n\nimport { useMuteTimingOptions } from '../../hooks/useMuteTimingOptions';\nimport { AmRouteReceiver, FormAmRoute } from '../../types/amroutes';\nimport { matcherFieldOptions } from '../../utils/alertmanager';\nimport {\n  emptyArrayFieldMatcher,\n  mapMultiSelectValueToStrings,\n  mapSelectValueToString,\n  optionalPositiveInteger,\n  stringToSelectableValue,\n  stringsToSelectableValues,\n} from '../../utils/amroutes';\nimport { timeOptions } from '../../utils/time';\n\nimport { getFormStyles } from './formStyles';\n\nexport interface AmRoutesExpandedFormProps {\n  onCancel: () => void;\n  onSave: (data: FormAmRoute) => void;\n  receivers: AmRouteReceiver[];\n  routes: FormAmRoute;\n}\n\nexport const AmRoutesExpandedForm: FC<AmRoutesExpandedFormProps> = ({ onCancel, onSave, receivers, routes }) => {\n  const styles = useStyles2(getStyles);\n  const formStyles = useStyles2(getFormStyles);\n  const [overrideGrouping, setOverrideGrouping] = useState(routes.groupBy.length > 0);\n  const [overrideTimings, setOverrideTimings] = useState(\n    !!routes.groupWaitValue || !!routes.groupIntervalValue || !!routes.repeatIntervalValue\n  );\n  const [groupByOptions, setGroupByOptions] = useState(stringsToSelectableValues(routes.groupBy));\n  const muteTimingOptions = useMuteTimingOptions();\n\n  return (\n    <Form defaultValues={routes} onSubmit={onSave}>\n      {({ control, register, errors, setValue }) => (\n        <>\n          {/* @ts-ignore-check: react-hook-form made me do this */}\n          <input type=\"hidden\" {...register('id')} />\n          {/* @ts-ignore-check: react-hook-form made me do this */}\n          <FieldArray name=\"object_matchers\" control={control}>\n            {({ fields, append, remove }) => (\n              <>\n                <VerticalGroup justify=\"flex-start\" spacing=\"md\">\n                  <div>Matching labels</div>\n                  {fields.length === 0 && (\n                    <Badge\n                      color=\"orange\"\n                      className={styles.noMatchersWarning}\n                      icon=\"exclamation-triangle\"\n                      text=\"If no matchers are specified, this notification policy will handle all alert instances.\"\n                    />\n                  )}\n                  {fields.length > 0 && (\n                    <div className={styles.matchersContainer}>\n                      {fields.map((field, index) => {\n                        const localPath = `object_matchers[${index}]`;\n                        return (\n                          <HorizontalGroup key={field.id} align=\"flex-start\">\n                            <Field\n                              label=\"Label\"\n                              invalid={!!errors.object_matchers?.[index]?.name}\n                              error={errors.object_matchers?.[index]?.name?.message}\n                            >\n                              <Input\n                                {...register(`${localPath}.name`, { required: 'Field is required' })}\n                                defaultValue={field.name}\n                                placeholder=\"label\"\n                              />\n                            </Field>\n                            <Field label={'Operator'}>\n                              <InputControl\n                                render={({ field: { onChange, ref, ...field } }) => (\n                                  <Select\n                                    {...field}\n                                    className={styles.matchersOperator}\n                                    onChange={(value) => onChange(value?.value)}\n                                    options={matcherFieldOptions}\n                                    aria-label=\"Operator\"\n                                    menuShouldPortal\n                                  />\n                                )}\n                                defaultValue={field.operator}\n                                control={control}\n                                name={`${localPath}.operator` as const}\n                                rules={{ required: { value: true, message: 'Required.' } }}\n                              />\n                            </Field>\n                            <Field\n                              label=\"Value\"\n                              invalid={!!errors.object_matchers?.[index]?.value}\n                              error={errors.object_matchers?.[index]?.value?.message}\n                            >\n                              <Input\n                                {...register(`${localPath}.value`, { required: 'Field is required' })}\n                                defaultValue={field.value}\n                                placeholder=\"value\"\n                              />\n                            </Field>\n                            <IconButton\n                              className={styles.removeButton}\n                              tooltip=\"Remove matcher\"\n                              name={'trash-alt'}\n                              onClick={() => remove(index)}\n                            >\n                              Remove\n                            </IconButton>\n                          </HorizontalGroup>\n                        );\n                      })}\n                    </div>\n                  )}\n                  <Button\n                    className={styles.addMatcherBtn}\n                    icon=\"plus\"\n                    onClick={() => append(emptyArrayFieldMatcher)}\n                    variant=\"secondary\"\n                    type=\"button\"\n                  >\n                    Add matcher\n                  </Button>\n                </VerticalGroup>\n              </>\n            )}\n          </FieldArray>\n          <Field label=\"Contact point\">\n            {/* @ts-ignore-check: react-hook-form made me do this */}\n            <InputControl\n              render={({ field: { onChange, ref, ...field } }) => (\n                <Select\n                  aria-label=\"Contact point\"\n                  {...field}\n                  className={formStyles.input}\n                  onChange={(value) => onChange(mapSelectValueToString(value))}\n                  options={receivers}\n                  menuShouldPortal\n                />\n              )}\n              control={control}\n              name=\"receiver\"\n            />\n          </Field>\n          <Field label=\"Continue matching subsequent sibling nodes\">\n            <Switch id=\"continue-toggle\" {...register('continue')} />\n          </Field>\n          <Field label=\"Override grouping\">\n            <Switch\n              id=\"override-grouping-toggle\"\n              value={overrideGrouping}\n              onChange={() => setOverrideGrouping((overrideGrouping) => !overrideGrouping)}\n            />\n          </Field>\n          {overrideGrouping && (\n            <Field label=\"Group by\" description=\"Group alerts when you receive a notification based on labels.\">\n              <InputControl\n                render={({ field: { onChange, ref, ...field } }) => (\n                  <MultiSelect\n                    aria-label=\"Group by\"\n                    menuShouldPortal\n                    {...field}\n                    allowCustomValue\n                    className={formStyles.input}\n                    onCreateOption={(opt: string) => {\n                      setGroupByOptions((opts) => [...opts, stringToSelectableValue(opt)]);\n\n                      // @ts-ignore-check: react-hook-form made me do this\n                      setValue('groupBy', [...field.value, opt]);\n                    }}\n                    onChange={(value) => onChange(mapMultiSelectValueToStrings(value))}\n                    options={groupByOptions}\n                  />\n                )}\n                control={control}\n                name=\"groupBy\"\n              />\n            </Field>\n          )}\n          <Field label=\"Override general timings\">\n            <Switch\n              id=\"override-timings-toggle\"\n              value={overrideTimings}\n              onChange={() => setOverrideTimings((overrideTimings) => !overrideTimings)}\n            />\n          </Field>\n          {overrideTimings && (\n            <>\n              <Field\n                label=\"Group wait\"\n                description=\"The waiting time until the initial notification is sent for a new group created by an incoming alert.\"\n                invalid={!!errors.groupWaitValue}\n                error={errors.groupWaitValue?.message}\n              >\n                <>\n                  <div className={cx(formStyles.container, formStyles.timingContainer)}>\n                    <InputControl\n                      render={({ field, fieldState: { invalid } }) => (\n                        <Input\n                          {...field}\n                          className={formStyles.smallInput}\n                          invalid={invalid}\n                          placeholder=\"Time\"\n                          aria-label=\"Group wait value\"\n                        />\n                      )}\n                      control={control}\n                      name=\"groupWaitValue\"\n                      rules={{\n                        validate: optionalPositiveInteger,\n                      }}\n                    />\n                    <InputControl\n                      render={({ field: { onChange, ref, ...field } }) => (\n                        <Select\n                          menuShouldPortal\n                          {...field}\n                          className={formStyles.input}\n                          onChange={(value) => onChange(mapSelectValueToString(value))}\n                          options={timeOptions}\n                          aria-label=\"Group wait type\"\n                        />\n                      )}\n                      control={control}\n                      name=\"groupWaitValueType\"\n                    />\n                  </div>\n                </>\n              </Field>\n              <Field\n                label=\"Group interval\"\n                description=\"The waiting time to send a batch of new alerts for that group after the first notification was sent.\"\n                invalid={!!errors.groupIntervalValue}\n                error={errors.groupIntervalValue?.message}\n              >\n                <>\n                  <div className={cx(formStyles.container, formStyles.timingContainer)}>\n                    <InputControl\n                      render={({ field, fieldState: { invalid } }) => (\n                        <Input\n                          {...field}\n                          className={formStyles.smallInput}\n                          invalid={invalid}\n                          placeholder=\"Time\"\n                          aria-label=\"Group interval value\"\n                        />\n                      )}\n                      control={control}\n                      name=\"groupIntervalValue\"\n                      rules={{\n                        validate: optionalPositiveInteger,\n                      }}\n                    />\n                    <InputControl\n                      render={({ field: { onChange, ref, ...field } }) => (\n                        <Select\n                          menuShouldPortal\n                          {...field}\n                          className={formStyles.input}\n                          onChange={(value) => onChange(mapSelectValueToString(value))}\n                          options={timeOptions}\n                          aria-label=\"Group interval type\"\n                        />\n                      )}\n                      control={control}\n                      name=\"groupIntervalValueType\"\n                    />\n                  </div>\n                </>\n              </Field>\n              <Field\n                label=\"Repeat interval\"\n                description=\"The waiting time to resend an alert after they have successfully been sent.\"\n                invalid={!!errors.repeatIntervalValue}\n                error={errors.repeatIntervalValue?.message}\n              >\n                <>\n                  <div className={cx(formStyles.container, formStyles.timingContainer)}>\n                    <InputControl\n                      render={({ field, fieldState: { invalid } }) => (\n                        <Input\n                          {...field}\n                          className={formStyles.smallInput}\n                          invalid={invalid}\n                          placeholder=\"Time\"\n                          aria-label=\"Repeat interval value\"\n                        />\n                      )}\n                      control={control}\n                      name=\"repeatIntervalValue\"\n                      rules={{\n                        validate: optionalPositiveInteger,\n                      }}\n                    />\n                    <InputControl\n                      render={({ field: { onChange, ref, ...field } }) => (\n                        <Select\n                          menuShouldPortal\n                          {...field}\n                          className={formStyles.input}\n                          menuPlacement=\"top\"\n                          onChange={(value) => onChange(mapSelectValueToString(value))}\n                          options={timeOptions}\n                          aria-label=\"Repeat interval type\"\n                        />\n                      )}\n                      control={control}\n                      name=\"repeatIntervalValueType\"\n                    />\n                  </div>\n                </>\n              </Field>\n            </>\n          )}\n          <Field\n            label=\"Mute timings\"\n            data-testid=\"am-mute-timing-select\"\n            description=\"Add mute timing to policy\"\n            invalid={!!errors.muteTimeIntervals}\n          >\n            <InputControl\n              render={({ field: { onChange, ref, ...field } }) => (\n                <MultiSelect\n                  aria-label=\"Mute timings\"\n                  menuShouldPortal\n                  {...field}\n                  className={formStyles.input}\n                  onChange={(value) => onChange(mapMultiSelectValueToStrings(value))}\n                  options={muteTimingOptions}\n                />\n              )}\n              control={control}\n              name=\"muteTimeIntervals\"\n            />\n          </Field>\n          <div className={styles.buttonGroup}>\n            <Button type=\"submit\">Save policy</Button>\n            <Button onClick={onCancel} fill=\"outline\" type=\"button\" variant=\"secondary\">\n              Cancel\n            </Button>\n          </div>\n        </>\n      )}\n    </Form>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  const commonSpacing = theme.spacing(3.5);\n\n  return {\n    addMatcherBtn: css`\n      margin-bottom: ${commonSpacing};\n    `,\n    matchersContainer: css`\n      background-color: ${theme.colors.background.secondary};\n      margin: ${theme.spacing(1, 0)};\n      padding: ${theme.spacing(1, 4.6, 1, 1.5)};\n      width: fit-content;\n    `,\n    matchersOperator: css`\n      min-width: 140px;\n    `,\n    nestedPolicies: css`\n      margin-top: ${commonSpacing};\n    `,\n    removeButton: css`\n      margin-left: ${theme.spacing(1)};\n      margin-top: ${theme.spacing(2.5)};\n    `,\n    buttonGroup: css`\n      margin: ${theme.spacing(6)} 0 ${commonSpacing};\n\n      & > * + * {\n        margin-left: ${theme.spacing(1.5)};\n      }\n    `,\n    noMatchersWarning: css`\n      padding: ${theme.spacing(1)} ${theme.spacing(2)};\n    `,\n  };\n};\n","import { useMemo } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { AlertmanagerConfig } from 'app/plugins/datasource/alertmanager/types';\n\nimport { timeIntervalToString } from '../utils/alertmanager';\nimport { initialAsyncRequestState } from '../utils/redux';\n\nimport { useAlertManagerSourceName } from './useAlertManagerSourceName';\nimport { useUnifiedAlertingSelector } from './useUnifiedAlertingSelector';\n\nexport function useMuteTimingOptions(): Array<SelectableValue<string>> {\n  const [alertManagerSourceName] = useAlertManagerSourceName();\n  const amConfigs = useUnifiedAlertingSelector((state) => state.amConfigs);\n\n  return useMemo(() => {\n    const { result } = (alertManagerSourceName && amConfigs[alertManagerSourceName]) || initialAsyncRequestState;\n    const config: AlertmanagerConfig = result?.alertmanager_config ?? {};\n\n    const muteTimingsOptions: Array<SelectableValue<string>> =\n      config?.mute_time_intervals?.map((value) => ({\n        value: value.name,\n        label: value.name,\n        description: value.time_intervals.map((interval) => timeIntervalToString(interval)).join(', AND '),\n      })) ?? [];\n\n    return muteTimingsOptions;\n  }, [alertManagerSourceName, amConfigs]);\n}\n","import { css } from '@emotion/css';\nimport React, { FC, useMemo, useState } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { IconButton, LinkButton, Link, useStyles2, ConfirmModal } from '@grafana/ui';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { AlertManagerCortexConfig, MuteTimeInterval, TimeInterval } from 'app/plugins/datasource/alertmanager/types';\n\nimport { Authorize } from '../../components/Authorize';\nimport { useUnifiedAlertingSelector } from '../../hooks/useUnifiedAlertingSelector';\nimport { deleteMuteTimingAction } from '../../state/actions';\nimport { getNotificationsPermissions } from '../../utils/access-control';\nimport {\n  getTimeString,\n  getWeekdayString,\n  getDaysOfMonthString,\n  getMonthsString,\n  getYearsString,\n} from '../../utils/alertmanager';\nimport { makeAMLink } from '../../utils/misc';\nimport { AsyncRequestState, initialAsyncRequestState } from '../../utils/redux';\nimport { DynamicTable, DynamicTableItemProps, DynamicTableColumnProps } from '../DynamicTable';\nimport { EmptyAreaWithCTA } from '../EmptyAreaWithCTA';\n\ninterface Props {\n  alertManagerSourceName: string;\n  muteTimingNames?: string[];\n  hideActions?: boolean;\n}\n\nexport const MuteTimingsTable: FC<Props> = ({ alertManagerSourceName, muteTimingNames, hideActions }) => {\n  const styles = useStyles2(getStyles);\n  const dispatch = useDispatch();\n  const permissions = getNotificationsPermissions(alertManagerSourceName);\n  const amConfigs = useUnifiedAlertingSelector((state) => state.amConfigs);\n  const [muteTimingName, setMuteTimingName] = useState<string>('');\n  const { result }: AsyncRequestState<AlertManagerCortexConfig> =\n    (alertManagerSourceName && amConfigs[alertManagerSourceName]) || initialAsyncRequestState;\n\n  const items = useMemo((): Array<DynamicTableItemProps<MuteTimeInterval>> => {\n    const muteTimings = result?.alertmanager_config?.mute_time_intervals ?? [];\n    return muteTimings\n      .filter(({ name }) => (muteTimingNames ? muteTimingNames.includes(name) : true))\n      .map((mute) => {\n        return {\n          id: mute.name,\n          data: mute,\n        };\n      });\n  }, [result?.alertmanager_config?.mute_time_intervals, muteTimingNames]);\n\n  const columns = useColumns(alertManagerSourceName, hideActions, setMuteTimingName);\n\n  return (\n    <div className={styles.container}>\n      {!hideActions && <h5>Mute timings</h5>}\n      {!hideActions && (\n        <p>\n          Mute timings are a named interval of time that may be referenced in the notification policy tree to mute\n          particular notification policies for specific times of the day.\n        </p>\n      )}\n      {!hideActions && items.length > 0 && (\n        <Authorize actions={[permissions.create]}>\n          <LinkButton\n            className={styles.addMuteButton}\n            icon=\"plus\"\n            variant=\"primary\"\n            href={makeAMLink('alerting/routes/mute-timing/new', alertManagerSourceName)}\n          >\n            New mute timing\n          </LinkButton>\n        </Authorize>\n      )}\n      {items.length > 0 ? (\n        <DynamicTable items={items} cols={columns} />\n      ) : !hideActions ? (\n        <EmptyAreaWithCTA\n          text=\"You haven't created any mute timings yet\"\n          buttonLabel=\"Add mute timing\"\n          buttonIcon=\"plus\"\n          buttonSize=\"lg\"\n          href={makeAMLink('alerting/routes/mute-timing/new', alertManagerSourceName)}\n          showButton={contextSrv.hasPermission(permissions.create)}\n        />\n      ) : (\n        <p>No mute timings configured</p>\n      )}\n      {!hideActions && (\n        <ConfirmModal\n          isOpen={!!muteTimingName}\n          title=\"Delete mute timing\"\n          body={`Are you sure you would like to delete \"${muteTimingName}\"`}\n          confirmText=\"Delete\"\n          onConfirm={() => dispatch(deleteMuteTimingAction(alertManagerSourceName, muteTimingName))}\n          onDismiss={() => setMuteTimingName('')}\n        />\n      )}\n    </div>\n  );\n};\n\nfunction useColumns(alertManagerSourceName: string, hideActions = false, setMuteTimingName: (name: string) => void) {\n  const permissions = getNotificationsPermissions(alertManagerSourceName);\n\n  const userHasEditPermissions = contextSrv.hasPermission(permissions.update);\n  const userHasDeletePermissions = contextSrv.hasPermission(permissions.delete);\n  const showActions = !hideActions && (userHasEditPermissions || userHasDeletePermissions);\n  return useMemo((): Array<DynamicTableColumnProps<MuteTimeInterval>> => {\n    const columns: Array<DynamicTableColumnProps<MuteTimeInterval>> = [\n      {\n        id: 'name',\n        label: 'Name',\n        renderCell: function renderName({ data }) {\n          return data.name;\n        },\n        size: '250px',\n      },\n      {\n        id: 'timeRange',\n        label: 'Time range',\n        renderCell: ({ data }) => renderTimeIntervals(data.time_intervals),\n      },\n    ];\n    if (showActions) {\n      columns.push({\n        id: 'actions',\n        label: 'Actions',\n        renderCell: function renderActions({ data }) {\n          return (\n            <div>\n              <Authorize actions={[permissions.update]}>\n                <Link\n                  href={makeAMLink(`/alerting/routes/mute-timing/edit`, alertManagerSourceName, {\n                    muteName: data.name,\n                  })}\n                >\n                  <IconButton name=\"edit\" title=\"Edit mute timing\" />\n                </Link>\n              </Authorize>\n              <Authorize actions={[permissions.delete]}>\n                <IconButton\n                  name={'trash-alt'}\n                  title=\"Delete mute timing\"\n                  onClick={() => setMuteTimingName(data.name)}\n                />\n              </Authorize>\n            </div>\n          );\n        },\n        size: '100px',\n      });\n    }\n    return columns;\n  }, [alertManagerSourceName, setMuteTimingName, showActions, permissions]);\n}\n\nfunction renderTimeIntervals(timeIntervals: TimeInterval[]) {\n  return timeIntervals.map((interval, index) => {\n    const { times, weekdays, days_of_month, months, years } = interval;\n    const timeString = getTimeString(times);\n    const weekdayString = getWeekdayString(weekdays);\n    const daysString = getDaysOfMonthString(days_of_month);\n    const monthsString = getMonthsString(months);\n    const yearsString = getYearsString(years);\n\n    return (\n      <React.Fragment key={JSON.stringify(interval) + index}>\n        {`${timeString} ${weekdayString}`}\n        <br />\n        {[daysString, monthsString, yearsString].join(' | ')}\n        <br />\n      </React.Fragment>\n    );\n  });\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  container: css`\n    display: flex;\n    flex-flow: column nowrap;\n  `,\n  addMuteButton: css`\n    margin-bottom: ${theme.spacing(2)};\n    align-self: flex-end;\n  `,\n});\n","import { css } from '@emotion/css';\nimport React, { FC, useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, useStyles2 } from '@grafana/ui';\n\nimport { AmRouteReceiver, FormAmRoute } from '../../types/amroutes';\nimport { getNotificationsPermissions } from '../../utils/access-control';\nimport { emptyRoute } from '../../utils/amroutes';\nimport { Authorize } from '../Authorize';\n\nimport { AmRoutesTable } from './AmRoutesTable';\nimport { MuteTimingsTable } from './MuteTimingsTable';\nimport { getGridStyles } from './gridStyles';\n\nexport interface AmRoutesExpandedReadProps {\n  onChange: (routes: FormAmRoute) => void;\n  receivers: AmRouteReceiver[];\n  routes: FormAmRoute;\n  readOnly?: boolean;\n  alertManagerSourceName: string;\n}\n\nexport const AmRoutesExpandedRead: FC<AmRoutesExpandedReadProps> = ({\n  onChange,\n  receivers,\n  routes,\n  readOnly = false,\n  alertManagerSourceName,\n}) => {\n  const styles = useStyles2(getStyles);\n  const gridStyles = useStyles2(getGridStyles);\n  const permissions = getNotificationsPermissions(alertManagerSourceName);\n\n  const groupWait = routes.groupWaitValue ? `${routes.groupWaitValue}${routes.groupWaitValueType}` : '-';\n  const groupInterval = routes.groupIntervalValue\n    ? `${routes.groupIntervalValue}${routes.groupIntervalValueType}`\n    : '-';\n  const repeatInterval = routes.repeatIntervalValue\n    ? `${routes.repeatIntervalValue}${routes.repeatIntervalValueType}`\n    : '-';\n\n  const [subroutes, setSubroutes] = useState(routes.routes);\n  const [isAddMode, setIsAddMode] = useState(false);\n\n  return (\n    <div className={gridStyles.container}>\n      <div className={gridStyles.titleCell}>Group wait</div>\n      <div className={gridStyles.valueCell}>{groupWait}</div>\n      <div className={gridStyles.titleCell}>Group interval</div>\n      <div className={gridStyles.valueCell}>{groupInterval}</div>\n      <div className={gridStyles.titleCell}>Repeat interval</div>\n      <div className={gridStyles.valueCell}>{repeatInterval}</div>\n      <div className={gridStyles.titleCell}>Nested policies</div>\n      <div className={gridStyles.valueCell}>\n        {!!subroutes.length ? (\n          <AmRoutesTable\n            isAddMode={isAddMode}\n            onCancelAdd={() => {\n              setIsAddMode(false);\n              setSubroutes((subroutes) => {\n                const newSubroutes = [...subroutes];\n                newSubroutes.pop();\n\n                return newSubroutes;\n              });\n            }}\n            onChange={(newRoutes) => {\n              onChange({\n                ...routes,\n                routes: newRoutes,\n              });\n\n              if (isAddMode) {\n                setIsAddMode(false);\n              }\n            }}\n            receivers={receivers}\n            routes={subroutes}\n            alertManagerSourceName={alertManagerSourceName}\n          />\n        ) : (\n          <p>No nested policies configured.</p>\n        )}\n        {!isAddMode && !readOnly && (\n          <Authorize actions={[permissions.create]}>\n            <Button\n              className={styles.addNestedRoutingBtn}\n              icon=\"plus\"\n              onClick={() => {\n                setSubroutes((subroutes) => [...subroutes, emptyRoute]);\n                setIsAddMode(true);\n              }}\n              variant=\"secondary\"\n              type=\"button\"\n            >\n              Add nested policy\n            </Button>\n          </Authorize>\n        )}\n      </div>\n      <div className={gridStyles.titleCell}>Mute timings</div>\n      <div className={gridStyles.valueCell}>\n        <MuteTimingsTable\n          alertManagerSourceName={alertManagerSourceName!}\n          muteTimingNames={routes.muteTimeIntervals}\n          hideActions\n        />\n      </div>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    addNestedRoutingBtn: css`\n      margin-top: ${theme.spacing(2)};\n    `,\n  };\n};\n","import { intersectionWith, isEqual } from 'lodash';\nimport React, { FC, useCallback, useEffect, useMemo, useState } from 'react';\n\nimport { Button, ConfirmModal, HorizontalGroup, IconButton } from '@grafana/ui';\nimport { contextSrv } from 'app/core/services/context_srv';\n\nimport { AmRouteReceiver, FormAmRoute } from '../../types/amroutes';\nimport { getNotificationsPermissions } from '../../utils/access-control';\nimport { matcherFieldToMatcher, parseMatchers } from '../../utils/alertmanager';\nimport { prepareItems } from '../../utils/dynamicTable';\nimport { DynamicTable, DynamicTableColumnProps, DynamicTableItemProps } from '../DynamicTable';\nimport { EmptyArea } from '../EmptyArea';\nimport { Matchers } from '../silences/Matchers';\n\nimport { AmRoutesExpandedForm } from './AmRoutesExpandedForm';\nimport { AmRoutesExpandedRead } from './AmRoutesExpandedRead';\n\nexport interface AmRoutesTableProps {\n  isAddMode: boolean;\n  onChange: (routes: FormAmRoute[]) => void;\n  onCancelAdd: () => void;\n  receivers: AmRouteReceiver[];\n  routes: FormAmRoute[];\n  filters?: { queryString?: string; contactPoint?: string };\n  readOnly?: boolean;\n  alertManagerSourceName: string;\n}\n\ntype RouteTableColumnProps = DynamicTableColumnProps<FormAmRoute>;\ntype RouteTableItemProps = DynamicTableItemProps<FormAmRoute>;\n\nexport const getFilteredRoutes = (routes: FormAmRoute[], labelMatcherQuery?: string, contactPointQuery?: string) => {\n  const matchers = parseMatchers(labelMatcherQuery ?? '');\n\n  let filteredRoutes = routes;\n\n  if (matchers.length) {\n    filteredRoutes = routes.filter((route) => {\n      const routeMatchers = route.object_matchers.map(matcherFieldToMatcher);\n      return intersectionWith(routeMatchers, matchers, isEqual).length > 0;\n    });\n  }\n\n  if (contactPointQuery && contactPointQuery.length > 0) {\n    filteredRoutes = filteredRoutes.filter((route) =>\n      route.receiver.toLowerCase().includes(contactPointQuery.toLowerCase())\n    );\n  }\n\n  return filteredRoutes;\n};\n\nexport const updatedRoute = (routes: FormAmRoute[], updatedRoute: FormAmRoute): FormAmRoute[] => {\n  const newRoutes = [...routes];\n  const editIndex = newRoutes.findIndex((route) => route.id === updatedRoute.id);\n\n  if (editIndex >= 0) {\n    newRoutes[editIndex] = {\n      ...newRoutes[editIndex],\n      ...updatedRoute,\n    };\n  }\n  return newRoutes;\n};\n\nexport const deleteRoute = (routes: FormAmRoute[], routeToRemove: FormAmRoute): FormAmRoute[] => {\n  return routes.filter((route) => route.id !== routeToRemove.id);\n};\n\nexport const AmRoutesTable: FC<AmRoutesTableProps> = ({\n  isAddMode,\n  onCancelAdd,\n  onChange,\n  receivers,\n  routes,\n  filters,\n  readOnly = false,\n  alertManagerSourceName,\n}) => {\n  const [editMode, setEditMode] = useState(false);\n  const [showDeleteModal, setShowDeleteModal] = useState<boolean>(false);\n  const [expandedId, setExpandedId] = useState<string | number>();\n  const permissions = getNotificationsPermissions(alertManagerSourceName);\n  const canEditRoutes = contextSrv.hasPermission(permissions.update);\n  const canDeleteRoutes = contextSrv.hasPermission(permissions.delete);\n\n  const showActions = !readOnly && (canEditRoutes || canDeleteRoutes);\n\n  const expandItem = useCallback((item: RouteTableItemProps) => setExpandedId(item.id), []);\n  const collapseItem = useCallback(() => setExpandedId(undefined), []);\n\n  const cols: RouteTableColumnProps[] = [\n    {\n      id: 'matchingCriteria',\n      label: 'Matching labels',\n      // eslint-disable-next-line react/display-name\n      renderCell: (item) => {\n        return item.data.object_matchers.length ? (\n          <Matchers matchers={item.data.object_matchers.map(matcherFieldToMatcher)} />\n        ) : (\n          <span>Matches all alert instances</span>\n        );\n      },\n      size: 10,\n    },\n    {\n      id: 'groupBy',\n      label: 'Group by',\n      renderCell: (item) => item.data.groupBy.join(', ') || '-',\n      size: 5,\n    },\n    {\n      id: 'receiverChannel',\n      label: 'Contact point',\n      renderCell: (item) => item.data.receiver || '-',\n      size: 5,\n    },\n    {\n      id: 'muteTimings',\n      label: 'Mute timings',\n      renderCell: (item) => item.data.muteTimeIntervals.join(', ') || '-',\n      size: 5,\n    },\n    ...(!showActions\n      ? []\n      : [\n          {\n            id: 'actions',\n            label: 'Actions',\n            // eslint-disable-next-line react/display-name\n            renderCell: (item) => {\n              if (item.renderExpandedContent) {\n                return null;\n              }\n\n              const expandWithCustomContent = () => {\n                expandItem(item);\n                setEditMode(true);\n              };\n\n              return (\n                <>\n                  <HorizontalGroup>\n                    <Button\n                      aria-label=\"Edit route\"\n                      icon=\"pen\"\n                      onClick={expandWithCustomContent}\n                      size=\"sm\"\n                      type=\"button\"\n                      variant=\"secondary\"\n                    >\n                      Edit\n                    </Button>\n                    <IconButton\n                      aria-label=\"Delete route\"\n                      name=\"trash-alt\"\n                      onClick={() => {\n                        setShowDeleteModal(true);\n                      }}\n                      type=\"button\"\n                    />\n                  </HorizontalGroup>\n                  <ConfirmModal\n                    isOpen={showDeleteModal}\n                    title=\"Delete notification policy\"\n                    body=\"Deleting this notification policy will permanently remove it. Are you sure you want to delete this policy?\"\n                    confirmText=\"Yes, delete\"\n                    icon=\"exclamation-triangle\"\n                    onConfirm={() => {\n                      const newRoutes = deleteRoute(routes, item.data);\n                      onChange(newRoutes);\n                    }}\n                    onDismiss={() => setShowDeleteModal(false)}\n                  />\n                </>\n              );\n            },\n            size: '100px',\n          } as RouteTableColumnProps,\n        ]),\n  ];\n\n  const filteredRoutes = useMemo(\n    () => getFilteredRoutes(routes, filters?.queryString, filters?.contactPoint),\n    [routes, filters]\n  );\n\n  const dynamicTableRoutes = useMemo(\n    () => prepareItems(isAddMode ? routes : filteredRoutes),\n    [isAddMode, routes, filteredRoutes]\n  );\n\n  // expand the last item when adding or reset when the length changed\n  useEffect(() => {\n    if (isAddMode && dynamicTableRoutes.length) {\n      setExpandedId(dynamicTableRoutes[dynamicTableRoutes.length - 1].id);\n    }\n    if (!isAddMode && dynamicTableRoutes.length) {\n      setExpandedId(undefined);\n    }\n  }, [isAddMode, dynamicTableRoutes]);\n\n  if (routes.length > 0 && filteredRoutes.length === 0) {\n    return (\n      <EmptyArea>\n        <p>No policies found</p>\n      </EmptyArea>\n    );\n  }\n\n  return (\n    <DynamicTable\n      cols={cols}\n      isExpandable={true}\n      items={dynamicTableRoutes}\n      testIdGenerator={() => 'am-routes-row'}\n      onCollapse={collapseItem}\n      onExpand={expandItem}\n      isExpanded={(item) => expandedId === item.id}\n      renderExpandedContent={(item: RouteTableItemProps) =>\n        isAddMode || editMode ? (\n          <AmRoutesExpandedForm\n            onCancel={() => {\n              if (isAddMode) {\n                onCancelAdd();\n              }\n              setEditMode(false);\n            }}\n            onSave={(data) => {\n              const newRoutes = updatedRoute(routes, data);\n\n              setEditMode(false);\n              onChange(newRoutes);\n            }}\n            receivers={receivers}\n            routes={item.data}\n          />\n        ) : (\n          <AmRoutesExpandedRead\n            onChange={(data) => {\n              const newRoutes = updatedRoute(routes, data);\n              onChange(newRoutes);\n            }}\n            receivers={receivers}\n            routes={item.data}\n            readOnly={readOnly}\n            alertManagerSourceName={alertManagerSourceName}\n          />\n        )\n      }\n    />\n  );\n};\n","import { DynamicTableItemProps } from '../components/DynamicTable';\n\nexport const prepareItems = <T = unknown>(\n  items: T[],\n  idCreator?: (item: T) => number | string\n): Array<DynamicTableItemProps<T>> =>\n  items.map((item, index) => ({\n    id: idCreator?.(item) ?? index,\n    data: item,\n  }));\n","import { css } from '@emotion/css';\nimport React, { FC, useState } from 'react';\nimport { useDebounce } from 'react-use';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, Icon, Input, Label, useStyles2 } from '@grafana/ui';\nimport { contextSrv } from 'app/core/services/context_srv';\n\nimport { Authorize } from '../../components/Authorize';\nimport { useURLSearchParams } from '../../hooks/useURLSearchParams';\nimport { AmRouteReceiver, FormAmRoute } from '../../types/amroutes';\nimport { getNotificationsPermissions } from '../../utils/access-control';\nimport { emptyArrayFieldMatcher, emptyRoute } from '../../utils/amroutes';\nimport { getNotificationPoliciesFilters } from '../../utils/misc';\nimport { EmptyArea } from '../EmptyArea';\nimport { EmptyAreaWithCTA } from '../EmptyAreaWithCTA';\nimport { MatcherFilter } from '../alert-groups/MatcherFilter';\n\nimport { AmRoutesTable } from './AmRoutesTable';\n\nexport interface AmSpecificRoutingProps {\n  alertManagerSourceName: string;\n  onChange: (routes: FormAmRoute) => void;\n  onRootRouteEdit: () => void;\n  receivers: AmRouteReceiver[];\n  routes: FormAmRoute;\n  readOnly?: boolean;\n}\n\ninterface Filters {\n  queryString?: string;\n  contactPoint?: string;\n}\n\nexport const AmSpecificRouting: FC<AmSpecificRoutingProps> = ({\n  alertManagerSourceName,\n  onChange,\n  onRootRouteEdit,\n  receivers,\n  routes,\n  readOnly = false,\n}) => {\n  const [actualRoutes, setActualRoutes] = useState([...routes.routes]);\n  const [isAddMode, setIsAddMode] = useState(false);\n  const permissions = getNotificationsPermissions(alertManagerSourceName);\n  const canCreateNotifications = contextSrv.hasPermission(permissions.create);\n\n  const [searchParams, setSearchParams] = useURLSearchParams();\n  const { queryString, contactPoint } = getNotificationPoliciesFilters(searchParams);\n\n  const [filters, setFilters] = useState<Filters>({ queryString, contactPoint });\n\n  useDebounce(\n    () => {\n      setSearchParams({ queryString: filters.queryString, contactPoint: filters.contactPoint });\n    },\n    400,\n    [filters]\n  );\n\n  const styles = useStyles2(getStyles);\n\n  const clearFilters = () => {\n    setFilters({ queryString: undefined, contactPoint: undefined });\n    setSearchParams({ queryString: undefined, contactPoint: undefined });\n  };\n\n  const addNewRoute = () => {\n    clearFilters();\n    setIsAddMode(true);\n    setActualRoutes(() => [\n      ...routes.routes,\n      {\n        ...emptyRoute,\n        matchers: [emptyArrayFieldMatcher],\n      },\n    ]);\n  };\n\n  const onCancelAdd = () => {\n    setIsAddMode(false);\n    setActualRoutes([...routes.routes]);\n  };\n\n  const onTableRouteChange = (newRoutes: FormAmRoute[]): void => {\n    onChange({\n      ...routes,\n      routes: newRoutes,\n    });\n\n    if (isAddMode) {\n      setIsAddMode(false);\n    }\n  };\n  return (\n    <div className={styles.container}>\n      <h5>Specific routing</h5>\n      <p>Send specific alerts to chosen contact points, based on matching criteria</p>\n      {!routes.receiver ? (\n        readOnly ? (\n          <EmptyArea>\n            <p>There is no default contact point configured for the root route.</p>\n          </EmptyArea>\n        ) : (\n          <EmptyAreaWithCTA\n            buttonIcon=\"rocket\"\n            buttonLabel=\"Set a default contact point\"\n            onButtonClick={onRootRouteEdit}\n            text=\"You haven't set a default contact point for the root route yet.\"\n            showButton={canCreateNotifications}\n          />\n        )\n      ) : actualRoutes.length > 0 ? (\n        <>\n          <div>\n            {!isAddMode && (\n              <div className={styles.searchContainer}>\n                <MatcherFilter\n                  onFilterChange={(filter) =>\n                    setFilters((currentFilters) => ({ ...currentFilters, queryString: filter }))\n                  }\n                  queryString={filters.queryString ?? ''}\n                  className={styles.filterInput}\n                />\n                <div className={styles.filterInput}>\n                  <Label>Search by contact point</Label>\n                  <Input\n                    onChange={({ currentTarget }) =>\n                      setFilters((currentFilters) => ({ ...currentFilters, contactPoint: currentTarget.value }))\n                    }\n                    value={filters.contactPoint ?? ''}\n                    placeholder=\"Search by contact point\"\n                    data-testid=\"search-query-input\"\n                    prefix={<Icon name={'search'} />}\n                  />\n                </div>\n                {(queryString || contactPoint) && (\n                  <Button variant=\"secondary\" icon=\"times\" onClick={clearFilters} className={styles.clearFilterBtn}>\n                    Clear filters\n                  </Button>\n                )}\n              </div>\n            )}\n\n            {!isAddMode && !readOnly && (\n              <Authorize actions={[permissions.create]}>\n                <div className={styles.addMatcherBtnRow}>\n                  <Button className={styles.addMatcherBtn} icon=\"plus\" onClick={addNewRoute} type=\"button\">\n                    New policy\n                  </Button>\n                </div>\n              </Authorize>\n            )}\n          </div>\n          <AmRoutesTable\n            isAddMode={isAddMode}\n            readOnly={readOnly}\n            onCancelAdd={onCancelAdd}\n            onChange={onTableRouteChange}\n            receivers={receivers}\n            routes={actualRoutes}\n            filters={{ queryString, contactPoint }}\n            alertManagerSourceName={alertManagerSourceName}\n          />\n        </>\n      ) : readOnly ? (\n        <EmptyArea>\n          <p>There are no specific policies configured.</p>\n        </EmptyArea>\n      ) : (\n        <EmptyAreaWithCTA\n          buttonIcon=\"plus\"\n          buttonLabel=\"New specific policy\"\n          onButtonClick={addNewRoute}\n          text=\"You haven't created any specific policies yet.\"\n          showButton={canCreateNotifications}\n        />\n      )}\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    container: css`\n      display: flex;\n      flex-flow: column wrap;\n    `,\n    searchContainer: css`\n      display: flex;\n      flex-flow: row nowrap;\n      padding-bottom: ${theme.spacing(2)};\n      border-bottom: 1px solid ${theme.colors.border.strong};\n    `,\n    clearFilterBtn: css`\n      align-self: flex-end;\n      margin-left: ${theme.spacing(1)};\n    `,\n    filterInput: css`\n      width: 340px;\n      & + & {\n        margin-left: ${theme.spacing(1)};\n      }\n    `,\n    addMatcherBtnRow: css`\n      display: flex;\n      flex-flow: column nowrap;\n      padding: ${theme.spacing(2)} 0;\n    `,\n    addMatcherBtn: css`\n      align-self: flex-end;\n    `,\n  };\n};\n","import { css } from '@emotion/css';\nimport React, { FC, useCallback, useEffect, useMemo, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Alert, LoadingPlaceholder, useStyles2, withErrorBoundary } from '@grafana/ui';\nimport { Receiver } from 'app/plugins/datasource/alertmanager/types';\n\nimport { useCleanup } from '../../../core/hooks/useCleanup';\n\nimport { AlertManagerPicker } from './components/AlertManagerPicker';\nimport { AlertingPageWrapper } from './components/AlertingPageWrapper';\nimport { AmRootRoute } from './components/amroutes/AmRootRoute';\nimport { AmSpecificRouting } from './components/amroutes/AmSpecificRouting';\nimport { MuteTimingsTable } from './components/amroutes/MuteTimingsTable';\nimport { useAlertManagerSourceName } from './hooks/useAlertManagerSourceName';\nimport { useUnifiedAlertingSelector } from './hooks/useUnifiedAlertingSelector';\nimport { fetchAlertManagerConfigAction, updateAlertManagerConfigAction } from './state/actions';\nimport { AmRouteReceiver, FormAmRoute } from './types/amroutes';\nimport { amRouteToFormAmRoute, formAmRouteToAmRoute, stringsToSelectableValues } from './utils/amroutes';\nimport { isVanillaPrometheusAlertManagerDataSource } from './utils/datasource';\nimport { initialAsyncRequestState } from './utils/redux';\n\nconst AmRoutes: FC = () => {\n  const dispatch = useDispatch();\n  const styles = useStyles2(getStyles);\n  const [isRootRouteEditMode, setIsRootRouteEditMode] = useState(false);\n  const [alertManagerSourceName, setAlertManagerSourceName] = useAlertManagerSourceName();\n\n  const readOnly = alertManagerSourceName ? isVanillaPrometheusAlertManagerDataSource(alertManagerSourceName) : true;\n\n  const amConfigs = useUnifiedAlertingSelector((state) => state.amConfigs);\n\n  const fetchConfig = useCallback(() => {\n    if (alertManagerSourceName) {\n      dispatch(fetchAlertManagerConfigAction(alertManagerSourceName));\n    }\n  }, [alertManagerSourceName, dispatch]);\n\n  useEffect(() => {\n    fetchConfig();\n  }, [fetchConfig]);\n\n  const {\n    result,\n    loading: resultLoading,\n    error: resultError,\n  } = (alertManagerSourceName && amConfigs[alertManagerSourceName]) || initialAsyncRequestState;\n\n  const config = result?.alertmanager_config;\n  const [rootRoute, id2ExistingRoute] = useMemo(() => amRouteToFormAmRoute(config?.route), [config?.route]);\n\n  const receivers = stringsToSelectableValues(\n    (config?.receivers ?? []).map((receiver: Receiver) => receiver.name)\n  ) as AmRouteReceiver[];\n\n  const enterRootRouteEditMode = () => {\n    setIsRootRouteEditMode(true);\n  };\n\n  const exitRootRouteEditMode = () => {\n    setIsRootRouteEditMode(false);\n  };\n\n  useCleanup((state) => state.unifiedAlerting.saveAMConfig);\n  const handleSave = (data: Partial<FormAmRoute>) => {\n    if (!result) {\n      return;\n    }\n\n    const newData = formAmRouteToAmRoute(\n      alertManagerSourceName,\n      {\n        ...rootRoute,\n        ...data,\n      },\n      id2ExistingRoute\n    );\n\n    if (isRootRouteEditMode) {\n      exitRootRouteEditMode();\n    }\n\n    dispatch(\n      updateAlertManagerConfigAction({\n        newConfig: {\n          ...result,\n          alertmanager_config: {\n            ...result.alertmanager_config,\n            route: newData,\n          },\n        },\n        oldConfig: result,\n        alertManagerSourceName: alertManagerSourceName!,\n        successMessage: 'Saved',\n        refetch: true,\n      })\n    );\n  };\n\n  if (!alertManagerSourceName) {\n    return <Redirect to=\"/alerting/routes\" />;\n  }\n\n  return (\n    <AlertingPageWrapper pageId=\"am-routes\">\n      <AlertManagerPicker current={alertManagerSourceName} onChange={setAlertManagerSourceName} />\n      {resultError && !resultLoading && (\n        <Alert severity=\"error\" title=\"Error loading Alertmanager config\">\n          {resultError.message || 'Unknown error.'}\n        </Alert>\n      )}\n      {resultLoading && <LoadingPlaceholder text=\"Loading Alertmanager config...\" />}\n      {result && !resultLoading && !resultError && (\n        <>\n          <AmRootRoute\n            alertManagerSourceName={alertManagerSourceName}\n            isEditMode={isRootRouteEditMode}\n            onSave={handleSave}\n            onEnterEditMode={enterRootRouteEditMode}\n            onExitEditMode={exitRootRouteEditMode}\n            receivers={receivers}\n            routes={rootRoute}\n          />\n          <div className={styles.break} />\n          <AmSpecificRouting\n            alertManagerSourceName={alertManagerSourceName}\n            onChange={handleSave}\n            readOnly={readOnly}\n            onRootRouteEdit={enterRootRouteEditMode}\n            receivers={receivers}\n            routes={rootRoute}\n          />\n          <div className={styles.break} />\n          <MuteTimingsTable alertManagerSourceName={alertManagerSourceName} />\n        </>\n      )}\n    </AlertingPageWrapper>\n  );\n};\n\nexport default withErrorBoundary(AmRoutes, { style: 'page' });\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  break: css`\n    width: 100%;\n    height: 0;\n    margin-bottom: ${theme.spacing(2)};\n  `,\n});\n","import React, { FC } from 'react';\nimport { useSelector } from 'react-redux';\n\nimport Page from 'app/core/components/Page/Page';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { StoreState } from 'app/types/store';\n\ninterface Props {\n  pageId: string;\n  isLoading?: boolean;\n}\n\nexport const AlertingPageWrapper: FC<Props> = ({ children, pageId, isLoading }) => {\n  const navModel = getNavModel(\n    useSelector((state: StoreState) => state.navIndex),\n    pageId\n  );\n\n  return (\n    <Page navModel={navModel}>\n      <Page.Contents isLoading={isLoading}>{children}</Page.Contents>\n    </Page>\n  );\n};\n","import React, { FC } from 'react';\n\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { AccessControlAction } from 'app/types';\n\ntype Props = {\n  actions: AccessControlAction[];\n  fallback?: boolean;\n};\n\nexport const Authorize: FC<Props> = ({ actions, children, fallback = true }) => {\n  if (actions.some((action) => contextSrv.hasAccess(action, fallback))) {\n    return <>{children}</>;\n  } else {\n    return null;\n  }\n};\n","import { css } from '@emotion/css';\nimport React, { FormEvent } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Stack } from '@grafana/experimental';\nimport { Label, Tooltip, Input, Icon, useStyles2 } from '@grafana/ui';\n\ninterface Props {\n  className?: string;\n  queryString?: string;\n  defaultQueryString?: string;\n  onFilterChange: (filterString: string) => void;\n}\n\nexport const MatcherFilter = ({ className, onFilterChange, defaultQueryString, queryString }: Props) => {\n  const styles = useStyles2(getStyles);\n  const handleSearchChange = (e: FormEvent<HTMLInputElement>) => {\n    const target = e.target as HTMLInputElement;\n    onFilterChange(target.value);\n  };\n  const searchIcon = <Icon name={'search'} />;\n  return (\n    <div className={className}>\n      <Label>\n        <Stack gap={0.5}>\n          <span>Search by label</span>\n          <Tooltip\n            content={\n              <div>\n                Filter alerts using label querying, ex:\n                <pre>{`{severity=\"critical\", instance=~\"cluster-us-.+\"}`}</pre>\n              </div>\n            }\n          >\n            <Icon className={styles.icon} name=\"info-circle\" size=\"sm\" />\n          </Tooltip>\n        </Stack>\n      </Label>\n      <Input\n        placeholder=\"Search\"\n        defaultValue={defaultQueryString}\n        value={queryString}\n        onChange={handleSearchChange}\n        data-testid=\"search-query-input\"\n        prefix={searchIcon}\n        className={styles.inputWidth}\n      />\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  icon: css`\n    margin-right: ${theme.spacing(0.5)};\n  `,\n  inputWidth: css`\n    width: 340px;\n    flex-grow: 0;\n  `,\n});\n","import { css } from '@emotion/css';\nimport React, { FC } from 'react';\n\nimport { TagList, useStyles2 } from '@grafana/ui';\nimport { Matcher } from 'app/plugins/datasource/alertmanager/types';\n\nimport { matcherToOperator } from '../../utils/alertmanager';\n\ntype MatchersProps = { matchers: Matcher[] };\n\nexport const Matchers: FC<MatchersProps> = ({ matchers }) => {\n  const styles = useStyles2(getStyles);\n  return (\n    <div>\n      <TagList\n        className={styles.tags}\n        tags={matchers.map((matcher) => `${matcher.name}${matcherToOperator(matcher)}${matcher.value}`)}\n      />\n    </div>\n  );\n};\n\nconst getStyles = () => ({\n  tags: css`\n    justify-content: flex-start;\n  `,\n});\n","import { useCallback } from 'react';\n\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport store from 'app/core/store';\n\nimport { ALERTMANAGER_NAME_LOCAL_STORAGE_KEY, ALERTMANAGER_NAME_QUERY_KEY } from '../utils/constants';\nimport { getAlertManagerDataSources, GRAFANA_RULES_SOURCE_NAME } from '../utils/datasource';\n\nfunction isAlertManagerSource(alertManagerSourceName: string): boolean {\n  return (\n    alertManagerSourceName === GRAFANA_RULES_SOURCE_NAME ||\n    !!getAlertManagerDataSources().find((ds) => ds.name === alertManagerSourceName)\n  );\n}\n\n/* this will return am name either from query params or from local storage or a default (grafana).\n *\n * fallbackUrl - if provided, will redirect to this url if alertmanager provided in query no longer\n */\nexport function useAlertManagerSourceName(): [string | undefined, (alertManagerSourceName: string) => void] {\n  const [queryParams, updateQueryParams] = useQueryParams();\n\n  const update = useCallback(\n    (alertManagerSourceName: string) => {\n      if (!isAlertManagerSource(alertManagerSourceName)) {\n        return;\n      }\n      if (alertManagerSourceName === GRAFANA_RULES_SOURCE_NAME) {\n        store.delete(ALERTMANAGER_NAME_LOCAL_STORAGE_KEY);\n        updateQueryParams({ [ALERTMANAGER_NAME_QUERY_KEY]: null });\n      } else {\n        store.set(ALERTMANAGER_NAME_LOCAL_STORAGE_KEY, alertManagerSourceName);\n        updateQueryParams({ [ALERTMANAGER_NAME_QUERY_KEY]: alertManagerSourceName });\n      }\n    },\n    [updateQueryParams]\n  );\n\n  const querySource = queryParams[ALERTMANAGER_NAME_QUERY_KEY];\n\n  if (querySource && typeof querySource === 'string') {\n    if (isAlertManagerSource(querySource)) {\n      return [querySource, update];\n    } else {\n      // non existing alertmanager\n      return [undefined, update];\n    }\n  }\n  const storeSource = store.get(ALERTMANAGER_NAME_LOCAL_STORAGE_KEY);\n  if (storeSource && typeof storeSource === 'string' && isAlertManagerSource(storeSource)) {\n    update(storeSource);\n    return [storeSource, update];\n  }\n\n  return [GRAFANA_RULES_SOURCE_NAME, update];\n}\n","import { useCallback, useMemo } from 'react';\nimport { useLocation } from 'react-router-dom';\n\nimport { locationService } from '@grafana/runtime';\n\nexport function useURLSearchParams(): [\n  URLSearchParams,\n  (searchValues: Record<string, string | string[] | undefined>, replace?: boolean) => void\n] {\n  const { search } = useLocation();\n  const queryParams = useMemo(() => new URLSearchParams(search), [search]);\n\n  const update = useCallback((searchValues: Record<string, string | string[] | undefined>, replace?: boolean) => {\n    locationService.partial(searchValues, replace);\n  }, []);\n\n  return [queryParams, update];\n}\n"],"names":["useCleanup","stateSelector","dispatch","useDispatch","selectorRef","useRef","current","useEffect","cleanUpAction","defaultValueAndType","timeOptions","matchersToArrayFieldMatchers","matchers","isRegex","Object","entries","reduce","acc","name","value","operator","MatcherOperator","intervalToValueAndType","strValue","valueType","parseInterval","undefined","timeOption","opt","String","selectableValueToString","selectableValue","emptyArrayFieldMatcher","emptyRoute","id","groupBy","object_matchers","routes","continue","receiver","groupWaitValue","groupWaitValueType","groupIntervalValue","groupIntervalValueType","repeatIntervalValue","repeatIntervalValueType","muteTimeIntervals","amRouteToFormAmRoute","route","keys","length","group_wait","group_interval","repeat_interval","Math","random","id2route","formRoutes","forEach","subRoute","subFormRoute","subId2Route","push","assign","map","matcher","matcherToMatcherField","parseMatcher","match","match_re","group_by","mute_time_intervals","formAmRouteToAmRoute","alertManagerSourceName","formAmRoute","id2ExistingRoute","existing","amRoute","GRAFANA_RULES_SOURCE_NAME","omitBy","isUndefined","stringToSelectableValue","str","label","stringsToSelectableValues","arr","mapSelectValueToString","mapMultiSelectValueToStrings","selectableValues","optionalPositiveInteger","test","getFormStyles","theme","container","css","spacing","input","timingContainer","smallInput","linkText","collapse","colors","text","primary","AmRootRouteForm","onCancel","onSave","receivers","styles","useStyles2","isTimingOptionsExpanded","setIsTimingOptionsExpanded","useState","groupByOptions","setGroupByOptions","Form","defaultValues","onSubmit","control","errors","setValue","Field","invalid","error","message","className","InputControl","render","field","onChange","Select","options","menuShouldPortal","rules","required","Link","href","makeAMLink","description","MultiSelect","allowCustomValue","onCreateOption","opts","Collapse","collapsible","isOpen","onToggle","cx","fieldState","Input","placeholder","validate","menuPlacement","Button","type","onClick","variant","fill","getGridStyles","typography","fontSize","breakpoints","down","titleCell","valueCell","secondary","AmRootRouteRead","join","groupWait","groupInterval","repeatInterval","AmRootRoute","isEditMode","onEnterEditMode","onExitEditMode","getStyles","permissions","getNotificationsPermissions","isReadOnly","isVanillaPrometheusAlertManagerDataSource","titleContainer","title","Authorize","actions","update","icon","size","background","EmptyArea","children","useStyles","bg2","textSemiWeak","xl","EmptyAreaWithCTA","buttonIcon","buttonLabel","buttonSize","buttonVariant","onButtonClick","showButton","commonProps","button","LinkButton","md","sm","AmRoutesExpandedForm","formStyles","overrideGrouping","setOverrideGrouping","overrideTimings","setOverrideTimings","muteTimingOptions","useAlertManagerSourceName","amConfigs","useUnifiedAlertingSelector","state","useMemo","result","initialAsyncRequestState","config","alertmanager_config","time_intervals","interval","timeIntervalToString","useMuteTimingOptions","register","FieldArray","fields","append","remove","VerticalGroup","justify","Badge","color","noMatchersWarning","matchersContainer","index","localPath","HorizontalGroup","align","defaultValue","matchersOperator","matcherFieldOptions","IconButton","removeButton","tooltip","addMatcherBtn","Switch","buttonGroup","commonSpacing","nestedPolicies","MuteTimingsTable","muteTimingNames","hideActions","muteTimingName","setMuteTimingName","items","filter","includes","mute","data","columns","userHasEditPermissions","contextSrv","userHasDeletePermissions","delete","showActions","renderCell","renderTimeIntervals","muteName","useColumns","create","addMuteButton","DynamicTable","cols","ConfirmModal","body","confirmText","onConfirm","deleteMuteTimingAction","onDismiss","timeIntervals","times","weekdays","days_of_month","months","years","timeString","getTimeString","weekdayString","getWeekdayString","daysString","getDaysOfMonthString","monthsString","getMonthsString","yearsString","getYearsString","JSON","stringify","AmRoutesExpandedRead","readOnly","gridStyles","subroutes","setSubroutes","isAddMode","setIsAddMode","AmRoutesTable","onCancelAdd","newSubroutes","pop","newRoutes","addNestedRoutingBtn","updatedRoute","editIndex","findIndex","filters","editMode","setEditMode","showDeleteModal","setShowDeleteModal","expandedId","setExpandedId","canEditRoutes","canDeleteRoutes","expandItem","useCallback","item","collapseItem","Matchers","matcherFieldToMatcher","renderExpandedContent","routeToRemove","deleteRoute","filteredRoutes","labelMatcherQuery","contactPointQuery","parseMatchers","routeMatchers","intersectionWith","isEqual","toLowerCase","getFilteredRoutes","queryString","contactPoint","dynamicTableRoutes","prepareItems","idCreator","isExpandable","testIdGenerator","onCollapse","onExpand","isExpanded","AmSpecificRouting","onRootRouteEdit","actualRoutes","setActualRoutes","canCreateNotifications","searchParams","setSearchParams","useURLSearchParams","getNotificationPoliciesFilters","setFilters","useDebounce","clearFilters","addNewRoute","searchContainer","MatcherFilter","onFilterChange","currentFilters","filterInput","Label","currentTarget","prefix","Icon","clearFilterBtn","addMatcherBtnRow","border","strong","withErrorBoundary","isRootRouteEditMode","setIsRootRouteEditMode","setAlertManagerSourceName","fetchConfig","fetchAlertManagerConfigAction","loading","resultLoading","resultError","rootRoute","enterRootRouteEditMode","exitRootRouteEditMode","unifiedAlerting","saveAMConfig","handleSave","newData","updateAlertManagerConfigAction","newConfig","oldConfig","successMessage","refetch","AlertingPageWrapper","pageId","AlertManagerPicker","Alert","severity","LoadingPlaceholder","break","to","style","isLoading","navModel","getNavModel","useSelector","navIndex","fallback","some","action","defaultQueryString","searchIcon","Stack","gap","Tooltip","content","e","target","inputWidth","TagList","tags","matcherToOperator","isAlertManagerSource","getAlertManagerDataSources","find","ds","queryParams","updateQueryParams","useQueryParams","store","ALERTMANAGER_NAME_LOCAL_STORAGE_KEY","ALERTMANAGER_NAME_QUERY_KEY","querySource","storeSource","search","useLocation","URLSearchParams","searchValues","replace","locationService"],"sourceRoot":""}