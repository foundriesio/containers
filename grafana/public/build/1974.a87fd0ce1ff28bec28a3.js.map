{"version":3,"file":"1974.a87fd0ce1ff28bec28a3.js","mappings":"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","sources":["webpack://grafana/./public/app/features/dashboard/dashgrid/LazyLoader.tsx","webpack://grafana/./public/app/plugins/panel/timeseries/overrides/colorSeriesConfigFactory.ts","webpack://grafana/./public/app/routes/utils.ts","webpack://grafana/./public/app/features/dashboard/dashgrid/PanelHeader/PanelHeaderLoadingIndicator.tsx","webpack://grafana/./public/app/features/dashboard/dashgrid/PanelHeader/PanelHeaderMenuTrigger.tsx","webpack://grafana/./public/app/features/dashboard/dashgrid/PanelHeader/PanelHeaderMenu.tsx","webpack://grafana/./public/app/features/dashboard/dashgrid/PanelHeader/PanelHeaderMenuProvider.tsx","webpack://grafana/./public/app/features/dashboard/utils/getPanelMenu.ts","webpack://grafana/./public/app/features/dashboard/dashgrid/PanelHeader/PanelHeaderMenuWrapper.tsx","webpack://grafana/./public/app/features/dashboard/dashgrid/PanelHeader/PanelHeaderNotice.tsx","webpack://grafana/./public/app/features/dashboard/dashgrid/PanelHeader/PanelHeaderNotices.tsx","webpack://grafana/./public/app/features/dashboard/dashgrid/PanelHeader/PanelHeader.tsx","webpack://grafana/./public/app/features/dashboard/dashgrid/PanelChrome.tsx","webpack://grafana/./public/app/features/dashboard/dashgrid/PanelChromeAngular.tsx","webpack://grafana/./public/app/features/dashboard/dashgrid/DashboardPanel.tsx","webpack://grafana/./public/app/features/dashboard/dashgrid/PanelHeader/PanelHeaderCorner.tsx","webpack://grafana/./public/app/features/dashboard/dashgrid/SeriesVisibilityConfigFactory.ts","webpack://grafana/./public/app/features/dashboard/state/initDashboard.ts","webpack://grafana/./public/app/features/dashboard/state/analyticsProcessor.ts","webpack://grafana/./public/app/features/dashboard/utils/loadSnapshotData.ts","webpack://grafana/./public/app/features/inspector/types.ts","webpack://grafana/./public/app/features/panel/panellinks/linkSuppliers.ts","webpack://grafana/./public/app/features/panel/state/selectors.ts"],"sourcesContent":["import React, { useRef, useState } from 'react';\nimport { useEffectOnce } from 'react-use';\n\nimport { useUniqueId } from 'app/plugins/datasource/influxdb/components/useUniqueId';\n\nexport interface Props {\n  children: React.ReactNode | (({ isInView }: { isInView: boolean }) => React.ReactNode);\n  width?: number;\n  height?: number;\n  onLoad?: () => void;\n  onChange?: (isInView: boolean) => void;\n}\n\nexport function LazyLoader({ children, width, height, onLoad, onChange }: Props) {\n  const id = useUniqueId();\n  const [loaded, setLoaded] = useState(false);\n  const [isInView, setIsInView] = useState(false);\n  const wrapperRef = useRef<HTMLDivElement>(null);\n\n  useEffectOnce(() => {\n    LazyLoader.addCallback(id, (entry) => {\n      if (!loaded && entry.isIntersecting) {\n        setLoaded(true);\n        onLoad?.();\n      }\n\n      setIsInView(entry.isIntersecting);\n      onChange?.(entry.isIntersecting);\n    });\n\n    const wrapperEl = wrapperRef.current;\n\n    if (wrapperEl) {\n      LazyLoader.observer.observe(wrapperEl);\n    }\n\n    return () => {\n      delete LazyLoader.callbacks[id];\n      wrapperEl && LazyLoader.observer.unobserve(wrapperEl);\n      if (Object.keys(LazyLoader.callbacks).length === 0) {\n        LazyLoader.observer.disconnect();\n      }\n    };\n  });\n\n  return (\n    <div id={id} ref={wrapperRef} style={{ width, height }}>\n      {loaded && (typeof children === 'function' ? children({ isInView }) : children)}\n    </div>\n  );\n}\n\nLazyLoader.callbacks = {} as Record<string, (e: IntersectionObserverEntry) => void>;\nLazyLoader.addCallback = (id: string, c: (e: IntersectionObserverEntry) => void) => (LazyLoader.callbacks[id] = c);\nLazyLoader.observer = new IntersectionObserver(\n  (entries) => {\n    for (const entry of entries) {\n      LazyLoader.callbacks[entry.target.id](entry);\n    }\n  },\n  { rootMargin: '100px' }\n);\n","import {\n  ConfigOverrideRule,\n  DynamicConfigValue,\n  FieldColorModeId,\n  FieldConfigSource,\n  FieldMatcherID,\n} from '@grafana/data';\n\nexport const changeSeriesColorConfigFactory = (\n  label: string,\n  color: string,\n  fieldConfig: FieldConfigSource\n): FieldConfigSource => {\n  const { overrides } = fieldConfig;\n  const currentIndex = fieldConfig.overrides.findIndex((override) => {\n    return override.matcher.id === FieldMatcherID.byName && override.matcher.options === label;\n  });\n\n  if (currentIndex < 0) {\n    return {\n      ...fieldConfig,\n      overrides: [...fieldConfig.overrides, createOverride(label, color)],\n    };\n  }\n\n  const overridesCopy = Array.from(overrides);\n  const existing = overridesCopy[currentIndex];\n  const propertyIndex = existing.properties.findIndex((p) => p.id === 'color');\n\n  if (propertyIndex < 0) {\n    overridesCopy[currentIndex] = {\n      ...existing,\n      properties: [...existing.properties, createProperty(color)],\n    };\n\n    return {\n      ...fieldConfig,\n      overrides: overridesCopy,\n    };\n  }\n\n  const propertiesCopy = Array.from(existing.properties);\n  propertiesCopy[propertyIndex] = createProperty(color);\n\n  overridesCopy[currentIndex] = {\n    ...existing,\n    properties: propertiesCopy,\n  };\n\n  return {\n    ...fieldConfig,\n    overrides: overridesCopy,\n  };\n};\n\nconst createOverride = (label: string, color: string): ConfigOverrideRule => {\n  return {\n    matcher: {\n      id: FieldMatcherID.byName,\n      options: label,\n    },\n    properties: [createProperty(color)],\n  };\n};\n\nconst createProperty = (color: string): DynamicConfigValue => {\n  return {\n    id: 'color',\n    value: {\n      mode: FieldColorModeId.Fixed,\n      fixedColor: color,\n    },\n  };\n};\n","export function isSoloRoute(path: string): boolean {\n  return /(d-solo|dashboard-solo)/.test(path?.toLowerCase());\n}\n","import { css } from '@emotion/css';\nimport React, { FC } from 'react';\n\nimport { GrafanaTheme, LoadingState } from '@grafana/data';\nimport { Icon, Tooltip, useStyles } from '@grafana/ui';\n\ninterface Props {\n  state: LoadingState;\n  onClick: () => void;\n}\n\nexport const PanelHeaderLoadingIndicator: FC<Props> = ({ state, onClick }) => {\n  const styles = useStyles(getStyles);\n\n  if (state === LoadingState.Loading) {\n    return (\n      <div className=\"panel-loading\" onClick={onClick}>\n        <Tooltip content=\"Cancel query\">\n          <Icon className=\"panel-loading__spinner spin-clockwise\" name=\"sync\" />\n        </Tooltip>\n      </div>\n    );\n  }\n\n  if (state === LoadingState.Streaming) {\n    return (\n      <div className=\"panel-loading\" onClick={onClick}>\n        <div title=\"Streaming (click to stop)\" className={styles.streamIndicator} />\n      </div>\n    );\n  }\n\n  return null;\n};\n\nfunction getStyles(theme: GrafanaTheme) {\n  return {\n    streamIndicator: css`\n      width: 10px;\n      height: 10px;\n      background: ${theme.colors.textFaint};\n      box-shadow: 0 0 2px ${theme.colors.textFaint};\n      border-radius: 50%;\n      position: relative;\n      top: 6px;\n      right: 1px;\n    `,\n  };\n}\n","import React, { FC, HTMLAttributes, MouseEvent, ReactElement, useCallback, useState } from 'react';\n\nimport { CartesianCoords2D } from '@grafana/data';\n\ninterface PanelHeaderMenuTriggerApi {\n  panelMenuOpen: boolean;\n  closeMenu: () => void;\n}\n\ninterface Props extends HTMLAttributes<HTMLDivElement> {\n  children: (props: PanelHeaderMenuTriggerApi) => ReactElement;\n}\n\nexport const PanelHeaderMenuTrigger: FC<Props> = ({ children, ...divProps }) => {\n  const [clickCoordinates, setClickCoordinates] = useState<CartesianCoords2D>({ x: 0, y: 0 });\n  const [panelMenuOpen, setPanelMenuOpen] = useState<boolean>(false);\n  const onMenuToggle = useCallback(\n    (event: MouseEvent<HTMLDivElement>) => {\n      if (!isClick(clickCoordinates, eventToClickCoordinates(event))) {\n        return;\n      }\n\n      event.stopPropagation();\n\n      setPanelMenuOpen(!panelMenuOpen);\n    },\n    [clickCoordinates, panelMenuOpen, setPanelMenuOpen]\n  );\n  const onMouseDown = useCallback(\n    (event: MouseEvent<HTMLDivElement>) => {\n      setClickCoordinates(eventToClickCoordinates(event));\n    },\n    [setClickCoordinates]\n  );\n\n  return (\n    <header {...divProps} className=\"panel-title-container\" onClick={onMenuToggle} onMouseDown={onMouseDown}>\n      {children({ panelMenuOpen, closeMenu: () => setPanelMenuOpen(false) })}\n    </header>\n  );\n};\n\nfunction isClick(current: CartesianCoords2D, clicked: CartesianCoords2D): boolean {\n  return clicked.x === current.x && clicked.y === current.y;\n}\n\nfunction eventToClickCoordinates(event: MouseEvent<HTMLDivElement>): CartesianCoords2D {\n  return {\n    x: Math.floor(event.clientX),\n    y: Math.floor(event.clientY),\n  };\n}\n","import React, { PureComponent } from 'react';\n\nimport { PanelMenuItem } from '@grafana/data';\n\nimport { PanelHeaderMenuItem } from './PanelHeaderMenuItem';\n\nexport interface Props {\n  items: PanelMenuItem[];\n}\n\nexport class PanelHeaderMenu extends PureComponent<Props> {\n  renderItems = (menu: PanelMenuItem[], isSubMenu = false) => {\n    return (\n      <ul className=\"dropdown-menu dropdown-menu--menu panel-menu\" role={isSubMenu ? '' : 'menu'}>\n        {menu.map((menuItem, idx: number) => {\n          return (\n            <PanelHeaderMenuItem\n              key={`${menuItem.text}${idx}`}\n              type={menuItem.type}\n              text={menuItem.text}\n              iconClassName={menuItem.iconClassName}\n              onClick={menuItem.onClick}\n              shortcut={menuItem.shortcut}\n            >\n              {menuItem.subMenu && this.renderItems(menuItem.subMenu, true)}\n            </PanelHeaderMenuItem>\n          );\n        })}\n      </ul>\n    );\n  };\n\n  render() {\n    return <div className=\"panel-menu-container dropdown open\">{this.renderItems(this.props.items)}</div>;\n  }\n}\n","import { FC, ReactElement, useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\n\nimport { PanelMenuItem } from '@grafana/data';\nimport { getPanelStateForModel } from 'app/features/panel/state/selectors';\n\nimport { StoreState } from '../../../../types';\nimport { DashboardModel, PanelModel } from '../../state';\nimport { getPanelMenu } from '../../utils/getPanelMenu';\n\ninterface PanelHeaderMenuProviderApi {\n  items: PanelMenuItem[];\n}\n\ninterface Props {\n  panel: PanelModel;\n  dashboard: DashboardModel;\n  children: (props: PanelHeaderMenuProviderApi) => ReactElement;\n}\n\nexport const PanelHeaderMenuProvider: FC<Props> = ({ panel, dashboard, children }) => {\n  const [items, setItems] = useState<PanelMenuItem[]>([]);\n  const angularComponent = useSelector((state: StoreState) => getPanelStateForModel(state, panel)?.angularComponent);\n\n  useEffect(() => {\n    setItems(getPanelMenu(dashboard, panel, angularComponent));\n  }, [dashboard, panel, angularComponent, setItems]);\n\n  return children({ items });\n};\n","import { PanelMenuItem } from '@grafana/data';\nimport { AngularComponent, getDataSourceSrv, locationService } from '@grafana/runtime';\nimport { PanelCtrl } from 'app/angular/panel/panel_ctrl';\nimport config from 'app/core/config';\nimport { DashboardModel } from 'app/features/dashboard/state/DashboardModel';\nimport { PanelModel } from 'app/features/dashboard/state/PanelModel';\nimport {\n  addLibraryPanel,\n  copyPanel,\n  duplicatePanel,\n  removePanel,\n  sharePanel,\n  unlinkLibraryPanel,\n} from 'app/features/dashboard/utils/panel';\nimport { isPanelModelLibraryPanel } from 'app/features/library-panels/guard';\nimport { store } from 'app/store/store';\n\nimport { contextSrv } from '../../../core/services/context_srv';\nimport { getExploreUrl } from '../../../core/utils/explore';\nimport { navigateToExplore } from '../../explore/state/main';\nimport { getTimeSrv } from '../services/TimeSrv';\n\nexport function getPanelMenu(\n  dashboard: DashboardModel,\n  panel: PanelModel,\n  angularComponent?: AngularComponent | null\n): PanelMenuItem[] {\n  const onViewPanel = (event: React.MouseEvent<any>) => {\n    event.preventDefault();\n    locationService.partial({\n      viewPanel: panel.id,\n    });\n  };\n\n  const onEditPanel = (event: React.MouseEvent<any>) => {\n    event.preventDefault();\n    locationService.partial({\n      editPanel: panel.id,\n    });\n  };\n\n  const onSharePanel = (event: React.MouseEvent<any>) => {\n    event.preventDefault();\n    sharePanel(dashboard, panel);\n  };\n\n  const onAddLibraryPanel = (event: React.MouseEvent<any>) => {\n    event.preventDefault();\n    addLibraryPanel(dashboard, panel);\n  };\n\n  const onUnlinkLibraryPanel = (event: React.MouseEvent<any>) => {\n    event.preventDefault();\n    unlinkLibraryPanel(panel);\n  };\n\n  const onInspectPanel = (tab?: string) => {\n    locationService.partial({\n      inspect: panel.id,\n      inspectTab: tab,\n    });\n  };\n\n  const onMore = (event: React.MouseEvent<any>) => {\n    event.preventDefault();\n  };\n\n  const onDuplicatePanel = (event: React.MouseEvent<any>) => {\n    event.preventDefault();\n    duplicatePanel(dashboard, panel);\n  };\n\n  const onCopyPanel = (event: React.MouseEvent<any>) => {\n    event.preventDefault();\n    copyPanel(panel);\n  };\n\n  const onRemovePanel = (event: React.MouseEvent<any>) => {\n    event.preventDefault();\n    removePanel(dashboard, panel, true);\n  };\n\n  const onNavigateToExplore = (event: React.MouseEvent<any>) => {\n    event.preventDefault();\n    const openInNewWindow =\n      event.ctrlKey || event.metaKey ? (url: string) => window.open(`${config.appSubUrl}${url}`) : undefined;\n    store.dispatch(navigateToExplore(panel, { getDataSourceSrv, getTimeSrv, getExploreUrl, openInNewWindow }) as any);\n  };\n\n  const menu: PanelMenuItem[] = [];\n\n  if (!panel.isEditing) {\n    menu.push({\n      text: 'View',\n      iconClassName: 'eye',\n      onClick: onViewPanel,\n      shortcut: 'v',\n    });\n  }\n\n  if (dashboard.canEditPanel(panel) && !panel.isEditing) {\n    menu.push({\n      text: 'Edit',\n      iconClassName: 'edit',\n      onClick: onEditPanel,\n      shortcut: 'e',\n    });\n  }\n\n  menu.push({\n    text: 'Share',\n    iconClassName: 'share-alt',\n    onClick: onSharePanel,\n    shortcut: 'p s',\n  });\n\n  if (contextSrv.hasAccessToExplore() && !(panel.plugin && panel.plugin.meta.skipDataQuery)) {\n    menu.push({\n      text: 'Explore',\n      iconClassName: 'compass',\n      shortcut: 'x',\n      onClick: onNavigateToExplore,\n    });\n  }\n\n  const inspectMenu: PanelMenuItem[] = [];\n\n  // Only show these inspect actions for data plugins\n  if (panel.plugin && !panel.plugin.meta.skipDataQuery) {\n    inspectMenu.push({\n      text: 'Data',\n      onClick: (e: React.MouseEvent<any>) => onInspectPanel('data'),\n    });\n\n    if (dashboard.meta.canEdit) {\n      inspectMenu.push({\n        text: 'Query',\n        onClick: (e: React.MouseEvent<any>) => onInspectPanel('query'),\n      });\n    }\n  }\n\n  inspectMenu.push({\n    text: 'Panel JSON',\n    onClick: (e: React.MouseEvent<any>) => onInspectPanel('json'),\n  });\n\n  menu.push({\n    type: 'submenu',\n    text: 'Inspect',\n    iconClassName: 'info-circle',\n    onClick: (e: React.MouseEvent<any>) => onInspectPanel(),\n    shortcut: 'i',\n    subMenu: inspectMenu,\n  });\n\n  const subMenu: PanelMenuItem[] = [];\n\n  if (dashboard.canEditPanel(panel) && !(panel.isViewing || panel.isEditing)) {\n    subMenu.push({\n      text: 'Duplicate',\n      onClick: onDuplicatePanel,\n      shortcut: 'p d',\n    });\n\n    subMenu.push({\n      text: 'Copy',\n      onClick: onCopyPanel,\n    });\n\n    if (isPanelModelLibraryPanel(panel)) {\n      subMenu.push({\n        text: 'Unlink library panel',\n        onClick: onUnlinkLibraryPanel,\n      });\n    } else {\n      subMenu.push({\n        text: 'Create library panel',\n        onClick: onAddLibraryPanel,\n      });\n    }\n  }\n\n  // add old angular panel options\n  if (angularComponent) {\n    const scope = angularComponent.getScope();\n    const panelCtrl: PanelCtrl = scope.$$childHead.ctrl;\n    const angularMenuItems = panelCtrl.getExtendedMenu();\n\n    for (const item of angularMenuItems) {\n      const reactItem: PanelMenuItem = {\n        text: item.text,\n        href: item.href,\n        shortcut: item.shortcut,\n      };\n\n      if (item.click) {\n        reactItem.onClick = () => {\n          scope.$eval(item.click, { ctrl: panelCtrl });\n        };\n      }\n\n      subMenu.push(reactItem);\n    }\n  }\n\n  if (!panel.isEditing && subMenu.length) {\n    menu.push({\n      type: 'submenu',\n      text: 'More...',\n      iconClassName: 'cube',\n      subMenu,\n      onClick: onMore,\n    });\n  }\n\n  if (dashboard.canEditPanel(panel) && !panel.isEditing && !panel.isViewing) {\n    menu.push({ type: 'divider', text: '' });\n\n    menu.push({\n      text: 'Remove',\n      iconClassName: 'trash-alt',\n      onClick: onRemovePanel,\n      shortcut: 'p r',\n    });\n  }\n\n  return menu;\n}\n","import React, { FC } from 'react';\n\nimport { ClickOutsideWrapper } from '@grafana/ui';\n\nimport { DashboardModel, PanelModel } from '../../state';\n\nimport { PanelHeaderMenu } from './PanelHeaderMenu';\nimport { PanelHeaderMenuProvider } from './PanelHeaderMenuProvider';\n\ninterface Props {\n  panel: PanelModel;\n  dashboard: DashboardModel;\n  show: boolean;\n  onClose: () => void;\n}\n\nexport const PanelHeaderMenuWrapper: FC<Props> = ({ show, onClose, panel, dashboard }) => {\n  if (!show) {\n    return null;\n  }\n\n  return (\n    <ClickOutsideWrapper onClick={onClose} parent={document}>\n      <PanelHeaderMenuProvider panel={panel} dashboard={dashboard}>\n        {({ items }) => {\n          return <PanelHeaderMenu items={items} />;\n        }}\n      </PanelHeaderMenuProvider>\n    </ClickOutsideWrapper>\n  );\n};\n","import React, { FC } from 'react';\n\nimport { QueryResultMetaNotice } from '@grafana/data';\nimport { Icon, Tooltip } from '@grafana/ui';\n\ninterface Props {\n  notice: QueryResultMetaNotice;\n  onClick: (e: React.SyntheticEvent, tab: string) => void;\n}\n\nexport const PanelHeaderNotice: FC<Props> = ({ notice, onClick }) => {\n  const iconName =\n    notice.severity === 'error' || notice.severity === 'warning' ? 'exclamation-triangle' : 'info-circle';\n\n  return (\n    <Tooltip content={notice.text} key={notice.severity}>\n      {notice.inspect ? (\n        <div className=\"panel-info-notice pointer\" onClick={(e) => onClick(e, notice.inspect!)}>\n          <Icon name={iconName} style={{ marginRight: '8px' }} />\n        </div>\n      ) : (\n        <a className=\"panel-info-notice\" href={notice.link} target=\"_blank\" rel=\"noreferrer\">\n          <Icon name={iconName} style={{ marginRight: '8px' }} />\n        </a>\n      )}\n    </Tooltip>\n  );\n};\n","import React, { FC, useCallback } from 'react';\n\nimport { DataFrame, QueryResultMetaNotice } from '@grafana/data';\nimport { locationService } from '@grafana/runtime';\n\nimport { PanelHeaderNotice } from './PanelHeaderNotice';\n\ninterface Props {\n  panelId: number;\n  frames: DataFrame[];\n}\n\nexport const PanelHeaderNotices: FC<Props> = ({ frames, panelId }) => {\n  const openInspect = useCallback(\n    (e: React.SyntheticEvent, tab: string) => {\n      e.stopPropagation();\n      locationService.partial({ inspect: panelId, inspectTab: tab });\n    },\n    [panelId]\n  );\n\n  // dedupe on severity\n  const notices: Record<string, QueryResultMetaNotice> = {};\n  for (const frame of frames) {\n    if (!frame.meta || !frame.meta.notices) {\n      continue;\n    }\n\n    for (const notice of frame.meta.notices) {\n      notices[notice.severity] = notice;\n    }\n  }\n\n  return (\n    <>\n      {Object.values(notices).map((notice) => (\n        <PanelHeaderNotice notice={notice} onClick={openInspect} key={notice.severity} />\n      ))}\n    </>\n  );\n};\n","import { css, cx } from '@emotion/css';\nimport React, { FC } from 'react';\n\nimport { DataLink, GrafanaTheme2, PanelData } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { Icon, useStyles2 } from '@grafana/ui';\nimport { DashboardModel } from 'app/features/dashboard/state/DashboardModel';\nimport { PanelModel } from 'app/features/dashboard/state/PanelModel';\nimport { getPanelLinksSupplier } from 'app/features/panel/panellinks/linkSuppliers';\n\nimport PanelHeaderCorner from './PanelHeaderCorner';\nimport { PanelHeaderLoadingIndicator } from './PanelHeaderLoadingIndicator';\nimport { PanelHeaderMenuTrigger } from './PanelHeaderMenuTrigger';\nimport { PanelHeaderMenuWrapper } from './PanelHeaderMenuWrapper';\nimport { PanelHeaderNotices } from './PanelHeaderNotices';\n\nexport interface Props {\n  panel: PanelModel;\n  dashboard: DashboardModel;\n  title?: string;\n  description?: string;\n  links?: DataLink[];\n  error?: string;\n  alertState?: string;\n  isViewing: boolean;\n  isEditing: boolean;\n  data: PanelData;\n}\n\nexport const PanelHeader: FC<Props> = ({ panel, error, isViewing, isEditing, data, alertState, dashboard }) => {\n  const onCancelQuery = () => panel.getQueryRunner().cancelQuery();\n  const title = panel.getDisplayTitle();\n  const className = cx('panel-header', !(isViewing || isEditing) ? 'grid-drag-handle' : '');\n  const styles = useStyles2(panelStyles);\n\n  return (\n    <>\n      <PanelHeaderLoadingIndicator state={data.state} onClick={onCancelQuery} />\n      <PanelHeaderCorner\n        panel={panel}\n        title={panel.title}\n        description={panel.description}\n        scopedVars={panel.scopedVars}\n        links={getPanelLinksSupplier(panel)}\n        error={error}\n      />\n      <div className={className}>\n        <PanelHeaderMenuTrigger data-testid={selectors.components.Panels.Panel.title(title)}>\n          {({ closeMenu, panelMenuOpen }) => {\n            return (\n              <div className=\"panel-title\">\n                <PanelHeaderNotices frames={data.series} panelId={panel.id} />\n                {alertState ? (\n                  <Icon\n                    name={alertState === 'alerting' ? 'heart-break' : 'heart'}\n                    className=\"icon-gf panel-alert-icon\"\n                    style={{ marginRight: '4px' }}\n                    size=\"sm\"\n                  />\n                ) : null}\n                <h2 className={styles.titleText}>{title}</h2>\n                <Icon name=\"angle-down\" className=\"panel-menu-toggle\" />\n                <PanelHeaderMenuWrapper panel={panel} dashboard={dashboard} show={panelMenuOpen} onClose={closeMenu} />\n                {data.request && data.request.timeInfo && (\n                  <span className=\"panel-time-info\">\n                    <Icon name=\"clock-nine\" size=\"sm\" /> {data.request.timeInfo}\n                  </span>\n                )}\n              </div>\n            );\n          }}\n        </PanelHeaderMenuTrigger>\n      </div>\n    </>\n  );\n};\n\nconst panelStyles = (theme: GrafanaTheme2) => {\n  return {\n    titleText: css`\n      text-overflow: ellipsis;\n      overflow: hidden;\n      white-space: nowrap;\n      max-width: calc(100% - 38px);\n      cursor: pointer;\n      font-weight: ${theme.typography.fontWeightMedium};\n      font-size: ${theme.typography.body.fontSize};\n      margin: 0;\n\n      &:hover {\n        color: ${theme.colors.text.primary};\n      }\n      .panel-has-alert & {\n        max-width: calc(100% - 54px);\n      }\n    `,\n  };\n};\n","import classNames from 'classnames';\nimport React, { PureComponent } from 'react';\nimport { Subscription } from 'rxjs';\n\nimport {\n  AbsoluteTimeRange,\n  AnnotationChangeEvent,\n  AnnotationEventUIModel,\n  CoreApp,\n  DashboardCursorSync,\n  EventFilterOptions,\n  FieldConfigSource,\n  getDefaultTimeRange,\n  LoadingState,\n  PanelData,\n  PanelPlugin,\n  PanelPluginMeta,\n  TimeRange,\n  toDataFrameDTO,\n  toUtc,\n} from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { locationService, RefreshEvent } from '@grafana/runtime';\nimport { VizLegendOptions } from '@grafana/schema';\nimport { ErrorBoundary, PanelContext, PanelContextProvider, SeriesVisibilityChangeMode } from '@grafana/ui';\nimport config from 'app/core/config';\nimport { PANEL_BORDER } from 'app/core/constants';\nimport { profiler } from 'app/core/profiler';\nimport { applyPanelTimeOverrides } from 'app/features/dashboard/utils/panel';\nimport { changeSeriesColorConfigFactory } from 'app/plugins/panel/timeseries/overrides/colorSeriesConfigFactory';\nimport { RenderEvent } from 'app/types/events';\n\nimport { contextSrv } from '../../../core/services/context_srv';\nimport { isSoloRoute } from '../../../routes/utils';\nimport { deleteAnnotation, saveAnnotation, updateAnnotation } from '../../annotations/api';\nimport { getDashboardQueryRunner } from '../../query/state/DashboardQueryRunner/DashboardQueryRunner';\nimport { getTimeSrv, TimeSrv } from '../services/TimeSrv';\nimport { DashboardModel, PanelModel } from '../state';\nimport { loadSnapshotData } from '../utils/loadSnapshotData';\n\nimport { PanelHeader } from './PanelHeader/PanelHeader';\nimport { seriesVisibilityConfigFactory } from './SeriesVisibilityConfigFactory';\nimport { liveTimer } from './liveTimer';\n\nconst DEFAULT_PLUGIN_ERROR = 'Error in plugin';\n\nexport interface Props {\n  panel: PanelModel;\n  dashboard: DashboardModel;\n  plugin: PanelPlugin;\n  isViewing: boolean;\n  isEditing: boolean;\n  isInView: boolean;\n  width: number;\n  height: number;\n  onInstanceStateChange: (value: any) => void;\n}\n\nexport interface State {\n  isFirstLoad: boolean;\n  renderCounter: number;\n  errorMessage?: string;\n  refreshWhenInView: boolean;\n  context: PanelContext;\n  data: PanelData;\n  liveTime?: TimeRange;\n}\n\nexport class PanelChrome extends PureComponent<Props, State> {\n  private readonly timeSrv: TimeSrv = getTimeSrv();\n  private subs = new Subscription();\n  private eventFilter: EventFilterOptions = { onlyLocal: true };\n\n  constructor(props: Props) {\n    super(props);\n\n    // Can this eventBus be on PanelModel?  when we have more complex event filtering, that may be a better option\n    const eventBus = props.dashboard.events.newScopedBus(`panel:${props.panel.id}`, this.eventFilter);\n\n    this.state = {\n      isFirstLoad: true,\n      renderCounter: 0,\n      refreshWhenInView: false,\n      context: {\n        eventBus,\n        app: this.getPanelContextApp(),\n        sync: this.getSync,\n        onSeriesColorChange: this.onSeriesColorChange,\n        onToggleSeriesVisibility: this.onSeriesVisibilityChange,\n        onAnnotationCreate: this.onAnnotationCreate,\n        onAnnotationUpdate: this.onAnnotationUpdate,\n        onAnnotationDelete: this.onAnnotationDelete,\n        canAddAnnotations: this.canAddAnnotation,\n        onInstanceStateChange: this.onInstanceStateChange,\n        onToggleLegendSort: this.onToggleLegendSort,\n        canEditAnnotations: this.canEditAnnotation,\n        canDeleteAnnotations: this.canDeleteAnnotation,\n      },\n      data: this.getInitialPanelDataState(),\n    };\n  }\n\n  canEditDashboard = () => Boolean(this.props.dashboard.meta.canEdit || this.props.dashboard.meta.canMakeEditable);\n\n  canAddAnnotation = () => {\n    let canAdd = true;\n\n    if (contextSrv.accessControlEnabled()) {\n      canAdd = !!this.props.dashboard.meta.annotationsPermissions?.dashboard.canAdd;\n    }\n    return canAdd && this.canEditDashboard();\n  };\n\n  canEditAnnotation = (dashboardId: number) => {\n    let canEdit = true;\n\n    if (contextSrv.accessControlEnabled()) {\n      if (dashboardId !== 0) {\n        canEdit = !!this.props.dashboard.meta.annotationsPermissions?.dashboard.canEdit;\n      } else {\n        canEdit = !!this.props.dashboard.meta.annotationsPermissions?.organization.canEdit;\n      }\n    }\n    return canEdit && this.canEditDashboard();\n  };\n\n  canDeleteAnnotation = (dashboardId: number) => {\n    let canDelete = true;\n\n    if (contextSrv.accessControlEnabled()) {\n      if (dashboardId !== 0) {\n        canDelete = !!this.props.dashboard.meta.annotationsPermissions?.dashboard.canDelete;\n      } else {\n        canDelete = !!this.props.dashboard.meta.annotationsPermissions?.organization.canDelete;\n      }\n    }\n    return canDelete && this.canEditDashboard();\n  };\n\n  // Due to a mutable panel model we get the sync settings via function that proactively reads from the model\n  getSync = () => (this.props.isEditing ? DashboardCursorSync.Off : this.props.dashboard.graphTooltip);\n\n  onInstanceStateChange = (value: any) => {\n    this.props.onInstanceStateChange(value);\n\n    this.setState({\n      context: {\n        ...this.state.context,\n        instanceState: value,\n      },\n    });\n  };\n\n  getPanelContextApp() {\n    if (this.props.isEditing) {\n      return CoreApp.PanelEditor;\n    }\n    if (this.props.isViewing) {\n      return CoreApp.PanelViewer;\n    }\n\n    return CoreApp.Dashboard;\n  }\n\n  onSeriesColorChange = (label: string, color: string) => {\n    this.onFieldConfigChange(changeSeriesColorConfigFactory(label, color, this.props.panel.fieldConfig));\n  };\n\n  onSeriesVisibilityChange = (label: string, mode: SeriesVisibilityChangeMode) => {\n    this.onFieldConfigChange(\n      seriesVisibilityConfigFactory(label, mode, this.props.panel.fieldConfig, this.state.data.series)\n    );\n  };\n\n  onToggleLegendSort = (sortKey: string) => {\n    const legendOptions: VizLegendOptions = this.props.panel.options.legend;\n\n    // We don't want to do anything when legend options are not available\n    if (!legendOptions) {\n      return;\n    }\n\n    let sortDesc = legendOptions.sortDesc;\n    let sortBy = legendOptions.sortBy;\n    if (sortKey !== sortBy) {\n      sortDesc = undefined;\n    }\n\n    // if already sort ascending, disable sorting\n    if (sortDesc === false) {\n      sortBy = undefined;\n      sortDesc = undefined;\n    } else {\n      sortDesc = !sortDesc;\n      sortBy = sortKey;\n    }\n\n    this.onOptionsChange({\n      ...this.props.panel.options,\n      legend: { ...legendOptions, sortBy, sortDesc },\n    });\n  };\n\n  getInitialPanelDataState(): PanelData {\n    return {\n      state: LoadingState.NotStarted,\n      series: [],\n      timeRange: getDefaultTimeRange(),\n    };\n  }\n\n  componentDidMount() {\n    const { panel, dashboard } = this.props;\n\n    // Subscribe to panel events\n    this.subs.add(panel.events.subscribe(RefreshEvent, this.onRefresh));\n    this.subs.add(panel.events.subscribe(RenderEvent, this.onRender));\n\n    dashboard.panelInitialized(this.props.panel);\n\n    // Move snapshot data into the query response\n    if (this.hasPanelSnapshot) {\n      this.setState({\n        data: loadSnapshotData(panel, dashboard),\n        isFirstLoad: false,\n      });\n      return;\n    }\n\n    if (!this.wantsQueryExecution) {\n      this.setState({ isFirstLoad: false });\n    }\n\n    this.subs.add(\n      panel\n        .getQueryRunner()\n        .getData({ withTransforms: true, withFieldConfig: true })\n        .subscribe({\n          next: (data) => this.onDataUpdate(data),\n        })\n    );\n\n    // Listen for live timer events\n    liveTimer.listen(this);\n  }\n\n  componentWillUnmount() {\n    this.subs.unsubscribe();\n    liveTimer.remove(this);\n  }\n\n  liveTimeChanged(liveTime: TimeRange) {\n    const { data } = this.state;\n    if (data.timeRange) {\n      const delta = liveTime.to.valueOf() - data.timeRange.to.valueOf();\n      if (delta < 100) {\n        // 10hz\n        console.log('Skip tick render', this.props.panel.title, delta);\n        return;\n      }\n    }\n    this.setState({ liveTime });\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const { isInView, width } = this.props;\n    const { context } = this.state;\n\n    const app = this.getPanelContextApp();\n\n    if (context.app !== app) {\n      this.setState({\n        context: {\n          ...context,\n          app,\n        },\n      });\n    }\n\n    // View state has changed\n    if (isInView !== prevProps.isInView) {\n      if (isInView) {\n        // Check if we need a delayed refresh\n        if (this.state.refreshWhenInView) {\n          this.onRefresh();\n        }\n      }\n    }\n\n    // The timer depends on panel width\n    if (width !== prevProps.width) {\n      liveTimer.updateInterval(this);\n    }\n  }\n\n  // Updates the response with information from the stream\n  // The next is outside a react synthetic event so setState is not batched\n  // So in this context we can only do a single call to setState\n  onDataUpdate(data: PanelData) {\n    const { dashboard, panel, plugin } = this.props;\n\n    // Ignore this data update if we are now a non data panel\n    if (plugin.meta.skipDataQuery) {\n      this.setState({ data: this.getInitialPanelDataState() });\n      return;\n    }\n\n    let { isFirstLoad } = this.state;\n    let errorMessage: string | undefined;\n\n    switch (data.state) {\n      case LoadingState.Loading:\n        // Skip updating state data if it is already in loading state\n        // This is to avoid rendering partial loading responses\n        if (this.state.data.state === LoadingState.Loading) {\n          return;\n        }\n        break;\n      case LoadingState.Error:\n        const { error } = data;\n        if (error) {\n          if (errorMessage !== error.message) {\n            errorMessage = error.message;\n          }\n        }\n        break;\n      case LoadingState.Done:\n        // If we are doing a snapshot save data in panel model\n        if (dashboard.snapshot) {\n          panel.snapshotData = data.series.map((frame) => toDataFrameDTO(frame));\n        }\n        if (isFirstLoad) {\n          isFirstLoad = false;\n        }\n        break;\n    }\n\n    this.setState({ isFirstLoad, errorMessage, data, liveTime: undefined });\n  }\n\n  onRefresh = () => {\n    const { panel, isInView, width } = this.props;\n\n    if (!isInView) {\n      this.setState({ refreshWhenInView: true });\n      return;\n    }\n\n    const timeData = applyPanelTimeOverrides(panel, this.timeSrv.timeRange());\n\n    // Issue Query\n    if (this.wantsQueryExecution) {\n      if (width < 0) {\n        return;\n      }\n\n      if (this.state.refreshWhenInView) {\n        this.setState({ refreshWhenInView: false });\n      }\n      panel.runAllPanelQueries(this.props.dashboard.id, this.props.dashboard.getTimezone(), timeData, width);\n    } else {\n      // The panel should render on refresh as well if it doesn't have a query, like clock panel\n      this.setState({\n        data: { ...this.state.data, timeRange: this.timeSrv.timeRange() },\n        renderCounter: this.state.renderCounter + 1,\n        liveTime: undefined,\n      });\n    }\n  };\n\n  onRender = () => {\n    const stateUpdate = { renderCounter: this.state.renderCounter + 1 };\n    this.setState(stateUpdate);\n  };\n\n  onOptionsChange = (options: any) => {\n    this.props.panel.updateOptions(options);\n  };\n\n  onFieldConfigChange = (config: FieldConfigSource) => {\n    this.props.panel.updateFieldConfig(config);\n  };\n\n  onPanelError = (error: Error) => {\n    const errorMessage = error.message || DEFAULT_PLUGIN_ERROR;\n    if (this.state.errorMessage !== errorMessage) {\n      this.setState({ errorMessage });\n    }\n  };\n\n  onPanelErrorRecover = () => {\n    this.setState({ errorMessage: undefined });\n  };\n\n  onAnnotationCreate = async (event: AnnotationEventUIModel) => {\n    const isRegion = event.from !== event.to;\n    const anno = {\n      dashboardId: this.props.dashboard.id,\n      panelId: this.props.panel.id,\n      isRegion,\n      time: event.from,\n      timeEnd: isRegion ? event.to : 0,\n      tags: event.tags,\n      text: event.description,\n    };\n    await saveAnnotation(anno);\n    getDashboardQueryRunner().run({ dashboard: this.props.dashboard, range: this.timeSrv.timeRange() });\n    this.state.context.eventBus.publish(new AnnotationChangeEvent(anno));\n  };\n\n  onAnnotationDelete = async (id: string) => {\n    await deleteAnnotation({ id });\n    getDashboardQueryRunner().run({ dashboard: this.props.dashboard, range: this.timeSrv.timeRange() });\n    this.state.context.eventBus.publish(new AnnotationChangeEvent({ id }));\n  };\n\n  onAnnotationUpdate = async (event: AnnotationEventUIModel) => {\n    const isRegion = event.from !== event.to;\n    const anno = {\n      id: event.id,\n      dashboardId: this.props.dashboard.id,\n      panelId: this.props.panel.id,\n      isRegion,\n      time: event.from,\n      timeEnd: isRegion ? event.to : 0,\n      tags: event.tags,\n      text: event.description,\n    };\n    await updateAnnotation(anno);\n\n    getDashboardQueryRunner().run({ dashboard: this.props.dashboard, range: this.timeSrv.timeRange() });\n    this.state.context.eventBus.publish(new AnnotationChangeEvent(anno));\n  };\n\n  get hasPanelSnapshot() {\n    const { panel } = this.props;\n    return panel.snapshotData && panel.snapshotData.length;\n  }\n\n  get wantsQueryExecution() {\n    return !(this.props.plugin.meta.skipDataQuery || this.hasPanelSnapshot);\n  }\n\n  onChangeTimeRange = (timeRange: AbsoluteTimeRange) => {\n    this.timeSrv.setTime({\n      from: toUtc(timeRange.from),\n      to: toUtc(timeRange.to),\n    });\n  };\n\n  shouldSignalRenderingCompleted(loadingState: LoadingState, pluginMeta: PanelPluginMeta) {\n    return loadingState === LoadingState.Done || pluginMeta.skipDataQuery;\n  }\n\n  skipFirstRender(loadingState: LoadingState) {\n    const { isFirstLoad } = this.state;\n    return (\n      this.wantsQueryExecution &&\n      isFirstLoad &&\n      (loadingState === LoadingState.Loading || loadingState === LoadingState.NotStarted)\n    );\n  }\n\n  renderPanel(width: number, height: number) {\n    const { panel, plugin, dashboard } = this.props;\n    const { renderCounter, data } = this.state;\n    const { theme } = config;\n    const { state: loadingState } = data;\n\n    // do not render component until we have first data\n    if (this.skipFirstRender(loadingState)) {\n      return null;\n    }\n\n    // This is only done to increase a counter that is used by backend\n    // image rendering to know when to capture image\n    if (this.shouldSignalRenderingCompleted(loadingState, plugin.meta)) {\n      profiler.renderingCompleted();\n    }\n\n    const PanelComponent = plugin.panel!;\n    const timeRange = this.state.liveTime ?? data.timeRange ?? this.timeSrv.timeRange();\n    const headerHeight = this.hasOverlayHeader() ? 0 : theme.panelHeaderHeight;\n    const chromePadding = plugin.noPadding ? 0 : theme.panelPadding;\n    const panelWidth = width - chromePadding * 2 - PANEL_BORDER;\n    const innerPanelHeight = height - headerHeight - chromePadding * 2 - PANEL_BORDER;\n    const panelContentClassNames = classNames({\n      'panel-content': true,\n      'panel-content--no-padding': plugin.noPadding,\n    });\n    const panelOptions = panel.getOptions();\n\n    // Update the event filter (dashboard settings may have changed)\n    // Yes this is called ever render for a function that is triggered on every mouse move\n    this.eventFilter.onlyLocal = dashboard.graphTooltip === 0;\n\n    return (\n      <>\n        <div className={panelContentClassNames}>\n          <PanelContextProvider value={this.state.context}>\n            <PanelComponent\n              id={panel.id}\n              data={data}\n              title={panel.title}\n              timeRange={timeRange}\n              timeZone={this.props.dashboard.getTimezone()}\n              options={panelOptions}\n              fieldConfig={panel.fieldConfig}\n              transparent={panel.transparent}\n              width={panelWidth}\n              height={innerPanelHeight}\n              renderCounter={renderCounter}\n              replaceVariables={panel.replaceVariables}\n              onOptionsChange={this.onOptionsChange}\n              onFieldConfigChange={this.onFieldConfigChange}\n              onChangeTimeRange={this.onChangeTimeRange}\n              eventBus={dashboard.events}\n            />\n          </PanelContextProvider>\n        </div>\n      </>\n    );\n  }\n\n  hasOverlayHeader() {\n    const { panel } = this.props;\n    const { data } = this.state;\n\n    // always show normal header if we have time override\n    if (data.request && data.request.timeInfo) {\n      return false;\n    }\n\n    return !panel.hasTitle();\n  }\n\n  render() {\n    const { dashboard, panel, isViewing, isEditing, width, height, plugin } = this.props;\n    const { errorMessage, data } = this.state;\n    const { transparent } = panel;\n\n    const alertState = data.alertState?.state;\n\n    const containerClassNames = classNames({\n      'panel-container': true,\n      'panel-container--absolute': isSoloRoute(locationService.getLocation().pathname),\n      'panel-container--transparent': transparent,\n      'panel-container--no-title': this.hasOverlayHeader(),\n      [`panel-alert-state--${alertState}`]: alertState !== undefined,\n    });\n\n    return (\n      <section\n        className={containerClassNames}\n        aria-label={selectors.components.Panels.Panel.containerByTitle(panel.title)}\n      >\n        <PanelHeader\n          panel={panel}\n          dashboard={dashboard}\n          title={panel.title}\n          description={panel.description}\n          links={panel.links}\n          error={errorMessage}\n          isEditing={isEditing}\n          isViewing={isViewing}\n          alertState={alertState}\n          data={data}\n        />\n        <ErrorBoundary\n          dependencies={[data, plugin, panel.getOptions()]}\n          onError={this.onPanelError}\n          onRecover={this.onPanelErrorRecover}\n        >\n          {({ error }) => {\n            if (error) {\n              return null;\n            }\n            return this.renderPanel(width, height);\n          }}\n        </ErrorBoundary>\n      </section>\n    );\n  }\n}\n","import classNames from 'classnames';\nimport React, { PureComponent } from 'react';\nimport { connect, MapDispatchToProps, MapStateToProps } from 'react-redux';\nimport { Subscription } from 'rxjs';\n\nimport { getDefaultTimeRange, LoadingState, PanelData, PanelPlugin } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { AngularComponent, getAngularLoader, locationService } from '@grafana/runtime';\nimport config from 'app/core/config';\nimport { PANEL_BORDER } from 'app/core/constants';\nimport { setPanelAngularComponent } from 'app/features/panel/state/reducers';\nimport { getPanelStateForModel } from 'app/features/panel/state/selectors';\nimport { StoreState } from 'app/types';\n\nimport { isSoloRoute } from '../../../routes/utils';\nimport { getTimeSrv, TimeSrv } from '../services/TimeSrv';\nimport { DashboardModel, PanelModel } from '../state';\n\nimport { PanelHeader } from './PanelHeader/PanelHeader';\n\ninterface OwnProps {\n  panel: PanelModel;\n  dashboard: DashboardModel;\n  plugin: PanelPlugin;\n  isViewing: boolean;\n  isEditing: boolean;\n  isInView: boolean;\n  width: number;\n  height: number;\n}\n\ninterface ConnectedProps {\n  angularComponent?: AngularComponent;\n}\n\ninterface DispatchProps {\n  setPanelAngularComponent: typeof setPanelAngularComponent;\n}\n\nexport type Props = OwnProps & ConnectedProps & DispatchProps;\n\nexport interface State {\n  data: PanelData;\n  errorMessage?: string;\n}\n\ninterface AngularScopeProps {\n  panel: PanelModel;\n  dashboard: DashboardModel;\n  size: {\n    height: number;\n    width: number;\n  };\n}\n\nexport class PanelChromeAngularUnconnected extends PureComponent<Props, State> {\n  element: HTMLElement | null = null;\n  timeSrv: TimeSrv = getTimeSrv();\n  scopeProps?: AngularScopeProps;\n  subs = new Subscription();\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      data: {\n        state: LoadingState.NotStarted,\n        series: [],\n        timeRange: getDefaultTimeRange(),\n      },\n    };\n  }\n\n  componentDidMount() {\n    const { panel } = this.props;\n    this.loadAngularPanel();\n\n    // subscribe to data events\n    const queryRunner = panel.getQueryRunner();\n\n    // we are not displaying any of this data so no need for transforms or field config\n    this.subs.add(\n      queryRunner.getData({ withTransforms: false, withFieldConfig: false }).subscribe({\n        next: (data: PanelData) => this.onPanelDataUpdate(data),\n      })\n    );\n  }\n\n  onPanelDataUpdate(data: PanelData) {\n    let errorMessage: string | undefined;\n\n    if (data.state === LoadingState.Error) {\n      const { error } = data;\n      if (error) {\n        if (errorMessage !== error.message) {\n          errorMessage = error.message;\n        }\n      }\n    }\n\n    this.setState({ data, errorMessage });\n  }\n\n  componentWillUnmount() {\n    this.subs.unsubscribe();\n  }\n\n  componentDidUpdate(prevProps: Props, prevState: State) {\n    const { plugin, height, width, panel } = this.props;\n\n    if (prevProps.plugin !== plugin) {\n      this.loadAngularPanel();\n    }\n\n    if (prevProps.width !== width || prevProps.height !== height) {\n      if (this.scopeProps) {\n        this.scopeProps.size.height = this.getInnerPanelHeight();\n        this.scopeProps.size.width = this.getInnerPanelWidth();\n        panel.render();\n      }\n    }\n  }\n\n  getInnerPanelHeight() {\n    const { plugin, height } = this.props;\n    const { theme } = config;\n\n    const headerHeight = this.hasOverlayHeader() ? 0 : theme.panelHeaderHeight;\n    const chromePadding = plugin.noPadding ? 0 : theme.panelPadding;\n    return height - headerHeight - chromePadding * 2 - PANEL_BORDER;\n  }\n\n  getInnerPanelWidth() {\n    const { plugin, width } = this.props;\n    const { theme } = config;\n\n    const chromePadding = plugin.noPadding ? 0 : theme.panelPadding;\n    return width - chromePadding * 2 - PANEL_BORDER;\n  }\n\n  loadAngularPanel() {\n    const { panel, dashboard, setPanelAngularComponent } = this.props;\n\n    // if we have no element or already have loaded the panel return\n    if (!this.element) {\n      return;\n    }\n\n    const loader = getAngularLoader();\n    const template = '<plugin-component type=\"panel\" class=\"panel-height-helper\"></plugin-component>';\n\n    this.scopeProps = {\n      panel: panel,\n      dashboard: dashboard,\n      size: { width: this.getInnerPanelWidth(), height: this.getInnerPanelHeight() },\n    };\n\n    setPanelAngularComponent({\n      key: panel.key,\n      angularComponent: loader.load(this.element, this.scopeProps, template),\n    });\n  }\n\n  hasOverlayHeader() {\n    const { panel } = this.props;\n    const { data } = this.state;\n\n    // always show normal header if we have time override\n    if (data.request && data.request.timeInfo) {\n      return false;\n    }\n\n    return !panel.hasTitle();\n  }\n\n  render() {\n    const { dashboard, panel, isViewing, isEditing, plugin } = this.props;\n    const { errorMessage, data } = this.state;\n    const { transparent } = panel;\n\n    const alertState = data.alertState?.state;\n\n    const containerClassNames = classNames({\n      'panel-container': true,\n      'panel-container--absolute': isSoloRoute(locationService.getLocation().pathname),\n      'panel-container--transparent': transparent,\n      'panel-container--no-title': this.hasOverlayHeader(),\n      'panel-has-alert': panel.alert !== undefined,\n      [`panel-alert-state--${alertState}`]: alertState !== undefined,\n    });\n\n    const panelContentClassNames = classNames({\n      'panel-content': true,\n      'panel-content--no-padding': plugin.noPadding,\n    });\n\n    return (\n      <div className={containerClassNames} aria-label={selectors.components.Panels.Panel.containerByTitle(panel.title)}>\n        <PanelHeader\n          panel={panel}\n          dashboard={dashboard}\n          title={panel.title}\n          description={panel.description}\n          links={panel.links}\n          error={errorMessage}\n          isViewing={isViewing}\n          isEditing={isEditing}\n          data={data}\n          alertState={alertState}\n        />\n        <div className={panelContentClassNames}>\n          <div ref={(element) => (this.element = element)} className=\"panel-height-helper\" />\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps: MapStateToProps<ConnectedProps, OwnProps, StoreState> = (state, props) => {\n  return {\n    angularComponent: getPanelStateForModel(state, props.panel)?.angularComponent,\n  };\n};\n\nconst mapDispatchToProps: MapDispatchToProps<DispatchProps, OwnProps> = { setPanelAngularComponent };\n\nexport const PanelChromeAngular = connect(mapStateToProps, mapDispatchToProps)(PanelChromeAngularUnconnected);\n","import React, { PureComponent } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { StoreState } from 'app/types';\n\nimport { initPanelState } from '../../panel/state/actions';\nimport { setPanelInstanceState } from '../../panel/state/reducers';\nimport { DashboardModel, PanelModel } from '../state';\n\nimport { LazyLoader } from './LazyLoader';\nimport { PanelChrome } from './PanelChrome';\nimport { PanelChromeAngular } from './PanelChromeAngular';\n\nexport interface OwnProps {\n  panel: PanelModel;\n  stateKey: string;\n  dashboard: DashboardModel;\n  isEditing: boolean;\n  isViewing: boolean;\n  width: number;\n  height: number;\n  lazy?: boolean;\n}\n\nconst mapStateToProps = (state: StoreState, props: OwnProps) => {\n  const panelState = state.panels[props.stateKey];\n  if (!panelState) {\n    return { plugin: null };\n  }\n\n  return {\n    plugin: panelState.plugin,\n    instanceState: panelState.instanceState,\n  };\n};\n\nconst mapDispatchToProps = {\n  initPanelState,\n  setPanelInstanceState,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport type Props = OwnProps & ConnectedProps<typeof connector>;\n\nexport class DashboardPanelUnconnected extends PureComponent<Props> {\n  static defaultProps: Partial<Props> = {\n    lazy: true,\n  };\n\n  componentDidMount() {\n    this.props.panel.isInView = !this.props.lazy;\n    if (!this.props.lazy) {\n      this.onPanelLoad();\n    }\n  }\n\n  onInstanceStateChange = (value: any) => {\n    this.props.setPanelInstanceState({ key: this.props.stateKey, value });\n  };\n\n  onVisibilityChange = (v: boolean) => {\n    this.props.panel.isInView = v;\n  };\n\n  onPanelLoad = () => {\n    if (!this.props.plugin) {\n      this.props.initPanelState(this.props.panel);\n    }\n  };\n\n  render() {\n    const { dashboard, panel, isViewing, isEditing, width, height, lazy, plugin } = this.props;\n\n    const renderPanelChrome = (isInView: boolean) =>\n      plugin &&\n      (plugin.angularPanelCtrl ? (\n        <PanelChromeAngular\n          plugin={plugin}\n          panel={panel}\n          dashboard={dashboard}\n          isViewing={isViewing}\n          isEditing={isEditing}\n          isInView={isInView}\n          width={width}\n          height={height}\n        />\n      ) : (\n        <PanelChrome\n          plugin={plugin}\n          panel={panel}\n          dashboard={dashboard}\n          isViewing={isViewing}\n          isEditing={isEditing}\n          isInView={isInView}\n          width={width}\n          height={height}\n          onInstanceStateChange={this.onInstanceStateChange}\n        />\n      ));\n\n    return lazy ? (\n      <LazyLoader width={width} height={height} onChange={this.onVisibilityChange} onLoad={this.onPanelLoad}>\n        {({ isInView }) => renderPanelChrome(isInView)}\n      </LazyLoader>\n    ) : (\n      renderPanelChrome(true)\n    );\n  }\n}\n\nexport const DashboardPanel = connector(DashboardPanelUnconnected);\n","import React, { Component } from 'react';\n\nimport { renderMarkdown, LinkModelSupplier, ScopedVars } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { locationService, getTemplateSrv } from '@grafana/runtime';\nimport { Tooltip, PopoverContent } from '@grafana/ui';\nimport { getTimeSrv, TimeSrv } from 'app/features/dashboard/services/TimeSrv';\nimport { PanelModel } from 'app/features/dashboard/state/PanelModel';\nimport { InspectTab } from 'app/features/inspector/types';\n\nenum InfoMode {\n  Error = 'Error',\n  Info = 'Info',\n  Links = 'Links',\n}\n\ninterface Props {\n  panel: PanelModel;\n  title?: string;\n  description?: string;\n  scopedVars?: ScopedVars;\n  links?: LinkModelSupplier<PanelModel>;\n  error?: string;\n}\n\nexport class PanelHeaderCorner extends Component<Props> {\n  timeSrv: TimeSrv = getTimeSrv();\n\n  getInfoMode = () => {\n    const { panel, error } = this.props;\n    if (error) {\n      return InfoMode.Error;\n    }\n    if (!!panel.description) {\n      return InfoMode.Info;\n    }\n    if (panel.links && panel.links.length) {\n      return InfoMode.Links;\n    }\n\n    return undefined;\n  };\n\n  getInfoContent = (): JSX.Element => {\n    const { panel } = this.props;\n    const markdown = panel.description || '';\n    const interpolatedMarkdown = getTemplateSrv().replace(markdown, panel.scopedVars);\n    const markedInterpolatedMarkdown = renderMarkdown(interpolatedMarkdown);\n    const links = this.props.links && this.props.links.getLinks(panel.replaceVariables);\n\n    return (\n      <div className=\"panel-info-content markdown-html\">\n        <div dangerouslySetInnerHTML={{ __html: markedInterpolatedMarkdown }} />\n\n        {links && links.length > 0 && (\n          <ul className=\"panel-info-corner-links\">\n            {links.map((link, idx) => {\n              return (\n                <li key={idx}>\n                  <a className=\"panel-info-corner-links__item\" href={link.href} target={link.target}>\n                    {link.title}\n                  </a>\n                </li>\n              );\n            })}\n          </ul>\n        )}\n      </div>\n    );\n  };\n\n  /**\n   * Open the Panel Inspector when we click on an error\n   */\n  onClickError = () => {\n    locationService.partial({\n      inspect: this.props.panel.id,\n      inspectTab: InspectTab.Error,\n    });\n  };\n\n  renderCornerType(infoMode: InfoMode, content: PopoverContent, onClick?: () => void) {\n    const theme = infoMode === InfoMode.Error ? 'error' : 'info';\n    const className = `panel-info-corner panel-info-corner--${infoMode.toLowerCase()}`;\n    const ariaLabel = selectors.components.Panels.Panel.headerCornerInfo(infoMode.toLowerCase());\n\n    return (\n      <Tooltip content={content} placement=\"top-start\" theme={theme} interactive>\n        <section className={className} onClick={onClick} aria-label={ariaLabel}>\n          <i aria-hidden className=\"fa\" />\n          <span className=\"panel-info-corner-inner\" />\n        </section>\n      </Tooltip>\n    );\n  }\n\n  render() {\n    const { error } = this.props;\n    const infoMode: InfoMode | undefined = this.getInfoMode();\n\n    if (!infoMode) {\n      return null;\n    }\n\n    if (infoMode === InfoMode.Error && error) {\n      return this.renderCornerType(infoMode, error, this.onClickError);\n    }\n\n    if (infoMode === InfoMode.Info || infoMode === InfoMode.Links) {\n      return this.renderCornerType(infoMode, this.getInfoContent);\n    }\n\n    return null;\n  }\n}\n\nexport default PanelHeaderCorner;\n","import {\n  ByNamesMatcherMode,\n  DataFrame,\n  DynamicConfigValue,\n  FieldConfigSource,\n  FieldMatcherID,\n  FieldType,\n  getFieldDisplayName,\n  isSystemOverrideWithRef,\n  SystemConfigOverrideRule,\n} from '@grafana/data';\nimport { SeriesVisibilityChangeMode } from '@grafana/ui';\n\nconst displayOverrideRef = 'hideSeriesFrom';\nconst isHideSeriesOverride = isSystemOverrideWithRef(displayOverrideRef);\n\nexport function seriesVisibilityConfigFactory(\n  label: string,\n  mode: SeriesVisibilityChangeMode,\n  fieldConfig: FieldConfigSource,\n  data: DataFrame[]\n) {\n  const { overrides } = fieldConfig;\n\n  const displayName = label;\n  const currentIndex = overrides.findIndex(isHideSeriesOverride);\n\n  if (currentIndex < 0) {\n    if (mode === SeriesVisibilityChangeMode.ToggleSelection) {\n      const override = createOverride([displayName]);\n\n      return {\n        ...fieldConfig,\n        overrides: [...fieldConfig.overrides, override],\n      };\n    }\n\n    const displayNames = getDisplayNames(data, displayName);\n    const override = createOverride(displayNames);\n\n    return {\n      ...fieldConfig,\n      overrides: [...fieldConfig.overrides, override],\n    };\n  }\n\n  const overridesCopy = Array.from(overrides);\n  const [current] = overridesCopy.splice(currentIndex, 1) as SystemConfigOverrideRule[];\n\n  if (mode === SeriesVisibilityChangeMode.ToggleSelection) {\n    const existing = getExistingDisplayNames(current);\n\n    if (existing[0] === displayName && existing.length === 1) {\n      return {\n        ...fieldConfig,\n        overrides: overridesCopy,\n      };\n    }\n\n    const override = createOverride([displayName]);\n\n    return {\n      ...fieldConfig,\n      overrides: [...overridesCopy, override],\n    };\n  }\n\n  const override = createExtendedOverride(current, displayName);\n\n  if (allFieldsAreExcluded(override, data)) {\n    return {\n      ...fieldConfig,\n      overrides: overridesCopy,\n    };\n  }\n\n  return {\n    ...fieldConfig,\n    overrides: [...overridesCopy, override],\n  };\n}\n\nfunction createOverride(\n  names: string[],\n  mode = ByNamesMatcherMode.exclude,\n  property?: DynamicConfigValue\n): SystemConfigOverrideRule {\n  property = property ?? {\n    id: 'custom.hideFrom',\n    value: {\n      viz: true,\n      legend: false,\n      tooltip: false,\n    },\n  };\n\n  return {\n    __systemRef: displayOverrideRef,\n    matcher: {\n      id: FieldMatcherID.byNames,\n      options: {\n        mode: mode,\n        names: names,\n        prefix: mode === ByNamesMatcherMode.exclude ? 'All except:' : undefined,\n        readOnly: true,\n      },\n    },\n    properties: [\n      {\n        ...property,\n        value: {\n          viz: true,\n          legend: false,\n          tooltip: false,\n        },\n      },\n    ],\n  };\n}\n\nconst createExtendedOverride = (\n  current: SystemConfigOverrideRule,\n  displayName: string,\n  mode = ByNamesMatcherMode.exclude\n): SystemConfigOverrideRule => {\n  const property = current.properties.find((p) => p.id === 'custom.hideFrom');\n  const existing = getExistingDisplayNames(current);\n  const index = existing.findIndex((name) => name === displayName);\n\n  if (index < 0) {\n    existing.push(displayName);\n  } else {\n    existing.splice(index, 1);\n  }\n\n  return createOverride(existing, mode, property);\n};\n\nconst getExistingDisplayNames = (rule: SystemConfigOverrideRule): string[] => {\n  const names = rule.matcher.options?.names;\n  if (!Array.isArray(names)) {\n    return [];\n  }\n  return [...names];\n};\n\nconst allFieldsAreExcluded = (override: SystemConfigOverrideRule, data: DataFrame[]): boolean => {\n  return getExistingDisplayNames(override).length === getDisplayNames(data).length;\n};\n\nconst getDisplayNames = (data: DataFrame[], excludeName?: string): string[] => {\n  const unique = new Set<string>();\n\n  for (const frame of data) {\n    for (const field of frame.fields) {\n      if (field.type !== FieldType.number) {\n        continue;\n      }\n\n      const name = getFieldDisplayName(field, frame, data);\n\n      if (name === excludeName) {\n        continue;\n      }\n\n      unique.add(name);\n    }\n  }\n\n  return Array.from(unique);\n};\n","import { locationUtil, setWeekStart } from '@grafana/data';\nimport { config, locationService } from '@grafana/runtime';\nimport { notifyApp } from 'app/core/actions';\nimport { createErrorNotification } from 'app/core/copy/appNotification';\nimport { backendSrv } from 'app/core/services/backend_srv';\nimport { keybindingSrv } from 'app/core/services/keybindingSrv';\nimport store from 'app/core/store';\nimport { dashboardLoaderSrv } from 'app/features/dashboard/services/DashboardLoaderSrv';\nimport { DashboardSrv, getDashboardSrv } from 'app/features/dashboard/services/DashboardSrv';\nimport { getTimeSrv, TimeSrv } from 'app/features/dashboard/services/TimeSrv';\nimport { dashboardWatcher } from 'app/features/live/dashboard/dashboardWatcher';\nimport { toStateKey } from 'app/features/variables/utils';\nimport { DashboardDTO, DashboardInitPhase, DashboardRoutes, StoreState, ThunkDispatch, ThunkResult } from 'app/types';\n\nimport { createDashboardQueryRunner } from '../../query/state/DashboardQueryRunner/DashboardQueryRunner';\nimport { initVariablesTransaction } from '../../variables/state/actions';\nimport { getIfExistsLastKey } from '../../variables/state/selectors';\n\nimport { DashboardModel } from './DashboardModel';\nimport { emitDashboardViewEvent } from './analyticsProcessor';\nimport { dashboardInitCompleted, dashboardInitFailed, dashboardInitFetching, dashboardInitServices } from './reducers';\n\nexport interface InitDashboardArgs {\n  urlUid?: string;\n  urlSlug?: string;\n  urlType?: string;\n  urlFolderId?: string | null;\n  routeName?: string;\n  fixUrl: boolean;\n}\n\nasync function fetchDashboard(\n  args: InitDashboardArgs,\n  dispatch: ThunkDispatch,\n  getState: () => StoreState\n): Promise<DashboardDTO | null> {\n  // When creating new or adding panels to a dashboard from explore we load it from local storage\n  const model = store.getObject<DashboardDTO>(DASHBOARD_FROM_LS_KEY);\n  if (model) {\n    removeDashboardToFetchFromLocalStorage();\n    return model;\n  }\n\n  try {\n    switch (args.routeName) {\n      case DashboardRoutes.Home: {\n        // load home dash\n        const dashDTO: DashboardDTO = await backendSrv.get('/api/dashboards/home');\n\n        // if user specified a custom home dashboard redirect to that\n        if (dashDTO.redirectUri) {\n          const newUrl = locationUtil.stripBaseFromUrl(dashDTO.redirectUri);\n          locationService.replace(newUrl);\n          return null;\n        }\n\n        // disable some actions on the default home dashboard\n        dashDTO.meta.canSave = false;\n        dashDTO.meta.canShare = false;\n        dashDTO.meta.canStar = false;\n        return dashDTO;\n      }\n      case DashboardRoutes.Normal: {\n        const dashDTO: DashboardDTO = await dashboardLoaderSrv.loadDashboard(args.urlType, args.urlSlug, args.urlUid);\n\n        if (args.fixUrl && dashDTO.meta.url) {\n          // check if the current url is correct (might be old slug)\n          const dashboardUrl = locationUtil.stripBaseFromUrl(dashDTO.meta.url);\n          const currentPath = locationService.getLocation().pathname;\n\n          if (dashboardUrl !== currentPath) {\n            // Spread current location to persist search params used for navigation\n            locationService.replace({\n              ...locationService.getLocation(),\n              pathname: dashboardUrl,\n            });\n            console.log('not correct url correcting', dashboardUrl, currentPath);\n          }\n        }\n        return dashDTO;\n      }\n      case DashboardRoutes.New: {\n        return getNewDashboardModelData(args.urlFolderId);\n      }\n      default:\n        throw { message: 'Unknown route ' + args.routeName };\n    }\n  } catch (err) {\n    // Ignore cancelled errors\n    if (err.cancelled) {\n      return null;\n    }\n\n    dispatch(dashboardInitFailed({ message: 'Failed to fetch dashboard', error: err }));\n    console.error(err);\n    return null;\n  }\n}\n\n/**\n * This action (or saga) does everything needed to bootstrap a dashboard & dashboard model.\n * First it handles the process of fetching the dashboard, correcting the url if required (causing redirects/url updates)\n *\n * This is used both for single dashboard & solo panel routes, home & new dashboard routes.\n *\n * Then it handles the initializing of the old angular services that the dashboard components & panels still depend on\n *\n */\nexport function initDashboard(args: InitDashboardArgs): ThunkResult<void> {\n  return async (dispatch, getState) => {\n    // set fetching state\n    dispatch(dashboardInitFetching());\n\n    // fetch dashboard data\n    const dashDTO = await fetchDashboard(args, dispatch, getState);\n\n    // returns null if there was a redirect or error\n    if (!dashDTO) {\n      return;\n    }\n\n    // set initializing state\n    dispatch(dashboardInitServices());\n\n    // create model\n    let dashboard: DashboardModel;\n    try {\n      dashboard = new DashboardModel(dashDTO.dashboard, dashDTO.meta);\n    } catch (err) {\n      dispatch(dashboardInitFailed({ message: 'Failed create dashboard model', error: err }));\n      console.error(err);\n      return;\n    }\n\n    // add missing orgId query param\n    const storeState = getState();\n    const queryParams = locationService.getSearchObject();\n\n    if (!queryParams.orgId) {\n      // TODO this is currently not possible with the LocationService API\n      locationService.partial({ orgId: storeState.user.orgId }, true);\n    }\n\n    // init services\n    const timeSrv: TimeSrv = getTimeSrv();\n    const dashboardSrv: DashboardSrv = getDashboardSrv();\n\n    // legacy srv state, we need this value updated for built-in annotations\n    dashboardSrv.setCurrent(dashboard);\n\n    timeSrv.init(dashboard);\n\n    const dashboardUid = toStateKey(args.urlUid ?? dashboard.uid);\n    // template values service needs to initialize completely before the rest of the dashboard can load\n    await dispatch(initVariablesTransaction(dashboardUid, dashboard));\n\n    // DashboardQueryRunner needs to run after all variables have been resolved so that any annotation query including a variable\n    // will be correctly resolved\n    const runner = createDashboardQueryRunner({ dashboard, timeSrv });\n    runner.run({ dashboard, range: timeSrv.timeRange() });\n\n    if (getIfExistsLastKey(getState()) !== dashboardUid) {\n      // if a previous dashboard has slow running variable queries the batch uid will be the new one\n      // but the args.urlUid will be the same as before initVariablesTransaction was called so then we can't continue initializing\n      // the previous dashboard.\n      return;\n    }\n\n    // If dashboard is in a different init phase it means it cancelled during service init\n    if (getState().dashboard.initPhase !== DashboardInitPhase.Services) {\n      return;\n    }\n\n    try {\n      dashboard.processRepeats();\n\n      // handle auto fix experimental feature\n      if (queryParams.autofitpanels) {\n        dashboard.autoFitPanels(window.innerHeight, queryParams.kiosk);\n      }\n\n      keybindingSrv.setupDashboardBindings(dashboard);\n    } catch (err) {\n      dispatch(notifyApp(createErrorNotification('Dashboard init failed', err)));\n      console.error(err);\n    }\n\n    // send open dashboard event\n    if (args.routeName !== DashboardRoutes.New) {\n      emitDashboardViewEvent(dashboard);\n\n      // Listen for changes on the current dashboard\n      dashboardWatcher.watch(dashboard.uid);\n    } else {\n      dashboardWatcher.leave();\n    }\n\n    // set week start\n    if (dashboard.weekStart !== '') {\n      setWeekStart(dashboard.weekStart);\n    } else {\n      setWeekStart(config.bootData.user.weekStart);\n    }\n\n    // yay we are done\n    dispatch(dashboardInitCompleted(dashboard));\n  };\n}\n\nexport function getNewDashboardModelData(urlFolderId?: string | null): any {\n  const data = {\n    meta: {\n      canStar: false,\n      canShare: false,\n      isNew: true,\n      folderId: 0,\n    },\n    dashboard: {\n      title: 'New dashboard',\n      panels: [\n        {\n          type: 'add-panel',\n          gridPos: { x: 0, y: 0, w: 12, h: 9 },\n          title: 'Panel Title',\n        },\n      ],\n    },\n  };\n\n  if (urlFolderId) {\n    data.meta.folderId = parseInt(urlFolderId, 10);\n  }\n\n  return data;\n}\n\nconst DASHBOARD_FROM_LS_KEY = 'DASHBOARD_FROM_LS_KEY';\n\nexport function setDashboardToFetchFromLocalStorage(model: DashboardDTO) {\n  store.setObject(DASHBOARD_FROM_LS_KEY, model);\n}\n\nexport function removeDashboardToFetchFromLocalStorage() {\n  store.delete(DASHBOARD_FROM_LS_KEY);\n}\n","import { reportMetaAnalytics, MetaAnalyticsEventName, DashboardViewEventPayload } from '@grafana/runtime';\n\nimport { DashboardModel } from './DashboardModel';\n\nexport function emitDashboardViewEvent(dashboard: DashboardModel) {\n  const eventData: DashboardViewEventPayload = {\n    dashboardId: dashboard.id,\n    dashboardName: dashboard.title,\n    dashboardUid: dashboard.uid,\n    folderName: dashboard.meta.folderTitle,\n    eventName: MetaAnalyticsEventName.DashboardView,\n  };\n\n  reportMetaAnalytics(eventData);\n}\n","import { applyFieldOverrides, ArrayDataFrame, getDefaultTimeRange, LoadingState, PanelData } from '@grafana/data';\nimport { config } from 'app/core/config';\n\nimport { SnapshotWorker } from '../../query/state/DashboardQueryRunner/SnapshotWorker';\nimport { getProcessedDataFrames } from '../../query/state/runRequest';\nimport { getTimeSrv } from '../services/TimeSrv';\nimport { DashboardModel, PanelModel } from '../state';\n\nimport { applyPanelTimeOverrides } from './panel';\n\nexport function loadSnapshotData(panel: PanelModel, dashboard: DashboardModel): PanelData {\n  const data = getProcessedDataFrames(panel.snapshotData);\n  const worker = new SnapshotWorker();\n  const options = { dashboard, range: getDefaultTimeRange() };\n  const annotationEvents = worker.canWork(options) ? worker.getAnnotationsInSnapshot(dashboard, panel.id) : [];\n  const annotations = [new ArrayDataFrame(annotationEvents)];\n  const timeData = applyPanelTimeOverrides(panel, getTimeSrv().timeRange());\n\n  return {\n    timeRange: timeData.timeRange,\n    state: LoadingState.Done,\n    series: applyFieldOverrides({\n      data,\n      fieldConfig: {\n        defaults: {},\n        overrides: [],\n      },\n      replaceVariables: panel.replaceVariables,\n      fieldConfigRegistry: panel.plugin!.fieldConfigRegistry,\n      theme: config.theme2,\n      timeZone: dashboard.getTimezone(),\n    }),\n    annotations,\n  };\n}\n","export enum InspectTab {\n  Data = 'data',\n  Meta = 'meta', // When result metadata exists\n  Error = 'error',\n  Stats = 'stats',\n  JSON = 'json',\n  Query = 'query',\n  Actions = 'actions', // ALPHA!\n}\n","import {\n  DataLink,\n  DisplayValue,\n  FieldDisplay,\n  formattedValueToString,\n  getFieldDisplayValuesProxy,\n  getTimeField,\n  InterpolateFunction,\n  Labels,\n  LinkModelSupplier,\n  ScopedVar,\n  ScopedVars,\n} from '@grafana/data';\nimport { PanelModel } from 'app/features/dashboard/state/PanelModel';\n\nimport { getLinkSrv } from './link_srv';\n\ninterface SeriesVars {\n  name?: string;\n  refId?: string;\n}\n\ninterface FieldVars {\n  name: string;\n  labels?: Labels;\n}\n\ninterface ValueVars {\n  raw: any;\n  numeric: number;\n  text: string;\n  time?: number;\n  calc?: string;\n}\n\ninterface DataViewVars {\n  name?: string;\n  refId?: string;\n  fields?: Record<string, DisplayValue>;\n}\n\ninterface DataLinkScopedVars extends ScopedVars {\n  __series: ScopedVar<SeriesVars>;\n  __field: ScopedVar<FieldVars>;\n  __value: ScopedVar<ValueVars>;\n  __data: ScopedVar<DataViewVars>;\n}\n\n/**\n * Link suppliers creates link models based on a link origin\n */\nexport const getFieldLinksSupplier = (value: FieldDisplay): LinkModelSupplier<FieldDisplay> | undefined => {\n  const links = value.field.links;\n  if (!links || links.length === 0) {\n    return undefined;\n  }\n\n  return {\n    getLinks: (replaceVariables: InterpolateFunction) => {\n      const scopedVars: Partial<DataLinkScopedVars> = {};\n\n      if (value.view) {\n        const { dataFrame } = value.view;\n\n        scopedVars['__series'] = {\n          value: {\n            name: dataFrame.name,\n            refId: dataFrame.refId,\n          },\n          text: 'Series',\n        };\n\n        const field = value.colIndex !== undefined ? dataFrame.fields[value.colIndex] : undefined;\n\n        if (field) {\n          scopedVars['__field'] = {\n            value: {\n              name: field.name,\n              labels: field.labels,\n            },\n            text: 'Field',\n          };\n\n          if (value.rowIndex !== undefined && value.rowIndex >= 0) {\n            const { timeField } = getTimeField(dataFrame);\n            scopedVars['__value'] = {\n              value: {\n                raw: field.values.get(value.rowIndex),\n                numeric: value.display.numeric,\n                text: formattedValueToString(value.display),\n                time: timeField ? timeField.values.get(value.rowIndex) : undefined,\n              },\n              text: 'Value',\n            };\n          }\n\n          // Expose other values on the row\n          if (value.view) {\n            scopedVars['__data'] = {\n              value: {\n                name: dataFrame.name,\n                refId: dataFrame.refId,\n                fields: getFieldDisplayValuesProxy({\n                  frame: dataFrame,\n                  rowIndex: value.rowIndex!,\n                }),\n              },\n              text: 'Data',\n            };\n          }\n        } else {\n          // calculation\n          scopedVars['__value'] = {\n            value: {\n              raw: value.display.numeric,\n              numeric: value.display.numeric,\n              text: formattedValueToString(value.display),\n              calc: value.name,\n            },\n            text: 'Value',\n          };\n        }\n      } else {\n        console.log('VALUE', value);\n      }\n\n      const replace: InterpolateFunction = (value: string, vars: ScopedVars | undefined, fmt?: string | Function) => {\n        const finalVars: ScopedVars = {\n          ...(scopedVars as ScopedVars),\n          ...vars,\n        };\n        return replaceVariables(value, finalVars, fmt);\n      };\n\n      return links.map((link: DataLink) => {\n        return getLinkSrv().getDataLinkUIModel(link, replace, value);\n      });\n    },\n  };\n};\n\nexport const getPanelLinksSupplier = (panel: PanelModel): LinkModelSupplier<PanelModel> | undefined => {\n  const links = panel.links;\n\n  if (!links || links.length === 0) {\n    return undefined;\n  }\n\n  return {\n    getLinks: () => {\n      return links.map((link) => {\n        return getLinkSrv().getDataLinkUIModel(link, panel.replaceVariables, panel);\n      });\n    },\n  };\n};\n","import { PanelModel } from 'app/features/dashboard/state';\nimport { StoreState } from 'app/types';\n\nimport { PanelState } from './reducers';\n\nexport function getPanelStateForModel(state: StoreState, model: PanelModel): PanelState | undefined {\n  return state.panels[model.key];\n}\n"],"names":["LazyLoader","children","width","height","onLoad","onChange","id","useUniqueId","loaded","setLoaded","useState","isInView","setIsInView","wrapperRef","useRef","useEffectOnce","addCallback","entry","isIntersecting","wrapperEl","current","observer","observe","callbacks","unobserve","Object","keys","length","disconnect","ref","style","c","IntersectionObserver","entries","target","rootMargin","createOverride","label","color","matcher","FieldMatcherID","options","properties","createProperty","value","mode","FieldColorModeId","fixedColor","isSoloRoute","path","test","toLowerCase","PanelHeaderLoadingIndicator","state","onClick","styles","useStyles","getStyles","LoadingState","className","Tooltip","content","Icon","name","title","streamIndicator","theme","css","colors","textFaint","PanelHeaderMenuTrigger","divProps","clickCoordinates","setClickCoordinates","x","y","panelMenuOpen","setPanelMenuOpen","onMenuToggle","useCallback","event","clicked","eventToClickCoordinates","stopPropagation","onMouseDown","closeMenu","Math","floor","clientX","clientY","PanelHeaderMenu","PureComponent","menu","isSubMenu","role","map","menuItem","idx","PanelHeaderMenuItem","type","text","iconClassName","shortcut","subMenu","renderItems","render","this","props","items","PanelHeaderMenuProvider","panel","dashboard","setItems","angularComponent","useSelector","getPanelStateForModel","useEffect","onViewPanel","preventDefault","locationService","viewPanel","onEditPanel","editPanel","onAddLibraryPanel","addLibraryPanel","onUnlinkLibraryPanel","unlinkLibraryPanel","onInspectPanel","tab","inspect","inspectTab","onMore","onDuplicatePanel","duplicatePanel","onCopyPanel","copyPanel","onRemovePanel","removePanel","onNavigateToExplore","openInNewWindow","ctrlKey","metaKey","url","window","open","config","undefined","store","navigateToExplore","getDataSourceSrv","getTimeSrv","getExploreUrl","isEditing","push","canEditPanel","sharePanel","contextSrv","plugin","meta","skipDataQuery","inspectMenu","e","canEdit","isViewing","isPanelModelLibraryPanel","scope","getScope","panelCtrl","$$childHead","ctrl","angularMenuItems","getExtendedMenu","item","reactItem","href","click","$eval","getPanelMenu","PanelHeaderMenuWrapper","show","onClose","ClickOutsideWrapper","parent","document","PanelHeaderNotice","notice","iconName","severity","marginRight","link","rel","PanelHeaderNotices","frames","panelId","openInspect","notices","frame","values","PanelHeader","error","data","alertState","getDisplayTitle","cx","useStyles2","panelStyles","getQueryRunner","cancelQuery","PanelHeaderCorner","description","scopedVars","links","getPanelLinksSupplier","selectors","series","size","titleText","request","timeInfo","typography","fontWeightMedium","body","fontSize","primary","PanelChrome","constructor","super","Subscription","onlyLocal","Boolean","canMakeEditable","canAdd","annotationsPermissions","canEditDashboard","dashboardId","organization","canDelete","DashboardCursorSync","graphTooltip","onInstanceStateChange","setState","context","instanceState","onFieldConfigChange","fieldConfig","overrides","currentIndex","findIndex","override","overridesCopy","Array","from","existing","propertyIndex","p","propertiesCopy","changeSeriesColorConfigFactory","seriesVisibilityConfigFactory","sortKey","legendOptions","legend","sortDesc","sortBy","onOptionsChange","refreshWhenInView","timeData","applyPanelTimeOverrides","timeSrv","timeRange","wantsQueryExecution","runAllPanelQueries","getTimezone","renderCounter","liveTime","stateUpdate","updateOptions","updateFieldConfig","errorMessage","message","async","isRegion","to","anno","time","timeEnd","tags","saveAnnotation","getDashboardQueryRunner","run","range","eventBus","publish","AnnotationChangeEvent","deleteAnnotation","updateAnnotation","setTime","toUtc","events","newScopedBus","eventFilter","isFirstLoad","app","getPanelContextApp","sync","getSync","onSeriesColorChange","onToggleSeriesVisibility","onSeriesVisibilityChange","onAnnotationCreate","onAnnotationUpdate","onAnnotationDelete","canAddAnnotations","canAddAnnotation","onToggleLegendSort","canEditAnnotations","canEditAnnotation","canDeleteAnnotations","canDeleteAnnotation","getInitialPanelDataState","CoreApp","getDefaultTimeRange","componentDidMount","subs","add","subscribe","RefreshEvent","onRefresh","RenderEvent","onRender","panelInitialized","hasPanelSnapshot","loadSnapshotData","getData","withTransforms","withFieldConfig","next","onDataUpdate","liveTimer","componentWillUnmount","unsubscribe","liveTimeChanged","delta","valueOf","console","log","componentDidUpdate","prevProps","snapshot","snapshotData","toDataFrameDTO","shouldSignalRenderingCompleted","loadingState","pluginMeta","skipFirstRender","renderPanel","profiler","PanelComponent","headerHeight","hasOverlayHeader","panelHeaderHeight","chromePadding","noPadding","panelPadding","panelWidth","PANEL_BORDER","innerPanelHeight","panelContentClassNames","classNames","panelOptions","getOptions","PanelContextProvider","timeZone","transparent","replaceVariables","onChangeTimeRange","hasTitle","containerClassNames","pathname","ErrorBoundary","dependencies","onError","onPanelError","onRecover","onPanelErrorRecover","PanelChromeAngularUnconnected","loadAngularPanel","queryRunner","onPanelDataUpdate","prevState","scopeProps","getInnerPanelHeight","getInnerPanelWidth","setPanelAngularComponent","element","loader","getAngularLoader","key","load","alert","mapDispatchToProps","PanelChromeAngular","connect","initPanelState","setPanelInstanceState","connector","panelState","panels","stateKey","DashboardPanelUnconnected","v","lazy","onPanelLoad","renderPanelChrome","angularPanelCtrl","onVisibilityChange","DashboardPanel","InfoMode","Component","Error","Info","Links","markdown","interpolatedMarkdown","getTemplateSrv","replace","markedInterpolatedMarkdown","renderMarkdown","getLinks","dangerouslySetInnerHTML","__html","InspectTab","renderCornerType","infoMode","ariaLabel","placement","interactive","getInfoMode","onClickError","getInfoContent","displayOverrideRef","isHideSeriesOverride","isSystemOverrideWithRef","displayName","SeriesVisibilityChangeMode","getDisplayNames","splice","getExistingDisplayNames","createExtendedOverride","allFieldsAreExcluded","names","ByNamesMatcherMode","property","viz","tooltip","__systemRef","prefix","readOnly","find","index","rule","isArray","excludeName","unique","Set","field","fields","FieldType","getFieldDisplayName","initDashboard","args","dispatch","getState","dashboardInitFetching","dashDTO","model","DASHBOARD_FROM_LS_KEY","removeDashboardToFetchFromLocalStorage","routeName","DashboardRoutes","backendSrv","redirectUri","newUrl","locationUtil","canSave","canShare","canStar","dashboardLoaderSrv","urlType","urlSlug","urlUid","fixUrl","dashboardUrl","currentPath","getNewDashboardModelData","urlFolderId","err","cancelled","dashboardInitFailed","fetchDashboard","dashboardInitServices","DashboardModel","storeState","queryParams","orgId","user","getDashboardSrv","setCurrent","init","dashboardUid","toStateKey","uid","initVariablesTransaction","createDashboardQueryRunner","getIfExistsLastKey","initPhase","DashboardInitPhase","processRepeats","autofitpanels","autoFitPanels","innerHeight","kiosk","keybindingSrv","notifyApp","createErrorNotification","eventData","dashboardName","folderName","folderTitle","eventName","MetaAnalyticsEventName","reportMetaAnalytics","emitDashboardViewEvent","dashboardWatcher","weekStart","setWeekStart","dashboardInitCompleted","isNew","folderId","gridPos","w","h","parseInt","setDashboardToFetchFromLocalStorage","getProcessedDataFrames","worker","SnapshotWorker","annotationEvents","canWork","getAnnotationsInSnapshot","annotations","ArrayDataFrame","applyFieldOverrides","defaults","fieldConfigRegistry","getFieldLinksSupplier","view","dataFrame","refId","colIndex","labels","rowIndex","timeField","getTimeField","raw","get","numeric","display","formattedValueToString","getFieldDisplayValuesProxy","calc","vars","fmt","finalVars","getLinkSrv","getDataLinkUIModel"],"sourceRoot":""}