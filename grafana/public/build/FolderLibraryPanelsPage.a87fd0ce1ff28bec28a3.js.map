{"version":3,"file":"FolderLibraryPanelsPage.a87fd0ce1ff28bec28a3.js","mappings":"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","sources":["webpack://grafana/./public/app/features/folders/FolderLibraryPanelsPage.tsx","webpack://grafana/./public/app/features/library-panels/components/OpenLibraryPanelModal/OpenLibraryPanelModal.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { useAsync } from 'react-use';\n\nimport Page from '../../core/components/Page/Page';\nimport { GrafanaRouteComponentProps } from '../../core/navigation/types';\nimport { getNavModel } from '../../core/selectors/navModel';\nimport { StoreState } from '../../types';\nimport { LibraryPanelsSearch } from '../library-panels/components/LibraryPanelsSearch/LibraryPanelsSearch';\nimport { OpenLibraryPanelModal } from '../library-panels/components/OpenLibraryPanelModal/OpenLibraryPanelModal';\nimport { LibraryElementDTO } from '../library-panels/types';\n\nimport { getFolderByUid } from './state/actions';\nimport { getLoadingNav } from './state/navModel';\n\nexport interface OwnProps extends GrafanaRouteComponentProps<{ uid: string }> {}\n\nconst mapStateToProps = (state: StoreState, props: OwnProps) => {\n  const uid = props.match.params.uid;\n  return {\n    navModel: getNavModel(state.navIndex, `folder-library-panels-${uid}`, getLoadingNav(1)),\n    folderUid: uid,\n    folder: state.folder,\n  };\n};\n\nconst mapDispatchToProps = {\n  getFolderByUid,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport type Props = OwnProps & ConnectedProps<typeof connector>;\n\nexport function FolderLibraryPanelsPage({ navModel, getFolderByUid, folderUid, folder }: Props): JSX.Element {\n  const { loading } = useAsync(async () => await getFolderByUid(folderUid), [getFolderByUid, folderUid]);\n  const [selected, setSelected] = useState<LibraryElementDTO | undefined>(undefined);\n\n  return (\n    <Page navModel={navModel}>\n      <Page.Contents isLoading={loading}>\n        <LibraryPanelsSearch\n          onClick={setSelected}\n          currentFolderId={folder.id}\n          showSecondaryActions\n          showSort\n          showPanelFilter\n        />\n        {selected ? <OpenLibraryPanelModal onDismiss={() => setSelected(undefined)} libraryPanel={selected} /> : null}\n      </Page.Contents>\n    </Page>\n  );\n}\n\nexport default connector(FolderLibraryPanelsPage);\n","import { css } from '@emotion/css';\nimport { debounce } from 'lodash';\nimport React, { MouseEvent, useCallback, useEffect, useMemo, useState } from 'react';\n\nimport { GrafanaTheme2, SelectableValue, urlUtil } from '@grafana/data';\nimport { locationService } from '@grafana/runtime';\nimport { AsyncSelect, Button, Modal, useStyles2 } from '@grafana/ui';\n\nimport { DashboardSearchHit } from '../../../search/types';\nimport { getConnectedDashboards, getLibraryPanelConnectedDashboards } from '../../state/api';\nimport { LibraryElementDTO } from '../../types';\n\nexport interface OpenLibraryPanelModalProps {\n  onDismiss: () => void;\n  libraryPanel: LibraryElementDTO;\n}\n\nexport function OpenLibraryPanelModal({ libraryPanel, onDismiss }: OpenLibraryPanelModalProps): JSX.Element {\n  const styles = useStyles2(getStyles);\n  const [loading, setLoading] = useState(false);\n  const [connected, setConnected] = useState(0);\n  const [option, setOption] = useState<SelectableValue<DashboardSearchHit> | undefined>(undefined);\n  useEffect(() => {\n    const getConnected = async () => {\n      const connectedDashboards = await getLibraryPanelConnectedDashboards(libraryPanel.uid);\n      setConnected(connectedDashboards.length);\n    };\n    getConnected();\n  }, [libraryPanel.uid]);\n  const loadOptions = useCallback(\n    (searchString: string) => loadOptionsAsync(libraryPanel.uid, searchString, setLoading),\n    [libraryPanel.uid]\n  );\n  const debouncedLoadOptions = useMemo(\n    () => debounce(loadOptions, 300, { leading: true, trailing: true }),\n    [loadOptions]\n  );\n  const onViewPanel = (e: MouseEvent<HTMLButtonElement>) => {\n    e.preventDefault();\n    locationService.push(urlUtil.renderUrl(`/d/${option?.value?.uid}`, {}));\n  };\n\n  return (\n    <Modal title=\"View panel in dashboard\" onDismiss={onDismiss} onClickBackdrop={onDismiss} isOpen>\n      <div className={styles.container}>\n        {connected === 0 ? (\n          <span>Panel is not linked to a dashboard. Add the panel to a dashboard and retry.</span>\n        ) : null}\n        {connected > 0 ? (\n          <>\n            <p>\n              This panel is being used in{' '}\n              <strong>\n                {connected} {connected > 1 ? 'dashboards' : 'dashboard'}\n              </strong>\n              .Please choose which dashboard to view the panel in:\n            </p>\n            <AsyncSelect\n              menuShouldPortal\n              isClearable\n              isLoading={loading}\n              defaultOptions={true}\n              loadOptions={debouncedLoadOptions}\n              onChange={setOption}\n              placeholder=\"Start typing to search for dashboard\"\n              noOptionsMessage=\"No dashboards found\"\n            />\n          </>\n        ) : null}\n      </div>\n      <Modal.ButtonRow>\n        <Button variant=\"secondary\" onClick={onDismiss} fill=\"outline\">\n          Cancel\n        </Button>\n        <Button onClick={onViewPanel} disabled={!Boolean(option)}>\n          {option ? `View panel in ${option?.label}...` : 'View panel in dashboard...'}\n        </Button>\n      </Modal.ButtonRow>\n    </Modal>\n  );\n}\n\nasync function loadOptionsAsync(uid: string, searchString: string, setLoading: (loading: boolean) => void) {\n  setLoading(true);\n  const searchHits = await getConnectedDashboards(uid);\n  const options = searchHits\n    .filter((d) => d.title.toLowerCase().includes(searchString.toLowerCase()))\n    .map((d) => ({ label: d.title, value: d }));\n  setLoading(false);\n\n  return options;\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    container: css``,\n  };\n}\n"],"names":["mapDispatchToProps","getFolderByUid","FolderLibraryPanelsPage","navModel","folderUid","folder","loading","useAsync","async","selected","setSelected","useState","undefined","isLoading","onClick","currentFolderId","id","showSecondaryActions","showSort","showPanelFilter","onDismiss","libraryPanel","connect","state","props","uid","match","params","getNavModel","navIndex","getLoadingNav","OpenLibraryPanelModal","styles","useStyles2","getStyles","setLoading","connected","setConnected","option","setOption","useEffect","connectedDashboards","getLibraryPanelConnectedDashboards","length","getConnected","loadOptions","useCallback","searchString","options","getConnectedDashboards","filter","d","title","toLowerCase","includes","map","label","value","loadOptionsAsync","debouncedLoadOptions","useMemo","debounce","leading","trailing","Modal","onClickBackdrop","isOpen","className","container","AsyncSelect","menuShouldPortal","isClearable","defaultOptions","onChange","placeholder","noOptionsMessage","Button","variant","fill","e","preventDefault","locationService","urlUtil","disabled","Boolean","theme","css"],"sourceRoot":""}