{"version":3,"file":"PipelineAdminPage.b208037f6b1954dc031d.js","mappings":"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","sources":["webpack://grafana/./public/app/core/hooks/useNavModel.ts","webpack://grafana/./public/app/features/live/pages/AddNewRule.tsx","webpack://grafana/./public/app/features/live/pages/RuleSettingsEditor.tsx","webpack://grafana/./public/app/features/live/pages/RuleSettingsArray.tsx","webpack://grafana/./public/app/features/live/pages/RuleTest.tsx","webpack://grafana/./public/app/features/live/pages/utils.ts","webpack://grafana/./public/app/features/live/pages/RuleModal.tsx","webpack://grafana/./public/app/features/live/pages/PipelineTable.tsx","webpack://grafana/./public/app/features/live/pages/PipelineAdminPage.tsx"],"sourcesContent":["import { useSelector } from 'react-redux';\n\nimport { NavModel } from '@grafana/data';\nimport { StoreState } from 'app/types/store';\n\nimport { getNavModel } from '../selectors/navModel';\n\nexport const useNavModel = (id: string): NavModel => {\n  const navIndex = useSelector((state: StoreState) => state.navIndex);\n  return getNavModel(navIndex, id);\n};\n","import React, { useState } from 'react';\n\nimport { DataSourceRef, LiveChannelScope, SelectableValue } from '@grafana/data';\nimport { DataSourcePicker, getBackendSrv } from '@grafana/runtime';\nimport { Input, Field, Button, ValuePicker, HorizontalGroup } from '@grafana/ui';\nimport { useAppNotification } from 'app/core/copy/appNotification';\n\nimport { Rule } from './types';\n\ninterface Props {\n  onRuleAdded: (rule: Rule) => void;\n}\n\ntype PatternType = 'ds' | 'any';\n\nconst patternTypes: Array<SelectableValue<PatternType>> = [\n  {\n    label: 'Data source',\n    description: 'Configure a channel scoped to a data source instance',\n    value: 'ds',\n  },\n  {\n    label: 'Any',\n    description: 'Enter an arbitray channel pattern',\n    value: 'any',\n  },\n];\n\nexport function AddNewRule({ onRuleAdded }: Props) {\n  const [patternType, setPatternType] = useState<PatternType>();\n  const [pattern, setPattern] = useState<string>();\n  const [patternPrefix, setPatternPrefix] = useState<string>('');\n  const [datasource, setDatasource] = useState<DataSourceRef>();\n  const notifyApp = useAppNotification();\n\n  const onSubmit = () => {\n    if (!pattern) {\n      notifyApp.error('Enter path');\n      return;\n    }\n    if (patternType === 'ds' && !patternPrefix.length) {\n      notifyApp.error('Select datasource');\n      return;\n    }\n\n    getBackendSrv()\n      .post(`api/live/channel-rules`, {\n        pattern: patternPrefix + pattern,\n        settings: {\n          converter: {\n            type: 'jsonAuto',\n          },\n          frameOutputs: [\n            {\n              type: 'managedStream',\n            },\n          ],\n        },\n      })\n      .then((v: any) => {\n        console.log('ADDED', v);\n        setPattern(undefined);\n        setPatternType(undefined);\n        onRuleAdded(v.rule);\n      })\n      .catch((e) => {\n        notifyApp.error('Error adding rule', e);\n        e.isHandled = true;\n      });\n  };\n\n  if (patternType) {\n    return (\n      <div>\n        <HorizontalGroup>\n          {patternType === 'any' && (\n            <Field label=\"Pattern\">\n              <Input\n                value={pattern ?? ''}\n                onChange={(e) => setPattern(e.currentTarget.value)}\n                placeholder=\"scope/namespace/path\"\n              />\n            </Field>\n          )}\n          {patternType === 'ds' && (\n            <>\n              <Field label=\"Data source\">\n                <DataSourcePicker\n                  current={datasource}\n                  onChange={(ds) => {\n                    setDatasource(ds);\n                    setPatternPrefix(`${LiveChannelScope.DataSource}/${ds.uid}/`);\n                  }}\n                />\n              </Field>\n              <Field label=\"Path\">\n                <Input value={pattern ?? ''} onChange={(e) => setPattern(e.currentTarget.value)} placeholder=\"path\" />\n              </Field>\n            </>\n          )}\n\n          <Field label=\"\">\n            <Button onClick={onSubmit} variant={pattern?.length ? 'primary' : 'secondary'}>\n              Add\n            </Button>\n          </Field>\n\n          <Field label=\"\">\n            <Button variant=\"secondary\" onClick={() => setPatternType(undefined)}>\n              Cancel\n            </Button>\n          </Field>\n        </HorizontalGroup>\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      <ValuePicker\n        label=\"Add channel rule\"\n        variant=\"secondary\"\n        size=\"md\"\n        icon=\"plus\"\n        menuPlacement=\"auto\"\n        isFullWidth={false}\n        options={patternTypes}\n        onChange={(v) => setPatternType(v.value)}\n      />\n    </div>\n  );\n}\n","import React from 'react';\n\nimport { CodeEditor, Select } from '@grafana/ui';\n\nimport { RuleType, RuleSetting, PipeLineEntitiesInfo } from './types';\n\ninterface Props {\n  ruleType: RuleType;\n  onChange: (value: RuleSetting) => void;\n  value: RuleSetting;\n  entitiesInfo: PipeLineEntitiesInfo;\n}\n\nexport const RuleSettingsEditor: React.FC<Props> = ({ onChange, value, ruleType, entitiesInfo }) => {\n  return (\n    <>\n      <Select\n        menuShouldPortal={true}\n        key={ruleType}\n        options={entitiesInfo[ruleType]}\n        placeholder=\"Select an option\"\n        value={value?.type ?? ''}\n        onChange={(value) => {\n          // set the body with example\n          const type = value.value;\n          onChange({\n            type,\n            [type]: entitiesInfo.getExample(ruleType, type),\n          });\n        }}\n      />\n      <CodeEditor\n        height={'50vh'}\n        value={value ? JSON.stringify(value[value.type], null, '\\t') : ''}\n        showLineNumbers={true}\n        readOnly={false}\n        language=\"json\"\n        showMiniMap={false}\n        onBlur={(text: string) => {\n          const body = JSON.parse(text);\n          onChange({\n            type: value.type,\n            [value.type]: body,\n          });\n        }}\n      />\n    </>\n  );\n};\n","import React, { useState } from 'react';\n\nimport { Select } from '@grafana/ui';\n\nimport { SelectableValue } from '../../../../../packages/grafana-data/src';\n\nimport { RuleSettingsEditor } from './RuleSettingsEditor';\nimport { RuleType, RuleSetting, PipeLineEntitiesInfo } from './types';\n\ninterface Props {\n  ruleType: RuleType;\n  onChange: (value: RuleSetting[]) => void;\n  value: RuleSetting[];\n  entitiesInfo: PipeLineEntitiesInfo;\n}\n\nexport const RuleSettingsArray: React.FC<Props> = ({ onChange, value, ruleType, entitiesInfo }) => {\n  const [index, setIndex] = useState<number>(0);\n  const arr = value ?? [];\n  const onRuleChange = (v: RuleSetting) => {\n    if (!value) {\n      onChange([v]);\n    } else {\n      const copy = [...value];\n      copy[index] = v;\n      onChange(copy);\n    }\n  };\n  // create array of value.length + 1\n  let indexArr: Array<SelectableValue<number>> = [];\n  for (let i = 0; i <= arr.length; i++) {\n    indexArr.push({\n      label: `${ruleType}: ${i}`,\n      value: i,\n    });\n  }\n\n  return (\n    <>\n      <Select\n        placeholder=\"Select an index\"\n        menuShouldPortal={true}\n        options={indexArr}\n        value={index}\n        onChange={(index) => {\n          // set index to find the correct setting\n          setIndex(index.value!);\n        }}\n      ></Select>\n      <RuleSettingsEditor onChange={onRuleChange} value={arr[index]} ruleType={ruleType} entitiesInfo={entitiesInfo} />\n    </>\n  );\n};\n","import { css } from '@emotion/css';\nimport React, { useState } from 'react';\n\nimport { dataFrameFromJSON, getDisplayProcessor, GrafanaTheme } from '@grafana/data';\nimport { getBackendSrv, config } from '@grafana/runtime';\nimport { Button, CodeEditor, Table, useStyles, Field } from '@grafana/ui';\n\nimport { ChannelFrame, Rule } from './types';\n\ninterface Props {\n  rule: Rule;\n}\n\nexport const RuleTest: React.FC<Props> = (props) => {\n  const [response, setResponse] = useState<ChannelFrame[]>();\n  const [data, setData] = useState<string>();\n  const styles = useStyles(getStyles);\n\n  const onBlur = (text: string) => {\n    setData(text);\n  };\n\n  const onClick = () => {\n    getBackendSrv()\n      .post(`api/live/pipeline-convert-test`, {\n        channelRules: [props.rule],\n        channel: props.rule.pattern,\n        data: data,\n      })\n      .then((data: any) => {\n        const t = data.channelFrames as any[];\n        if (t) {\n          setResponse(\n            t.map((f) => {\n              const frame = dataFrameFromJSON(f.frame);\n              for (const field of frame.fields) {\n                field.display = getDisplayProcessor({ field, theme: config.theme2 });\n              }\n              return { channel: f.channel, frame };\n            })\n          );\n        }\n      })\n      .catch((e) => {\n        setResponse(e);\n      });\n  };\n\n  return (\n    <div>\n      <CodeEditor\n        height={100}\n        value=\"\"\n        showLineNumbers={true}\n        readOnly={false}\n        language=\"json\"\n        showMiniMap={false}\n        onBlur={onBlur}\n      />\n\n      <Button onClick={onClick} className={styles.margin}>\n        Test\n      </Button>\n\n      {response?.length &&\n        response.map((r) => (\n          <Field key={r.channel} label={r.channel}>\n            <Table data={r.frame} width={700} height={Math.min(10 * r.frame.length + 10, 150)} showTypeIcons></Table>\n          </Field>\n        ))}\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme) => {\n  return {\n    margin: css`\n      margin-bottom: 15px;\n    `,\n  };\n};\n","import { getBackendSrv } from '@grafana/runtime';\n\nimport { PipelineListOption, PipeLineEntitiesInfo } from './types';\n\nexport async function getPipeLineEntities(): Promise<PipeLineEntitiesInfo> {\n  return await getBackendSrv()\n    .get(`api/live/pipeline-entities`)\n    .then((data) => {\n      return {\n        converter: transformLabel(data, 'converters'),\n        frameProcessors: transformLabel(data, 'frameProcessors'),\n        frameOutputs: transformLabel(data, 'frameOutputs'),\n        getExample: (ruleType, type) => {\n          return data[`${ruleType}s`]?.filter((option: PipelineListOption) => option.type === type)?.[0]?.['example'];\n        },\n      };\n    });\n}\n\nexport function transformLabel(data: any, key: keyof typeof data) {\n  if (Array.isArray(data)) {\n    return data.map((d) => ({\n      label: d[key],\n      value: d[key],\n    }));\n  }\n  return data[key].map((typeObj: PipelineListOption) => ({\n    label: typeObj.type,\n    value: typeObj.type,\n  }));\n}\n","import { css } from '@emotion/css';\nimport React, { useState, useMemo } from 'react';\n\nimport { GrafanaTheme } from '@grafana/data';\nimport { getBackendSrv } from '@grafana/runtime';\nimport { Modal, TabContent, TabsBar, Tab, Button, useStyles } from '@grafana/ui';\n\nimport { RuleSettingsArray } from './RuleSettingsArray';\nimport { RuleSettingsEditor } from './RuleSettingsEditor';\nimport { RuleTest } from './RuleTest';\nimport { Rule, RuleType, PipeLineEntitiesInfo, RuleSetting } from './types';\nimport { getPipeLineEntities } from './utils';\n\ninterface Props {\n  rule: Rule;\n  isOpen: boolean;\n  onClose: () => void;\n  clickColumn: RuleType;\n}\ninterface TabInfo {\n  label: string;\n  type?: RuleType;\n  isTest?: boolean;\n  isConverter?: boolean;\n  icon?: string;\n}\nconst tabs: TabInfo[] = [\n  { label: 'Converter', type: 'converter', isConverter: true },\n  { label: 'Processors', type: 'frameProcessors' },\n  { label: 'Outputs', type: 'frameOutputs' },\n  { label: 'Test', isTest: true, icon: 'flask' },\n];\n\nexport const RuleModal: React.FC<Props> = (props) => {\n  const { isOpen, onClose, clickColumn } = props;\n  const [rule, setRule] = useState<Rule>(props.rule);\n  const [activeTab, setActiveTab] = useState<TabInfo | undefined>(tabs.find((t) => t.type === clickColumn));\n  // to show color of Save button\n  const [hasChange, setChange] = useState<boolean>(false);\n  const [ruleSetting, setRuleSetting] = useState<any>(activeTab?.type ? rule?.settings?.[activeTab.type] : undefined);\n  const [entitiesInfo, setEntitiesInfo] = useState<PipeLineEntitiesInfo>();\n  const styles = useStyles(getStyles);\n\n  const onRuleSettingChange = (value: RuleSetting | RuleSetting[]) => {\n    setChange(true);\n    if (activeTab?.type) {\n      setRule({\n        ...rule,\n        settings: {\n          ...rule.settings,\n          [activeTab?.type]: value,\n        },\n      });\n    }\n    setRuleSetting(value);\n  };\n\n  // load pipeline entities info\n  useMemo(() => {\n    getPipeLineEntities().then((data) => {\n      setEntitiesInfo(data);\n    });\n  }, []);\n\n  const onSave = () => {\n    getBackendSrv()\n      .put(`api/live/channel-rules`, rule)\n      .then(() => {\n        setChange(false);\n        onClose();\n      })\n      .catch((e) => console.error(e));\n  };\n\n  return (\n    <Modal isOpen={isOpen} title={rule.pattern} onDismiss={onClose} closeOnEscape>\n      <TabsBar>\n        {tabs.map((tab, index) => {\n          return (\n            <Tab\n              key={index}\n              label={tab.label}\n              active={tab === activeTab}\n              icon={tab.icon as any}\n              onChangeTab={() => {\n                setActiveTab(tab);\n                if (tab.type) {\n                  // to notify children of the new rule\n                  setRuleSetting(rule?.settings?.[tab.type]);\n                }\n              }}\n            />\n          );\n        })}\n      </TabsBar>\n      <TabContent>\n        {entitiesInfo && rule && activeTab && (\n          <>\n            {activeTab?.isTest && <RuleTest rule={rule} />}\n            {activeTab.isConverter && (\n              <RuleSettingsEditor\n                onChange={onRuleSettingChange}\n                value={ruleSetting}\n                ruleType={'converter'}\n                entitiesInfo={entitiesInfo}\n              />\n            )}\n            {!activeTab.isConverter && activeTab.type && (\n              <RuleSettingsArray\n                onChange={onRuleSettingChange}\n                value={ruleSetting}\n                ruleType={activeTab.type}\n                entitiesInfo={entitiesInfo}\n              />\n            )}\n          </>\n        )}\n        <Button onClick={onSave} className={styles.save} variant={hasChange ? 'primary' : 'secondary'}>\n          Save\n        </Button>\n      </TabContent>\n    </Modal>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme) => {\n  return {\n    save: css`\n      margin-top: 5px;\n    `,\n  };\n};\n","import { css } from '@emotion/css';\nimport React, { useEffect, useState } from 'react';\n\nimport { GrafanaTheme } from '@grafana/data';\nimport { getBackendSrv } from '@grafana/runtime';\nimport { Tag, useStyles, IconButton } from '@grafana/ui';\nimport { getDatasourceSrv } from 'app/features/plugins/datasource_srv';\n\nimport { RuleModal } from './RuleModal';\nimport { Rule, Output, RuleType } from './types';\n\nfunction renderOutputTags(key: string, output?: Output): React.ReactNode {\n  if (!output?.type) {\n    return null;\n  }\n  return <Tag key={key} name={output.type} />;\n}\n\ninterface Props {\n  rules: Rule[];\n  onRuleChanged: () => void;\n  selectRule?: Rule;\n}\n\nexport const PipelineTable: React.FC<Props> = (props) => {\n  const { rules } = props;\n  const [isOpen, setOpen] = useState(false);\n  const [selectedRule, setSelectedRule] = useState<Rule>();\n  const [clickColumn, setClickColumn] = useState<RuleType>('converter');\n  const styles = useStyles(getStyles);\n\n  const onRowClick = (rule: Rule, event?: any) => {\n    if (!rule) {\n      return;\n    }\n    let column = event?.target?.getAttribute('data-column');\n    if (!column || column === 'pattern') {\n      column = 'converter';\n    }\n    setClickColumn(column);\n    setSelectedRule(rule);\n    setOpen(true);\n  };\n\n  // Supports selecting a rule from external config (after add rule)\n  useEffect(() => {\n    if (props.selectRule) {\n      onRowClick(props.selectRule);\n    }\n  }, [props.selectRule]);\n\n  const onRemoveRule = (pattern: string) => {\n    getBackendSrv()\n      .delete(`api/live/channel-rules`, JSON.stringify({ pattern: pattern }))\n      .catch((e) => console.error(e))\n      .finally(() => {\n        props.onRuleChanged();\n      });\n  };\n\n  const renderPattern = (pattern: string) => {\n    if (pattern.startsWith('ds/')) {\n      const idx = pattern.indexOf('/', 4);\n      if (idx > 3) {\n        const uid = pattern.substring(3, idx);\n        const ds = getDatasourceSrv().getInstanceSettings(uid);\n        if (ds) {\n          return (\n            <div>\n              <Tag name={ds.name} colorIndex={1} /> &nbsp;\n              <span>{pattern.substring(idx + 1)}</span>\n            </div>\n          );\n        }\n      }\n    }\n    return pattern;\n  };\n\n  return (\n    <div>\n      <div className=\"admin-list-table\">\n        <table className=\"filter-table filter-table--hover form-inline\">\n          <thead>\n            <tr>\n              <th>Channel</th>\n              <th>Converter</th>\n              <th>Processor</th>\n              <th>Output</th>\n              <th style={{ width: 10 }}>&nbsp;</th>\n            </tr>\n          </thead>\n          <tbody>\n            {rules.map((rule) => (\n              <tr key={rule.pattern} onClick={(e) => onRowClick(rule, e)} className={styles.row}>\n                <td data-pattern={rule.pattern} data-column=\"pattern\">\n                  {renderPattern(rule.pattern)}\n                </td>\n                <td data-pattern={rule.pattern} data-column=\"converter\">\n                  {rule.settings?.converter?.type}\n                </td>\n                <td data-pattern={rule.pattern} data-column=\"processor\">\n                  {rule.settings?.frameProcessors?.map((processor) => (\n                    <span key={rule.pattern + processor.type}>{processor.type}</span>\n                  ))}\n                </td>\n                <td data-pattern={rule.pattern} data-column=\"output\">\n                  {rule.settings?.frameOutputs?.map((output) => (\n                    <span key={rule.pattern + output.type}>{renderOutputTags('out', output)}</span>\n                  ))}\n                </td>\n                <td>\n                  <IconButton\n                    name=\"trash-alt\"\n                    onClick={(e) => {\n                      e.stopPropagation();\n                      onRemoveRule(rule.pattern);\n                    }}\n                  ></IconButton>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n      {isOpen && selectedRule && (\n        <RuleModal\n          rule={selectedRule}\n          isOpen={isOpen}\n          onClose={() => {\n            setOpen(false);\n          }}\n          clickColumn={clickColumn}\n        />\n      )}\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme) => {\n  return {\n    row: css`\n      cursor: pointer;\n    `,\n  };\n};\n","import React, { useEffect, useState, ChangeEvent } from 'react';\n\nimport { getBackendSrv } from '@grafana/runtime';\nimport { Input } from '@grafana/ui';\nimport Page from 'app/core/components/Page/Page';\nimport { useNavModel } from 'app/core/hooks/useNavModel';\n\nimport { AddNewRule } from './AddNewRule';\nimport { PipelineTable } from './PipelineTable';\nimport { Rule } from './types';\n\nexport default function PipelineAdminPage() {\n  const [rules, setRules] = useState<Rule[]>([]);\n  const [defaultRules, setDefaultRules] = useState<any[]>([]);\n  const [newRule, setNewRule] = useState<Rule>();\n  const navModel = useNavModel('live-pipeline');\n  const [error, setError] = useState<string>();\n\n  const loadRules = () => {\n    getBackendSrv()\n      .get(`api/live/channel-rules`)\n      .then((data) => {\n        setRules(data.rules ?? []);\n        setDefaultRules(data.rules ?? []);\n      })\n      .catch((e) => {\n        if (e.data) {\n          setError(JSON.stringify(e.data, null, 2));\n        }\n      });\n  };\n\n  useEffect(() => {\n    loadRules();\n  }, []);\n\n  const onSearchQueryChange = (e: ChangeEvent<HTMLInputElement>) => {\n    if (e.target.value) {\n      setRules(rules.filter((rule) => rule.pattern.toLowerCase().includes(e.target.value.toLowerCase())));\n    } else {\n      setRules(defaultRules);\n    }\n  };\n\n  return (\n    <Page navModel={navModel}>\n      <Page.Contents>\n        {error && <pre>{error}</pre>}\n        <div className=\"page-action-bar\">\n          <div className=\"gf-form gf-form--grow\">\n            <Input placeholder=\"Search pattern...\" onChange={onSearchQueryChange} />\n          </div>\n        </div>\n\n        <PipelineTable rules={rules} onRuleChanged={loadRules} selectRule={newRule} />\n\n        <AddNewRule\n          onRuleAdded={(r: Rule) => {\n            console.log('GOT', r, 'vs', rules[0]);\n            setNewRule(r);\n            loadRules();\n          }}\n        />\n      </Page.Contents>\n    </Page>\n  );\n}\n"],"names":["useNavModel","id","navIndex","useSelector","state","getNavModel","patternTypes","label","description","value","AddNewRule","onRuleAdded","patternType","setPatternType","useState","pattern","setPattern","patternPrefix","setPatternPrefix","datasource","setDatasource","notifyApp","useAppNotification","onSubmit","length","getBackendSrv","post","settings","converter","type","frameOutputs","then","v","console","log","undefined","rule","catch","e","error","isHandled","HorizontalGroup","Field","Input","onChange","currentTarget","placeholder","DataSourcePicker","current","ds","LiveChannelScope","uid","Button","onClick","variant","ValuePicker","size","icon","menuPlacement","isFullWidth","options","RuleSettingsEditor","ruleType","entitiesInfo","Select","menuShouldPortal","getExample","CodeEditor","height","JSON","stringify","showLineNumbers","readOnly","language","showMiniMap","onBlur","text","body","parse","RuleSettingsArray","index","setIndex","arr","indexArr","i","push","copy","RuleTest","props","response","setResponse","data","setData","styles","useStyles","getStyles","channelRules","channel","t","channelFrames","map","f","frame","dataFrameFromJSON","field","fields","display","getDisplayProcessor","theme","config","className","margin","r","Table","width","Math","min","showTypeIcons","css","transformLabel","key","Array","isArray","d","typeObj","tabs","isConverter","isTest","RuleModal","isOpen","onClose","clickColumn","setRule","activeTab","setActiveTab","find","hasChange","setChange","ruleSetting","setRuleSetting","setEntitiesInfo","onRuleSettingChange","useMemo","async","get","frameProcessors","filter","option","getPipeLineEntities","Modal","title","onDismiss","closeOnEscape","TabsBar","tab","Tab","active","onChangeTab","TabContent","put","save","renderOutputTags","output","Tag","name","PipelineTable","rules","setOpen","selectedRule","setSelectedRule","setClickColumn","onRowClick","event","column","target","getAttribute","useEffect","selectRule","renderPattern","startsWith","idx","indexOf","substring","getDatasourceSrv","getInstanceSettings","colorIndex","style","row","processor","IconButton","stopPropagation","delete","finally","onRuleChanged","PipelineAdminPage","setRules","defaultRules","setDefaultRules","newRule","setNewRule","navModel","setError","loadRules","Page","toLowerCase","includes"],"sourceRoot":""}