{"version":3,"file":"cloudMonitoringPlugin.a87fd0ce1ff28bec28a3.js","mappings":"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","sources":["webpack://grafana/./public/app/plugins/datasource/cloud-monitoring/annotations_query_ctrl.ts","webpack://grafana/./public/app/plugins/datasource/cloud-monitoring/components/CloudMonitoringCheatSheet.tsx","webpack://grafana/./public/app/plugins/datasource/cloud-monitoring/components/ConfigEditor/ConfigEditor.tsx","webpack://grafana/./public/app/plugins/datasource/cloud-monitoring/components/VariableQueryEditor.tsx","webpack://grafana/./public/app/plugins/datasource/cloud-monitoring/CloudMonitoringMetricFindQuery.ts","webpack://grafana/./public/app/plugins/datasource/cloud-monitoring/variables.ts","webpack://grafana/./public/app/plugins/datasource/cloud-monitoring/datasource.ts","webpack://grafana/./public/app/plugins/datasource/cloud-monitoring/module.ts"],"sourcesContent":["import { AnnotationTarget } from './types';\n\nexport class CloudMonitoringAnnotationsQueryCtrl {\n  static templateUrl = 'partials/annotations.editor.html';\n  declare annotation: any;\n\n  /** @ngInject */\n  constructor($scope: any) {\n    this.annotation = $scope.ctrl.annotation || {};\n    this.annotation.target = $scope.ctrl.annotation.target || {};\n\n    this.onQueryChange = this.onQueryChange.bind(this);\n  }\n\n  onQueryChange(target: AnnotationTarget) {\n    Object.assign(this.annotation.target, target);\n  }\n}\n","import { css } from '@emotion/css';\nimport React, { PureComponent } from 'react';\n\nimport { QueryEditorHelpProps } from '@grafana/data';\n\nimport { CloudMonitoringQuery } from '../types';\n\nexport default class CloudMonitoringCheatSheet extends PureComponent<\n  QueryEditorHelpProps<CloudMonitoringQuery>,\n  { userExamples: string[] }\n> {\n  render() {\n    return (\n      <div>\n        <h2>Cloud Monitoring alias patterns</h2>\n        <div>\n          <p>\n            Format the legend keys any way you want by using alias patterns. Format the legend keys any way you want by\n            using alias patterns.\n          </p>\n          Example:\n          <code>{`${'{{metric.name}} - {{metric.label.instance_name}}'}`}</code>\n          <br />\n          Result: &nbsp;&nbsp;<code>cpu/usage_time - server1-europe-west-1</code>\n          <br />\n          <br />\n          <label>Patterns</label>\n          <br />\n          <ul\n            className={css`\n              list-style: none;\n            `}\n          >\n            <li>\n              <code>{`${'{{metric.type}}'}`}</code> = metric type e.g. compute.googleapis.com/instance/cpu/usage_time\n            </li>\n            <li>\n              <code>{`${'{{metric.name}}'}`}</code> = name part of metric e.g. instance/cpu/usage_time\n            </li>\n            <li>\n              <code>{`${'{{metric.service}}'}`}</code> = service part of metric e.g. compute\n            </li>\n            <li>\n              <code>{`${'{{metric.label.label_name}}'}`}</code> = Metric label metadata e.g. metric.label.instance_name\n            </li>\n            <li>\n              <code>{`${'{{resource.label.label_name}}'}`}</code> = Resource label metadata e.g. resource.label.zone\n            </li>\n            <li>\n              <code>{`${'{{metadata.system_labels.name}}'}`}</code> = Meta data system labels e.g.\n              metadata.system_labels.name. For this to work, the needs to be included in the group by\n            </li>\n            <li>\n              <code>{`${'{{metadata.user_labels.name}}'}`}</code> = Meta data user labels e.g.\n              metadata.user_labels.name. For this to work, the needs to be included in the group by\n            </li>\n            <li>\n              <code>{`${'{{bucket}}'}`}</code> = bucket boundary for distribution metrics when using a heatmap in\n              Grafana\n            </li>\n            <li>\n              <code>{`${'{{project}}'}`}</code> = The project name that was specified in the query editor\n            </li>\n            <li>\n              <code>{`${'{{service}}'}`}</code> = The service id that was specified in the SLO query editor\n            </li>\n            <li>\n              <code>{`${'{{slo}}'}`}</code> = The SLO id that was specified in the SLO query editor\n            </li>\n            <li>\n              <code>{`${'{{selector}}'}`}</code> = The Selector function that was specified in the SLO query editor\n            </li>\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { PureComponent } from 'react';\n\nimport { DataSourcePluginOptionsEditorProps } from '@grafana/data';\nimport { ConnectionConfig } from '@grafana/google-sdk';\n\nimport { CloudMonitoringOptions, CloudMonitoringSecureJsonData } from '../../types';\n\nexport type Props = DataSourcePluginOptionsEditorProps<CloudMonitoringOptions, CloudMonitoringSecureJsonData>;\n\nexport class ConfigEditor extends PureComponent<Props> {\n  render() {\n    return (\n      <>\n        <ConnectionConfig {...this.props}></ConnectionConfig>\n      </>\n    );\n  }\n}\n","import React, { PureComponent } from 'react';\n\nimport { QueryEditorProps } from '@grafana/data';\nimport { getTemplateSrv } from '@grafana/runtime';\n\nimport CloudMonitoringDatasource from '../datasource';\nimport { extractServicesFromMetricDescriptors, getLabelKeys, getMetricTypes } from '../functions';\nimport {\n  CloudMonitoringOptions,\n  CloudMonitoringQuery,\n  CloudMonitoringVariableQuery,\n  MetricDescriptor,\n  MetricFindQueryTypes,\n  VariableQueryData,\n} from '../types';\n\nimport { VariableQueryField } from './';\n\nexport type Props = QueryEditorProps<\n  CloudMonitoringDatasource,\n  CloudMonitoringQuery,\n  CloudMonitoringOptions,\n  CloudMonitoringVariableQuery\n>;\n\nexport class CloudMonitoringVariableQueryEditor extends PureComponent<Props, VariableQueryData> {\n  queryTypes: Array<{ value: string; label: string }> = [\n    { value: MetricFindQueryTypes.Projects, label: 'Projects' },\n    { value: MetricFindQueryTypes.Services, label: 'Services' },\n    { value: MetricFindQueryTypes.MetricTypes, label: 'Metric Types' },\n    { value: MetricFindQueryTypes.LabelKeys, label: 'Label Keys' },\n    { value: MetricFindQueryTypes.LabelValues, label: 'Label Values' },\n    { value: MetricFindQueryTypes.ResourceTypes, label: 'Resource Types' },\n    { value: MetricFindQueryTypes.Aggregations, label: 'Aggregations' },\n    { value: MetricFindQueryTypes.Aligners, label: 'Aligners' },\n    { value: MetricFindQueryTypes.AlignmentPeriods, label: 'Alignment Periods' },\n    { value: MetricFindQueryTypes.Selectors, label: 'Selectors' },\n    { value: MetricFindQueryTypes.SLOServices, label: 'SLO Services' },\n    { value: MetricFindQueryTypes.SLO, label: 'Service Level Objectives (SLO)' },\n  ];\n\n  defaults: VariableQueryData = {\n    selectedQueryType: this.queryTypes[0].value,\n    metricDescriptors: [],\n    selectedService: '',\n    selectedMetricType: '',\n    labels: [],\n    labelKey: '',\n    metricTypes: [],\n    services: [],\n    sloServices: [],\n    selectedSLOService: '',\n    projects: [],\n    projectName: '',\n    loading: true,\n  };\n\n  constructor(props: Props) {\n    super(props);\n    this.state = Object.assign(\n      this.defaults,\n      { projectName: this.props.datasource.getDefaultProject() },\n      this.props.query\n    );\n  }\n\n  async componentDidMount() {\n    const projects = (await this.props.datasource.getProjects()) as MetricDescriptor[];\n    const metricDescriptors = await this.props.datasource.getMetricTypes(\n      this.props.query.projectName || this.props.datasource.getDefaultProject()\n    );\n    const services = extractServicesFromMetricDescriptors(metricDescriptors).map((m: any) => ({\n      value: m.service,\n      label: m.serviceShortName,\n    }));\n\n    let selectedService = '';\n    if (services.some((s) => s.value === getTemplateSrv().replace(this.state.selectedService))) {\n      selectedService = this.state.selectedService;\n    } else if (services && services.length > 0) {\n      selectedService = services[0].value;\n    }\n\n    const { metricTypes, selectedMetricType } = getMetricTypes(\n      metricDescriptors,\n      this.state.selectedMetricType,\n      getTemplateSrv().replace(this.state.selectedMetricType),\n      getTemplateSrv().replace(selectedService)\n    );\n\n    const sloServices = await this.props.datasource.getSLOServices(this.state.projectName);\n\n    const state: any = {\n      services,\n      selectedService,\n      metricTypes,\n      selectedMetricType,\n      metricDescriptors,\n      projects,\n      ...(await this.getLabels(selectedMetricType, this.state.projectName)),\n      sloServices,\n      loading: false,\n    };\n    this.setState(state, () => this.onPropsChange());\n  }\n\n  onPropsChange = () => {\n    const { metricDescriptors, labels, metricTypes, services, ...queryModel } = this.state;\n    this.props.onChange({ ...queryModel, refId: 'CloudMonitoringVariableQueryEditor-VariableQuery' });\n  };\n\n  async onQueryTypeChange(queryType: string) {\n    const state: any = {\n      selectedQueryType: queryType,\n      ...(await this.getLabels(this.state.selectedMetricType, this.state.projectName, queryType)),\n    };\n\n    this.setState(state);\n  }\n\n  async onProjectChange(projectName: string) {\n    const metricDescriptors = await this.props.datasource.getMetricTypes(projectName);\n    const labels = await this.getLabels(this.state.selectedMetricType, projectName);\n    const { metricTypes, selectedMetricType } = getMetricTypes(\n      metricDescriptors,\n      this.state.selectedMetricType,\n      getTemplateSrv().replace(this.state.selectedMetricType),\n      getTemplateSrv().replace(this.state.selectedService)\n    );\n\n    const sloServices = await this.props.datasource.getSLOServices(projectName);\n\n    this.setState(\n      {\n        ...labels,\n        metricTypes,\n        selectedMetricType,\n        metricDescriptors,\n        projectName,\n        sloServices,\n      },\n      () => this.onPropsChange()\n    );\n  }\n\n  async onServiceChange(service: string) {\n    const { metricTypes, selectedMetricType } = getMetricTypes(\n      this.state.metricDescriptors,\n      this.state.selectedMetricType,\n      getTemplateSrv().replace(this.state.selectedMetricType),\n      getTemplateSrv().replace(service)\n    );\n    const state: any = {\n      selectedService: service,\n      metricTypes,\n      selectedMetricType,\n      ...(await this.getLabels(selectedMetricType, this.state.projectName)),\n    };\n    this.setState(state, () => this.onPropsChange());\n  }\n\n  async onMetricTypeChange(metricType: string) {\n    const state: any = {\n      selectedMetricType: metricType,\n      ...(await this.getLabels(metricType, this.state.projectName)),\n    };\n    this.setState(state, () => this.onPropsChange());\n  }\n\n  onLabelKeyChange(labelKey: string) {\n    this.setState({ labelKey }, () => this.onPropsChange());\n  }\n\n  componentDidUpdate(prevProps: Readonly<Props>, prevState: Readonly<VariableQueryData>) {\n    const selecQueryTypeChanged = prevState.selectedQueryType !== this.state.selectedQueryType;\n    const selectSLOServiceChanged = this.state.selectedSLOService !== prevState.selectedSLOService;\n    if (selecQueryTypeChanged || selectSLOServiceChanged) {\n      this.onPropsChange();\n    }\n  }\n\n  async getLabels(selectedMetricType: string, projectName: string, selectedQueryType = this.state.selectedQueryType) {\n    let result = { labels: this.state.labels, labelKey: this.state.labelKey };\n    if (selectedMetricType && selectedQueryType === MetricFindQueryTypes.LabelValues) {\n      const labels = await getLabelKeys(this.props.datasource, selectedMetricType, projectName);\n      const labelKey = labels.some((l) => l === getTemplateSrv().replace(this.state.labelKey))\n        ? this.state.labelKey\n        : labels[0];\n      result = { labels, labelKey };\n    }\n    return result;\n  }\n\n  renderQueryTypeSwitch(queryType: string) {\n    const variableOptionGroup = {\n      label: 'Template Variables',\n      expanded: false,\n      options: getTemplateSrv()\n        .getVariables()\n        .map((v: any) => ({\n          value: `$${v.name}`,\n          label: `$${v.name}`,\n        })),\n    };\n\n    switch (queryType) {\n      case MetricFindQueryTypes.MetricTypes:\n        return (\n          <>\n            <VariableQueryField\n              allowCustomValue={true}\n              value={this.state.projectName}\n              options={[variableOptionGroup, ...this.state.projects]}\n              onChange={(value) => this.onProjectChange(value)}\n              label=\"Project\"\n            />\n            <VariableQueryField\n              value={this.state.selectedService}\n              options={[variableOptionGroup, ...this.state.services]}\n              onChange={(value) => this.onServiceChange(value)}\n              label=\"Service\"\n            />\n          </>\n        );\n      case MetricFindQueryTypes.LabelKeys:\n      case MetricFindQueryTypes.LabelValues:\n      case MetricFindQueryTypes.ResourceTypes:\n        return (\n          <>\n            <VariableQueryField\n              allowCustomValue={true}\n              value={this.state.projectName}\n              options={[variableOptionGroup, ...this.state.projects]}\n              onChange={(value) => this.onProjectChange(value)}\n              label=\"Project\"\n            />\n            <VariableQueryField\n              value={this.state.selectedService}\n              options={[variableOptionGroup, ...this.state.services]}\n              onChange={(value) => this.onServiceChange(value)}\n              label=\"Service\"\n            />\n            <VariableQueryField\n              value={this.state.selectedMetricType}\n              options={[\n                variableOptionGroup,\n                ...this.state.metricTypes.map(({ value, name }) => ({ value, label: name })),\n              ]}\n              onChange={(value) => this.onMetricTypeChange(value)}\n              label=\"Metric Type\"\n            />\n            {queryType === MetricFindQueryTypes.LabelValues && (\n              <VariableQueryField\n                value={this.state.labelKey}\n                options={[variableOptionGroup, ...this.state.labels.map((l) => ({ value: l, label: l }))]}\n                onChange={(value) => this.onLabelKeyChange(value)}\n                label=\"Label Key\"\n              />\n            )}\n          </>\n        );\n      case MetricFindQueryTypes.Aligners:\n      case MetricFindQueryTypes.Aggregations:\n        return (\n          <>\n            <VariableQueryField\n              value={this.state.selectedService}\n              options={[variableOptionGroup, ...this.state.services]}\n              onChange={(value) => this.onServiceChange(value)}\n              label=\"Service\"\n            />\n            <VariableQueryField\n              value={this.state.selectedMetricType}\n              options={[\n                variableOptionGroup,\n                ...this.state.metricTypes.map(({ value, name }) => ({ value, label: name })),\n              ]}\n              onChange={(value) => this.onMetricTypeChange(value)}\n              label=\"Metric Type\"\n            />\n          </>\n        );\n      case MetricFindQueryTypes.SLOServices:\n        return (\n          <>\n            <VariableQueryField\n              allowCustomValue={true}\n              value={this.state.projectName}\n              options={[variableOptionGroup, ...this.state.projects]}\n              onChange={(value) => this.onProjectChange(value)}\n              label=\"Project\"\n            />\n          </>\n        );\n\n      case MetricFindQueryTypes.SLO:\n        return (\n          <>\n            <VariableQueryField\n              allowCustomValue={true}\n              value={this.state.projectName}\n              options={[variableOptionGroup, ...this.state.projects]}\n              onChange={(value) => this.onProjectChange(value)}\n              label=\"Project\"\n            />\n            <VariableQueryField\n              value={this.state.selectedSLOService}\n              options={[variableOptionGroup, ...this.state.sloServices]}\n              onChange={(value) => {\n                this.setState({\n                  ...this.state,\n                  selectedSLOService: value,\n                });\n              }}\n              label=\"SLO Service\"\n            />\n          </>\n        );\n      default:\n        return '';\n    }\n  }\n\n  render() {\n    if (this.state.loading) {\n      return (\n        <div className=\"gf-form max-width-21\">\n          <span className=\"gf-form-label width-10 query-keyword\">Query Type</span>\n          <div className=\"gf-form-select-wrapper max-width-12\">\n            <select className=\"gf-form-input\">\n              <option>Loading...</option>\n            </select>\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <>\n        <VariableQueryField\n          value={this.state.selectedQueryType}\n          options={this.queryTypes}\n          onChange={(value) => this.onQueryTypeChange(value)}\n          label=\"Query Type\"\n        />\n        {this.renderQueryTypeSwitch(this.state.selectedQueryType)}\n      </>\n    );\n  }\n}\n","import { isString } from 'lodash';\n\nimport { SelectableValue } from '@grafana/data';\n\nimport { ALIGNMENT_PERIODS, SELECTORS } from './constants';\nimport CloudMonitoringDatasource from './datasource';\nimport {\n  extractServicesFromMetricDescriptors,\n  getAggregationOptionsByMetric,\n  getAlignmentOptionsByMetric,\n  getLabelKeys,\n  getMetricTypesByService,\n} from './functions';\nimport { CloudMonitoringVariableQuery, MetricDescriptor, MetricFindQueryTypes, MetricKind, ValueTypes } from './types';\n\nexport default class CloudMonitoringMetricFindQuery {\n  constructor(private datasource: CloudMonitoringDatasource) {}\n\n  async execute(query: CloudMonitoringVariableQuery) {\n    try {\n      if (!query.projectName) {\n        query.projectName = this.datasource.getDefaultProject();\n      }\n\n      switch (query.selectedQueryType) {\n        case MetricFindQueryTypes.Projects:\n          return this.handleProjectsQuery();\n        case MetricFindQueryTypes.Services:\n          return this.handleServiceQuery(query);\n        case MetricFindQueryTypes.MetricTypes:\n          return this.handleMetricTypesQuery(query);\n        case MetricFindQueryTypes.LabelKeys:\n          return this.handleLabelKeysQuery(query);\n        case MetricFindQueryTypes.LabelValues:\n          return this.handleLabelValuesQuery(query);\n        case MetricFindQueryTypes.ResourceTypes:\n          return this.handleResourceTypeQuery(query);\n        case MetricFindQueryTypes.Aligners:\n          return this.handleAlignersQuery(query);\n        case MetricFindQueryTypes.AlignmentPeriods:\n          return this.handleAlignmentPeriodQuery();\n        case MetricFindQueryTypes.Aggregations:\n          return this.handleAggregationQuery(query);\n        case MetricFindQueryTypes.SLOServices:\n          return this.handleSLOServicesQuery(query);\n        case MetricFindQueryTypes.SLO:\n          return this.handleSLOQuery(query);\n        case MetricFindQueryTypes.Selectors:\n          return this.handleSelectorQuery();\n        default:\n          return [];\n      }\n    } catch (error) {\n      console.error(`Could not run CloudMonitoringMetricFindQuery ${query}`, error);\n      return [];\n    }\n  }\n\n  async handleProjectsQuery() {\n    const projects = await this.datasource.getProjects();\n    return (projects as SelectableValue<string>).map((s: { label: string; value: string }) => ({\n      text: s.label,\n      value: s.value,\n      expandable: true,\n    }));\n  }\n\n  async handleServiceQuery({ projectName }: CloudMonitoringVariableQuery) {\n    const metricDescriptors = await this.datasource.getMetricTypes(projectName);\n    const services: MetricDescriptor[] = extractServicesFromMetricDescriptors(metricDescriptors);\n    return services.map((s) => ({\n      text: s.serviceShortName,\n      value: s.service,\n      expandable: true,\n    }));\n  }\n\n  async handleMetricTypesQuery({ selectedService, projectName }: CloudMonitoringVariableQuery) {\n    if (!selectedService) {\n      return [];\n    }\n    const metricDescriptors = await this.datasource.getMetricTypes(projectName);\n    return getMetricTypesByService(metricDescriptors, this.datasource.templateSrv.replace(selectedService)).map(\n      (s) => ({\n        text: s.displayName,\n        value: s.type,\n        expandable: true,\n      })\n    );\n  }\n\n  async handleLabelKeysQuery({ selectedMetricType, projectName }: CloudMonitoringVariableQuery) {\n    if (!selectedMetricType) {\n      return [];\n    }\n    const labelKeys = await getLabelKeys(this.datasource, selectedMetricType, projectName);\n    return labelKeys.map(this.toFindQueryResult);\n  }\n\n  async handleLabelValuesQuery({ selectedMetricType, labelKey, projectName }: CloudMonitoringVariableQuery) {\n    if (!selectedMetricType) {\n      return [];\n    }\n    const refId = 'handleLabelValuesQuery';\n    // REDUCE_MEAN is needed so the groupBy is not ignored\n    const labels = await this.datasource.getLabels(selectedMetricType, refId, projectName, {\n      groupBys: [labelKey],\n      crossSeriesReducer: 'REDUCE_MEAN',\n    });\n    const interpolatedKey = this.datasource.templateSrv.replace(labelKey);\n    const values = labels.hasOwnProperty(interpolatedKey) ? labels[interpolatedKey] : [];\n    return values.map(this.toFindQueryResult);\n  }\n\n  async handleResourceTypeQuery({ selectedMetricType, projectName }: CloudMonitoringVariableQuery) {\n    if (!selectedMetricType) {\n      return [];\n    }\n    const refId = 'handleResourceTypeQueryQueryType';\n    const labels = await this.datasource.getLabels(selectedMetricType, refId, projectName);\n    return labels['resource.type']?.map(this.toFindQueryResult) ?? [];\n  }\n\n  async handleAlignersQuery({ selectedMetricType, projectName }: CloudMonitoringVariableQuery) {\n    if (!selectedMetricType) {\n      return [];\n    }\n    const metricDescriptors = await this.datasource.getMetricTypes(projectName);\n    const descriptor = metricDescriptors.find(\n      (m) => m.type === this.datasource.templateSrv.replace(selectedMetricType)\n    );\n\n    if (!descriptor) {\n      return [];\n    }\n\n    return getAlignmentOptionsByMetric(descriptor.valueType, descriptor.metricKind).map(this.toFindQueryResult);\n  }\n\n  async handleAggregationQuery({ selectedMetricType, projectName }: CloudMonitoringVariableQuery) {\n    if (!selectedMetricType) {\n      return [];\n    }\n\n    const metricDescriptors = await this.datasource.getMetricTypes(projectName);\n    const descriptor = metricDescriptors.find(\n      (m) => m.type === this.datasource.templateSrv.replace(selectedMetricType)\n    );\n\n    if (!descriptor) {\n      return [];\n    }\n\n    return getAggregationOptionsByMetric(descriptor.valueType as ValueTypes, descriptor.metricKind as MetricKind).map(\n      this.toFindQueryResult\n    );\n  }\n\n  async handleSLOServicesQuery({ projectName }: CloudMonitoringVariableQuery) {\n    const services = await this.datasource.getSLOServices(projectName);\n    return services.map(this.toFindQueryResult);\n  }\n\n  async handleSLOQuery({ selectedSLOService, projectName }: CloudMonitoringVariableQuery) {\n    const slos = await this.datasource.getServiceLevelObjectives(projectName, selectedSLOService);\n    return slos.map(this.toFindQueryResult);\n  }\n\n  async handleSelectorQuery() {\n    return SELECTORS.map(this.toFindQueryResult);\n  }\n\n  handleAlignmentPeriodQuery() {\n    return ALIGNMENT_PERIODS.map(this.toFindQueryResult);\n  }\n\n  toFindQueryResult(x: any) {\n    return isString(x) ? { text: x, expandable: true } : { ...x, expandable: true };\n  }\n}\n","import { from, Observable } from 'rxjs';\nimport { map, mergeMap } from 'rxjs/operators';\n\nimport { CustomVariableSupport, DataQueryRequest, DataQueryResponse } from '@grafana/data';\n\nimport CloudMonitoringMetricFindQuery from './CloudMonitoringMetricFindQuery';\nimport { CloudMonitoringVariableQueryEditor } from './components/VariableQueryEditor';\nimport CloudMonitoringDatasource from './datasource';\nimport { CloudMonitoringVariableQuery } from './types';\n\nexport class CloudMonitoringVariableSupport extends CustomVariableSupport<\n  CloudMonitoringDatasource,\n  CloudMonitoringVariableQuery\n> {\n  private readonly metricFindQuery: CloudMonitoringMetricFindQuery;\n\n  constructor(private readonly datasource: CloudMonitoringDatasource) {\n    super();\n    this.metricFindQuery = new CloudMonitoringMetricFindQuery(datasource);\n    this.query = this.query.bind(this);\n  }\n\n  editor = CloudMonitoringVariableQueryEditor;\n\n  query(request: DataQueryRequest<CloudMonitoringVariableQuery>): Observable<DataQueryResponse> {\n    const executeObservable = from(this.metricFindQuery.execute(request.targets[0]));\n    return from(this.datasource.ensureGCEDefaultProject()).pipe(\n      mergeMap(() => executeObservable),\n      map((data) => ({ data }))\n    );\n  }\n}\n","import { chunk, flatten, isString, isArray } from 'lodash';\nimport { from, lastValueFrom, Observable, of } from 'rxjs';\nimport { map, mergeMap } from 'rxjs/operators';\n\nimport {\n  DataQueryRequest,\n  DataQueryResponse,\n  DataSourceInstanceSettings,\n  ScopedVars,\n  SelectableValue,\n} from '@grafana/data';\nimport { DataSourceWithBackend, getBackendSrv, toDataQueryResponse } from '@grafana/runtime';\nimport { getTimeSrv, TimeSrv } from 'app/features/dashboard/services/TimeSrv';\nimport { getTemplateSrv, TemplateSrv } from 'app/features/templating/template_srv';\n\nimport {\n  CloudMonitoringOptions,\n  CloudMonitoringQuery,\n  EditorMode,\n  Filter,\n  MetricDescriptor,\n  QueryType,\n  PostResponse,\n  Aggregation,\n} from './types';\nimport { CloudMonitoringVariableSupport } from './variables';\n\nexport default class CloudMonitoringDatasource extends DataSourceWithBackend<\n  CloudMonitoringQuery,\n  CloudMonitoringOptions\n> {\n  authenticationType: string;\n  intervalMs: number;\n\n  constructor(\n    private instanceSettings: DataSourceInstanceSettings<CloudMonitoringOptions>,\n    public templateSrv: TemplateSrv = getTemplateSrv(),\n    private readonly timeSrv: TimeSrv = getTimeSrv()\n  ) {\n    super(instanceSettings);\n    this.authenticationType = instanceSettings.jsonData.authenticationType || 'jwt';\n    this.variables = new CloudMonitoringVariableSupport(this);\n    this.intervalMs = 0;\n  }\n\n  getVariables() {\n    return this.templateSrv.getVariables().map((v) => `$${v.name}`);\n  }\n\n  query(request: DataQueryRequest<CloudMonitoringQuery>): Observable<DataQueryResponse> {\n    request.targets = request.targets.map((t) => ({\n      ...this.migrateQuery(t),\n      intervalMs: request.intervalMs,\n    }));\n    return super.query(request);\n  }\n\n  async annotationQuery(options: any) {\n    await this.ensureGCEDefaultProject();\n    const annotation = options.annotation;\n    const queries = [\n      {\n        refId: 'annotationQuery',\n        type: 'annotationQuery',\n        datasource: this.getRef(),\n        view: 'FULL',\n        crossSeriesReducer: 'REDUCE_NONE',\n        perSeriesAligner: 'ALIGN_NONE',\n        metricType: this.templateSrv.replace(annotation.target.metricType, options.scopedVars || {}),\n        title: this.templateSrv.replace(annotation.target.title, options.scopedVars || {}),\n        text: this.templateSrv.replace(annotation.target.text, options.scopedVars || {}),\n        projectName: this.templateSrv.replace(\n          annotation.target.projectName ? annotation.target.projectName : this.getDefaultProject(),\n          options.scopedVars || {}\n        ),\n        filters: this.interpolateFilters(annotation.target.filters || [], options.scopedVars),\n      },\n    ];\n\n    return lastValueFrom(\n      getBackendSrv()\n        .fetch<PostResponse>({\n          url: '/api/ds/query',\n          method: 'POST',\n          data: {\n            from: options.range.from.valueOf().toString(),\n            to: options.range.to.valueOf().toString(),\n            queries,\n          },\n        })\n        .pipe(\n          map(({ data }) => {\n            const dataQueryResponse = toDataQueryResponse({\n              data: data,\n            });\n            const df: any = [];\n            if (dataQueryResponse.data.length !== 0) {\n              for (let i = 0; i < dataQueryResponse.data.length; i++) {\n                for (let j = 0; j < dataQueryResponse.data[i].fields[0].values.length; j++) {\n                  df.push({\n                    annotation: annotation,\n                    time: Date.parse(dataQueryResponse.data[i].fields[0].values.get(j)),\n                    title: dataQueryResponse.data[i].fields[1].values.get(j),\n                    tags: [],\n                    text: dataQueryResponse.data[i].fields[3].values.get(j),\n                  });\n                }\n              }\n            }\n            return df;\n          })\n        )\n    );\n  }\n\n  applyTemplateVariables(\n    { metricQuery, refId, queryType, sloQuery }: CloudMonitoringQuery,\n    scopedVars: ScopedVars\n  ): Record<string, any> {\n    return {\n      datasource: this.getRef(),\n      refId,\n      intervalMs: this.intervalMs,\n      type: 'timeSeriesQuery',\n      queryType,\n      metricQuery: {\n        ...this.interpolateProps(metricQuery, scopedVars),\n        projectName: this.templateSrv.replace(\n          metricQuery.projectName ? metricQuery.projectName : this.getDefaultProject(),\n          scopedVars\n        ),\n        filters: this.interpolateFilters(metricQuery.filters || [], scopedVars),\n        groupBys: this.interpolateGroupBys(metricQuery.groupBys || [], scopedVars),\n        view: metricQuery.view || 'FULL',\n        editorMode: metricQuery.editorMode,\n      },\n      sloQuery: sloQuery && this.interpolateProps(sloQuery, scopedVars),\n    };\n  }\n\n  async getLabels(metricType: string, refId: string, projectName: string, aggregation?: Aggregation) {\n    const options = {\n      targets: [\n        {\n          refId,\n          datasource: this.getRef(),\n          queryType: QueryType.METRICS,\n          metricQuery: {\n            projectName: this.templateSrv.replace(projectName),\n            metricType: this.templateSrv.replace(metricType),\n            groupBys: this.interpolateGroupBys(aggregation?.groupBys || [], {}),\n            crossSeriesReducer: aggregation?.crossSeriesReducer ?? 'REDUCE_NONE',\n            view: 'HEADERS',\n          },\n        },\n      ],\n      range: this.timeSrv.timeRange(),\n    } as DataQueryRequest<CloudMonitoringQuery>;\n\n    const queries = options.targets;\n\n    if (!queries.length) {\n      return lastValueFrom(of({ results: [] }));\n    }\n\n    return lastValueFrom(\n      from(this.ensureGCEDefaultProject()).pipe(\n        mergeMap(() => {\n          return getBackendSrv().fetch<PostResponse>({\n            url: '/api/ds/query',\n            method: 'POST',\n            data: {\n              from: options.range.from.valueOf().toString(),\n              to: options.range.to.valueOf().toString(),\n              queries,\n            },\n          });\n        }),\n        map(({ data }) => {\n          const dataQueryResponse = toDataQueryResponse({\n            data: data,\n          });\n          const labels = dataQueryResponse?.data\n            .map((f) => f.meta?.custom?.labels)\n            .filter((p) => !!p)\n            .reduce((acc, labels) => {\n              for (let key in labels) {\n                if (!acc[key]) {\n                  acc[key] = new Set<string>();\n                }\n                if (labels[key]) {\n                  acc[key].add(labels[key]);\n                }\n              }\n              return acc;\n            }, {});\n          return Object.fromEntries(\n            Object.entries(labels).map((l: any) => {\n              l[1] = Array.from(l[1]);\n              return l;\n            })\n          );\n        })\n      )\n    );\n  }\n\n  async getGCEDefaultProject() {\n    return this.getResource(`gceDefaultProject`);\n  }\n\n  getDefaultProject(): string {\n    const { defaultProject, authenticationType, gceDefaultProject } = this.instanceSettings.jsonData;\n    if (authenticationType === 'gce') {\n      return gceDefaultProject || '';\n    }\n\n    return defaultProject || '';\n  }\n\n  async ensureGCEDefaultProject() {\n    const { authenticationType, gceDefaultProject } = this.instanceSettings.jsonData;\n    if (authenticationType === 'gce' && !gceDefaultProject) {\n      this.instanceSettings.jsonData.gceDefaultProject = await this.getGCEDefaultProject();\n    }\n  }\n\n  async getMetricTypes(projectName: string): Promise<MetricDescriptor[]> {\n    if (!projectName) {\n      return [];\n    }\n\n    return this.getResource(\n      `metricDescriptors/v3/projects/${this.templateSrv.replace(projectName)}/metricDescriptors`\n    ) as Promise<MetricDescriptor[]>;\n  }\n\n  async getSLOServices(projectName: string): Promise<Array<SelectableValue<string>>> {\n    return this.getResource(`services/v3/projects/${this.templateSrv.replace(projectName)}/services?pageSize=1000`);\n  }\n\n  async getServiceLevelObjectives(projectName: string, serviceId: string): Promise<Array<SelectableValue<string>>> {\n    if (!serviceId) {\n      return Promise.resolve([]);\n    }\n    let { projectName: p, serviceId: s } = this.interpolateProps({ projectName, serviceId });\n    return this.getResource(`slo-services/v3/projects/${p}/services/${s}/serviceLevelObjectives`);\n  }\n\n  getProjects(): Promise<Array<SelectableValue<string>>> {\n    return this.getResource(`projects`);\n  }\n\n  migrateQuery(query: CloudMonitoringQuery): CloudMonitoringQuery {\n    if (!query.hasOwnProperty('metricQuery')) {\n      const { hide, refId, datasource, key, queryType, maxLines, metric, intervalMs, type, ...rest } = query as any;\n      return {\n        refId,\n        intervalMs,\n        type,\n        hide,\n        queryType: QueryType.METRICS,\n        metricQuery: {\n          ...rest,\n          view: rest.view || 'FULL',\n        },\n      };\n    }\n    return query;\n  }\n\n  interpolateProps<T extends Record<string, any>>(object: T, scopedVars: ScopedVars = {}): T {\n    return Object.entries(object).reduce((acc, [key, value]) => {\n      return {\n        ...acc,\n        [key]: value && isString(value) ? this.templateSrv.replace(value, scopedVars) : value,\n      };\n    }, {} as T);\n  }\n\n  filterQuery(query: CloudMonitoringQuery): boolean {\n    if (query.hide) {\n      return false;\n    }\n\n    if (query.queryType && query.queryType === QueryType.SLO && query.sloQuery) {\n      const { selectorName, serviceId, sloId, projectName } = query.sloQuery;\n      return !!selectorName && !!serviceId && !!sloId && !!projectName;\n    }\n\n    if (query.queryType && query.queryType === QueryType.METRICS && query.metricQuery.editorMode === EditorMode.MQL) {\n      return !!query.metricQuery.projectName && !!query.metricQuery.query;\n    }\n\n    const { metricType } = query.metricQuery;\n\n    return !!metricType;\n  }\n\n  interpolateVariablesInQueries(queries: CloudMonitoringQuery[], scopedVars: ScopedVars): CloudMonitoringQuery[] {\n    return queries.map(\n      (query) => this.applyTemplateVariables(this.migrateQuery(query), scopedVars) as CloudMonitoringQuery\n    );\n  }\n\n  interpolateFilters(filters: string[], scopedVars: ScopedVars) {\n    const completeFilter: Filter[] = chunk(filters, 4)\n      .map(([key, operator, value, condition]) => ({\n        key,\n        operator,\n        value,\n        ...(condition && { condition }),\n      }))\n      .filter((item) => item.value);\n\n    const filterArray = flatten(\n      completeFilter.map(({ key, operator, value, condition }: Filter) => [\n        this.templateSrv.replace(key, scopedVars || {}),\n        operator,\n        this.templateSrv.replace(value, scopedVars || {}, (value: string | string[]) => {\n          return isArray(value) && value.length ? `(${value.join('|')})` : value;\n        }),\n        ...(condition ? [condition] : []),\n      ])\n    );\n\n    return filterArray || [];\n  }\n\n  interpolateGroupBys(groupBys: string[], scopedVars: {}): string[] {\n    let interpolatedGroupBys: string[] = [];\n    (groupBys || []).forEach((gb) => {\n      const interpolated = this.templateSrv.replace(gb, scopedVars || {}, 'csv').split(',');\n      if (Array.isArray(interpolated)) {\n        interpolatedGroupBys = interpolatedGroupBys.concat(interpolated);\n      } else {\n        interpolatedGroupBys.push(interpolated);\n      }\n    });\n    return interpolatedGroupBys;\n  }\n}\n","import { DataSourcePlugin } from '@grafana/data';\n\nimport { CloudMonitoringAnnotationsQueryCtrl } from './annotations_query_ctrl';\nimport CloudMonitoringCheatSheet from './components/CloudMonitoringCheatSheet';\nimport { ConfigEditor } from './components/ConfigEditor/ConfigEditor';\nimport { QueryEditor } from './components/QueryEditor';\nimport { CloudMonitoringVariableQueryEditor } from './components/VariableQueryEditor';\nimport CloudMonitoringDatasource from './datasource';\nimport { CloudMonitoringQuery } from './types';\n\nexport const plugin = new DataSourcePlugin<CloudMonitoringDatasource, CloudMonitoringQuery>(CloudMonitoringDatasource)\n  .setQueryEditorHelp(CloudMonitoringCheatSheet)\n  .setQueryEditor(QueryEditor)\n  .setConfigEditor(ConfigEditor)\n  .setAnnotationQueryCtrl(CloudMonitoringAnnotationsQueryCtrl)\n  .setVariableQueryEditor(CloudMonitoringVariableQueryEditor);\n"],"names":["CloudMonitoringAnnotationsQueryCtrl","constructor","$scope","this","annotation","ctrl","target","onQueryChange","bind","Object","assign","CloudMonitoringCheatSheet","PureComponent","render","className","css","ConfigEditor","ConnectionConfig","props","CloudMonitoringVariableQueryEditor","super","value","MetricFindQueryTypes","label","selectedQueryType","queryTypes","metricDescriptors","selectedService","selectedMetricType","labels","labelKey","metricTypes","services","sloServices","selectedSLOService","projects","projectName","loading","queryModel","state","onChange","refId","defaults","datasource","getDefaultProject","query","getProjects","getMetricTypes","extractServicesFromMetricDescriptors","map","m","service","serviceShortName","some","s","getTemplateSrv","replace","length","getSLOServices","getLabels","setState","onPropsChange","queryType","metricType","onLabelKeyChange","componentDidUpdate","prevProps","prevState","selecQueryTypeChanged","selectSLOServiceChanged","result","getLabelKeys","l","renderQueryTypeSwitch","variableOptionGroup","expanded","options","getVariables","v","name","allowCustomValue","onProjectChange","onServiceChange","onMetricTypeChange","onQueryTypeChange","CloudMonitoringMetricFindQuery","handleProjectsQuery","handleServiceQuery","handleMetricTypesQuery","handleLabelKeysQuery","handleLabelValuesQuery","handleResourceTypeQuery","handleAlignersQuery","handleAlignmentPeriodQuery","handleAggregationQuery","handleSLOServicesQuery","handleSLOQuery","handleSelectorQuery","error","console","text","expandable","getMetricTypesByService","templateSrv","displayName","type","toFindQueryResult","groupBys","crossSeriesReducer","interpolatedKey","hasOwnProperty","descriptor","find","getAlignmentOptionsByMetric","valueType","metricKind","getAggregationOptionsByMetric","getServiceLevelObjectives","SELECTORS","ALIGNMENT_PERIODS","x","isString","CloudMonitoringVariableSupport","CustomVariableSupport","metricFindQuery","request","executeObservable","from","execute","targets","ensureGCEDefaultProject","pipe","mergeMap","data","CloudMonitoringDatasource","DataSourceWithBackend","instanceSettings","timeSrv","getTimeSrv","authenticationType","jsonData","variables","intervalMs","t","migrateQuery","queries","getRef","view","perSeriesAligner","scopedVars","title","filters","interpolateFilters","lastValueFrom","getBackendSrv","fetch","url","method","range","valueOf","toString","to","dataQueryResponse","toDataQueryResponse","df","i","j","fields","values","push","time","Date","parse","get","tags","applyTemplateVariables","metricQuery","sloQuery","interpolateProps","interpolateGroupBys","editorMode","aggregation","QueryType","timeRange","f","meta","custom","filter","p","reduce","acc","key","Set","add","fromEntries","entries","Array","of","results","getResource","defaultProject","gceDefaultProject","getGCEDefaultProject","serviceId","Promise","resolve","hide","rest","object","filterQuery","selectorName","sloId","EditorMode","interpolateVariablesInQueries","completeFilter","chunk","operator","condition","item","filterArray","flatten","isArray","join","interpolatedGroupBys","forEach","gb","interpolated","split","concat","plugin","DataSourcePlugin","setQueryEditorHelp","setQueryEditor","QueryEditor","setConfigEditor","setAnnotationQueryCtrl","setVariableQueryEditor"],"sourceRoot":""}