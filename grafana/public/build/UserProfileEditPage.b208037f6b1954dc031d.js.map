{"version":3,"file":"UserProfileEditPage.b208037f6b1954dc031d.js","mappings":"2rCAqCA,MAAMA,EAA4B,CAChC,CAAEC,MAAO,GAAIC,MAAO,OAAE,CAAEC,GAAI,yCAAN,QAAyD,aAC/E,CAAEF,MAAO,OAAQC,MAAO,OAAE,CAAEC,GAAI,sCAAN,QAAsD,UAChF,CAAEF,MAAO,QAASC,MAAO,OAAE,CAAEC,GAAI,uCAAN,QAAuD,YAG7E,MAAMC,UAA0BC,EAAAA,cAGrCC,YAAYC,GACVC,MAAMD,GADkB,gDAiDXE,UACb,MAAM,gBAAEC,EAAF,MAAmBC,EAAnB,SAA0BC,EAA1B,UAAoCC,GAAcC,KAAKC,YACvDD,KAAKE,QAAQC,OAAO,CAAEP,gBAAAA,EAAiBC,MAAAA,EAAOC,SAAAA,EAAUC,UAAAA,IAC9DK,OAAOC,SAASC,YApDQ,yBAuDRnB,IAChBa,KAAKO,SAAS,CAAEV,MAAOV,OAxDC,4BA2DLW,IACdA,GAGLE,KAAKO,SAAS,CAAET,SAAUA,OA/DF,6BAkEJC,IACpBC,KAAKO,SAAS,CAAER,UAAWA,OAnEH,iCAsEAS,IACxBR,KAAKO,SAAS,CAAEX,gBAAiBY,OAvET,0BA0EPC,QACoB,IAA1BA,EAAUC,aAAyD,KAA1BD,EAAUC,YACrDD,EAAUE,MAEZF,EAAUC,YAAc,MAAQD,EAAUE,QA3EjDX,KAAKE,QAAU,IAAIU,EAAAA,EAAmBnB,EAAMoB,aAC5Cb,KAAKC,MAAQ,CACXL,gBAAiB,EACjBC,MAAO,GACPC,SAAU,GACVC,UAAW,GACXe,WAAY,IAIO,0BACrB,MAAMC,QAAcf,KAAKE,QAAQc,OAC3BF,QAAmBG,EAAAA,GAAAA,OAAkB,CAAEC,SAAS,IAkBtD,GAAIH,EAAMnB,gBAAkB,IAAMkB,EAAWK,MAAMC,GAAMA,EAAE/B,KAAO0B,EAAMnB,kBAAkB,CACxF,MAAMyB,QAAgBJ,EAAAA,GAAAA,OAAkB,CAAEK,aAAc,CAACP,EAAMnB,mBAC3DyB,GAAWA,EAAQE,OAAS,GAC9BT,EAAWU,KAAKH,EAAQ,IAI5BrB,KAAKO,SAAS,CACZX,gBAAiBmB,EAAMnB,gBACvBC,MAAOkB,EAAMlB,MACbC,SAAUiB,EAAMjB,SAChBC,UAAWgB,EAAMhB,UACjBe,WAAY,CA7BkC,CAC9CzB,GAAI,EACJsB,MAAO,UACPc,KAAM,GACNC,KAAM,GACNC,IAAK,GACLC,IAAK,GACLC,IAAK,GACLC,SAAU,EACVpB,YAAa,GACbqB,UAAW,GACXC,UAAW,GACXC,WAAW,EACXC,KAAM,GACNC,MAAO,OAe8BrB,KAoCzCsB,SACE,MAAM,MAAEvC,EAAF,SAASC,EAAT,UAAmBC,EAAnB,gBAA8BH,EAA9B,WAA+CkB,GAAed,KAAKC,OACnE,SAAEoC,GAAarC,KAAKP,MACpB6C,EAASC,IAETC,EAAuB,IAAH,GACxB,SAAC,EAAAC,QAAD,CACEC,SACE,uEAFJ,UAOE,SAAC,EAAAC,KAAD,CAAMC,KAAK,mBAIf,OACE,SAAC,EAAAC,KAAD,CAAMC,SAAU9C,KAAK+C,aAArB,SACG,KAAM,MACL,OACE,UAAC,EAAAC,SAAD,CAAU5D,MAAK,OAAE,gDAA0DiD,SAAUA,EAArF,WACE,SAAC,EAAAY,MAAD,CAAO7D,MAAK,OAAI,CAAEC,GAAI,wCAAN,QAAwD,aAAxE,UACE,SAAC,EAAA6D,iBAAD,CACEC,QAASjE,EACTC,MAAK,UAAED,EAAOiC,MAAMiC,GAASA,EAAKjE,QAAUU,WAAvC,aAAE,EAA6CV,MACpDkE,SAAUrD,KAAKsD,oBAInB,SAAC,EAAAL,MAAD,CACE7D,OACE,UAAC,EAAAmE,MAAD,CAAOC,QAAQ,wBAAf,WACE,iBAAMC,UAAWnB,EAAOoB,UAAxB,gBACE,wEAGDlB,KAGL,cAAY,4CAVd,UAYE,SAAC,EAAAmB,OAAD,CACEC,kBAAgB,EAChBzE,MAAO2B,EAAWK,MAAMV,GAAcA,EAAUpB,KAAOO,IACvDiE,eAAiBC,GAAMA,EAAEzE,GACzB0E,eAAgB/D,KAAKgE,gBACrBX,SAAW5C,GACTT,KAAKiE,uBAAuBxD,EAAUpB,IAExC8D,QAASrC,EACToD,YAAW,OAAI,CACb7E,GAAI,uDADS,QAEJ,6BAEX8E,QAAQ,6BAIZ,SAAC,EAAAlB,MAAD,CACE7D,MAAK,OAAI,CAAEC,GAAI,yCAAN,QAAyD,aAClE,cAAa+E,EAAAA,GAAAA,WAAAA,eAAAA,YAFf,UAIE,SAAC,EAAAC,eAAD,CACEC,iBAAiB,EACjBnF,MAAOW,EACPuD,SAAUrD,KAAKuE,kBACfJ,QAAQ,0CAIZ,SAAC,EAAAlB,MAAD,CACE7D,MAAK,OAAI,CAAEC,GAAI,6CAAN,QAA6D,eACtE,cAAa+E,EAAAA,GAAAA,WAAAA,gBAAAA,YAFf,UAIE,SAAC,EAAAI,gBAAD,CACErF,MAAOY,EACPsD,SAAUrD,KAAKyE,mBACfN,QAAS,4CAIb,gBAAKV,UAAU,qBAAf,UACE,SAAC,EAAAiB,OAAD,CAAQC,QAAQ,UAAU,cAAaP,EAAAA,GAAAA,WAAAA,YAAAA,sBAAvC,gBACE,8CAWlB,UAEM7B,GAAYqC,EAAAA,EAAAA,gBAAc,KACvB,CACLlB,UAAWmB,EAAAA,GAAI;;2mCCpNZ,MAAMC,UAA0BvF,EAAAA,cACrC6C,SACE,MAAM,UAAE2C,EAAF,KAAaC,EAAb,KAAmBC,GAASjF,KAAKP,MAEvC,OAAIsF,EACF,OAAO,SAAC,EAAAG,mBAAD,CAAoBC,KAAK,8BAGd,IAAhBH,EAAKzD,OACA,MAIP,kCACE,eAAIkC,UAAU,mBAAd,UACE,0CAGF,gBAAKA,UAAU,gBAAf,UACE,mBAAOA,UAAU,2BAA2B,cAAaW,EAAAA,GAAAA,WAAAA,YAAAA,UAAzD,iBACE,4BACE,2BACE,yBACE,+CAEF,yBACE,+CAEF,yBAGJ,2BACGY,EAAKI,KAAI,CAACC,EAAcC,KAErB,2BACE,wBAAKD,EAAIzC,QACT,wBAAKyC,EAAIE,QACT,eAAI9B,UAAU,aAAd,SACG4B,EAAIG,SAAUP,MAAAA,OAAd,EAAcA,EAAMO,OAApB,OACC,SAAC,EAAAd,OAAD,CAAQC,QAAQ,YAAYc,KAAK,KAAKpD,UAAQ,EAA9C,UACE,uDAGF,SAAC,EAAAqC,OAAD,CACEC,QAAQ,YACRc,KAAK,KACLC,QAAS,KACP1F,KAAKP,MAAMkG,WAAWN,IAJ1B,gBAOE,yDAhBCC,gBA+B3B,U,iLC/DA,MAAM,iBAAEM,GAAqBC,EAAAA,GAuE7B,EArE8C,IAA2C,IAA1C,KAAEZ,EAAF,aAAQa,EAAR,cAAsBC,GAAoB,EAKvF,OACE,SAAC,EAAAlD,KAAD,CAAMC,SALuBkD,IAC7BD,EAAcC,IAIyBC,WAAW,SAAlD,SACG,IAA0B,cAAzB,SAAEC,EAAF,OAAYC,GAAa,EACzB,OACE,UAAC,EAAAnD,SAAD,CAAU5D,MAAK,OAAE,0CAAjB,WACE,SAAC,EAAA6D,MAAD,CACE7D,MAAK,OAAI,CAAEC,GAAI,iCAAN,QAAiD,SAC1D+G,UAAWD,EAAOvD,KAClByD,MAAK,OAAE,sDACPhE,SAAUuD,EAJZ,UAME,SAAC,EAAAU,MAAD,iBACMJ,EAAS,OAAQ,CAAEK,UAAU,IADnC,CAEElH,GAAG,yBACH6E,YAAW,OAAI,CAAE7E,GAAI,iCAAN,QAAiD,SAChEmH,aAAY,UAAEvB,MAAAA,OAAF,EAAEA,EAAMrC,YAAR,QAAgB,GAC5B6D,OAAM,OAAE,SAACC,EAAD,WAIZ,SAAC,EAAAzD,MAAD,CACE7D,MAAK,OAAI,CAAEC,GAAI,kCAAN,QAAkD,UAC3D+G,UAAWD,EAAOQ,MAClBN,MAAK,OAAE,uDACPhE,SAAUuD,EAJZ,UAME,SAAC,EAAAU,MAAD,iBACMJ,EAAS,QAAS,CAAEK,UAAU,IADpC,CAEElH,GAAG,0BACH6E,YAAW,OAAI,CAAE7E,GAAI,kCAAN,QAAkD,UACjEmH,aAAY,UAAEvB,MAAAA,OAAF,EAAEA,EAAM0B,aAAR,QAAiB,GAC7BF,OAAM,OAAE,SAACC,EAAD,WAIZ,SAAC,EAAAzD,MAAD,CACE7D,MAAK,OAAI,CAAEC,GAAI,qCAAN,QAAqD,aAC9DgD,SAAUuD,EAFZ,UAIE,SAAC,EAAAU,MAAD,iBACMJ,EAAS,SADf,CAEE7G,GAAG,6BACHmH,aAAY,UAAEvB,MAAAA,OAAF,EAAEA,EAAM2B,aAAR,QAAiB,GAC7B1C,YAAW,OAAI,CAAE7E,GAAI,qCAAN,QAAqD,aACpEoH,OAAM,OAAE,SAACC,EAAD,WAIZ,gBAAKjD,UAAU,qBAAf,UACE,SAAC,EAAAiB,OAAD,CACEC,QAAQ,UACRtC,SAAUyD,EACV,cAAa1B,EAAAA,GAAAA,WAAAA,YAAAA,kBAHf,gBAKE,8CAYVsC,EAAkB,IACfd,EAAmB,IAAH,GACrB,SAAC,EAAAnD,QAAD,CAASC,QAAQ,mEAAjB,UACE,SAAC,EAAAC,KAAD,CAAMC,KAAK,YAEX,K,cChFN,MAAMiE,UAAqBtH,EAAAA,cACzB6C,SACE,MAAM,UAAE2C,EAAF,SAAa+B,EAAb,kBAAuBC,EAAvB,KAA0CC,GAAShH,KAAKP,MAE9D,OAAIsF,EACF,OAAO,SAAC,EAAAG,mBAAD,CAAoBC,MAAM,gDAIjC,yBACG2B,EAASvF,OAAS,IACjB,uCACE,eAAIkC,UAAU,mBAAd,wBACA,gBAAKA,UAAU,gBAAf,UACE,mBAAOA,UAAU,2BAA2B,cAAaW,EAAAA,GAAAA,WAAAA,YAAAA,cAAzD,iBACE,4BACE,2BACE,yBACE,qDAEF,yBACE,wDAEF,yBACE,gDAEF,yBACE,qDAEF,yBAGJ,2BACG0C,EAAS1B,KAAI,CAAC6B,EAAsB3B,KACnC,0BACG2B,EAAQC,SAAR,OAAmB,kCAAe,wBAAKD,EAAQE,UAChD,wBAAKH,EAAKI,KAAKH,EAAQI,UAAW,CAAEC,UAAW,YAC/C,wBAAKL,EAAQM,YACb,0BACGN,EAAQO,QADX,OACwBP,EAAQQ,GADhC,IACqCR,EAAQS,cAE7C,yBACE,SAAC,EAAAhD,OAAD,CACEe,KAAK,KACLd,QAAQ,cACRe,QAAS,IAAMqB,EAAkBE,EAAQ5H,IACzC,iBAAc,CAAEA,GAAI,sBAAN,QAAsC,wBAJtD,gBAME,SAAC,EAAAsD,KAAD,CAAMC,KAAK,iBAdR0C,kBA6B7B,SAAeqC,EAAAA,EAAAA,KAAf,CAA0Bd,G,UCnEnB,MAAMe,UAAkBrI,EAAAA,cAC7B6C,SACE,MAAM,UAAE2C,EAAF,MAAa8C,GAAU7H,KAAKP,MAElC,OAAIsF,EACF,OAAO,SAAC,EAAAG,mBAAD,CAAoBC,KAAK,sBAGb,IAAjB0C,EAAMtG,OACD,MAIP,kCACE,eAAIkC,UAAU,mBAAd,qBACA,gBAAKA,UAAU,gBAAf,UACE,mBAAOA,UAAU,2BAA2B,aAAW,mBAAvD,iBACE,4BACE,2BACE,mBACA,kCACA,mCACA,2CAGJ,2BACGoE,EAAMzC,KAAI,CAAC0C,EAAYxC,KAEpB,2BACE,eAAI7B,UAAU,sBAAd,UACE,gBAAKA,UAAU,uBAAuBsE,IAAKD,EAAKE,UAAWC,IAAI,QAEjE,wBAAKH,EAAKlF,QACV,wBAAKkF,EAAKnB,SACV,wBAAKmB,EAAKI,gBANH5C,gB,4DCD3B,MAAM6C,EAAqB,CACzBC,oBADyB,KAEzBrB,kBAFyB,KAGzBsB,cAHyB,KAIzBC,kBAAiBA,EAAAA,IAOZ,SAASC,EAAT,GAcG,IAd0B,SAClCC,EADkC,eAElCC,EAFkC,mBAGlCC,EAHkC,gBAIlCC,EAJkC,oBAKlCP,EALkC,KAMlCpD,EANkC,SAOlC8B,EAPkC,MAQlCe,EARkC,WASlCe,EATkC,KAUlC3D,EAVkC,kBAWlC8B,EAXkC,cAYlCsB,EAZkC,kBAalCC,GACQ,EAGR,OAFAO,EAAAA,EAAAA,IAAS,IAAMT,OAGb,SAACU,EAAA,EAAD,CAAMN,SAAUA,EAAhB,UACE,SAACM,EAAA,WAAD,CAAe/D,WAAYE,EAA3B,UACE,UAAC,EAAA8D,cAAD,CAAeC,QAAQ,KAAvB,WACE,SAAC,EAAD,CAAqBjD,cAAeuC,EAAmBxC,aAAc8C,EAAY3D,KAAMA,IADzF,OAEE,SAAC3F,EAAA,EAAD,CAAmBuB,YAAY,WAC/B,SAAC+G,EAAD,CAAW7C,UAAW4D,EAAiBd,MAAOA,KAC9C,SAAC,EAAD,CAAmB9C,UAAW0D,EAAgB9C,WAAY0C,EAAerD,KAAMA,EAAMC,KAAMA,KAC3F,SAAC,EAAD,CAAcF,UAAW2D,EAAoB3B,kBAAmBA,EAAmBD,SAAUA,WAOvG,SApCkBmC,EAAAA,EAAAA,UAvBlB,SAAyBhJ,GACvB,MAAMiJ,EAAYjJ,EAAMgF,MAClB,KAAEA,EAAF,MAAQ4C,EAAR,KAAe7C,EAAf,SAAqB8B,EAArB,gBAA+B6B,EAA/B,eAAgDF,EAAhD,mBAAgEC,EAAhE,WAAoFE,GAAeM,EACzG,MAAO,CACLV,UAAUW,EAAAA,EAAAA,GAAYlJ,EAAMmJ,SAAU,oBACtCX,eAAAA,EACAC,mBAAAA,EACAC,gBAAAA,EACA3D,KAAAA,EACA8B,SAAAA,EACAe,MAAAA,EACAe,WAAAA,EACA3D,KAAAA,KAWuCkD,EAoC3C,CAAyBI,I,gRC9DlB,SAASc,EAAeC,GAC7B,OAAO3J,eAAgB4J,GACrBA,GAASC,EAAAA,EAAAA,IAAY,CAAEC,UAAU,WAC3BC,EAAAA,EAAAA,eAAmBJ,GACzBC,GAASC,EAAAA,EAAAA,IAAY,CAAEC,UAAU,MAI9B,SAASrB,IACd,OAAOzI,eAAgB4J,SACfA,EAASI,KACfJ,GAcK5J,eAAgB4J,GACrBA,GAASK,EAAAA,EAAAA,OACT,MAAM/B,QAAc6B,EAAAA,EAAAA,YACpBH,GAASM,EAAAA,EAAAA,IAAY,CAAEhC,MAAAA,QAhBvB0B,GAqBK5J,eAAgB4J,GACrBA,GAASO,EAAAA,EAAAA,OACT,MAAM9E,QAAa0E,EAAAA,EAAAA,WACnBH,GAASQ,EAAAA,EAAAA,IAAW,CAAE/E,KAAAA,QAvBtBuE,GA4BK5J,eAAgB4J,GACrBA,GAASS,EAAAA,EAAAA,OACT,MAAMlD,QAAiB4C,EAAAA,EAAAA,eACvBH,GAASU,EAAAA,EAAAA,IAAe,CAAEnD,SAAAA,SA3BvB,SAAS6C,IACd,OAAOhK,eAAgB4J,GACrB,MAAMtE,QAAayE,EAAAA,EAAAA,WACnBH,GAASW,EAAAA,EAAAA,IAAW,CAAEjF,KAAAA,MA4BnB,SAAS8B,EAAkBoD,GAChC,OAAOxK,eAAgB4J,GACrBA,GAASC,EAAAA,EAAAA,IAAY,CAAEC,UAAU,WAC3BC,EAAAA,EAAAA,kBAAsBS,GAC5BZ,GAASa,EAAAA,EAAAA,IAAmB,CAAED,QAAAA,MAI3B,SAAS9B,EAAchD,GAC5B,OAAO1F,eAAgB4J,GACrBA,GAASC,EAAAA,EAAAA,IAAY,CAAEC,UAAU,WAC3BC,EAAAA,EAAAA,WAAerE,GACrBjF,OAAOC,SAASgK,KAAOxE,EAAAA,OAAAA,UAAmB,YAIvC,SAASyC,EAAkBgB,GAChC,OAAO3J,eAAgB4J,GACrBA,GAASC,EAAAA,EAAAA,IAAY,CAAEC,UAAU,WAC3BC,EAAAA,EAAAA,kBAAsBJ,SACtBC,EAASI,KACfJ,GAASC,EAAAA,EAAAA,IAAY,CAAEC,UAAU,Q,uWCjFrC,QALe,SAAUa,IACrB,QAAc,WACVA","sources":["webpack://grafana/./public/app/core/components/SharedPreferences/SharedPreferences.tsx","webpack://grafana/./public/app/features/profile/UserOrganizations.tsx","webpack://grafana/./public/app/features/profile/UserProfileEditForm.tsx","webpack://grafana/./public/app/features/profile/UserSessions.tsx","webpack://grafana/./public/app/features/profile/UserTeams.tsx","webpack://grafana/./public/app/features/profile/UserProfileEditPage.tsx","webpack://grafana/./public/app/features/profile/state/actions.ts","webpack://grafana/./.yarn/__virtual__/react-use-virtual-00326e70ba/3/opt/drone/yarncache/react-use-npm-17.3.2-a032cbeb01-7379460f51.zip/node_modules/react-use/esm/useMount.js"],"sourcesContent":["import { css } from '@emotion/css';\nimport { t, Trans } from '@lingui/macro';\nimport React, { PureComponent } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport {\n  Button,\n  Field,\n  FieldSet,\n  Form,\n  Icon,\n  Label,\n  RadioButtonGroup,\n  Select,\n  stylesFactory,\n  TimeZonePicker,\n  Tooltip,\n  WeekStartPicker,\n} from '@grafana/ui';\nimport { PreferencesService } from 'app/core/services/PreferencesService';\nimport { backendSrv } from 'app/core/services/backend_srv';\nimport { DashboardSearchHit, DashboardSearchItemType } from 'app/features/search/types';\n\nexport interface Props {\n  resourceUri: string;\n  disabled?: boolean;\n}\n\nexport interface State {\n  homeDashboardId: number;\n  theme: string;\n  timezone: string;\n  weekStart: string;\n  dashboards: DashboardSearchHit[];\n}\n\nconst themes: SelectableValue[] = [\n  { value: '', label: t({ id: 'shared-preferences.theme.default-label', message: 'Default' }) },\n  { value: 'dark', label: t({ id: 'shared-preferences.theme.dark-label', message: 'Dark' }) },\n  { value: 'light', label: t({ id: 'shared-preferences.theme.light-label', message: 'Light' }) },\n];\n\nexport class SharedPreferences extends PureComponent<Props, State> {\n  service: PreferencesService;\n\n  constructor(props: Props) {\n    super(props);\n\n    this.service = new PreferencesService(props.resourceUri);\n    this.state = {\n      homeDashboardId: 0,\n      theme: '',\n      timezone: '',\n      weekStart: '',\n      dashboards: [],\n    };\n  }\n\n  async componentDidMount() {\n    const prefs = await this.service.load();\n    const dashboards = await backendSrv.search({ starred: true });\n    const defaultDashboardHit: DashboardSearchHit = {\n      id: 0,\n      title: 'Default',\n      tags: [],\n      type: '' as DashboardSearchItemType,\n      uid: '',\n      uri: '',\n      url: '',\n      folderId: 0,\n      folderTitle: '',\n      folderUid: '',\n      folderUrl: '',\n      isStarred: false,\n      slug: '',\n      items: [],\n    };\n\n    if (prefs.homeDashboardId > 0 && !dashboards.find((d) => d.id === prefs.homeDashboardId)) {\n      const missing = await backendSrv.search({ dashboardIds: [prefs.homeDashboardId] });\n      if (missing && missing.length > 0) {\n        dashboards.push(missing[0]);\n      }\n    }\n\n    this.setState({\n      homeDashboardId: prefs.homeDashboardId,\n      theme: prefs.theme,\n      timezone: prefs.timezone,\n      weekStart: prefs.weekStart,\n      dashboards: [defaultDashboardHit, ...dashboards],\n    });\n  }\n\n  onSubmitForm = async () => {\n    const { homeDashboardId, theme, timezone, weekStart } = this.state;\n    await this.service.update({ homeDashboardId, theme, timezone, weekStart });\n    window.location.reload();\n  };\n\n  onThemeChanged = (value: string) => {\n    this.setState({ theme: value });\n  };\n\n  onTimeZoneChanged = (timezone?: string) => {\n    if (!timezone) {\n      return;\n    }\n    this.setState({ timezone: timezone });\n  };\n\n  onWeekStartChanged = (weekStart: string) => {\n    this.setState({ weekStart: weekStart });\n  };\n\n  onHomeDashboardChanged = (dashboardId: number) => {\n    this.setState({ homeDashboardId: dashboardId });\n  };\n\n  getFullDashName = (dashboard: SelectableValue<DashboardSearchHit>) => {\n    if (typeof dashboard.folderTitle === 'undefined' || dashboard.folderTitle === '') {\n      return dashboard.title;\n    }\n    return dashboard.folderTitle + ' / ' + dashboard.title;\n  };\n\n  render() {\n    const { theme, timezone, weekStart, homeDashboardId, dashboards } = this.state;\n    const { disabled } = this.props;\n    const styles = getStyles();\n\n    const homeDashboardTooltip = (\n      <Tooltip\n        content={\n          <Trans id=\"shared-preferences.fields.home-dashboard-tooltip\">\n            Not finding the dashboard you want? Star it first, then it should appear in this select box.\n          </Trans>\n        }\n      >\n        <Icon name=\"info-circle\" />\n      </Tooltip>\n    );\n\n    return (\n      <Form onSubmit={this.onSubmitForm}>\n        {() => {\n          return (\n            <FieldSet label={<Trans id=\"shared-preferences.title\">Preferences</Trans>} disabled={disabled}>\n              <Field label={t({ id: 'shared-preferences.fields.theme-label', message: 'UI Theme' })}>\n                <RadioButtonGroup\n                  options={themes}\n                  value={themes.find((item) => item.value === theme)?.value}\n                  onChange={this.onThemeChanged}\n                />\n              </Field>\n\n              <Field\n                label={\n                  <Label htmlFor=\"home-dashboard-select\">\n                    <span className={styles.labelText}>\n                      <Trans id=\"shared-preferences.fields.home-dashboard-label\">Home Dashboard</Trans>\n                    </span>\n\n                    {homeDashboardTooltip}\n                  </Label>\n                }\n                data-testid=\"User preferences home dashboard drop down\"\n              >\n                <Select\n                  menuShouldPortal\n                  value={dashboards.find((dashboard) => dashboard.id === homeDashboardId)}\n                  getOptionValue={(i) => i.id}\n                  getOptionLabel={this.getFullDashName}\n                  onChange={(dashboard: SelectableValue<DashboardSearchHit>) =>\n                    this.onHomeDashboardChanged(dashboard.id)\n                  }\n                  options={dashboards}\n                  placeholder={t({\n                    id: 'shared-preferences.fields.home-dashboard-placeholder',\n                    message: 'Choose default dashboard',\n                  })}\n                  inputId=\"home-dashboard-select\"\n                />\n              </Field>\n\n              <Field\n                label={t({ id: 'shared-dashboard.fields.timezone-label', message: 'Timezone' })}\n                data-testid={selectors.components.TimeZonePicker.containerV2}\n              >\n                <TimeZonePicker\n                  includeInternal={true}\n                  value={timezone}\n                  onChange={this.onTimeZoneChanged}\n                  inputId=\"shared-preferences-timezone-picker\"\n                />\n              </Field>\n\n              <Field\n                label={t({ id: 'shared-preferences.fields.week-start-label', message: 'Week start' })}\n                data-testid={selectors.components.WeekStartPicker.containerV2}\n              >\n                <WeekStartPicker\n                  value={weekStart}\n                  onChange={this.onWeekStartChanged}\n                  inputId={'shared-preferences-week-start-picker'}\n                />\n              </Field>\n\n              <div className=\"gf-form-button-row\">\n                <Button variant=\"primary\" data-testid={selectors.components.UserProfile.preferencesSaveButton}>\n                  <Trans id=\"common.save\">Save</Trans>\n                </Button>\n              </div>\n            </FieldSet>\n          );\n        }}\n      </Form>\n    );\n  }\n}\n\nexport default SharedPreferences;\n\nconst getStyles = stylesFactory(() => {\n  return {\n    labelText: css`\n      margin-right: 6px;\n    `,\n  };\n});\n","import { Trans } from '@lingui/macro';\nimport React, { PureComponent } from 'react';\n\nimport { selectors } from '@grafana/e2e-selectors';\nimport { Button, LoadingPlaceholder } from '@grafana/ui';\nimport { UserDTO, UserOrg } from 'app/types';\n\nexport interface Props {\n  user: UserDTO | null;\n  orgs: UserOrg[];\n  isLoading: boolean;\n  setUserOrg: (org: UserOrg) => void;\n}\n\nexport class UserOrganizations extends PureComponent<Props> {\n  render() {\n    const { isLoading, orgs, user } = this.props;\n\n    if (isLoading) {\n      return <LoadingPlaceholder text=\"Loading organizations...\" />;\n    }\n\n    if (orgs.length === 0) {\n      return null;\n    }\n\n    return (\n      <div>\n        <h3 className=\"page-sub-heading\">\n          <Trans id=\"user-orgs.title\">Organizations</Trans>\n        </h3>\n\n        <div className=\"gf-form-group\">\n          <table className=\"filter-table form-inline\" data-testid={selectors.components.UserProfile.orgsTable}>\n            <thead>\n              <tr>\n                <th>\n                  <Trans id=\"user-orgs.name-column\">Name</Trans>\n                </th>\n                <th>\n                  <Trans id=\"user-orgs.role-column\">Role</Trans>\n                </th>\n                <th />\n              </tr>\n            </thead>\n            <tbody>\n              {orgs.map((org: UserOrg, index) => {\n                return (\n                  <tr key={index}>\n                    <td>{org.name}</td>\n                    <td>{org.role}</td>\n                    <td className=\"text-right\">\n                      {org.orgId === user?.orgId ? (\n                        <Button variant=\"secondary\" size=\"sm\" disabled>\n                          <Trans id=\"user-orgs.current-org-button\">Current</Trans>\n                        </Button>\n                      ) : (\n                        <Button\n                          variant=\"secondary\"\n                          size=\"sm\"\n                          onClick={() => {\n                            this.props.setUserOrg(org);\n                          }}\n                        >\n                          <Trans id=\"user-orgs.select-org-button\">Select organisation</Trans>\n                        </Button>\n                      )}\n                    </td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default UserOrganizations;\n","import { Trans, t } from '@lingui/macro';\nimport React, { FC } from 'react';\n\nimport { selectors } from '@grafana/e2e-selectors';\nimport { Button, Field, FieldSet, Form, Icon, Input, Tooltip } from '@grafana/ui';\nimport config from 'app/core/config';\nimport { UserDTO } from 'app/types';\n\nimport { ProfileUpdateFields } from './types';\n\nexport interface Props {\n  user: UserDTO | null;\n  isSavingUser: boolean;\n  updateProfile: (payload: ProfileUpdateFields) => void;\n}\n\nconst { disableLoginForm } = config;\n\nexport const UserProfileEditForm: FC<Props> = ({ user, isSavingUser, updateProfile }) => {\n  const onSubmitProfileUpdate = (data: ProfileUpdateFields) => {\n    updateProfile(data);\n  };\n\n  return (\n    <Form onSubmit={onSubmitProfileUpdate} validateOn=\"onBlur\">\n      {({ register, errors }) => {\n        return (\n          <FieldSet label={<Trans id=\"user-profile.title\">Edit profile</Trans>}>\n            <Field\n              label={t({ id: 'user-profile.fields.name-label', message: 'Name' })}\n              invalid={!!errors.name}\n              error={<Trans id=\"user-profile.fields.name-error\">Name is required</Trans>}\n              disabled={disableLoginForm}\n            >\n              <Input\n                {...register('name', { required: true })}\n                id=\"edit-user-profile-name\"\n                placeholder={t({ id: 'user-profile.fields.name-label', message: 'Name' })}\n                defaultValue={user?.name ?? ''}\n                suffix={<InputSuffix />}\n              />\n            </Field>\n\n            <Field\n              label={t({ id: 'user-profile.fields.email-label', message: 'Email' })}\n              invalid={!!errors.email}\n              error={<Trans id=\"user-profile.fields.email-error\">Email is required</Trans>}\n              disabled={disableLoginForm}\n            >\n              <Input\n                {...register('email', { required: true })}\n                id=\"edit-user-profile-email\"\n                placeholder={t({ id: 'user-profile.fields.email-label', message: 'Email' })}\n                defaultValue={user?.email ?? ''}\n                suffix={<InputSuffix />}\n              />\n            </Field>\n\n            <Field\n              label={t({ id: 'user-profile.fields.username-label', message: 'Username' })}\n              disabled={disableLoginForm}\n            >\n              <Input\n                {...register('login')}\n                id=\"edit-user-profile-username\"\n                defaultValue={user?.login ?? ''}\n                placeholder={t({ id: 'user-profile.fields.username-label', message: 'Username' })}\n                suffix={<InputSuffix />}\n              />\n            </Field>\n\n            <div className=\"gf-form-button-row\">\n              <Button\n                variant=\"primary\"\n                disabled={isSavingUser}\n                data-testid={selectors.components.UserProfile.profileSaveButton}\n              >\n                <Trans id=\"common.save\">Save</Trans>\n              </Button>\n            </div>\n          </FieldSet>\n        );\n      }}\n    </Form>\n  );\n};\n\nexport default UserProfileEditForm;\n\nconst InputSuffix: FC = () => {\n  return disableLoginForm ? (\n    <Tooltip content=\"Login details locked because they are managed in another system.\">\n      <Icon name=\"lock\" />\n    </Tooltip>\n  ) : null;\n};\n","import { t, Trans } from '@lingui/macro';\nimport { withI18n, withI18nProps } from '@lingui/react';\nimport React, { PureComponent } from 'react';\n\nimport { selectors } from '@grafana/e2e-selectors';\nimport { Button, Icon, LoadingPlaceholder } from '@grafana/ui';\nimport { UserSession } from 'app/types';\n\ninterface Props extends withI18nProps {\n  sessions: UserSession[];\n  isLoading: boolean;\n  revokeUserSession: (tokenId: number) => void;\n}\n\nclass UserSessions extends PureComponent<Props> {\n  render() {\n    const { isLoading, sessions, revokeUserSession, i18n } = this.props;\n\n    if (isLoading) {\n      return <LoadingPlaceholder text={<Trans id=\"user-sessions.loading\">Loading sessions...</Trans>} />;\n    }\n\n    return (\n      <div>\n        {sessions.length > 0 && (\n          <>\n            <h3 className=\"page-sub-heading\">Sessions</h3>\n            <div className=\"gf-form-group\">\n              <table className=\"filter-table form-inline\" data-testid={selectors.components.UserProfile.sessionsTable}>\n                <thead>\n                  <tr>\n                    <th>\n                      <Trans id=\"user-session.seen-at-column\">Last seen</Trans>\n                    </th>\n                    <th>\n                      <Trans id=\"user-session.created-at-column\">Logged on</Trans>\n                    </th>\n                    <th>\n                      <Trans id=\"user-session.ip-column\">IP address</Trans>\n                    </th>\n                    <th>\n                      <Trans id=\"user-session.browser-column\">Browser &amp; OS</Trans>\n                    </th>\n                    <th></th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {sessions.map((session: UserSession, index) => (\n                    <tr key={index}>\n                      {session.isActive ? <td>Now</td> : <td>{session.seenAt}</td>}\n                      <td>{i18n.date(session.createdAt, { dateStyle: 'long' })}</td>\n                      <td>{session.clientIp}</td>\n                      <td>\n                        {session.browser} on {session.os} {session.osVersion}\n                      </td>\n                      <td>\n                        <Button\n                          size=\"sm\"\n                          variant=\"destructive\"\n                          onClick={() => revokeUserSession(session.id)}\n                          aria-label={t({ id: 'user-session.revoke', message: 'Revoke user session' })}\n                        >\n                          <Icon name=\"power\" />\n                        </Button>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          </>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default withI18n()(UserSessions);\n","import React, { PureComponent } from 'react';\n\nimport { LoadingPlaceholder } from '@grafana/ui';\nimport { Team } from 'app/types';\n\nexport interface Props {\n  teams: Team[];\n  isLoading: boolean;\n}\n\nexport class UserTeams extends PureComponent<Props> {\n  render() {\n    const { isLoading, teams } = this.props;\n\n    if (isLoading) {\n      return <LoadingPlaceholder text=\"Loading teams...\" />;\n    }\n\n    if (teams.length === 0) {\n      return null;\n    }\n\n    return (\n      <div>\n        <h3 className=\"page-sub-heading\">Teams</h3>\n        <div className=\"gf-form-group\">\n          <table className=\"filter-table form-inline\" aria-label=\"User teams table\">\n            <thead>\n              <tr>\n                <th />\n                <th>Name</th>\n                <th>Email</th>\n                <th>Members</th>\n              </tr>\n            </thead>\n            <tbody>\n              {teams.map((team: Team, index) => {\n                return (\n                  <tr key={index}>\n                    <td className=\"width-4 text-center\">\n                      <img className=\"filter-table__avatar\" src={team.avatarUrl} alt=\"\" />\n                    </td>\n                    <td>{team.name}</td>\n                    <td>{team.email}</td>\n                    <td>{team.memberCount}</td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default UserTeams;\n","import React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { useMount } from 'react-use';\n\nimport { NavModel } from '@grafana/data';\nimport { VerticalGroup } from '@grafana/ui';\nimport Page from 'app/core/components/Page/Page';\nimport SharedPreferences from 'app/core/components/SharedPreferences/SharedPreferences';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { StoreState } from 'app/types';\n\nimport UserOrganizations from './UserOrganizations';\nimport UserProfileEditForm from './UserProfileEditForm';\nimport UserSessions from './UserSessions';\nimport { UserTeams } from './UserTeams';\nimport { changeUserOrg, initUserProfilePage, revokeUserSession, updateUserProfile } from './state/actions';\n\nexport interface OwnProps {\n  navModel: NavModel;\n}\n\nfunction mapStateToProps(state: StoreState) {\n  const userState = state.user;\n  const { user, teams, orgs, sessions, teamsAreLoading, orgsAreLoading, sessionsAreLoading, isUpdating } = userState;\n  return {\n    navModel: getNavModel(state.navIndex, 'profile-settings'),\n    orgsAreLoading,\n    sessionsAreLoading,\n    teamsAreLoading,\n    orgs,\n    sessions,\n    teams,\n    isUpdating,\n    user,\n  };\n}\n\nconst mapDispatchToProps = {\n  initUserProfilePage,\n  revokeUserSession,\n  changeUserOrg,\n  updateUserProfile,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport type Props = OwnProps & ConnectedProps<typeof connector>;\n\nexport function UserProfileEditPage({\n  navModel,\n  orgsAreLoading,\n  sessionsAreLoading,\n  teamsAreLoading,\n  initUserProfilePage,\n  orgs,\n  sessions,\n  teams,\n  isUpdating,\n  user,\n  revokeUserSession,\n  changeUserOrg,\n  updateUserProfile,\n}: Props) {\n  useMount(() => initUserProfilePage());\n\n  return (\n    <Page navModel={navModel}>\n      <Page.Contents isLoading={!user}>\n        <VerticalGroup spacing=\"md\">\n          <UserProfileEditForm updateProfile={updateUserProfile} isSavingUser={isUpdating} user={user} />\n          <SharedPreferences resourceUri=\"user\" />\n          <UserTeams isLoading={teamsAreLoading} teams={teams} />\n          <UserOrganizations isLoading={orgsAreLoading} setUserOrg={changeUserOrg} orgs={orgs} user={user} />\n          <UserSessions isLoading={sessionsAreLoading} revokeUserSession={revokeUserSession} sessions={sessions} />\n        </VerticalGroup>\n      </Page.Contents>\n    </Page>\n  );\n}\n\nexport default connector(UserProfileEditPage);\n","import { config } from '@grafana/runtime';\n\nimport { ThunkResult, UserOrg } from '../../../types';\nimport { api } from '../api';\nimport { ChangePasswordFields, ProfileUpdateFields } from '../types';\n\nimport {\n  initLoadOrgs,\n  initLoadSessions,\n  initLoadTeams,\n  orgsLoaded,\n  sessionsLoaded,\n  setUpdating,\n  teamsLoaded,\n  userLoaded,\n  userSessionRevoked,\n} from './reducers';\n\nexport function changePassword(payload: ChangePasswordFields): ThunkResult<void> {\n  return async function (dispatch) {\n    dispatch(setUpdating({ updating: true }));\n    await api.changePassword(payload);\n    dispatch(setUpdating({ updating: false }));\n  };\n}\n\nexport function initUserProfilePage(): ThunkResult<void> {\n  return async function (dispatch) {\n    await dispatch(loadUser());\n    dispatch(loadTeams());\n    dispatch(loadOrgs());\n    dispatch(loadSessions());\n  };\n}\n\nexport function loadUser(): ThunkResult<void> {\n  return async function (dispatch) {\n    const user = await api.loadUser();\n    dispatch(userLoaded({ user }));\n  };\n}\n\nfunction loadTeams(): ThunkResult<void> {\n  return async function (dispatch) {\n    dispatch(initLoadTeams());\n    const teams = await api.loadTeams();\n    dispatch(teamsLoaded({ teams }));\n  };\n}\n\nfunction loadOrgs(): ThunkResult<void> {\n  return async function (dispatch) {\n    dispatch(initLoadOrgs());\n    const orgs = await api.loadOrgs();\n    dispatch(orgsLoaded({ orgs }));\n  };\n}\n\nfunction loadSessions(): ThunkResult<void> {\n  return async function (dispatch) {\n    dispatch(initLoadSessions());\n    const sessions = await api.loadSessions();\n    dispatch(sessionsLoaded({ sessions }));\n  };\n}\n\nexport function revokeUserSession(tokenId: number): ThunkResult<void> {\n  return async function (dispatch) {\n    dispatch(setUpdating({ updating: true }));\n    await api.revokeUserSession(tokenId);\n    dispatch(userSessionRevoked({ tokenId }));\n  };\n}\n\nexport function changeUserOrg(org: UserOrg): ThunkResult<void> {\n  return async function (dispatch) {\n    dispatch(setUpdating({ updating: true }));\n    await api.setUserOrg(org);\n    window.location.href = config.appSubUrl + '/profile';\n  };\n}\n\nexport function updateUserProfile(payload: ProfileUpdateFields): ThunkResult<void> {\n  return async function (dispatch) {\n    dispatch(setUpdating({ updating: true }));\n    await api.updateUserProfile(payload);\n    await dispatch(loadUser());\n    dispatch(setUpdating({ updating: false }));\n  };\n}\n","import useEffectOnce from './useEffectOnce';\nvar useMount = function (fn) {\n    useEffectOnce(function () {\n        fn();\n    });\n};\nexport default useMount;\n"],"names":["themes","value","label","id","SharedPreferences","PureComponent","constructor","props","super","async","homeDashboardId","theme","timezone","weekStart","this","state","service","update","window","location","reload","setState","dashboardId","dashboard","folderTitle","title","PreferencesService","resourceUri","dashboards","prefs","load","backendSrv","starred","find","d","missing","dashboardIds","length","push","tags","type","uid","uri","url","folderId","folderUid","folderUrl","isStarred","slug","items","render","disabled","styles","getStyles","homeDashboardTooltip","Tooltip","content","Icon","name","Form","onSubmit","onSubmitForm","FieldSet","Field","RadioButtonGroup","options","item","onChange","onThemeChanged","Label","htmlFor","className","labelText","Select","menuShouldPortal","getOptionValue","i","getOptionLabel","getFullDashName","onHomeDashboardChanged","placeholder","inputId","selectors","TimeZonePicker","includeInternal","onTimeZoneChanged","WeekStartPicker","onWeekStartChanged","Button","variant","stylesFactory","css","UserOrganizations","isLoading","orgs","user","LoadingPlaceholder","text","map","org","index","role","orgId","size","onClick","setUserOrg","disableLoginForm","config","isSavingUser","updateProfile","data","validateOn","register","errors","invalid","error","Input","required","defaultValue","suffix","InputSuffix","email","login","UserSessions","sessions","revokeUserSession","i18n","session","isActive","seenAt","date","createdAt","dateStyle","clientIp","browser","os","osVersion","withI18n","UserTeams","teams","team","src","avatarUrl","alt","memberCount","mapDispatchToProps","initUserProfilePage","changeUserOrg","updateUserProfile","UserProfileEditPage","navModel","orgsAreLoading","sessionsAreLoading","teamsAreLoading","isUpdating","useMount","Page","VerticalGroup","spacing","connect","userState","getNavModel","navIndex","changePassword","payload","dispatch","setUpdating","updating","api","loadUser","initLoadTeams","teamsLoaded","initLoadOrgs","orgsLoaded","initLoadSessions","sessionsLoaded","userLoaded","tokenId","userSessionRevoked","href","fn"],"sourceRoot":""}