{"version":3,"file":"TeamList.a87fd0ce1ff28bec28a3.js","mappings":"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","sources":["webpack://grafana/./public/app/core/components/connectWithCleanUp.tsx","webpack://grafana/./public/app/features/admin/utils.ts","webpack://grafana/./public/app/core/components/RolePicker/TeamRolePicker.tsx","webpack://grafana/./public/app/features/teams/TeamList.tsx","webpack://grafana/./public/app/features/teams/state/actions.ts","webpack://grafana/./public/app/features/teams/state/navModel.ts","webpack://grafana/./public/app/features/teams/state/selectors.ts"],"sourcesContent":["import hoistNonReactStatics from 'hoist-non-react-statics';\nimport React, { ComponentType, FunctionComponent, useEffect } from 'react';\nimport { connect, MapDispatchToPropsParam, MapStateToPropsParam, useDispatch } from 'react-redux';\n\nimport { cleanUpAction, StateSelector } from '../actions/cleanUp';\n\nexport const connectWithCleanUp =\n  <\n    TStateProps extends {} = {},\n    TDispatchProps = {},\n    TOwnProps = {},\n    State = {},\n    TSelector extends object = {},\n    Statics = {}\n  >(\n    mapStateToProps: MapStateToPropsParam<TStateProps, TOwnProps, State>,\n    mapDispatchToProps: MapDispatchToPropsParam<TDispatchProps, TOwnProps>,\n    stateSelector: StateSelector<TSelector>\n  ) =>\n  (Component: ComponentType<any>) => {\n    const ConnectedComponent = connect(\n      mapStateToProps,\n      mapDispatchToProps\n      // @ts-ignore\n    )(Component);\n\n    const ConnectedComponentWithCleanUp: FunctionComponent = (props) => {\n      const dispatch = useDispatch();\n      useEffect(() => {\n        return function cleanUp() {\n          dispatch(cleanUpAction({ stateSelector }));\n        };\n      }, [dispatch]);\n      // @ts-ignore\n      return <ConnectedComponent {...props} />;\n    };\n\n    ConnectedComponentWithCleanUp.displayName = `ConnectWithCleanUp(${ConnectedComponent.displayName})`;\n    hoistNonReactStatics(ConnectedComponentWithCleanUp, Component);\n    type Hoisted = typeof ConnectedComponentWithCleanUp & Statics;\n\n    return ConnectedComponentWithCleanUp as Hoisted;\n  };\n","import { config } from '@grafana/runtime/src';\n\nexport function isTrial() {\n  const expiry = config.licenseInfo?.trialExpiry;\n  return !!(expiry && expiry > 0);\n}\n\nexport const highlightTrial = () => isTrial() && config.featureToggles.featureHighlights;\n","import React, { FC, useEffect } from 'react';\nimport { useAsyncFn } from 'react-use';\n\nimport { Role } from 'app/types';\n\nimport { RolePicker } from './RolePicker';\nimport { fetchTeamRoles, updateTeamRoles } from './api';\n\nexport interface Props {\n  teamId: number;\n  orgId?: number;\n  roleOptions: Role[];\n  disabled?: boolean;\n  builtinRolesDisabled?: boolean;\n}\n\nexport const TeamRolePicker: FC<Props> = ({ teamId, orgId, roleOptions, disabled, builtinRolesDisabled }) => {\n  const [{ loading, value: appliedRoles = [] }, getTeamRoles] = useAsyncFn(async () => {\n    try {\n      return await fetchTeamRoles(teamId, orgId);\n    } catch (e) {\n      // TODO handle error\n      console.error('Error loading options');\n    }\n    return [];\n  }, [orgId, teamId]);\n\n  useEffect(() => {\n    getTeamRoles();\n  }, [orgId, teamId, getTeamRoles]);\n\n  const onRolesChange = async (roles: string[]) => {\n    await updateTeamRoles(roles, teamId, orgId);\n    await getTeamRoles();\n  };\n\n  return (\n    <RolePicker\n      onRolesChange={onRolesChange}\n      roleOptions={roleOptions}\n      appliedRoles={appliedRoles}\n      isLoading={loading}\n      disabled={disabled}\n      builtinRolesDisabled={builtinRolesDisabled}\n    />\n  );\n};\n","import React, { PureComponent } from 'react';\n\nimport { NavModel } from '@grafana/data';\nimport { DeleteButton, LinkButton, FilterInput, VerticalGroup, HorizontalGroup, Pagination } from '@grafana/ui';\nimport EmptyListCTA from 'app/core/components/EmptyListCTA/EmptyListCTA';\nimport Page from 'app/core/components/Page/Page';\nimport { TeamRolePicker } from 'app/core/components/RolePicker/TeamRolePicker';\nimport { fetchRoleOptions } from 'app/core/components/RolePicker/api';\nimport { config } from 'app/core/config';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { contextSrv, User } from 'app/core/services/context_srv';\nimport { AccessControlAction, Role, StoreState, Team } from 'app/types';\n\nimport { connectWithCleanUp } from '../../core/components/connectWithCleanUp';\n\nimport { deleteTeam, loadTeams } from './state/actions';\nimport { setSearchQuery, setTeamsSearchPage } from './state/reducers';\nimport { getSearchQuery, getTeams, getTeamsCount, getTeamsSearchPage, isPermissionTeamAdmin } from './state/selectors';\n\nconst pageLimit = 30;\n\nexport interface Props {\n  navModel: NavModel;\n  teams: Team[];\n  searchQuery: string;\n  searchPage: number;\n  teamsCount: number;\n  hasFetched: boolean;\n  loadTeams: typeof loadTeams;\n  deleteTeam: typeof deleteTeam;\n  setSearchQuery: typeof setSearchQuery;\n  setTeamsSearchPage: typeof setTeamsSearchPage;\n  editorsCanAdmin: boolean;\n  signedInUser: User;\n}\n\nexport interface State {\n  roleOptions: Role[];\n}\n\nexport class TeamList extends PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = { roleOptions: [] };\n  }\n\n  componentDidMount() {\n    this.fetchTeams();\n    if (contextSrv.licensedAccessControlEnabled() && contextSrv.hasPermission(AccessControlAction.ActionRolesList)) {\n      this.fetchRoleOptions();\n    }\n  }\n\n  async fetchTeams() {\n    await this.props.loadTeams();\n  }\n\n  async fetchRoleOptions() {\n    const roleOptions = await fetchRoleOptions();\n    this.setState({ roleOptions });\n  }\n\n  deleteTeam = (team: Team) => {\n    this.props.deleteTeam(team.id);\n  };\n\n  onSearchQueryChange = (value: string) => {\n    this.props.setSearchQuery(value);\n  };\n\n  renderTeam(team: Team) {\n    const { editorsCanAdmin, signedInUser } = this.props;\n    const permission = team.permission;\n    const teamUrl = `org/teams/edit/${team.id}`;\n    const isTeamAdmin = isPermissionTeamAdmin({ permission, editorsCanAdmin, signedInUser });\n    const canDelete = contextSrv.hasAccessInMetadata(AccessControlAction.ActionTeamsDelete, team, isTeamAdmin);\n    const canReadTeam = contextSrv.hasAccessInMetadata(AccessControlAction.ActionTeamsRead, team, isTeamAdmin);\n    const canSeeTeamRoles = contextSrv.hasAccessInMetadata(AccessControlAction.ActionTeamsRolesList, team, false);\n    const canUpdateTeamRoles =\n      contextSrv.hasAccess(AccessControlAction.ActionTeamsRolesAdd, false) ||\n      contextSrv.hasAccess(AccessControlAction.ActionTeamsRolesRemove, false);\n    const displayRolePicker =\n      contextSrv.licensedAccessControlEnabled() &&\n      contextSrv.hasPermission(AccessControlAction.ActionTeamsRolesList) &&\n      contextSrv.hasPermission(AccessControlAction.ActionRolesList);\n\n    return (\n      <tr key={team.id}>\n        <td className=\"width-4 text-center link-td\">\n          {canReadTeam ? (\n            <a href={teamUrl}>\n              <img className=\"filter-table__avatar\" src={team.avatarUrl} alt=\"Team avatar\" />\n            </a>\n          ) : (\n            <img className=\"filter-table__avatar\" src={team.avatarUrl} alt=\"Team avatar\" />\n          )}\n        </td>\n        <td className=\"link-td\">\n          {canReadTeam ? <a href={teamUrl}>{team.name}</a> : <div style={{ padding: '0px 8px' }}>{team.name}</div>}\n        </td>\n        <td className=\"link-td\">\n          {canReadTeam ? (\n            <a href={teamUrl} aria-label={team.email?.length > 0 ? undefined : 'Empty email cell'}>\n              {team.email}\n            </a>\n          ) : (\n            <div style={{ padding: '0px 8px' }} aria-label={team.email?.length > 0 ? undefined : 'Empty email cell'}>\n              {team.email}\n            </div>\n          )}\n        </td>\n        <td className=\"link-td\">\n          {canReadTeam ? (\n            <a href={teamUrl}>{team.memberCount}</a>\n          ) : (\n            <div style={{ padding: '0px 8px' }}>{team.memberCount}</div>\n          )}\n        </td>\n        {displayRolePicker && (\n          <td>\n            {canSeeTeamRoles && (\n              <TeamRolePicker teamId={team.id} roleOptions={this.state.roleOptions} disabled={!canUpdateTeamRoles} />\n            )}\n          </td>\n        )}\n        <td className=\"text-right\">\n          <DeleteButton\n            aria-label=\"Delete team\"\n            size=\"sm\"\n            disabled={!canDelete}\n            onConfirm={() => this.deleteTeam(team)}\n          />\n        </td>\n      </tr>\n    );\n  }\n\n  renderEmptyList() {\n    return (\n      <EmptyListCTA\n        title=\"You haven't created any teams yet.\"\n        buttonIcon=\"users-alt\"\n        buttonLink=\"org/teams/new\"\n        buttonTitle=\" New team\"\n        buttonDisabled={!contextSrv.hasPermission(AccessControlAction.ActionTeamsCreate)}\n        proTip=\"Assign folder and dashboard permissions to teams instead of users to ease administration.\"\n        proTipLink=\"\"\n        proTipLinkTitle=\"\"\n        proTipTarget=\"_blank\"\n      />\n    );\n  }\n\n  getPaginatedTeams = (teams: Team[]) => {\n    const offset = (this.props.searchPage - 1) * pageLimit;\n    return teams.slice(offset, offset + pageLimit);\n  };\n\n  renderTeamList() {\n    const { teams, searchQuery, editorsCanAdmin, searchPage, setTeamsSearchPage } = this.props;\n    const teamAdmin = contextSrv.hasRole('Admin') || (editorsCanAdmin && contextSrv.hasRole('Editor'));\n    const canCreate = contextSrv.hasAccess(AccessControlAction.ActionTeamsCreate, teamAdmin);\n    const displayRolePicker =\n      contextSrv.licensedAccessControlEnabled() &&\n      contextSrv.hasPermission(AccessControlAction.ActionTeamsRolesList) &&\n      contextSrv.hasPermission(AccessControlAction.ActionRolesList);\n    const newTeamHref = canCreate ? 'org/teams/new' : '#';\n    const paginatedTeams = this.getPaginatedTeams(teams);\n    const totalPages = Math.ceil(teams.length / pageLimit);\n\n    return (\n      <>\n        <div className=\"page-action-bar\">\n          <div className=\"gf-form gf-form--grow\">\n            <FilterInput placeholder=\"Search teams\" value={searchQuery} onChange={this.onSearchQueryChange} />\n          </div>\n\n          <LinkButton href={newTeamHref} disabled={!canCreate}>\n            New Team\n          </LinkButton>\n        </div>\n\n        <div className=\"admin-list-table\">\n          <VerticalGroup spacing=\"md\">\n            <table className=\"filter-table filter-table--hover form-inline\">\n              <thead>\n                <tr>\n                  <th />\n                  <th>Name</th>\n                  <th>Email</th>\n                  <th>Members</th>\n                  {displayRolePicker && <th>Roles</th>}\n                  <th style={{ width: '1%' }} />\n                </tr>\n              </thead>\n              <tbody>{paginatedTeams.map((team) => this.renderTeam(team))}</tbody>\n            </table>\n            <HorizontalGroup justify=\"flex-end\">\n              <Pagination\n                onNavigate={setTeamsSearchPage}\n                currentPage={searchPage}\n                numberOfPages={totalPages}\n                hideWhenSinglePage={true}\n              />\n            </HorizontalGroup>\n          </VerticalGroup>\n        </div>\n      </>\n    );\n  }\n\n  renderList() {\n    const { teamsCount, hasFetched } = this.props;\n\n    if (!hasFetched) {\n      return null;\n    }\n\n    if (teamsCount > 0) {\n      return this.renderTeamList();\n    } else {\n      return this.renderEmptyList();\n    }\n  }\n\n  render() {\n    const { hasFetched, navModel } = this.props;\n\n    return (\n      <Page navModel={navModel}>\n        <Page.Contents isLoading={!hasFetched}>{this.renderList()}</Page.Contents>\n      </Page>\n    );\n  }\n}\n\nfunction mapStateToProps(state: StoreState) {\n  return {\n    navModel: getNavModel(state.navIndex, 'teams'),\n    teams: getTeams(state.teams),\n    searchQuery: getSearchQuery(state.teams),\n    searchPage: getTeamsSearchPage(state.teams),\n    teamsCount: getTeamsCount(state.teams),\n    hasFetched: state.teams.hasFetched,\n    editorsCanAdmin: config.editorsCanAdmin, // this makes the feature toggle mockable/controllable from tests,\n    signedInUser: contextSrv.user, // this makes the feature toggle mockable/controllable from tests,\n  };\n}\n\nconst mapDispatchToProps = {\n  loadTeams,\n  deleteTeam,\n  setSearchQuery,\n  setTeamsSearchPage,\n};\n\nexport default connectWithCleanUp(mapStateToProps, mapDispatchToProps, (state) => state.teams)(TeamList);\n","import { getBackendSrv } from '@grafana/runtime';\nimport { updateNavIndex } from 'app/core/actions';\nimport { contextSrv } from 'app/core/core';\nimport { accessControlQueryParam } from 'app/core/utils/accessControl';\nimport { AccessControlAction, TeamMember, ThunkResult } from 'app/types';\n\nimport { buildNavModel } from './navModel';\nimport { teamGroupsLoaded, teamLoaded, teamMembersLoaded, teamsLoaded } from './reducers';\n\nexport function loadTeams(): ThunkResult<void> {\n  return async (dispatch) => {\n    // Early return if the user cannot list teams\n    if (!contextSrv.hasPermission(AccessControlAction.ActionTeamsRead)) {\n      dispatch(teamsLoaded([]));\n      return;\n    }\n\n    const response = await getBackendSrv().get(\n      '/api/teams/search',\n      accessControlQueryParam({ perpage: 1000, page: 1 })\n    );\n    dispatch(teamsLoaded(response.teams));\n  };\n}\n\nexport function loadTeam(id: number): ThunkResult<void> {\n  return async (dispatch) => {\n    const response = await getBackendSrv().get(`/api/teams/${id}`, accessControlQueryParam());\n    dispatch(teamLoaded(response));\n    dispatch(updateNavIndex(buildNavModel(response)));\n  };\n}\n\nexport function loadTeamMembers(): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const team = getStore().team.team;\n    const response = await getBackendSrv().get(`/api/teams/${team.id}/members`);\n    dispatch(teamMembersLoaded(response));\n  };\n}\n\nexport function addTeamMember(id: number): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const team = getStore().team.team;\n    await getBackendSrv().post(`/api/teams/${team.id}/members`, { userId: id });\n    dispatch(loadTeamMembers());\n  };\n}\n\nexport function removeTeamMember(id: number): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const team = getStore().team.team;\n    await getBackendSrv().delete(`/api/teams/${team.id}/members/${id}`);\n    dispatch(loadTeamMembers());\n  };\n}\n\nexport function updateTeam(name: string, email: string): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const team = getStore().team.team;\n    await getBackendSrv().put(`/api/teams/${team.id}`, { name, email });\n    dispatch(loadTeam(team.id));\n  };\n}\n\nexport function loadTeamGroups(): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const team = getStore().team.team;\n    const response = await getBackendSrv().get(`/api/teams/${team.id}/groups`);\n    dispatch(teamGroupsLoaded(response));\n  };\n}\n\nexport function addTeamGroup(groupId: string): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const team = getStore().team.team;\n    await getBackendSrv().post(`/api/teams/${team.id}/groups`, { groupId: groupId });\n    dispatch(loadTeamGroups());\n  };\n}\n\nexport function removeTeamGroup(groupId: string): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const team = getStore().team.team;\n    await getBackendSrv().delete(`/api/teams/${team.id}/groups/${encodeURIComponent(groupId)}`);\n    dispatch(loadTeamGroups());\n  };\n}\n\nexport function deleteTeam(id: number): ThunkResult<void> {\n  return async (dispatch) => {\n    await getBackendSrv().delete(`/api/teams/${id}`);\n    // Update users permissions in case they lost teams.read with the deletion\n    await contextSrv.fetchUserPermissions();\n    dispatch(loadTeams());\n  };\n}\n\nexport function updateTeamMember(member: TeamMember): ThunkResult<void> {\n  return async (dispatch) => {\n    await getBackendSrv().put(`/api/teams/${member.teamId}/members/${member.userId}`, {\n      permission: member.permission,\n    });\n    dispatch(loadTeamMembers());\n  };\n}\n","import { NavModelItem, NavModel } from '@grafana/data';\nimport { featureEnabled } from '@grafana/runtime';\nimport { ProBadge } from 'app/core/components/Upgrade/ProBadge';\nimport config from 'app/core/config';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { highlightTrial } from 'app/features/admin/utils';\nimport { AccessControlAction, Team, TeamPermissionLevel } from 'app/types';\n\nconst loadingTeam = {\n  avatarUrl: 'public/img/user_profile.png',\n  id: 1,\n  name: 'Loading',\n  email: 'loading',\n  memberCount: 0,\n  permission: TeamPermissionLevel.Member,\n};\n\nexport function buildNavModel(team: Team): NavModelItem {\n  const navModel: NavModelItem = {\n    img: team.avatarUrl,\n    id: 'team-' + team.id,\n    subTitle: 'Manage members and settings',\n    url: '',\n    text: team.name,\n    breadcrumbs: [{ title: 'Teams', url: 'org/teams' }],\n    children: [\n      // With FGAC this tab will always be available (but not always editable)\n      // With Legacy it will be hidden by hideTabsFromNonTeamAdmin should the user not be allowed to see it\n      {\n        active: false,\n        icon: 'sliders-v-alt',\n        id: `team-settings-${team.id}`,\n        text: 'Settings',\n        url: `org/teams/edit/${team.id}/settings`,\n      },\n    ],\n  };\n\n  // While team is loading we leave the members tab\n  // With FGAC the Members tab is available when user has ActionTeamsPermissionsRead for this team\n  // With Legacy it will always be present\n  if (\n    team === loadingTeam ||\n    contextSrv.hasPermissionInMetadata(AccessControlAction.ActionTeamsPermissionsRead, team)\n  ) {\n    navModel.children!.unshift({\n      active: false,\n      icon: 'users-alt',\n      id: `team-members-${team.id}`,\n      text: 'Members',\n      url: `org/teams/edit/${team.id}/members`,\n    });\n  }\n\n  const teamGroupSync: NavModelItem = {\n    active: false,\n    icon: 'sync',\n    id: `team-groupsync-${team.id}`,\n    text: 'External group sync',\n    url: `org/teams/edit/${team.id}/groupsync`,\n  };\n\n  const isLoadingTeam = team === loadingTeam;\n\n  if (highlightTrial()) {\n    teamGroupSync.tabSuffix = () =>\n      ProBadge({ experimentId: isLoadingTeam ? '' : 'feature-highlights-team-sync-badge', eventVariant: 'trial' });\n  }\n\n  // With both Legacy and FGAC the tab is protected being featureEnabled\n  // While team is loading we leave the teamsync tab\n  // With FGAC the External Group Sync tab is available when user has ActionTeamsPermissionsRead for this team\n  if (featureEnabled('teamsync')) {\n    if (isLoadingTeam || contextSrv.hasPermissionInMetadata(AccessControlAction.ActionTeamsPermissionsRead, team)) {\n      navModel.children!.push(teamGroupSync);\n    }\n  } else if (config.featureToggles.featureHighlights) {\n    navModel.children!.push({\n      ...teamGroupSync,\n      tabSuffix: () => ProBadge({ experimentId: isLoadingTeam ? '' : 'feature-highlights-team-sync-badge' }),\n    });\n  }\n\n  return navModel;\n}\n\nexport function getTeamLoadingNav(pageName: string): NavModel {\n  const main = buildNavModel(loadingTeam);\n\n  let node: NavModelItem;\n\n  // find active page\n  for (const child of main.children!) {\n    if (child.id!.indexOf(pageName) > 0) {\n      child.active = true;\n      node = child;\n      break;\n    }\n  }\n\n  return {\n    main: main,\n    node: node!,\n  };\n}\n","import { User } from 'app/core/services/context_srv';\nimport { Team, TeamsState, TeamState, TeamMember, OrgRole, TeamPermissionLevel } from 'app/types';\n\nexport const getSearchQuery = (state: TeamsState) => state.searchQuery;\nexport const getSearchMemberQuery = (state: TeamState) => state.searchMemberQuery;\nexport const getTeamGroups = (state: TeamState) => state.groups;\nexport const getTeamsCount = (state: TeamsState) => state.teams.length;\nexport const getTeamsSearchPage = (state: TeamsState) => state.searchPage;\n\nexport const getTeam = (state: TeamState, currentTeamId: any): Team | null => {\n  if (state.team.id === parseInt(currentTeamId, 10)) {\n    return state.team;\n  }\n\n  return null;\n};\n\nexport const getTeams = (state: TeamsState) => {\n  const regex = RegExp(state.searchQuery, 'i');\n\n  return state.teams.filter((team) => {\n    return regex.test(team.name);\n  });\n};\n\nexport const getTeamMembers = (state: TeamState) => {\n  const regex = RegExp(state.searchMemberQuery, 'i');\n\n  return state.members.filter((member) => {\n    return regex.test(member.login) || regex.test(member.email) || regex.test(member.name);\n  });\n};\n\nexport interface Config {\n  members: TeamMember[];\n  editorsCanAdmin: boolean;\n  signedInUser: User;\n}\n\nexport const isSignedInUserTeamAdmin = (config: Config): boolean => {\n  const { members, signedInUser, editorsCanAdmin } = config;\n  const userInMembers = members.find((m) => m.userId === signedInUser.id);\n  const permission = userInMembers ? userInMembers.permission : TeamPermissionLevel.Member;\n\n  return isPermissionTeamAdmin({ permission, signedInUser, editorsCanAdmin });\n};\n\nexport interface PermissionConfig {\n  permission: TeamPermissionLevel;\n  editorsCanAdmin: boolean;\n  signedInUser: User;\n}\n\nexport const isPermissionTeamAdmin = (config: PermissionConfig): boolean => {\n  const { permission, signedInUser, editorsCanAdmin } = config;\n  const isAdmin = signedInUser.isGrafanaAdmin || signedInUser.orgRole === OrgRole.Admin;\n  const userIsTeamAdmin = permission === TeamPermissionLevel.Admin;\n  const isSignedInUserTeamAdmin = isAdmin || userIsTeamAdmin;\n\n  return isSignedInUserTeamAdmin || !editorsCanAdmin;\n};\n"],"names":["connectWithCleanUp","mapStateToProps","mapDispatchToProps","stateSelector","Component","ConnectedComponent","connect","ConnectedComponentWithCleanUp","props","dispatch","useDispatch","useEffect","cleanUpAction","displayName","hoistNonReactStatics","highlightTrial","expiry","config","trialExpiry","isTrial","TeamRolePicker","teamId","orgId","roleOptions","disabled","builtinRolesDisabled","loading","value","appliedRoles","getTeamRoles","useAsyncFn","async","fetchTeamRoles","e","console","error","RolePicker","onRolesChange","updateTeamRoles","roles","isLoading","TeamList","PureComponent","constructor","super","team","this","deleteTeam","id","setSearchQuery","teams","offset","searchPage","slice","state","componentDidMount","fetchTeams","contextSrv","AccessControlAction","fetchRoleOptions","loadTeams","setState","renderTeam","editorsCanAdmin","signedInUser","permission","teamUrl","isTeamAdmin","isPermissionTeamAdmin","canDelete","canReadTeam","canSeeTeamRoles","canUpdateTeamRoles","displayRolePicker","className","href","src","avatarUrl","alt","name","style","padding","email","length","undefined","memberCount","DeleteButton","size","onConfirm","renderEmptyList","EmptyListCTA","title","buttonIcon","buttonLink","buttonTitle","buttonDisabled","proTip","proTipLink","proTipLinkTitle","proTipTarget","renderTeamList","searchQuery","setTeamsSearchPage","teamAdmin","canCreate","newTeamHref","paginatedTeams","getPaginatedTeams","totalPages","Math","ceil","FilterInput","placeholder","onChange","onSearchQueryChange","LinkButton","VerticalGroup","spacing","width","map","HorizontalGroup","justify","Pagination","onNavigate","currentPage","numberOfPages","hideWhenSinglePage","renderList","teamsCount","hasFetched","render","navModel","Page","getNavModel","navIndex","getTeams","getSearchQuery","getTeamsSearchPage","getTeamsCount","teamsLoaded","response","getBackendSrv","get","accessControlQueryParam","perpage","page","loadTeam","teamLoaded","updateNavIndex","buildNavModel","loadTeamMembers","getStore","teamMembersLoaded","addTeamMember","post","userId","removeTeamMember","delete","updateTeam","put","loadTeamGroups","teamGroupsLoaded","addTeamGroup","groupId","removeTeamGroup","encodeURIComponent","updateTeamMember","member","loadingTeam","TeamPermissionLevel","img","subTitle","url","text","breadcrumbs","children","active","icon","unshift","teamGroupSync","isLoadingTeam","tabSuffix","ProBadge","experimentId","eventVariant","featureEnabled","push","getTeamLoadingNav","pageName","main","node","child","indexOf","getSearchMemberQuery","searchMemberQuery","getTeamGroups","groups","getTeam","currentTeamId","parseInt","regex","RegExp","filter","test","getTeamMembers","members","login","isSignedInUserTeamAdmin","userInMembers","find","m","isAdmin","isGrafanaAdmin","orgRole","OrgRole","userIsTeamAdmin"],"sourceRoot":""}